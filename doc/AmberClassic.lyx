#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
\usepackage{multicol}
\usepackage{tocbibind}
%\usepackage[scaled=.85]{couriers}

\usepackage[font=it]{caption}
\usepackage{indentfirst}
\usepackage{textcomp}
\usepackage{placeins}

% Label subsections
\newrefformat{subsec}{Subsection \ref{#1}}

% Following to get bold-face typewriter font in LyXCode
\renewenvironment{lyxcode}
  {\begin{list}{}{
    \setlength{\rightmargin}{\leftmargin}
    \raggedright
    \setlength{\itemsep}{0pt}
    \setlength{\parsep}{0pt}
    \normalfont\bfseries\ttfamily}%
    \item[]}
  {\end{list}}

\addtokomafont{labelinglabel}{\texttt}
\end_preamble
\options sort&compress
\use_default_options false
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding iso8859-1
\fontencoding global
\font_roman "palatino" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 90 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 0
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=blue,citecolor=blue,urlcolor=blue"
\papersize letterpaper
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch advanced
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\branch basic
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\paperwidth 6in
\paperheight 9in
\leftmargin 1.2in
\topmargin 1in
\rightmargin 1in
\bottommargin 1.2in
\secnumdepth 3
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\listings_params "basicstyle={\small\bfseries\ttfamily},frame=single,frameround=tttt,upquote=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\family sans
\series bold
\size giant
AmberClassic Reference Manual
\family default
 
\end_layout

\begin_layout Standard
\align center

\size huge
\emph on
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
The starting point for this collection is 
\emph on
msander
\emph default
 (
\begin_inset Quotes eld
\end_inset

modern sander
\begin_inset Quotes erd
\end_inset

), an updated version of 
\emph on
sander
\emph default
, the basic energy minimizer and molecular dynamics program in the 
\emph on
AmberTools 
\emph default
suite
\emph on
.

\emph default
 A variety of constraints to be added to the basic force field, and 
\emph on
msander
\emph default
 has been designed especially for the types of calculations involved in
 NMR, Xray or cryo-EM structure refinement.
 
\end_layout

\begin_layout Standard
This collection also contains versions of a number of the 
\begin_inset Quotes eld
\end_inset

classic
\begin_inset Quotes erd
\end_inset

 (and most-used) parts of 
\family typewriter
AmberTools
\family default
: 
\emph on
tleap, antechamber
\emph default
, 
\emph on
sqm, saxs, rism1d, metatwist
\emph default
 and 
\emph on
paramfit
\emph default
.
 With these tools, many systems can be set up for simulation in 
\emph on
msander
\emph default
.
 The tutorials at 
\begin_inset CommandInset href
LatexCommand href
name "ambermd/org/tutorials"
target "https://ambermd.org/tutorials"
literal "false"

\end_inset

 illustrate the use of these programs.
 (Analysis of trajectories is most commonly carried out via 
\emph on
cpptraj
\emph default
, which is distributed separately, at 
\begin_inset CommandInset href
LatexCommand href
name "github.com/Amber-MD"
target "https://github.com/Amber-MD"
literal "false"

\end_inset

.) If you need more capabilities than these classic, stripped-down versions
 provide, consider installing the full 
\family typewriter
AmberTools
\family default
 and 
\family typewriter
Amber
\family default
 suites, available at 
\begin_inset CommandInset href
LatexCommand href
name "ambermd.org"
target "https://ambermd.org"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
One goal of this collection is to make compiling and installation as simple
 as possible.
 There is a pretty simple 
\family typewriter
configure
\family default
 script, and minimal dependencies on external packages.
 If you have problems or questions, creating an issue at 
\family typewriter
github.com
\family default
 is the recommended path, but you can also send email to dacase1@gmail.com.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\family sans
\series bold
\size largest
Principal contributors to the current codes:
\series default
\size default
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="2.6in">
<column alignment="center" valignment="top" width="2.6in">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
David A.
 Case (Rutgers) 
\begin_inset Newline newline
\end_inset

 Carlos Simmerling (Stony Brook) 
\begin_inset Newline newline
\end_inset

Adrian Roitberg (Florida)
\begin_inset Newline newline
\end_inset

Tom Darden (OpenEye)
\begin_inset Newline newline
\end_inset

Junmei Wang (Pitt)
\begin_inset Newline newline
\end_inset

Chris Schafmeister (Temple)
\begin_inset Newline newline
\end_inset

Tom Macke
\begin_inset Newline newline
\end_inset

Istv
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
'a
\end_layout

\end_inset

n Kolossv
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
'a
\end_layout

\end_inset

ry (Budapest)
\begin_inset Newline newline
\end_inset

Celeste Sagui (NCSU)
\begin_inset Newline newline
\end_inset

Feng Pan (FSU)
\begin_inset Newline newline
\end_inset

Jason Swails (Entos)
\begin_inset Newline newline
\end_inset

David Cerutti (Psivant Discovery)
\begin_inset Newline newline
\end_inset

Tyler Luchko (CSU Northridge)
\begin_inset Newline newline
\end_inset

Ross C.
 Walker (Independent Consultant)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
George Giambaşu (Merck)
\begin_inset Newline newline
\end_inset

Jian Liu (Peking Univ.)
\begin_inset Newline newline
\end_inset

Vinícius Wilian D.
 Cruzeiro (UC San Diego)
\begin_inset Newline newline
\end_inset

Nikolai R.
 Skrynnikov (Purdue, SPbU)
\begin_inset Newline newline
\end_inset

Oleg Mikhailovskii (Purdue, SPbU)
\begin_inset Newline newline
\end_inset

Yi Xue (Tsinghua)
\begin_inset Newline newline
\end_inset

Sergei A.
 Izmailov (SPbU)
\begin_inset Newline newline
\end_inset

Alexey Onufriev (Virginia Tech)
\begin_inset Newline newline
\end_inset

Saeed Izadi (Genentech)
\begin_inset Newline newline
\end_inset

Xiongwu Wu (NIH) 
\end_layout

\begin_layout Plain Layout

\size small
George Giambasu (Rutgers)
\begin_inset Newline newline
\end_inset

Jian Liu (Peking Univ.)
\begin_inset Newline newline
\end_inset

Andriy Kovalenko (NINT)
\begin_inset Newline newline
\end_inset

 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\begin_inset CommandInset label
LatexCommand label
name "chap:Introduction"

\end_inset


\end_layout

\begin_layout Standard
This repository contains 
\emph on
msander
\emph default
, a "modern" version of parts of the Amber molecular dynamics program sander.
 Also included are various NMR, X-ray and cryoEM-related code and utilities,
 as well as versions of a number of the “classic” (and most-used) parts
 of AmberTools: 
\emph on
tleap, antechamber, sqm, metatwist, rism1d, saxs, NAB, nabc
\emph default
 and 
\emph on
paramfit
\emph default
.
 With these tools, many systems can be set up for simulation in 
\emph on
msander
\emph default
.
 
\end_layout

\begin_layout Standard
This code is probably most useful to those who are already familiar with
 `AmberTools` (
\begin_inset CommandInset href
LatexCommand href
name "https://ambermd.org"
target "https://ambermd.org"
literal "false"

\end_inset

).
 Many of the basic tutorials there will also work with AmberClassic.
 The documentation and authorship credits are in the 
\family typewriter
doc/AmberClassic.pdf
\family default
 file.
\end_layout

\begin_layout Standard
This package may also be of interest to those who want just the subset included
 here of the far-more-complex AmberTools package.
 Some other popular parts of 
\emph on
AmberTools
\emph default
 are not included here, but are available separately: 
\emph on
cpptraj
\emph default
 and 
\emph on
pytraj
\emph default
 (both at 
\begin_inset CommandInset href
LatexCommand href
name "github.com/Amber-MD"
target "https://github.com/Amber-MD"
literal "false"

\end_inset

), and 
\emph on
parmed
\emph default
 (at 
\begin_inset CommandInset href
LatexCommand href
name "github.com/ParmEd"
target "https://github.com/ParmEd"
literal "false"

\end_inset

).
\end_layout

\begin_layout Subsection*
Warning
\end_layout

\begin_layout Standard
This is a work in progress, and may not always be in a stable state (although
 that is my goal for the main branch).
 I may not be able to respond to requests for support, but please create
 a github issue if you have comments or suggestions.
 (As an alternative, send email to 
\emph on
dacase1@gmail.com
\emph default
.)
\end_layout

\begin_layout Section
Design goals
\end_layout

\begin_layout Standard
This project began as a fork of the 
\emph on
sander
\emph default
 code in 
\emph on
AmberTools
\emph default
.
 It tries to (greatly) simplify the code base, choosing the best and most
 useful parts of the code, and to serve as a test bed for how modern Fortran
 coding techniques can be used.
 Key application areas are expected to be in structure refinements using
 NMR, cryoEM or Xray diffraction information.
 This version has a fair amount of OpenMP support, especially for Xray and
 3D-RISM calculations.
 Parts of the Xray code uses GPU acceleration.
\end_layout

\begin_layout Standard
One additional goal of this collection is to make compiling and installation
 as simple as possible.
 There is a pretty simple 
\family typewriter
configure
\family default
 script, and minimal dependencies on external packages.
 I am (slowly) cleaning up and adding other parts of 
\emph on
AmberTools
\emph default
, and I hope to create a conda package soon.
\end_layout

\begin_layout Standard
This project incorporates and supercedes two previous packages (
\emph on
msander
\emph default
 and 
\emph on
nabc
\emph default
) that were available at 
\begin_inset CommandInset href
LatexCommand href
name "github.com/dacase"
target "https://github.com/dacase"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Key differences in functionality versus sander
\end_layout

\begin_layout Standard
Some pieces are missing from the sander program in AmberTools:
\end_layout

\begin_layout Itemize
Things that should be easy to re-introduce later: emil, sebomd, pbsa, APBS
\end_layout

\begin_layout Itemize
Things are are problably gone for good, but which don't represent the best
 current practice: Path-integral methods, thermostats that don't follow
 the "middle" scheme, Berendsen barostat
\end_layout

\begin_layout Itemize
Things that might be useful, but really complicate the code: evb potentials,
 QM/MM, nudged elastic band, constant pH and constant redox potential simulation
s.
 The API interface has also been removed.
\end_layout

\begin_layout Itemize
Non-periodic 3D-RISM has been removed for now, in an attempt to get the
 simplest possible RISM code, perhaps as a basis for future GPU work.
\end_layout

\begin_layout Standard
(If you need some of these deleted pieces, use *sander* from AmberTools
 instead.)
\end_layout

\begin_layout Standard
Key pieces of code that are still there, and being emphasized:
\end_layout

\begin_layout Itemize
Periodic and non-periodic simulations, with all of Amber's GB models
\end_layout

\begin_layout Itemize
3D-RISM in periodic boundary conditions
\end_layout

\begin_layout Itemize
NMR, cryoEM and Xray restraints (including quite a bit of new code; Xray
 restraints include NVIDIA GPU-enabled capabilities)
\end_layout

\begin_layout Itemize
Thermodynamic integration and non-equilibrium sampling methods, including
 adaptively biassed sampling and self-guided Langevin dynamics
\end_layout

\begin_layout Itemize
Sampling and minimization using the lmod and xmin approaches; these can
 now be used in conjunction with SHAKE and SETTLE.
\end_layout

\begin_layout Itemize
Replica exchange capabilities, except for constant pH and redox potential
 simulations
\end_layout

\begin_layout Section
Installation from source
\end_layout

\begin_layout Standard
For a serial build: in the top-level folder, do this
\end_layout

\begin_layout LyX-Code
./configure --help      # then re-run configure with the options (if any)
 you want
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout LyX-Code
source AmberClassic.sh  # sets up environment variables; consider adding
 to your SHELL rc file
\end_layout

\begin_layout LyX-Code
make test               
\end_layout

\begin_layout Standard
To build 
\emph on
msander.MPI
\emph default
, 
\emph on
msander.cuda
\emph default
 and 
\emph on
msander.cuda.MPI
\emph default
, you will need to re-run configure and make install.
 For example, to build all three options:
\end_layout

\begin_layout LyX-Code
./configure --mpi
\end_layout

\begin_layout LyX-Code
make clean && make install   # builds msander.MPI
\end_layout

\begin_layout LyX-Code
./configure --cuda
\end_layout

\begin_layout LyX-Code
make clean && make install   # builds msander.cuda
\end_layout

\begin_layout LyX-Code
./confgiure --cuda --mpi
\end_layout

\begin_layout LyX-Code
make clean && make install   # builds msander.cuda.MPI
\end_layout

\begin_layout Standard
Please note: CUDA acceleration only affects the Xray restraint terms.
 Further, msander.cuda.MPI is not parallelized across GPUs: the force field
 terms are parallelized via MPI, and a single MPI thread runs the CUDA code
 for Xray restraints.
\end_layout

\begin_layout Standard
The test suite also serves as a source of example input files.
 Look especially in the 
\emph on
rism
\emph default
, 
\emph on
xray
\emph default
 and 
\emph on
cryoem
\emph default
 folders to see sample inputs for these sorts of calculation.
\end_layout

\begin_layout Section
Installation via conda
\end_layout

\begin_layout Standard
You can obtain the conda packaging system here: 
\begin_inset CommandInset href
LatexCommand href
name "https://conda-forge.org/download/"
target "https://conda-forge.org/download/"
literal "false"

\end_inset

.
 You should familiarize yourself somewhat with how the system works.
 But basically, one does the following:
\end_layout

\begin_layout LyX-Code
conda create --name AmberClassic   # you can choose the environment name
\end_layout

\begin_layout LyX-Code
conda activate AmberClassic
\end_layout

\begin_layout LyX-Code
conda install dacase::amberclassic  # only linux-64 and osx-64 for now
\end_layout

\begin_layout LyX-Code
cd $CONDA_PREFIX
\end_layout

\begin_layout LyX-Code
source AmberClassic.sh   # creates the AMBERCLASSICHOME environment variable
\end_layout

\begin_layout LyX-Code
conda install parmed     # optional, but brings in the very useful ParmEd
 program
\end_layout

\begin_layout LyX-Code
...
 # go to some working directory and do your work
\end_layout

\begin_layout LyX-Code
conda deactivate   # to exit your AmberClassic environment
\end_layout

\begin_layout Section
Tutorials
\end_layout

\begin_layout Standard
Many of the Amber tutorials (at 
\begin_inset CommandInset href
LatexCommand href
name "https://ambermd.org/tutorials/"
target "https://ambermd.org/tutorials/"
literal "false"

\end_inset

) apply with minimal or no modification to 
\family typewriter
AmberClassic
\family default
.
 In particular, look at these:
\end_layout

\begin_layout Itemize
1.2 Fundamentals of LEaP
\end_layout

\begin_layout Itemize
1.4 Hydrogen Mass Repartitioning
\end_layout

\begin_layout Itemize
1.5 Building a Peptide Sequence
\end_layout

\begin_layout Itemize
1.6 Building Protein Systems in Explicit Water
\end_layout

\begin_layout Itemize
1.7 Simulation of a protein crystal
\end_layout

\begin_layout Itemize
1.13 Using 3D-RISM and MOFT to place waters and ions
\end_layout

\begin_layout Itemize
2.1 Simulating a pharmaceutical compound with Antechamber and GAFF
\end_layout

\begin_layout Itemize
3.1 Relaxation of Explicit Water Systems
\end_layout

\begin_layout Itemize
3.2 Relaxation of Implicit Solvent System (GB) 
\end_layout

\begin_layout Itemize
3.3 Running MD with pmemd 
\emph on
(basic ideas here also apply to msander, but simulations will be much slower)
\end_layout

\begin_layout Itemize
5.1 Simple Simulation of Alanine Dipeptide
\end_layout

\begin_layout Itemize
5.4 Calculating ion distributions around DNA using 3D-RISM
\end_layout

\begin_layout Itemize
7.1 Thermodynamic Integration using soft core potentials
\end_layout

\begin_layout Itemize
7.5 Umbrella sampling: A Potential of Mean Force in alanine dipeptide Phi/Psi
 rotation
\end_layout

\begin_layout Itemize
7.12 The Nonequilibrium Free Energy (NFE) Toolkit for pmemd 
\emph on
(also works with msander)
\end_layout

\begin_layout Section
License
\end_layout

\begin_layout Standard
This project is licensed under the GNU General Public License, version 2,
 or (at your option) any later version.
 Some components use different, but compatible, open source licenses.
 See the 
\family typewriter
LICENSE
\family default
 file for more information.
\end_layout

\begin_layout Chapter

\series bold
msander 
\begin_inset CommandInset label
LatexCommand label
name "chap:sander"

\end_inset


\end_layout

\begin_layout Section

\series bold
Introduction
\end_layout

\begin_layout Standard
This is a guide to 
\shape italic
msander
\shape default
, an Amber module which carries out energy minimization, molecular dynamics,
 and NMR refinements.
 The acronym stands for 
\series bold
S
\series default
imulated 
\series bold
A
\series default
nnealing with 
\series bold
N
\series default
MR-
\series bold
D
\series default
erived 
\series bold
E
\series default
nergy 
\series bold
R
\series default
estraints, but this module is used for a variety of simulations that have
 nothing to do with NMR refinement.
 Some general features are outlined in the following paragraphs:
\end_layout

\begin_layout Enumerate

\shape italic
msander
\shape default
 provides direct support for several force fields for proteins and nucleic
 acids, and for several water models and other organic solvents.
 The basic force field implemented here has the following form, which is
 about the simplest functional form that preserves the essential nature
 of molecules in condensed phases:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
V(\mathbf{r}) & = & \sum_{bonds}K_{b}(b-b_{0})^{2}+\sum_{angles}K_{\theta}(\theta-\theta_{o})^{2}\\
 &  & +\sum_{dihedrals}(V_{n}/2)(1+\cos[n\phi-\delta]\\
 &  & +\sum_{nonb\,ij}(A_{ij}/r_{ij}^{12})-(B_{ij}/r_{ij}^{6})+(q_{i}q_{j}/r_{ij})
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
In addition, charges that are not centered on atoms, but are off-center
 (as for lone-pairs or "extra points") can be included in the force field.
\end_layout

\end_deeper
\begin_layout Enumerate
The particle-mesh Ewald (PME) procedure is used to handle long-range electrostat
ic interactions.
 Long-range van der Waals interactions are estimated by a continuum model.
 Biomolecular simulations in the NVE ensemble (
\begin_inset Formula $i.e.$
\end_inset

 with Newtonian dynamics) conserve energy well over multi-nanosecond runs
 without modification of the equations of motion.
\end_layout

\begin_layout Enumerate
Translational periodic (P1) symmetry is supported, but no other space-group
 symmetry is.
 The size of the unit cell can be coupled to a given external pressure,
 and velocities can be coupled to a given external temperature by several
 schemes.
 The external conditions and coupling constants can be varied over time,
 so various simulated annealing protocols can be specified in a simple and
 flexible manner.
\end_layout

\begin_layout Enumerate
It is also possible to carry out non-periodic simulations in which aqueous
 solvation effects are represented 
\shape italic
implicitly
\shape default
 by a generalized Born/ surface area model by adding the following two terms
 to the "vacuum" potential function:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
\Delta G_{sol}=\sum_{ij}(1-\frac{1}{\varepsilon})(q_{i}q_{j}/f_{GB}(r_{ij})+A\sum_{i}\sigma_{i}
\]

\end_inset


\end_layout

\begin_layout Standard
The first term accounts for the polar part of solvation (free) energy, designed
 to provide an approximation for the reaction field potential, and the second
 represents the non-polar contribution which is taken to be proportional
 to the surface area of the molecule.
\end_layout

\end_deeper
\begin_layout Enumerate
Users can define internal restraints on bonds, valence angles, and torsions,
 and the force constants and target values for the restraints can vary during
 the simulation.
 The relative weights of various terms in the force field can be varied
 over time, allowing one to implement a variety of simulated annealing protocols
 in a single run.
\end_layout

\begin_layout Enumerate
Internal restraints can be defined to be "time-averaged", that is, restraint
 forces are applied based on the averaged value of an internal coordinate
 over the course of the dynamics trajectory, not only on its current value.
 Alternatively, restraints can be "ensemble-averaged" using the locally-enhanced
-sampling (LES) option.
\end_layout

\begin_layout Enumerate
Restraints can be directly defined in terms of NOESY intensities (calculated
 with a relaxation matrix technique), residual dipolar couplings, scalar
 coupling constants and proton chemical shifts.
 There are provisions for handling overlapping peaks or ambiguous assignments.
 In conjunction with distance and angle constraints, this provides a powerful
 and flexible approach to NMR structural refinements.
\end_layout

\begin_layout Enumerate
Xray and cryoEM refinements can be carried out in reciprocal space, with
 GPU-accelerated structure factor calculations.
 Real-space electron density maps can also be used as restraints for refinement.
\end_layout

\begin_layout Enumerate
Replica exchange calculations can allow simultaneous sampling at a variety
 of conditions (such as temperature), and allow the user to construct Boltzmann
 samples in ways that converge more quickly than standard MD simulations.
 Other variants of biased MD simulations can also be used to improve sampling.
\end_layout

\begin_layout Enumerate
Restraints can also be defined in terms of the root-mean-square coordinate
 distance from some reference structure.
 This allows one to bias trajectories either towards or away from some target.
 Free energies can be estimated from non-equilibrium simulations based on
 targetting restraints.
\end_layout

\begin_layout Enumerate
Free energy calculations, using thermodynamic integration (TI) with a linear
 or non-linear mixing of the "unperturbed" and "perturbed" Hamiltonian,
 can be carried out.
 Alternatively, potentials of mean force can be computed using umbrella
 sampling.
\end_layout

\begin_layout Section
Main changes from the 
\emph on
sander
\emph default
 code in AmberTools
\end_layout

\begin_layout Enumerate
Some pieces are missing from the sander program in AmberTools:
\end_layout

\begin_deeper
\begin_layout Enumerate
Things that should be easy to re-introduce later: emil, sebomd, pbsa, APBS,
 the charge-relocation option.
\end_layout

\begin_layout Enumerate
Things are are problably gone for good, but which don't represent the best
 current practice: Path-integral methods, thermostats that don't follow
 the "middle" scheme, Berendsen barostat
\end_layout

\begin_layout Enumerate
Things that might be useful, but really complicate the code: EVB potentials,
 QM/MM, nudged elastic band, constant pH and constant redox potential simulation
s.
 The API interface to Fortran, C and Python codes has also been removed.
\end_layout

\begin_layout Enumerate
Non-periodic 3D-RISM has been removed for now, in an attempt to get the
 simplest possible RISM code, perhaps as a basis for future GPU work.
\end_layout

\end_deeper
\begin_layout Enumerate
Key pieces of code that are still there, and being emphasized:
\end_layout

\begin_deeper
\begin_layout Enumerate
Periodic and non-periodic simulations, with all of Amber's GB models
\end_layout

\begin_layout Enumerate
3D-RISM in periodic boundary conditions
\end_layout

\begin_layout Enumerate
NMR, cryoEM and Xray restraints (including quite a bit of new code; Xray
 restraints include NVIDIA GPU-enabled capabilities)
\end_layout

\begin_layout Enumerate
Thermodynamic integration and non-equilibrium sampling methods
\end_layout

\begin_layout Enumerate
Sampling and minimization using the lmod and xmin approaches; these can
 now be used in conjunction with SHAKE and SETTLE.
\end_layout

\begin_layout Enumerate
Replica exchange capabilities, except for constant pH and redox potential
 simulations
\end_layout

\end_deeper
\begin_layout Section

\series bold
File usage
\end_layout

\begin_layout LyX-Code
msander [-help] [-O] [-A] -i mdin -o mdout -p prmtop -c inpcrd -r restrt
\end_layout

\begin_layout LyX-Code
-ref refc -mtmd mtmd -x mdcrd -y inptraj -v mdvel -frc mdfrc -e mden
\end_layout

\begin_layout LyX-Code
-inf mdinfo
\end_layout

\begin_layout LyX-Code
-O  Overwrite output files if they exist.
 
\end_layout

\begin_layout LyX-Code
-A  Append output files if they exist (used mainly for replica exchange).
\end_layout

\begin_layout Standard
Here is a brief description of the files referred to above; the first five
 files are used for every run, whereas the remainder are only used when
 certain options are chosen.
\end_layout

\begin_layout Description
mdin 
\emph on
input
\emph default
 control data for the min/md run 
\end_layout

\begin_layout Description
mdout 
\emph on
output
\emph default
 user readable state info and diagnostics -o stdout will send output to
 stdout (to the terminal) instead of to a file.
 
\end_layout

\begin_layout Description
mdinfo 
\emph on
output
\emph default
 latest mdout-format energy info 
\end_layout

\begin_layout Description
prmtop 
\emph on
input
\emph default
 molecular topology, force field, periodic box type, atom and residue names
 
\end_layout

\begin_layout Description
inpcrd 
\emph on
input
\emph default
 initial coordinates and (optionally) velocities and periodic box size 
\end_layout

\begin_layout Description
refc 
\emph on
input
\emph default
 (optional) reference coords for position restraints; also used for targeted
 MD 
\end_layout

\begin_layout Description
mtmd 
\emph on
input
\emph default
 (optional) containing list of files and parameters for targeted MD to multiple
 targets
\end_layout

\begin_layout Description
mdcrd 
\emph on
output
\emph default
 coordinate sets saved over trajectory 
\end_layout

\begin_layout Description
inptraj 
\emph on
input
\emph default
 coordinate sets in trajectory format, when imin=5 
\end_layout

\begin_layout Description
mdvel 
\emph on
output
\emph default
 velocity sets saved over trajectory
\end_layout

\begin_layout Description
mdfrc 
\emph on
output
\emph default
 force sets saved over trajectory
\end_layout

\begin_layout Description
mden 
\emph on
output
\emph default
 extensive energy data over trajectory (not synchronized with mdcrd or mdvel)
\end_layout

\begin_layout Description
restrt 
\emph on
output
\emph default
 final coordinates, velocity, and box dimensions if any - for restarting
 run
\end_layout

\begin_layout Description
suffix 
\emph on
output
\emph default
 this string will be added to all unspecified output files that are printed
 (for 
\emph on
multisander
\emph default
 runs, it will append this suffix to all output files)
\end_layout

\begin_layout Section

\series bold
Example input files
\end_layout

\begin_layout Standard
Here are a couple of sample files, just to establish a basic syntax and
 appearance.
 There are more examples of NMR-related files later in this chapter.

\series bold
 
\end_layout

\begin_layout Subsection*

\series bold
1.
 Simple restrained minimization
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Minimization with Cartesian restraints
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

imin=1, maxcyc=200, (invoke minimization)
\end_layout

\begin_layout Plain Layout

ntpr=5, (print frequency)
\end_layout

\begin_layout Plain Layout

ntr=1, (turn on Cartesian restraints)
\end_layout

\begin_layout Plain Layout

restraint_wt=1.0, (force constant for restraint)
\end_layout

\begin_layout Plain Layout

restraintmask=':1-58', (atoms in residues 1-58 restrained)
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection*

\series bold
2.
 "Plain" molecular dynamics run
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

molecular dynamics run
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

imin=0, irest=1, ntx=5, (restart MD)
\end_layout

\begin_layout Plain Layout

ntt=3, temp0=300.0, gamma_ln=5.0, (temperature control)
\end_layout

\begin_layout Plain Layout

ntp=1, taup=2.0, (pressure control)
\end_layout

\begin_layout Plain Layout

ntb=2, ntc=2, ntf=2, (SHAKE, periodic bc.)
\end_layout

\begin_layout Plain Layout

nstlim=500000, (run for 0.5 nsec)
\end_layout

\begin_layout Plain Layout

ntwx=1000, ntpr=200, (output frequency)
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section

\series bold
Namelist Input Syntax
\end_layout

\begin_layout Standard
Namelist provides list-directed input, and convenient specification of default
 values, and is a part of the Fortran 90 standard, Namelist input groups
 take the form:
\end_layout

\begin_layout LyX-Code
&name
\end_layout

\begin_layout LyX-Code
var1=value, var2=value, var3(sub)=value,
\end_layout

\begin_layout LyX-Code
var4(sub,sub,sub)=value,value,
\end_layout

\begin_layout LyX-Code
var5=repeat*value,value,
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout Standard
The variables must be names in the Namelist variable list.
 The order of the variables in the input list is of no significance, except
 that if a variable is specified more than once, later assignments may overwrite
 earlier ones.
 Blanks may occur anywhere in the input, except embedded in constants (other
 than string constants, where they count as ordinary characters).
\end_layout

\begin_layout Standard
It is common in older inputs for the ending "/" to be replaced by "&end";
 this is non-standard-conforming.
\end_layout

\begin_layout Standard
Letter case is ignored in all character comparisons, but case is preserved
 in string constants.
 String constants must be enclosed by single quotes (').
 If the text string itself contains single quotes, indicate them by two
 consecutive single quotes, e.g.
 C1' becomes 'C1
\begin_inset Quotes erd
\end_inset

' as a character string constant.
\end_layout

\begin_layout Standard
Array variables may be subscripted or unsubscripted.
 An unsubscripted array variable is the same as if the subscript (1) had
 been specified.
 If a subscript list is given, it must have either one constant, or exactly
 as many as the number in the declared dimension of the array.
 Bounds checking is performed for ALL subscript positions, although if only
 one is given for a multi-dimension array, the check is against the entire
 array size, not against the first dimension.
 If more than one constant appears after an array assignment, the values
 go into successive locations of the array.
 It is NOT necessary to input all elements of an array.
\end_layout

\begin_layout Standard
Any constant may optionally be preceded by a positive (1,2,3,..) integer repeat
 factor, so that, for example, 25*3.1415 is equivalent to twenty-five successive
 values 3.1415.
 The repeat count separator, *, may be preceded and followed by 0 or more
 blanks.
 Valid LOGICAL constants are 0, F, .F., .FALSE., 1, T, .T., and .TRUE.; lower case
 versions of these also work.
\end_layout

\begin_layout Section

\series bold
Overview of the information in the input file
\begin_inset CommandInset label
LatexCommand label
name "sec:mdin-info"

\end_inset


\end_layout

\begin_layout Description
General
\begin_inset space ~
\end_inset

minimization
\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset

dynamics
\begin_inset space ~
\end_inset

input 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
One or more title lines, followed by the (required) &cntrl and (optional)
 &pb, &ewald, &qmmm, &amoeba or &debugf namelist blocks.
 Described in Sections 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:General-minimization"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Potential-function-parameters"

\end_inset

.
\end_layout

\end_deeper
\begin_layout Description
Varying
\begin_inset space ~
\end_inset

conditions
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Parameters for changing temperature, restraint weights, etc., during the
 MD run.
 Each parameter is specified by a separate &wt namelist block, ending with
 &wt type="END", /.
 Described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Varying-conditions"

\end_inset

.
\end_layout

\end_deeper
\begin_layout Description
File
\begin_inset space ~
\end_inset

redirection
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
TYPE=
\shape italic
filename
\shape default
 lines.
 Section ends with the first non-blank line which does not correspond to
 a recognized redirection.
 Described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:File-redirection-commands"

\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Description
Group
\begin_inset space ~
\end_inset

information
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Read if 
\shape italic
ntr
\shape default
, 
\shape italic
ibelly
\shape default
 or 
\shape italic
idecomp
\shape default
 are set to nonzero values, and if some other conditions are satisfied;
 see sections on these variables, below.
 Described in Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:GROUP-Specification"

\end_inset

.
\end_layout

\end_deeper
\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:General-minimization"

\end_inset


\series bold
General minimization and dynamics parameters
\end_layout

\begin_layout Standard
Each of the variables listed below is input in a namelist statement with
 the namelist identifier &cntrl.cmmu can enter the parameters in any order,
 using keyword identifiers.
 Variables that are not given in the namelist input retain their default
 values.
 Support for namelist input is included in almost all current Fortran compilers,
 and is a standard feature of Fortran 90.
 A detailed description of the namelist convention is given in Appendix
 A.
\end_layout

\begin_layout Standard
In general, namelist input consists of an arbitrary number of comment cards,
 followed by a record whose first seven characters after a " &" (e.g.
 " &cntrl ") name a group of variables that can be set by name.cmsys is followed
 by statements of the form " maxcyc=500, diel=2.0, ...
 ", and is concluded by an " / " token.
 The first line of input contains a title, which is then followed by the
 &cntrl namelist.
 Note that the first character on each line of a namelist block must be
 a blank.
\end_layout

\begin_layout Standard
Some of the options and variables are much more important, and commonlycmrdified
, than are others.
 We have denoted the "common" options by printing them in 
\series bold
boldface
\series default
 below.
 In general, you can skip reading about the non-bold options on a first
 pass, and you should change these from their defaults only if you think
 you know what you are doing.
\end_layout

\begin_layout Subsection

\series bold
General flags describing the calculation
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
\series bold
imin
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
imin
\end_layout

\end_inset


\series default
 Flag to run minimization.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 (default) Run molecular dynamics without any minimization.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 Perform an energy minimization.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

5 Read in a trajectory for analysis.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Although sander will write energy information in the output files (using
 
\shape italic
ntpr
\shape default
), it is often desirable to calculate the energies of a set of structures
 at a later point.
 In particular, one may wish to post-process a set of structures using a
 different energy function than was used to generate the structures.
 An example of this is MM-PBSA analysis, where the explicit water is removed
 and replaced with a continuum model.
\end_layout

\begin_layout Standard
If 
\shape italic
imin
\shape default
 is set to 5, sander will read a trajectory file (the 
\begin_inset Quotes eld
\end_inset

inptraj
\begin_inset Quotes erd
\end_inset

 argument, specified using 
\family typewriter
-y
\family default
 on the command line), and will perform the functions described in the mdin
 file (e.g., an energy minimization) for each of the structures in this file.
 The final structure from each minimization will be written out to the normal
 mdcrd file.
 If you wish to read in a binary (i.e., NetCDF format) trajectory, be sure
 to set 
\shape italic
ioutfm
\shape default
 to 1 (see below).
 Note that this will result in the output trajectory having NetCDF format
 as well.
\end_layout

\begin_layout Standard
For example, when 
\shape italic
imin
\shape default
 = 5 and 
\shape italic
maxcyc
\shape default
 = 1000, sander will minimize each structure in the trajectory for 1000
 steps and write a minimized coordinate set for each frame to the mdcrd
 file.
 If 
\shape italic
maxcyc
\shape default
 = 1, the output file can be used to extract the energies of each of the
 coordinate sets in the inptraj file.
\end_layout

\begin_layout Standard
Trajectories containing box coordinates can be post-processed.
 In order to read trajectories with box coordinates, 
\shape italic
ntb
\shape default
 should be greater than 0.
\end_layout

\begin_layout Standard

\series bold
IMPORTANT CAVEAT:
\series default
 The initial coordinates input file used (
\family typewriter
-c
\family default
\shape italic
 
\shape default
<inpcrd>) should be the same as the initial coordinates input file used
 to generate the original trajectory.
 This is because sander sets up parameters for PME from the box coordinates
 in the initial coordinates input file.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
nmropt
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
nmropt
\end_layout

\end_inset

 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 (default) No nmr-type analysis will be done.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 NMR restraints and weight changes will be read.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 NMR restraints, weight changes, NOESY volumes, chemical shifts and residual
 dipolar restraints will be read.
\end_layout

\end_deeper
\begin_layout Subsection

\series bold
Nature and format of the input
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
\series bold
ntx
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
ntx
\end_layout

\end_inset


\series default
 Option to read the initial coordinates, velocities, and box size from the
 inpcrd file.
 Option 1 must be used when one is starting from minimized or model-built
 coordinates.
 If an MD restrt file is specified for inpcrd then option 5 is generally
 used (unless you explicitly wish to ignore the velocities that are present).
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

1 (default) Coordinates, but no velocities, will be read; either formatted
 (ASCII) files or NetCDF files can be used, as the input file type will
 be auto-detected.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

5 Coordinates and velocities will be read from either a NetCDF or a formatted
 (ASCII) coordinate file.
 Box information will be read if 
\shape italic
ntb
\shape default
 
\begin_inset Formula $>$
\end_inset

 0.
 The velocity information will only be used if 
\shape italic
irest
\shape default
 = 1 (see below).
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
\series bold
irest
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
irest
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "irest-flag"

\end_inset


\series default
 Flag to restart a simulation.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 (default) Do not restart the simulation; instead, run as a new simulation.
 Velocities in the input coordinate file, if any, will be ignored, and the
 time step count will be set to 0 (unless overridden by 
\shape italic
t
\shape default
; see below).
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 Restart the simulation, reading coordinates and velocities from a previously
 saved restart file.
 The velocity information is necessary when restarting, so 
\shape italic
ntx
\shape default
 (see above) must be 5 (for Amber versions much older than 20, ntx must
 be greater than or equal to 4), if 
\shape italic
irest
\shape default
 = 1.
\end_layout

\end_deeper
\begin_layout Subsection

\series bold
Nature and format of the output
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
ntxo
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
ntxo
\end_layout

\end_inset

 Format of the final coordinates, velocities, and box size (if a constant
 volume or pressure run) written to file "restrt".
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

1 Formatted (ASCII) 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 (default) NetCDF file (recommended, unless you have a workflow that requires
 the formatted form.)
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
\series bold
ntpr
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
ntpr
\end_layout

\end_inset


\series default
 Every 
\shape italic
ntpr
\shape default
 steps, energy information will be printed in human-readable form to files
 "mdout" and "mdinfo".
 "mdinfo" is closed and reopened each time, so it always contains the most
 recent energy and temperature.
 Default 50.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
ntwr
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
ntwr
\end_layout

\end_inset

 Every 
\shape italic
ntwr
\shape default
 steps during dynamics, the 
\begin_inset Quotes eld
\end_inset

restrt
\begin_inset Quotes erd
\end_inset

 file will be written, ensuring that recovery from a crash will not be so
 painful.
 No matter what the value of 
\shape italic
ntwr
\shape default
, a restrt file will be written at the end of the run, i.e., after 
\shape italic
nstlim
\shape default
 steps (for dynamics) or 
\shape italic
maxcyc
\shape default
 steps (for minimization).
 If 
\shape italic
ntwr
\shape default
 
\begin_inset Formula $<$
\end_inset

 0, a unique copy of the file, 
\begin_inset Quotes eld
\end_inset

restrt_<nstep>
\begin_inset Quotes erd
\end_inset

, is written every abs(
\shape italic
ntwr
\shape default
) steps.
 This option is useful if for example one wants to run free energy perturbations
 from multiple starting points or save a series of restrt files for minimization.
 Default = nstlim.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
\series bold
ntwx
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
ntwx
\end_layout

\end_inset


\series default
 Every 
\shape italic
ntwx
\shape default
 steps, the coordinates will be written to the mdcrd file.
 If 
\shape italic
ntwx
\shape default
 = 0, no coordinate trajectory file will be written.
 Default = 0.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
ntwv
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
ntwv
\end_layout

\end_inset

 Every 
\shape italic
ntwv
\shape default
 steps, the velocities will be written to the mdvel file.
 If 
\shape italic
ntwv
\shape default
 = 0, no velocity trajectory file will be written.
 If 
\shape italic
ntwv
\shape default
 = -1, velocities will be written to mdcrd, which then becomes a combined
 coordinate/velocity trajectory file, at the interval defined by 
\shape italic
ntwx
\shape default
.
 This option is available only for binary NetCDF output (
\shape italic
ioutfm
\shape default
 = 1).
 Most users will have no need for a velocity trajectory file and so can
 safely leave 
\shape italic
ntwv
\shape default
 at the default.
 Default = 0.
 Note that dumping velocities frequently, like forces or coordinates, will
 introduce potentially significant I/O and communication overhead, hurting
 both performance and parallel scaling.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ionstepvelocities
\begin_inset Index idx
status open

\begin_layout Plain Layout
ionstepvelocities
\end_layout

\end_inset

 Controls whether to print the half-step-ahead velocities (0, default) or
 on-step velocities (1).
 The half-step-ahead velocities can potentially be used to restart calculations,
 but the on-step velocities correspond to calculated kinetic energy/temperature.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ntwf
\begin_inset Index idx
status open

\begin_layout Plain Layout
ntwf
\end_layout

\end_inset

 Every 
\emph on
ntwf
\emph default
 steps, the forces will be written to the mdfrc file.
 If 
\emph on
ntwf 
\emph default
= 0, no force trajectory file will be written.
 If 
\emph on
ntwf 
\emph default
= -1, forces will be written to the mdcrd, which then becomes a combind
 coordinate/force trajectory file, at the interval defined by 
\emph on
ntwx
\emph default
.
 This option is available only for binary NetCDF output (
\emph on
ioutfm
\emph default
 = 1).
 Most users will have no need for a force trajectory file and so can safely
 leave 
\emph on
ntwf
\emph default
 at the default.
 Default = 0.
 Note that dumping forces frequently, like velocities or coordinates, will
 introduce potentially significant I/O and communication overhead, hurting
 both performance and parallel scaling.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
ntwe
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
ntwe
\end_layout

\end_inset

 Every 
\shape italic
ntwe
\shape default
 steps, the energies and temperatures will be written to file "mden" in
 a compact form.
 If 
\shape italic
ntwe
\shape default
 = 0 then no mden file will be written.
 Note that energies in the mden file are not synchronized with coordinates
 or velocities in the mdcrd or mdvel file(s).
 Assuming identical 
\shape italic
ntwe
\shape default
 and
\shape italic
 ntwx
\shape default
 values the energies are one time step before the coordinates (as well as
 the velocities which are synchronized with the coordinates).
 Consequently, an mden file is rarely written.
 Default = 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
ioutfm
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
ioutfm
\end_layout

\end_inset

 The format of coordinate and velocity trajectory files (mdcrd, mdvel and
 inptraj).
 As of Amber 9, the binary format used in previous versions is no longer
 supported; binary output is now in NetCDF trajectory format.
 Binary trajectory files have many advantages: they are smaller, higher
 precision, much faster to read and write, and able to accept a wider range
 of coordinate (or velocity) values than formatted trajectory files.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 Formatted ASCII trajectory
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 (default) Binary NetCDF trajectory
\end_layout

\end_deeper
\begin_layout Description

\family sans
ntwprt
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
ntwprt
\end_layout

\end_inset

 The number of atoms to include in trajectory files (mdcrd and mdvel).
 This flag can be used to decrease the size of the these files, by including
 only the first part of the system, which is usually of greater interest
 (for instance, one might include only the solute and not the solvent).
 If 
\shape italic
ntwprt
\shape default
 = 0, all atoms will be included.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 (default) Include all atoms of the system when writing trajectories.
 
\end_layout

\begin_layout Description
>
\begin_inset space ~
\end_inset

0 Include only atoms 1 to 
\shape italic
ntwprt
\shape default
 when writing trajectories.
\end_layout

\end_deeper
\begin_layout Subsection

\series bold
Frozen or restrained atoms
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
ibelly
\begin_inset Index idx
status open

\begin_layout Plain Layout
ibelly
\end_layout

\end_inset


\family default
 Flag for belly type dynamics.
 If set to 1, a subset of the atoms in the system will be allowed to move,
 and the coordinates of the rest will be frozen.
 The 
\shape italic
moving
\shape default
 atoms are specified with 
\shape italic
bellymask
\shape default
.
 This option is not available when 
\shape italic
igb
\begin_inset Formula $>$
\end_inset

0
\shape default
.
 When belly type dynamics is in use, bonded energy terms, vdW interactions,
 and direct space electrostatic interactions are 
\emph on
not calculated
\emph default
 for pairs of frozen atoms.
 Note that this does 
\shape italic
not
\shape default
 provide any significant speed advantage.
 Freezing atoms can be useful for some applications but is maintained primarily
 for backwards compatibility with older versions of Amber.
 Most applications should use the 
\shape italic
ntr
\shape default
 variable instead to restrain parts of the system to stay close to some
 initial configuration.
 Default = 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
\series bold
ntr
\begin_inset Index idx
status open

\begin_layout Plain Layout
ntr
\end_layout

\end_inset


\family default
\series default
 Flag for restraining specified atoms in Cartesian space using a harmonic
 potential, if ntr > 0.
 The restrained atoms are determined by the 
\shape italic
restraintmask
\shape default
 string.
 The force constant is given by 
\shape italic
restraint_wt
\shape default
.
 The coordinates are read in "restrt" format from the "refc" file.
 Default = 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
\series bold
restraint_wt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
restraint
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

wt
\end_layout

\end_inset


\family default
\series default
 The weight (
\begin_inset Formula $\mathrm{kcal}\cdot\mathrm{mol}^{-1}\cdot\mathrm{\AA}^{-2}$
\end_inset

) for the positional restraints.
 The restraint is of the form 
\begin_inset Formula $k(\Delta x)^{2}$
\end_inset

, where 
\begin_inset Formula $k$
\end_inset

 is the value given by this variable, and 
\begin_inset Formula $\Delta x$
\end_inset

 is the difference between one of the Cartesian coordinates of a restrained
 atom and its reference position.
 There is a term like this for each Cartesian coordinate of each restrainted
 atom.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
\series bold
restraintmask
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
restraintmask
\end_layout

\end_inset


\family default
\series default
 String that specifies the 
\shape italic
restrained
\shape default
 atoms when 
\shape italic
ntr=1
\shape default
.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family sans
bellymask
\begin_inset Index idx
status open

\begin_layout Plain Layout
bellymask
\end_layout

\end_inset


\family default
 String that specifies the 
\shape italic
moving
\shape default
 atoms when 
\shape italic
ibelly=1
\shape default
.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The syntax for both 
\shape italic
restraintmask
\shape default
 and 
\shape italic
bellymask
\shape default
 is given in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:ambmask"

\end_inset

.
 Note that these mask strings are limited to a maximum of 256 characters.
\end_layout

\end_deeper
\begin_layout Subsection

\series bold
Energy minimization
\begin_inset CommandInset label
LatexCommand label
name "subsec:Energy-minimization"

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
maxcyc
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
maxcyc
\end_layout

\end_inset


\series default
 The maximum number of cycles of minimization.
 Default = 1.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ntmin
\begin_inset Index idx
status open

\begin_layout Plain Layout
ntmin
\end_layout

\end_inset

 Flag for the method of minimization.
 
\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

3 The XMIN method is used, see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:XMIN"

\end_inset

.
 (default)
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

4 The LMOD method is used, see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:LMOD"

\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
dx0
\begin_inset Index idx
status open

\begin_layout Plain Layout
dx0
\end_layout

\end_inset

 The initial step length.
 If the initial step length is too big then will give a huge energy; however
 the minimizer is smart enough to adjust itself.
 Default 0.01.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
drms
\begin_inset Index idx
status open

\begin_layout Plain Layout
drms
\end_layout

\end_inset

 The convergence criterion for the energy Derivative: minimization will
 halt when the Root-Mean-Square of the Cartesian elements of the gradient
 of the energy is less than this.
 Default is 
\begin_inset Formula $10^{-4}\mathrm{kcal}\cdot\mathrm{mol}^{-1}\cdot\mathrm{\AA}^{-1}$
\end_inset

.
\end_layout

\begin_layout Subsection

\series bold
Molecular dynamics
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

middle
\begin_inset Quotes erd
\end_inset

 scheme offers a unified framework to develop efficient thermostatting algorithm
s for configurational sampling for the canonical ensemble, as described
 in Refs.
 
\begin_inset CommandInset citation
LatexCommand citep
key "middle-scheme-2017,PIMD-BAOAB-2016, Langevin-virtual-2017, Andersen-virtual-2017, LFMiddle-2018"
literal "true"

\end_inset

.
 It is the only MD scheme implemented in 
\emph on
msander
\emph default
.
 It can be implemented for performing molecular dynamics (MD) or path integral
 molecular dynamics (PIMD), either with or without holonomic constraints.
 The 
\begin_inset Quotes eld
\end_inset

middle
\begin_inset Quotes erd
\end_inset

 scheme allows the use of much larger time intervals (i.e., time stepsizes)
 
\begin_inset Formula $\Delta t$
\end_inset

 to maintain the same accuracy, which significantly improves the configurational
 sampling efficiency.
 That is, it is efficient for calculating structural properties and thermodynami
c observables that depend on coordinate variables.
 Most thermostats control the temperature by updating momenta of the system.
 Some prevailing thermostats include stochastic ones (such as the Andersen
 thermostat and Langevin dynamics) and deterministic ones (such as the Nosé-Hoov
er thermostat and Nosé-Hoover chain).
 In the 
\begin_inset Quotes eld
\end_inset

middle
\begin_inset Quotes erd
\end_inset

 scheme, immediately after the coordinate-updating step for half a time
 interval, the thermostat process for a full time interval takes place,
 which is then followed by the coordinate-updating step for another half
 time interval
\begin_inset CommandInset citation
LatexCommand citep
key "middle-scheme-2017, LFMiddle-2018"
literal "true"

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
nstlim
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
nstlim
\end_layout

\end_inset


\series default
 Number of MD-steps to be performed.
 Default 1.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nscm
\begin_inset Index idx
status open

\begin_layout Plain Layout
nscm
\end_layout

\end_inset

 Flag for the removal of translational and rotational center-of-mass (COM)
 motion at regular intervals (default is 1000).
 For non-periodic simulations, after every NSCM steps, translational and
 rotational motion will be removed.
 For periodic systems, just the translational center-of-mass motion will
 be removed.
 This flag is ignored for belly simulations.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
For Langevin dynamics, the 
\emph on
position
\emph default
 of the center-of-mass of the molecule is reset to zero every NSCM steps,
 but the velocities are not affected.
 Hence there is no change to either the translation or rotational components
 of the momenta.
 (Doing anything else would destroy the way in which temperature is regulated
 in a Langevin dynamics system.) The only reason to even reset the coordinates
 is to prevent the molecule from diffusing so far away from the origin that
 its coordinates overflow the format used in restart or trajectory files.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
t
\begin_inset Index idx
status open

\begin_layout Plain Layout
t
\end_layout

\end_inset

 The time at the start (psec) this is for your own reference and is not
 critical.
 Start time is taken from the coordinate input file if IREST=1.
 Default 0.0.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
dt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
dt
\end_layout

\end_inset


\series default
 The time step (psec).
 Recommended MAXIMUM is .002 if SHAKE is used, or .001 if it isn't.
 Note that for temperatures above 300K, the step size should be reduced
 since greater temperatures mean increased velocities and longer distance
 traveled between each force evaluation, which can lead to anomalously high
 energies and system blowup.
 Default 0.001.
 
\begin_inset Newline newline
\end_inset

The use of Hydrogen Mass Repartitioning (HMR) (see 
\begin_inset CommandInset citation
LatexCommand cite
key "Hopkins15"
literal "true"

\end_inset

 and references therein for more information), together with SHAKE, allows
 the time step to be increased in a stable fashion by about a factor of
 two (up to .004) by slowing down the high frequency hydrogen motion in the
 system.
 To use HMR, the masses in the topology file need to be altered before starting
 the simulation.
 ParmEd can do this automatically with the HMassRepartition option; see
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:ParmEd"

\end_inset

 .
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
nrespa
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
nrespa
\end_layout

\end_inset


\series default
 This variable allows the user to evaluate slowly-varying terms in the force
 field less frequently.
 For PME, "slowly-varying" (now) means the reciprocal sum.
 For generalized Born runs, the "slowly-varying" forces are those involving
 derivatives with respect to the effective radii, and pair interactions
 whose distances are greater than the "inner" cutoff, currently hard-wired
 at 8 Å.
 If NRESPA
\begin_inset Formula $>$
\end_inset

1 these slowly-varying forces are evaluated every 
\shape italic
nrespa
\shape default
 steps.
 The forces are adjusted appropriately, leading to an impulse at that step.
 If 
\shape italic
nrespa*dt
\shape default
 is less than or equal to 4 fs then the energy conservation is not seriously
 compromised.
 However if 
\shape italic
nrespa*dt
\shape default
 
\begin_inset Formula $>$
\end_inset

 4 fs then the simulation becomes less stable.
 Note that energies and related quantities are only accessible every 
\shape italic
nrespa
\shape default
 steps, since the values at other times are meaningless.
\end_layout

\begin_layout Subsection

\series bold
Temperature regulation
\begin_inset CommandInset label
LatexCommand label
name "subsec:Temperature-regulation"

\end_inset


\end_layout

\begin_layout Standard
Note: Flag "ntt" is used for the temperature regulation in the default thermosta
t scheme as shown below.
 The "middle" thermostat scheme [Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:middle-scheme"

\end_inset

] is much more efficient than the default scheme to accurately sample the
 configuration/conformation space in the molecular dynamics simulation for
 the NVT ensemble.
  Please read Section           
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:middle-scheme"

\end_inset

 for more details.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
ntt
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
ntt
\end_layout

\end_inset


\series default
 Switch for temperature scaling.
 Note that setting 
\shape italic
ntt
\shape default
=0 corresponds to the microcanonical (NVE) ensemble (which should approach
 the canonical one for large numbers of degrees of freedom).
 Some aspects of the "weak-coupling ensemble" (
\shape italic
ntt
\shape default
=1) have been examined, and roughly interpolate between the microcanonical
 and canonical ensembles.
\begin_inset CommandInset citation
LatexCommand cite
key "Morishita00,Mudi04"
literal "true"

\end_inset

 The 
\shape italic
ntt
\shape default
=2 and 3 options correspond to the canonical (constant T) ensemble.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 Constant total energy classical dynamics (assuming that 
\shape italic
ntb
\shape default

\begin_inset Formula $<$
\end_inset

2, as should probably always be the case when 
\shape italic
ntt=0
\shape default
).
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

3 Use Langevin dynamics with the collision frequency 
\begin_inset Formula $\gamma$
\end_inset

 given by 
\shape italic
gamma_ln
\shape default
, discussed below.
 Note that when 
\begin_inset Formula $\gamma$
\end_inset

 has its default value of zero, this is the same as setting 
\shape italic
ntt
\shape default
 = 0.
 Since Langevin simulations are highly susceptible to "synchronization"
 artifacts,
\begin_inset CommandInset citation
LatexCommand citep
key "Uberuaga04,Sindhikara09"
literal "true"

\end_inset

 you should explicitly set the 
\shape italic
ig
\shape default
 variable (described below) to a different value at each restart of a given
 simulation.
 (Setting 
\begin_inset Formula $ig=-1$
\end_inset

 will randomize this starting seed, based on the system clock.)
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

10 Stochastic Isokinetic Nose-Hoover RESPA integrator 
\begin_inset CommandInset citation
LatexCommand citep
key "Tuckerman13"
literal "true"

\end_inset

.
 A novel isokinetic integrator developed by Tuckerman and co-workers that
 invokes an isokinetic constraint on the particle velocities combined with
 
\emph on
nkija
\emph default
 (see below) auxiliary thermostat velocities 
\emph on
v1
\emph default
 and 
\emph on
v2
\emph default
.
 The integrator includes a stochastic component in the equations of motion,
 which introduces white noise into the system, for the purpose of minimizing
 resonance instabilities in the velocities, ultimately allowing for larger
 RESPA steps.
 The isokinetic constraint has the form 
\begin_inset Formula $mv^{2}+\frac{L}{L+1}\sum_{i=1}^{L}Q_{1}v_{1i}^{2}=Lk_{B}T$
\end_inset

.
 Here 
\emph on
L
\emph default
 is the number of additional thermostat degrees of freedom, defined in AMBER
 as 
\emph on
nkija
\emph default
 (see below), and 
\begin_inset Formula $Q_{1}$
\end_inset

is the thermostat mass, determined from 
\emph on
sinrtau
\emph default
 (below), 
\emph on

\begin_inset Formula $v$
\end_inset


\emph default
 is the particle velocity and 
\begin_inset Formula $v_{1}$
\end_inset

 is one of two auxiliary velocities (e.g.
 thermostat velocities), and 
\begin_inset Formula $m$
\end_inset

, 
\begin_inset Formula $k_{B}$
\end_inset

, and 
\begin_inset Formula $T$
\end_inset

, are the particle mass, Boltzmann constant, and system temperature (
\emph on
temp0
\emph default
), respectively.
 In using this integrator, the system is placed in the isokinetic ensemble,
 as such the velocities are NOT canonical and no thermodynamic observables
 can be derived from them.
 This will lead to anomalous temperature readings throughout the simulation
 - for 1 thermostat degree of freedom (
\emph on

\begin_inset Formula $L$
\end_inset


\emph default
 = 
\emph on
nkija
\emph default
 = 1) the temperature will appear about one-half the specified temperature
 (
\emph on
temp0
\emph default
), and with additional thermostat DOF, the temperature will approach, but
 never exceed, the desired temperature, 
\emph on
temp0.
 
\emph default
However, the particle coordinates ARE canonical and it can be said the configura
tions obtained from a simulation were sampled from a Boltzmann distribution
 at the specified temperature (
\emph on
temp0
\emph default
).
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
temp0
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
temp0
\end_layout

\end_inset


\series default
 Reference temperature at which the system is to be kept, if 
\shape italic
ntt
\shape default
 
\begin_inset Formula $>$
\end_inset

 0.
 Note that for temperatures above 300K, the step size should be reduced
 since increased distance traveled between evaluations can lead to SHAKE
 and other problems.
 Default 300.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
tempi
\begin_inset Index idx
status open

\begin_layout Plain Layout
tempi
\end_layout

\end_inset

 Initial temperature.
 For the initial dynamics run, (
\shape italic
ntx
\shape default
 = 1 or for Amber versions much older than 20, ntx 
\begin_inset Formula $<$
\end_inset

 3) the velocities are assigned from a Maxwellian distribution at 
\shape italic
tempi
\shape default
 K.
  If 
\shape italic
tempi
\shape default
 = 0.0, the velocities will be calculated from the forces instead.
 
\shape italic
tempi
\shape default
 has no effect if 
\shape italic
ntx
\shape default
 = 5 (for Amber versions much older than 20, if ntx 
\begin_inset Formula $>$
\end_inset

 3).
  Default 0.0.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ig
\begin_inset Index idx
status open

\begin_layout Plain Layout
ig
\end_layout

\end_inset

 The seed for the pseudo-random number generator.
 The MD starting velocity is dependent on the random number generator seed
 if 
\shape italic
tempi
\shape default
 is nonzero and 
\shape italic
ntx
\shape default
 = 1 (for Amber versions much older than 20, if ntx 
\begin_inset Formula $<$
\end_inset

 3).
 The value of this seed also affects the set of pseudo-random values used
 for Langevin dynamics or Andersen-like coupling, and hence should be set
 to a different value on each restart if 
\shape italic
ntt
\shape default
 = 2 or 3.
 If 
\emph on
ig
\emph default
 = 
\begin_inset Formula $-1$
\end_inset

 (the default) then the random seed will be based on the current date and
 time, and hence will be different for every run.
 Unless you specifically desire reproducibility, it is recommended that
 you set 
\shape italic
ig
\shape default
 = 
\begin_inset Formula $-1$
\end_inset

 for all runs involving 
\emph on
ntt
\emph default
 = 2 or 3.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
gamma_ln
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
gamma
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

ln
\end_layout

\end_inset


\series default
 The collision frequency 
\begin_inset Formula $\gamma$
\end_inset

, in ps
\begin_inset Formula $^{-1}$
\end_inset

, when 
\shape italic
ntt
\shape default
 = 3.
 Default is 0.
 A.
 See Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:middle-scheme"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for details.
 Note that it is not necessary that 
\begin_inset Formula $\gamma$
\end_inset

 approximate the physical collision frequency, which is about 50 ps
\begin_inset Formula $^{-1}$
\end_inset

 for liquid water.
 In fact, it is often advantageous, in terms of sampling
\begin_inset CommandInset citation
LatexCommand citep
key "Loncharich92,Rhee2008"
literal "true"

\end_inset

 or stability of integration
\begin_inset CommandInset citation
LatexCommand citep
key "Izaguirre01"
literal "true"

\end_inset

, to use much smaller values, around 2 to 5 ps
\begin_inset Formula $^{-1}$
\end_inset

.
\begin_inset CommandInset citation
LatexCommand cite
key "Loncharich92,Izaguirre01"
literal "true"

\end_inset

 For implicit solvent (GB), even much lower values may be useful: for example,
 setting gamma_ln to 0.01 ps
\begin_inset Formula $^{-1}$
\end_inset

 can lead to significant, up to 100-fold in some cases, speedup of conformationa
l sampling.
\begin_inset CommandInset citation
LatexCommand citep
key "Anandakrishnan2015"
literal "true"

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The recommended value for 
\shape italic
gamma_ln
\shape default
 is related to the characteristic frequency (
\begin_inset Formula $\tilde{\omega}$
\end_inset

) of the specific system.
 The characteristic time of the potential energy autocorrelation function
 is 
\begin_inset Formula 
\begin{equation}
\tau_{UU}=\int_{0}^{\infty}\frac{\langle U(0)U(t)\rangle-\langle U\rangle^{2}}{\langle U^{2}\rangle-\langle U\rangle^{2}}\,\mathrm{d}t
\end{equation}

\end_inset

The optimal value of the thermostat parameter that produces the minimum
 correlation time of the potential is 
\begin_inset Formula $\xi^{opt}\approx\tilde{\omega}$
\end_inset

 for Langevin dynamics and 
\begin_inset Formula $\xi^{opt}\approx\sqrt{2}\tilde{\omega}$
\end_inset

 for the Andersen thermostat, as the time interval 
\begin_inset Formula $\Delta t$
\end_inset

 approaches zero.
 E.g.
 for a HO molecule, the frequency of the O-H stretch is around 3600 cm
\begin_inset Formula $^{-1}$
\end_inset

(
\begin_inset space ~
\end_inset

680 ps
\begin_inset Formula $^{-1}$
\end_inset

), so one can choose 680 ps
\begin_inset Formula $^{-1}$
\end_inset

 as the value of 
\shape italic
therm_par
\shape default
 when Langevin dynamics is used, or 960 ps
\begin_inset Formula $^{-1}$
\end_inset

 when the Andersen thermostat is employed.
 When the time interval 
\begin_inset Formula $\Delta t$
\end_inset

 is finite in the two thermostatting methods, while the characteristic correlati
on time goes to infinity as the thermostat parameter approaches zero, the
 characteristic correlation time gradually reaches a plateau as the thermostat
 parameter increases.
 (Please see Refs.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Langevin-virtual-2017, Andersen-virtual-2017, LFMiddle-2018"
literal "true"

\end_inset

 for more discussion.) When condensed phase systems are simulated, it is
 not straightforward to estimate the optimal thermostat parameter(s) that
 could be related to the mixing of frequencies (or time scales) of the system
 
\begin_inset CommandInset citation
LatexCommand citep
key "Andersen80"
literal "true"

\end_inset

.
  Some numerical tests are necessary for obtaining the reasonable region
 for the thermostat parameter such that the characteristic time divided
 by the time interval is relatively small.
  (This is true not only for the  
\begin_inset Quotes eld
\end_inset

middle
\begin_inset Quotes erd
\end_inset

 scheme but for all thermostat algorithms.)   For a liquid water system (216
 water molecules in a cell with periodic boundary conditions) with no holonomic
 constraints, the thermostat parameter is usually chosen to be 
\begin_inset Formula $2-50$
\end_inset

 ps
\begin_inset Formula $^{-1}$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
vlimit
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
vlimit
\end_layout

\end_inset


\series default
 If not equal to 0.0, then any component of the velocity that is greater
 than abs(VLIMIT) will be reduced to VLIMIT (preserving the sign).
 This can be used to avoid occasional instabilities in molecular dynamics
 runs.
 VLIMIT should generally be set to a value like 20 (the default), which
 is well above the most probable velocity in a Maxwell-Boltzmann distribution
 at room temperature.
 A warning message will be printed whenever the velocities are modified.
 Runs that have more than a few such warnings should be carefully examined.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nkija
\series bold

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\series medium
nkija
\end_layout

\end_inset

 
\series default
For use with 
\emph on
ntt=10
\emph default
.
 This specifies the number of additional auxiliary velocity variables 
\emph on
v1
\emph default
 and 
\emph on
v2
\emph default
, which will total nkija
\begin_inset Formula $\times$
\end_inset


\emph on
v1
\emph default
 
\begin_inset Formula $+$
\end_inset

nkija
\begin_inset Formula $\times$
\end_inset


\emph on
v2 
\begin_inset CommandInset citation
LatexCommand citep
key "Tuckerman13"
literal "true"

\end_inset

.

\emph default
 Default is 1.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
sinrtau
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sinrtau
\end_layout

\end_inset

 For the SINR (Stochastic Isokinetic Nose-Hoover RESPA) integrator (
\emph on
ntt=10
\emph default
), this specifies the time scale for determining the masses associated with
 the two auxiliary velocity variables 
\emph on
v1
\emph default
 and 
\emph on
v2
\emph default
 (e.g.
 thermostat velocities) and hence the magnitude of the coupling of the physical
 velocities with the auxiliary velocities.
 Generally this should be related to the time scale of the system.
 See 
\begin_inset CommandInset citation
LatexCommand citep
key "Tuckerman13"
literal "true"

\end_inset

 for more explanation.
 Default is 1.0.
\end_layout

\begin_layout Subsection

\series bold
Pressure regulation
\end_layout

\begin_layout Standard
In "constant pressure" dynamics, the volume of the unit cell is adjusted
 (by small amounts on each step) to make the computed pressure approach
 the target pressure, 
\shape italic
pres0
\shape default
.
 Equilibration with 
\shape italic
ntp
\shape default
 
\begin_inset Formula $>$
\end_inset

 0 is generally necessary to adjust the density of the system to appropriate
 values.
 Pressure regulation only applies when Constant Pressure periodic boundary
 conditions are used (
\shape italic
ntp > 0
\shape default
).
 The Monte Carlo barostat samples rigorously from the isobaric-isothermal
 ensemble and does not necessitate computing the virial.
 Please note: in general you will need to equilibrate the temperature to
 something like the final temperature using constant volume (
\shape italic
ntp
\shape default
=0) 
\shape italic
before
\shape default
 switching on constant pressure simulations to adjust the system to the
 correct density.
 If you fail to do this, the program will try to adjust the density too
 quickly, and bad things (such as SHAKE failures) are likely to happen.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
ntp
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
ntp
\end_layout

\end_inset


\series default
 Flag for constant pressure dynamics.
 This option should be set to 1 or 2 when Constant Pressure periodic boundary
 conditions are used.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 No pressure scaling (Default)
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 md with isotropic position scaling 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
barostat
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
barostat
\end_layout

\end_inset

 Flag used to control which barostat to use in order to control the pressure.
\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

2 Monte Carlo barostat 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
mcbarint
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
mcbarint
\end_layout

\end_inset

 Number of steps between volume change attempts performed as part of the
 Monte Carlo barostat.
 Default is 100.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
pres0
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
pres0
\end_layout

\end_inset


\series default
 Reference pressure (in units of bars, where 1 bar ≈ 0.987 atm) at which
 the system is maintained ( when NTP 
\begin_inset Formula $>$
\end_inset

 0).
 Default 1.0.
 
\end_layout

\begin_layout Subsubsection*

\series bold
Surface tension regulation
\end_layout

\begin_layout Standard
Constant surface tension is used in statistical ensembles for simulating
 liquid interfaces.
 This is primarily intended for lipid membrane simulations with two or more
 interfaces.
 Constant surface tension is only available for simulations with anisotropic
 pressure or semiisotropic scaling.
 This algorithm is an extension to the Berendsen pressure scaling algorithm
 that adjusts the tangential pressure evaluation in order to maintain a
 
\begin_inset Quotes eld
\end_inset

constant
\begin_inset Quotes erd
\end_inset

 surface tension.
\begin_inset CommandInset citation
LatexCommand citep
key "Zhang95"
literal "true"

\end_inset

 Since the surface tension is a function of the pressure tensor, fluctuations
 of the surface tension will be large.
\end_layout

\begin_layout Standard
In order to use constant surface tension, periodic boundary conditions (ntb
 = 2), anisotropic or semiisotropic pressure scaling (ntp = 2 or ntp =3),
 and an orthogonal box must be used.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
csurften
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
csurften
\end_layout

\end_inset


\series default
 Flag for constant surface tension dynamics.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 No constant surface tension (default)
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 Constant surface tension with interfaces in the yz plane
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 Constant surface tension with interfaces in the xz plane
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

3 Constant surface tension with interfaces in the xy plane
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
gamma_ten
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
gamma_ten
\end_layout

\end_inset


\series default
 Surface tension value in units of dyne/cm.
 Default value is 0.0 dyne/cm.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
ninterface
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
ninterface
\end_layout

\end_inset


\series default
 Number of interfaces in the periodic box.
 There must be at least two interfaces in the periodic box.
 Two interfaces is appropriate for a lipid bilayer system and is the default
 value.
\end_layout

\begin_layout Subsection

\series bold
SHAKE bond length constraints
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
ntc
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
ntc
\end_layout

\end_inset


\series default
 Flag for SHAKE to perform bond length constraints.
\begin_inset CommandInset citation
LatexCommand cite
key "Ryckaert77"
literal "true"

\end_inset

 (See also NTF in the 
\series bold
Potential function
\series default
 section.
 In particular, typically NTF = NTC.) The SHAKE option should be used for
 most MD calculations.
 The size of the MD timestep is determined by the fastest motions in the
 system.
 SHAKE removes the bond stretching freedom, which is the fastest motion,
 and consequently allows a larger timestep to be used.
 For water models, a special "three-point" algorithm is used.
\begin_inset CommandInset citation
LatexCommand cite
key "Miyamoto92"
literal "true"

\end_inset

 Consequently, to employ TIP3P set NTF = NTC = 2.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Since SHAKE is an algorithm based on dynamics, the minimizer is not aware
 of what SHAKE is doing; for this reason, minimizations generally should
 be carried out without SHAKE.
 One exception is short minimizations whose purpose is to remove bad contacts
 before dynamics can begin.
\end_layout

\begin_layout Standard
For parallel versions of 
\shape italic
sander
\shape default
 only intramolecular atoms can be constrained.
 Thus, such atoms must be in the same chain of the originating PDB file.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 SHAKE is not performed (default) 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 bonds involving hydrogen are constrained 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

3 all bonds are constrained (not available for parallel or qmmm runs in
 
\shape italic
sander
\shape default
) 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
tol
\begin_inset Index idx
status open

\begin_layout Plain Layout
tol
\end_layout

\end_inset

 Relative geometrical tolerance for coordinate resetting in shake.
 Recommended maximum: 
\begin_inset Formula $<$
\end_inset

0.00005 Angstrom Default 0.00001.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
jfastw
\begin_inset Index idx
status open

\begin_layout Plain Layout
jfastw
\end_layout

\end_inset

 Fast water definition flag.
 By default, the system is searched for water residues, and special routines
 are used to SHAKE these systems.
\begin_inset CommandInset citation
LatexCommand cite
key "Miyamoto92"
literal "true"

\end_inset

 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 Normal operation.
 Waters are identified by the default names (given below), unless they are
 redefined, as described below.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

4 Do not use the fast SHAKE routines for waters.
 
\end_layout

\begin_layout Standard
The following variables allow redefinition of the default residue and atom
 names used by the program to determine which residues are waters.
 
\end_layout

\begin_layout Description
WATNAM The residue name the program expects for water.
 Default 'WAT '.
 
\end_layout

\begin_layout Description
OWTNM The atom name the program expects for the oxygen of water.
 Default 'O '.
 
\end_layout

\begin_layout Description
HWTNM1 The atom name the program expects for the 1st H of water.
 Default 'H1 '.
 
\end_layout

\begin_layout Description
HWTNM2 The atom name the program expects for the 2nd H of water.
 Default 'H2 '.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
noshakemask
\begin_inset Index idx
status open

\begin_layout Plain Layout
noshakemask
\end_layout

\end_inset

 String that specifies atoms that are not to be shaken (assuming that ntc
\begin_inset Formula $>$
\end_inset

1).
 Any bond that would otherwise be shaken by virtue of the 
\shape italic
ntc
\shape default
 flag, but which involves an atom flagged here, will *not* be shaken.
 The syntax for this string is given in Chap.
 13.5.
 Default is an empty string, which matches nothing.
 A typical use would be to remove SHAKE constraints from all or part of
 a solute, while still shaking rigid water models like TIPnP or SPC/E.
 Another use would be to turn off SHAKE constraints for the parts of the
 system that are being changed with thermodynamic integration, or which
 are the EVB or quantum regions of the system.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
If this option is invoked, then all parts of the potential must be evaluated,
 that is, 
\shape italic
ntf
\shape default
 must be one.
 The code enforces this by setting 
\shape italic
ntf
\shape default
 to 1 when a 
\shape italic
noshakemask
\shape default
 string is present in the input.
\end_layout

\begin_layout Standard
If you want the 
\shape italic
noshakemask
\shape default
 to apply to all or part of the water molecules, you must also set 
\shape italic
jfastw=4
\shape default
, to turn off the special code for water SHAKE.
 (If you are not shaking waters, you presumably also want to issue the "set
 default FlexibleWater on" command in LEaP; see that chapter for more informatio
n.)
\end_layout

\end_deeper
\begin_layout Subsection

\series bold
NMR refinement options
\end_layout

\begin_layout Standard
(Users to should consult the section NMR refinement to see the context of
 how the following parameters would be used.)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
iscale
\begin_inset Index idx
status open

\begin_layout Plain Layout
iscale
\end_layout

\end_inset

 Number of additional variables to optimize beyond the 3N structural parameters.
 (Default = 0).
 At present, this is only used with residual dipolar coupling and CSA or
 pseudo-CSA restraints.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
noeskp
\begin_inset Index idx
status open

\begin_layout Plain Layout
noeskp
\end_layout

\end_inset

 The NOESY volumes will only be evaluated if mod(nstep, noeskp) = 0; otherwise
 the last computed values for intensities and derivatives will be used.
 (default = 1, i.e.
 evaluate volumes at every step) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ipnlty
\begin_inset Index idx
status open

\begin_layout Plain Layout
ipnlty
\end_layout

\end_inset

 This parameter determines the the functional form of the penalty function
 for NOESY volume and chemical shift restraints.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

1 the program will minimize the sum of the absolute values of the errors;
 this is akin to minimizing the crystallographic R-factor (default).
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 the program will optimize the sum of the squares of the errors.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

3 For NOESY intensities, the penalty will be of the form 
\begin_inset Formula $awt[I_{c}^{1/6}-I_{o}^{1/6}]^{2}$
\end_inset

.
 Chemical shift penalties will be as for 
\shape italic
ipnlty=1
\shape default
.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
mxsub
\begin_inset Index idx
status open

\begin_layout Plain Layout
mxsub
\end_layout

\end_inset

 Maximum number of submolecules that will be used.
 This is used to determine how much space to allocate for the NOESY calculations.
 Default 1.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
scalm
\begin_inset Index idx
status open

\begin_layout Plain Layout
scalm
\end_layout

\end_inset

 "Mass" for the additional scaling parameters.
 Right now they are restricted to all have the same value.
 The larger this value, the slower these extra variables will respond to
 their environment.
 Default 100 amu.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
pencut
\begin_inset Index idx
status open

\begin_layout Plain Layout
pencut
\end_layout

\end_inset

 In the summaries of the constraint deviations, entries will only be made
 if the penalty for that term is greater than PENCUT.
 Default 0.1.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
tausw
\begin_inset Index idx
status open

\begin_layout Plain Layout
tausw
\end_layout

\end_inset

 For noesy volume calculations (
\shape italic
NMROPT = 2
\shape default
), intensities with mixing times less that TAUSW (in seconds) will be computed
 using perturbation theory, whereas those greater than TAUSW will use a
 more exact theory.
 See the theory section (below) for details.
 To always use the "exact" intensities and derivatives, set TAUSW = 0.0;
 to always use perturbation theory, set TAUSW to a value larger than the
 largest mixing time in the input.
 Default is TAUSW of 0.1 second, which should work pretty well for most systems.
\end_layout

\begin_layout Subsection

\series bold
EMAP restraints
\end_layout

\begin_layout Standard
EMAP restraints are used to perform targeted conformational search (TCS)
\begin_inset CommandInset citation
LatexCommand citep
key "Wu13"
literal "true"

\end_inset

.
 EMAP uses maps to define restraints to maintain conformations and/or to
 induce simulation systems to the target conformations.
 The restraint map can be either obtained from electron microscopy experiments
 or derived from known protein structures, or defined from initial simulation
 coordinates.
 EMAP can be used to do rigid docking of molecules into maps and to do flexible
 fitting to obtain conformations defined by experimental maps.
 EMAP can also be used to maintain conformations of protein domains when
 studying large scale conformational change.
 Users should consult the section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:EMAPcons"

\end_inset

 to see how to define EMAP restraints.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
iemap
\begin_inset Index idx
status open

\begin_layout Plain Layout
iemap
\end_layout

\end_inset

 Turn on EMAP restrained simulation when 
\shape italic
iemap
\shape default
>0.
 (Default = 0).
 EMAP restraint information must be input from 
\shape italic
&emap
\shape default
 namelists in the input file.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
gammamap
\begin_inset Index idx
status open

\begin_layout Plain Layout
gammamap
\end_layout

\end_inset

 Friction constant for the EMAP restraint maps when allowed to move.
 (Default=1/ps).
 (See Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:EMAPcons"

\end_inset

)
\end_layout

\begin_layout Section

\series bold
\begin_inset CommandInset label
LatexCommand label
name "sec:Potential-function-parameters"

\end_inset

Potential function parameters
\end_layout

\begin_layout Standard
The parameters in this section generally control what sort of force field
 (or potential function) is used for the simulation.
\end_layout

\begin_layout Subsection

\series bold
Generic parameters
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
ntf
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
ntf
\end_layout

\end_inset


\series default
 Force evaluation.
 Note: If SHAKE is used (see NTC), it is not necessary to calculate forces
 for the constrained bonds.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

1 complete interaction is calculated (default) 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 bond interactions involving H-atoms omitted (use with NTC=2) 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

3 all the bond interactions are omitted (use with NTC=3) 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

4 angle involving H-atoms and all bonds are omitted 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

5 all bond and angle interactions are omitted 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

6 dihedrals involving H-atoms and all bonds and all angle interactions are
 omitted 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

7 all bond, angle and dihedral interactions are omitted 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

8 all bond, angle, dihedral and non-bonded interactions are omitted 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
ntb
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
ntb
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sander_ntb"

\end_inset


\series default
 This variable controls whether or not periodic boundaries are imposed on
 the system during the calculation of non-bonded interactions.
 Bonds spanning periodic boundaries are not yet supported.
 There is no longer any need to set this variable, since it can be determined
 from igb and ntp parameters.
 The 
\begin_inset Quotes eld
\end_inset

proper
\begin_inset Quotes erd
\end_inset

 default for ntb is chosen (ntb=0 when igb > 0, ntb=2 when ntp > 0, and
 ntb=1 otherwise).
 This behavior can be overridden by supplying an explicit value, although
 this is discouraged to prevent errors.
 The allowed values for NTB are
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 no periodicity is applied and PME is off (default when igb > 0)
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 constant volume (default when igb and ntp are both 0, which are their
 defaults) 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 constant pressure (default when ntp > 0)
\end_layout

\begin_layout Standard
If NTB is nonzero then there must be a periodic boundary in the topology
 file.
 Constant pressure is not used in minimization (IMIN=1, above).
\end_layout

\begin_layout Standard
For a periodic system, constant pressure is the only way to equilibrate
 density if the starting state is not correct.
 For example, the solvent packing scheme used in LEaP can result in a net
 void when solvent molecules are subtracted which can aggregate into "vacuum
 bubbles" in a constant volume run.
 Another potential problem are small gaps at the edges of the box.
 The upshot is that almost every system needs to be equilibrated at constant
 pressure (
\shape italic
ntb=2, ntp
\begin_inset Formula $>$
\end_inset

0
\shape default
) to get to a proper density.
 But be sure to equilibrate first (at constant volume) to something close
 to the final temperature, before turning on constant pressure.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
dielc
\begin_inset Index idx
status open

\begin_layout Plain Layout
dielc
\end_layout

\end_inset

 Dielectric multiplicative constant for the electrostatic interactions.
 Default is 1.0.
 Please note this is NOT related to dielectric constants for generalized
 Born or Poisson-Boltzmann calculations.
 It should only be used for quasi-vacuum simulations.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
cut
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
cut
\end_layout

\end_inset


\series default
 This is used to specify the nonbonded cutoff, in Angstroms.
 For PME, the cutoff is used to limit direct space sum, and 8.0 is usually
 a good value.
 When 
\shape italic
igb
\begin_inset Formula $>$
\end_inset

0
\shape default
, the cutoff is used to truncate nonbonded pairs (on an atom-by-atom basis);
 here a larger value than the default is generally required.
 A separate parameter (
\series bold
RGBMAX
\series default
) controls the maximum distance between atom pairs that will be considered
 in carrying out the pairwise summation involved in calculating the effective
 Born radii, see the generalized Born section below.
 
\begin_inset Newline newline
\end_inset

When 
\emph on
igb > 0
\emph default
, the default is 9999.0 (effectively infinite)
\begin_inset Newline newline
\end_inset

When 
\emph on
igb==0
\emph default
, the default is 8.0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
fswitch
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fswitch
\end_layout

\end_inset

 When off,
\shape italic
 fswitch<=0
\shape default
 , uses a truncation cutoff.
 When on 
\shape italic
fswitch>0
\shape default
, sets a force switching region where the force cutoff smoothly approaches
 0 between the region of the fswitch value to the cut value.
 Force values below the fswitch value follow the standard Lennard-Jones
 force.
 Default is -1.
 This option is not supported for use with GB (i.e., only 
\emph on
igb=0
\emph default
 and 
\emph on
ntb>0
\emph default
), nor is it compatible with the 12-6-4 Lennard-Jones model (
\emph on
lj1264=1
\emph default
).
 Due to performance regressions (about 20%) with running with the force
 switching on, it is recommended that simulations run with fswitch off unless
 using a force field that requires or recommends using the force switch.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nsnb
\begin_inset Index idx
status open

\begin_layout Plain Layout
nsnb
\end_layout

\end_inset

 Determines the frequency of nonbonded list updates when 
\shape italic
igb=0
\shape default
 and 
\shape italic
nbflag=0
\shape default
; see the description of 
\shape italic
nbflag
\shape default
 for more information.
 Default is 25.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
igb
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
igb
\end_layout

\end_inset


\series default
 Flag for using the generalized Born implicit solvent models.
 See Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:genborn"

\end_inset

 for information about using this option.
 Default is 0.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
irism
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
irism
\end_layout

\end_inset


\series default
 Flag for 3D-reference interaction site model (RISM) molecular solvation
 method.
 See Section
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:RISM"

\end_inset

for information about this option.
 Default is 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
lj1264
\series bold

\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
lj1264
\end_layout

\end_inset


\series default
 In general, you should rarely have to set this variable.
 When the Lennard-Jones C-coefficient is found in your prmtop file, the
 default value is set to 1 (meaning it is active).
 When this flag is 
\emph on
not 
\emph default
present in the prmtop file, the default value is set to 0 (meaning the 12-6-4
 potential 
\begin_inset CommandInset citation
LatexCommand cite
key "Li14a"
literal "true"

\end_inset

 is inactive).
 Setting this to 0 when the C-coefficient is present will forcibly turn
 off the 12-6-4 potential.
 Setting lj1264 to 1 when no C-coefficient is present will result in a fatal
 error.
 Therefore, this flag can be used to quickly disable the 
\begin_inset Formula $r^{-4}$
\end_inset

 term.
 However, the remaining L-J parameters will still be optimized for the 12-6-4
 potential, so this should only be done when testing!.
\end_layout

\begin_layout Subsection

\series bold
Particle Mesh Ewald
\end_layout

\begin_layout Standard
The Particle Mesh Ewald (PME) method is always "on", unless 
\shape italic
ntb
\shape default
 = 0.
 PME is a fast implementation of the Ewald summation method for calculating
 the full electrostatic energy of a unit cell (periodic box) in a macroscopic
 lattice of repeating images.
 The PME method is fast since the reciprocal space Ewald sums are B-spline
 interpolated on a grid and since the convolutions necessary to evaluate
 the sums are calculated via fast Fourier transforms (FFTs).
 Note that the accuracy of the PME method is related to the density of the
 charge grid (NFFT1, NFFT2, and NFFT3), the spline interpolation order (ORDER),
 and the direct sum tolerance (DSUM_TOL); see the descriptions below for
 more information.
\end_layout

\begin_layout Standard
The PME method was implemented originally in Amber 3a by Tom Darden and
 has been developed in subsequent versions by many people, in particular
 by Tom Darden, Celeste Sagui, Tom Cheatham and Mike Crowley.
\begin_inset CommandInset citation
LatexCommand cite
key "Darden93,Essmann95,Crowley97,Sagui99"
literal "true"

\end_inset

 Generalizations of this method to systems with polarizable dipoles and
 electrostatic multipoles are described in Refs.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Toukmaji00,Sagui04"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
The &
\family typewriter
ewald
\family default
 namelist is read immediately after the 
\family typewriter
&cntrl
\family default
 namelist.
 We have tried hard to make the defaults for these parameters appropriate
 for solvated simulations.
 
\shape italic
Please take care in changing any values from their defaults.

\shape default
 The 
\family typewriter
&ewald
\family default
 namelist has the following variables: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nfft1,
\begin_inset space ~
\end_inset

nfft2,
\begin_inset space ~
\end_inset

nfft3
\begin_inset Index idx
status open

\begin_layout Plain Layout
nfft3
\end_layout

\end_inset

 These give the size of the charge grid (upon which the reciprocal sums
 are interpolated) in each dimension.
 Higher values lead to higher accuracy (when the DSUM_TOL is also lowered)
 but considerably slow the calculation.
 Generally it has been found that reasonable results are obtained when NFFT1,
 NFFT2 and NFFT3 are approximately equal to A, B and C, respectively, leading
 to a grid spacing (A/NFFT1, etc.) of 1.0 Å.
 Significant performance enhancement in the calculation of the fast Fourier
 transform is obtained by having each of the integer NFFT1, NFFT2 and NFFT3
 values be a 
\shape italic
product of powers
\shape default
 of 2, 3, and/or 5.
 If the values are not given, the program will chose values to meet these
 criteria.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
order
\begin_inset Index idx
status open

\begin_layout Plain Layout
order
\end_layout

\end_inset

 The order of the B-spline interpolation.
 The higher the order, the better the accuracy (unless the charge grid is
 too coarse).
 The minimum order is 3.
 An order of 4 (the default) implies a cubic spline approximation which
 is a good standard value.
 Note that the cost of the PME goes as roughly the order to the third power.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
verbose
\begin_inset Index idx
status open

\begin_layout Plain Layout
verbose
\end_layout

\end_inset

 Standard use is to have VERBOSE = 0.
 Setting VERBOSE to higher values (up to a maximum of 3) leads to voluminous
 output of information about the PME run.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
dsum_tol
\begin_inset Index idx
status open

\begin_layout Plain Layout
dsum
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

tol
\end_layout

\end_inset

 This relates to the width of the direct sum part of the Ewald sum, requiring
 that the value of the direct sum at the Lennard-Jones cutoff value (specified
 in CUT as during standard dynamics) be less than DSUM_TOL.
 In practice it has been found that the relative error in the Ewald forces
 (RMS) due to cutting off the direct sum at CUT is between 10.0 and 50.0 times
 DSUM_TOL.
 Standard values for DSUM_TOL are in the range of 10
\begin_inset Formula $^{-6}$
\end_inset

 to 10
\begin_inset Formula $^{-5}$
\end_inset

 , leading to estimated RMS deviation force errors of 0.00001 to 0.0005.
 Default is 10
\begin_inset Formula $^{-5}$
\end_inset

.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
rsum_tol
\begin_inset Index idx
status open

\begin_layout Plain Layout
rsum
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

tol
\end_layout

\end_inset

 This serves as a way to generate the number of reciprocal vectors used
 in an Ewald sum.
 Typically the relative RMS reciprocal sum error is about 5-10 times RSUM_TOL.
 Default is 5 x 10
\begin_inset Formula $^{-5}$
\end_inset

.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mlimit
\begin_inset Index idx
status open

\begin_layout Plain Layout
mlimit
\end_layout

\end_inset

(1,2,3) This allows the user to explicitly set the number of reciprocal
 vectors used in a regular Ewald run.
 Note that the sum goes from -MLIMIT(2) to MLIMIT(2) and -MLIMIT(3) to MLIMIT(3)
 with symmetry being used in first dimension.
 Note also the sum is truncated outside an automatically chosen sphere.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ew_coeff
\begin_inset Index idx
status open

\begin_layout Plain Layout
ew
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

coeff
\end_layout

\end_inset

 Ewald coefficient, in 
\begin_inset Formula $\textrm{Å}^{-1}$
\end_inset

 .
 Default is determined by 
\shape italic
dsum_tol
\shape default
 and 
\shape italic
cutoff
\shape default
.
 If it is explicitly inputed then that value is used, and 
\shape italic
dsum_tol
\shape default
 is computed from 
\shape italic
ew_coeff
\shape default
 and 
\shape italic
cutoff
\shape default
.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nbflag
\begin_inset Index idx
status open

\begin_layout Plain Layout
nbflag
\end_layout

\end_inset

 If 
\shape italic
nbflag = 0
\shape default
, construct the direct sum nonbonded list in the "old" way, 
\begin_inset Formula $i.e.$
\end_inset

 update the list every 
\shape italic
nsnb
\shape default
 steps.
 If 
\shape italic
nbflag = 1
\shape default
 (the default when 
\shape italic
imin = 0
\shape default
 or 
\shape italic
ntb 
\begin_inset Formula $>$
\end_inset

 0
\shape default
), 
\shape italic
nsnb
\shape default
 is ignored, and the list is updated whenever any atom has moved more than
 1/2 
\shape italic
skinnb
\shape default
 since the last list update.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
skinnb
\begin_inset Index idx
status open

\begin_layout Plain Layout
skinnb
\end_layout

\end_inset

 Width of the nonbonded "skin".
 The direct sum nonbonded list is extended to 
\shape italic
cut
\shape default
 + 
\shape italic
skinnb
\shape default
, and the van der Waals and direct electrostatic interactions are truncated
 at 
\shape italic
cut
\shape default
.
 Default is 2.0 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AA
\end_layout

\end_inset

.
 Use of this parameter is required for energy conservation, and recommended
 for all PME runs.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
netfrc
\begin_inset Index idx
status open

\begin_layout Plain Layout
netfrc
\end_layout

\end_inset

 The basic "smooth" PME implementation used here does not necessarily conserve
 momentum.
 If 
\shape italic
netfrc = 1
\shape default
, (the default) the total force on the system is artificially removed at
 every step.
 This parameter is set to 0 if minimization is requested, which implies
 that the gradient is an accurate derivative of the energy.
 You should only change this parameter if you really know what you are doing.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
vdwmeth
\begin_inset Index idx
status open

\begin_layout Plain Layout
vdwmeth
\end_layout

\end_inset

 Determines the method used for van der Waals interactions beyond those
 included in the direct sum.
 A value of 0 includes no correction; the default value of 1 uses a continuum
 model correction for energy and pressure.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
eedmeth
\begin_inset Index idx
status open

\begin_layout Plain Layout
eedmeth
\end_layout

\end_inset

 Determines how the switch function for the direct sum Coulomb interaction
 is evaluated.
 The default value of 1 uses a cubic spline.
 A value of 2 implies a linear table lookup.
 A value of three implies use of an "exact" subroutine call.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
eedtbdns
\begin_inset Index idx
status open

\begin_layout Plain Layout
eedtbdns
\end_layout

\end_inset

 Density of spline or linear lookup table, if 
\shape italic
eedmeth
\shape default
 is 1 or 2.
 Default is 500 points per unit.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
column_fft
\begin_inset Index idx
status open

\begin_layout Plain Layout
column
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

fft
\end_layout

\end_inset

 1 or 0 flag to turn on or off, respectively, column-mode fft for parallel
 runs.
 The default mode is slab mode which is efficient for low processor counts.
 The column method can be faster for larger processor counts since there
 can be more columns than slabs and the communications pattern is less congested.
 This flag has no effect on non-parallel runs.
 Users should test the efficiency of the method in comparison to the default
 method before performing long calculations.
 Default is 0 (off).
\end_layout

\begin_layout Subsection

\series bold
Extra point options 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Extra-point-options"

\end_inset


\end_layout

\begin_layout Standard
Several parameters deal with "extra-points" (sometimes called lone-pairs),
 which are force centers that are not at atomic positions.
 These are currently defined as atoms with "EP" in their names.
 These input variables are really only for the convenience of force-field
 developers; 
\shape italic
do not change the defaults unless you know what you are doing, and have
 read the code.

\shape default
 These variables are set in the &ewald namelist.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
frameon
\begin_inset Index idx
status open

\begin_layout Plain Layout
frameon
\end_layout

\end_inset

 If 
\shape italic
frameon
\shape default
 is set to 1, (default) the bonds, angles and dihedral interactions involving
 the lone pairs/extra points are removed except for constraints added during
 parm.
 The lone pairs are kept in ideal geometry relative to local atoms, and
 resulting torques are transferred to these atoms.
 To treat extra points as regular atoms, set frameon=0.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
chngmask
\begin_inset Index idx
status open

\begin_layout Plain Layout
chngmask
\end_layout

\end_inset

 
\shape italic
\emph on
If
\shape default
\emph default
 
\shape italic
chngmask
\shape default
=1 (default), new 1-1, 1-2, 1-3 and 1-4 interactions are calculated.
 An extra point belonging to an atom has a 1-1 interaction with it, and
 participates in any 1-2, 1-3 or 1-4 interaction that atom has.
 For example, suppose (excusing the geometry) C1,C2,C3,C4 form a dihedral
 and each has 1 extra point attached as below
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
C1------C2------C3------C4
\end_layout

\begin_layout LyX-Code
 
\series bold
|      |       |       |
\end_layout

\begin_layout LyX-Code
Ep1    Ep2     Ep3     Ep4
\end_layout

\begin_layout Standard
The 1-4 interactions include C1-C4, Ep1-C4, C1-Ep4, and Ep1-Ep4.
 (To see a printout of all 1-1, 1-2, 1-3 and 1-4 interactions set verbose=1.)
 These interactions are masked out of nonbonds.
 Thus the amber mask list is rebuilt from these 1-1, 1-2, 1-3 and 1-4 pairs.
 A separate list of 1-4 nonbonds is then compiled.
 This list does not agree in general with the above 1-4, since a 1-4 could
 also be a 1-3 if its in a ring.
 See the 
\shape italic
ephi()
\shape default
 routine for the precise algorithm involved here.
 The list of 1-4 nonbonds is printed if 
\shape italic
verbose=1.
\end_layout

\end_deeper
\begin_layout Subsection

\series bold
Detailed MPI Timings
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
profile_mpi
\begin_inset Index idx
status open

\begin_layout Plain Layout
profile
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

mpi
\end_layout

\end_inset

 Adjusts whether detailed per thread timings should be written to a file
 called profile_mpi when running sander in parallel.
 By default only average timings are printed to the output file.
 This is done for performance reasons, especially when running 
\emph on
multisander
\emph default
 runs.
 However for development it is useful to know the individual timings for
 each mpi thread.
 When running in serial the value of profile_mpi is ignored.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 No detailed MPI timings will be written (default).
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 A detailed breakdown of the timings for each MPI thread will be written
 to the file: profile_mpi.
\end_layout

\end_deeper
\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Varying-conditions"

\end_inset

Varying conditions
\end_layout

\begin_layout Standard
This section of information is read (
\shape italic
if NMROPT 
\begin_inset Formula $>$
\end_inset

 0
\shape default
) as a series of namelist specifications, with name "&wt".
 This namelist is read repeatedly until a namelist &wt statement is found
 with TYPE=END.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
TYPE Defines quantity being varied; valid options are listed below.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ISTEP1,ISTEP2 This change is applied over steps/iterations ISTEP1 through
 ISTEP2.
 If ISTEP2 = 0, this change will remain in effect from step ISTEP1 to the
 end of the run at a value of VALUE1 (VALUE2 is ignored in this case).
 
\shape italic
(default= both 0)
\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
VALUE1,VALUE2 Values of the change corresponding to ISTEP1 and ISTEP2, respectiv
ely.
 If ISTEP2=0, the change is fixed at VALUE1 for the remainder of the run,
 once step ISTEP1 is reached.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
IINC If IINC 
\begin_inset Formula $>$
\end_inset

 0, then the change is applied as a step function, with IINC steps/iterations
 between each change in the target VALUE (ignored if ISTEP2=0).
 If IINC =0, the change is done continuously.
 
\shape italic
(default=0)
\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
IMULT If IMULT=0, then the change will be linearly interpolated from VALUE1
 to VALUE2 as the step number increases from ISTEP1 to ISTEP2.
 
\shape italic
(default)
\shape default
 If IMULT=1, then the change will be effected by a series of multiplicative
 scalings, using a single factor, R, for all scalings.
 i.e.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
VALUE2 = (R**INCREMENTS) * VALUE1.
 
\end_layout

\begin_layout Standard
INCREMENTS is the number of times the target value changes, which is determined
 by ISTEP1, ISTEP2, and IINC.
 
\end_layout

\end_deeper
\begin_layout Standard
The remainder of this section describes the options for the TYPE parameter.
 For a few types of cards, the meanings of the other variables differ from
 that described above; such differences are noted below.
 Valid Options for TYPE (you must use uppercase) are: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
BOND Varies the relative weighting of bond energy terms.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ANGLE Varies the relative weighting of valence angle energy terms.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
TORSION Varies the relative weighting of torsion (and J-coupling) energy
 terms.
 Note that any restraints defined in the input to the PARM program are included
 in the above.
 Improper torsions are handled separately (IMPROP).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
IMPROP Varies the relative weighting of the "improper" torsional terms.
 These are not included in TORSION.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
VDW Varies the relative weighting of van der Waals energy terms.
 This is equivalent to changing the well depth (epsilon) by the given factor.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
HB Varies the relative weighting of hydrogen-bonding energy terms.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ELEC Varies the relative weighting of electrostatic energy terms.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
NB Varies the relative weights of the non-bonded (VDW, HB, and ELEC) terms.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ATTRACT Varies the relative weights of the attractive parts of the van der
 waals and h-bond terms.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
REPULSE Varies the relative weights of the repulsive parts of the van der
 waals and h-bond terms.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
RSTAR Varies the effective van der Waals radii for the van der Waals (VDW)
 interactions by the given factor.
 Note that this is done by changing the relative attractive and repulsive
 coefficients, so ATTRACT/REPULSE should not be used over the same step
 range as RSTAR.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
INTERN Varies the relative weights of the BOND, ANGLE and TORSION terms.
 "Improper" torsions (IMPROP) must be varied separately.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ALL Varies the relative weights of all the energy terms above (BOND, ANGLE,
 TORSION, VDW, HB, and ELEC; does not affect RSTAR or IMPROP).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
REST Varies the relative weights of *all* the NMR restraint energy terms.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
RESTS Varies the weights of the "short-range" NMR restraints.
 Short- range restraints are defined by the SHORT instruction (see below).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
RESTL Varies the weights of any NMR restraints which are not defined as
 "short range" by the SHORT instruction (see below).
 When no SHORT instruction is given, RESTL is equivalent to REST.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
NOESY Varies the overall weight for NOESY volume restraints.
 Note that this value multiplies the individual weights read into the "awt"
 array.
 (Only if NMROPT=2; see Section 4 below).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
SHIFTS Varies the overall weight for chemical shift restraints.
 Note that this value multiplies the individual weights read into the "wt"
 array.
 (Only if NMROPT=2; see section 4 below).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
XRAY Varies the xray_weight restraint weight.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
SHORT Defines the short-range restraints.
 For this instruction, ISTEP1, ISTEP2, VALUE1, and VALUE2 have different
 meanings.
 A short-range restraint can be defined in two ways.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
(1) If the residues containing each pair of bonded atoms comprising the
 restraint are close enough in the primary sequence:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
ISTEP1 
\begin_inset Formula $\le$
\end_inset

 ABS(delta_residue) 
\begin_inset Formula $\le$
\end_inset

 ISTEP2, 
\end_layout

\begin_layout Standard
where delta_residue is the difference in the numbers of the residues containing
 the pair of bonded atoms.
 
\end_layout

\begin_layout Standard
(2) If the distances between each pair of bonded atoms in the restraint
 fall within a prescribed range:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
VALUE1 
\begin_inset Formula $\le$
\end_inset

 distance 
\begin_inset Formula $\le$
\end_inset

 VALUE2.
 
\end_layout

\begin_layout Standard
Only one SHORT command can be issued, and the values of ISTEP1, ISTEP2,
 VALUE1, and VALUE2 remain fixed throughout the run.
 However, if IINC
\begin_inset Formula $>$
\end_inset

0, then the short-range interaction list will be re-evaluated every IINC
 steps.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
TGTRMSD Varies the RMSD target value for targeted MD.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
TEMP0 Varies the target temperature TEMP0.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
TEMP0LES Varies the LES target temperature TEMP0LES.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
TAUTP Varies the coupling parameter, TAUTP, used in temperature scaling
 when temperature coupling options NTT=1 is used.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
CUT Varies the non-bonded cutoff distance.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
NSTEP0 If present, this instruction will reset the initial value of the
 step counter (against which ISTEP1/ISTEP2 and NSTEP1/NSTEP2 are compared)
 to the value ISTEP1.
 This only affects the way in which NMR weight restraints are calculated.
 It does not affect the value of NSTEP that is printed as part of the dynamics
 output.
 An NSTEP0 instruction only has an effect at the beginning of a run.
 For this card (only) ISTEP2, VALUE1, VALUE2 and IINC are ignored.
 If this card is omitted, NSTEP0 = 0.
 This card can be useful for simulation restarts, where NSTEP0 is set to
 the final step on the previous run.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
STPMLT If present, the NMR step counter will be changed in increments of
 STPMLT for each actual dynamics step.
 For this card, only VALUE1 is read.
 ISTEP1, ISTEP2, VALUE2, IINC, and IMULT are ignored.
 Default = 1.0.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DISAVE,
\begin_inset space ~
\end_inset

ANGAVE,
\begin_inset space ~
\end_inset

TORAVE If present, then by default time-averaged values (rather than instantaneo
us values) for the appropriate set of restraints will be used.
 DISAVE controls distance data, ANGAVE controls angle data, TORAVE controls
 torsion data.
 See below for the functional form used in generating time-averaged data.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
For these cards: VALUE1 = 
\begin_inset Formula $\tau$
\end_inset

 (characteristic time for exponential decay) VALUE2 = POWER (power used
 in averaging; the nearest integer of value2 is used) Note that the range
 (ISTEP1
\begin_inset Formula $\to$
\end_inset

ISTEP2) applies only to TAU; The value of POWER is not changed by subsequent
 cards with the same ITYPE field, and time-averaging will always be turned
 on for the entire run if one of these cards appears.
\end_layout

\begin_layout Standard
Note also that, due to the way that the time averaged internals are calculated,
 changing 
\begin_inset Formula $\tau$
\end_inset

 at any time after the start of the run will only affect the relative weighting
 of steps occurring after the change in 
\begin_inset Formula $\tau$
\end_inset

 .
 Separate values for 
\begin_inset Formula $\tau$
\end_inset

 and POWER are used for bond, angle, and torsion averaging.
\end_layout

\begin_layout Standard
The default value of 
\begin_inset Formula $\tau$
\end_inset

 (if it is 0.0 here) is 1.0D+6, which results in no exponential decay weighting.
 Any value of 
\begin_inset Formula $\tau$
\end_inset

 
\begin_inset Formula $\ge$
\end_inset

 1.D+6 will result in no exponential decay.
 
\end_layout

\begin_layout Standard
If DISAVE,ANGAVE, or TORAVE is chosen, one can still force use of an instantaneo
us value for specific restraints of the particular type (bond, angle, or
 torsion) by setting the IFNTYP field to "1" when the restraint is defined
 (IFNTYP is defined in the DISANG file).
 
\end_layout

\begin_layout Standard
If time-averaging for a particular class of restraints is being performed,
 all restraints of that class that are being averaged (that is, all restraints
 of that class except those for which IFNTYP=1) *must* have the same values
 of NSTEP1 and NSTEP2 (NSTEP1 and NSTEP2 are defined below).
 (For these cards, IINC and IMULT are ignored) See the discussion of time-averag
ed restraints following the input descriptions.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
DISAVI,
\begin_inset space ~
\end_inset

ANGAVI,
\begin_inset space ~
\end_inset

TORAVI 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
ISTEP1: Ignored.
 
\end_layout

\begin_layout Description
ISTEP2: Sets IDMPAV.
 If IDMPAV 
\begin_inset Formula $>$
\end_inset

 0, 
\shape italic
and
\shape default
 a dump file has been specified (DUMPAVE is set in the file redirection
 section below), then the time-averaged values of the restraints will be
 written every IDMPAV steps.
 Only one value of IDMPAV can be set (corresponding to the first DISAVI/ANGAVI/T
ORAVI card with ISTEP2 
\begin_inset Formula $>$
\end_inset

 0), and 
\shape italic
all
\shape default
 restraints (even those with IFNTYP=1) will be "dumped" to this file every
 IDMPAV steps.
 The values reported reflect the current value of 
\begin_inset Formula $\tau$
\end_inset

.
 
\end_layout

\begin_layout Description
VALUE1: The integral which gives the time-averaged values is undefined for
 the first step.
 By default, for each time-averaged internal, the integral is assigned the
 current value of the internal on the first step.
 If VALUE1
\begin_inset Formula $\ne$
\end_inset

0, this initial value of internal r is reset as follows:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
-1000.
 
\begin_inset Formula $<$
\end_inset

 VALUE1 
\begin_inset Formula $<$
\end_inset

 1000.: Initial value = r_initial + VALUE 
\begin_inset Newline newline
\end_inset

 VALUE1 
\begin_inset Formula $<$
\end_inset

= -1000.: Initial value = r_target + 1000.
 
\begin_inset Newline newline
\end_inset

 1000.
 
\begin_inset Formula $<$
\end_inset

= VALUE1 : Initial value = r_target - 1000.
 
\end_layout

\begin_layout Standard
r_target is the target value of the internal, given by R2+R3 (or just R3,
 if R2 is 0).
 VALUE1 is in angstroms for bonds, in degrees for angles.
 
\end_layout

\end_deeper
\begin_layout Description
VALUE2: This field can be used to set the value of 
\begin_inset Formula $\tau$
\end_inset

 used in calculating the time-averaged values of the internal restraints
 reported at the end of a simulation (if LISTOUT is specified in the redirection
 section below).
 By default, no exponential decay weighting is used in calculating the final
 reported values, regardless of what value of 
\begin_inset Formula $\tau$
\end_inset

 was used during the simulation.
 If VALUE2
\begin_inset Formula $>$
\end_inset

0, then 
\begin_inset Formula $\tau$
\end_inset

 = VALUE2 will be used in calculating these final reported averages.
 Note that the value of VALUE2 = 
\begin_inset Formula $\tau$
\end_inset

 specified here only affects the reported averaged values in at the end
 of a simulation.
 It does not affect the time-averaged values used during the simulation
 (those are changed by the VALUE1 field of DISAVE, ANGAVE and TORAVE instruction
s).
 
\end_layout

\begin_layout Description
IINC: If IINC = 0, then forces for the class of time-averaged restraints
 will be calculated exactly as (dE/dr_ave) (dr_ave/dx).
 If IINC = 1, then then forces for the class of time-averaged restraints
 will be calculated as (dE/dr_ave) (dr(t)/dx).
 Note that this latter method results in a non-conservative force, and does
 not integrate to a standard form.
 But this latter formulation helps avoid the large forces due to the (1+
\begin_inset Formula $i)$
\end_inset

 term in the exact derivative calculation–and may avert instabilities in
 the molecular dynamics trajectory for some systems.
 See the discussion of time-averaged restraints following the input description.
 Note that the DISAVI, ANGAVI, and TORAVI instructions will have no affect
 unless the corresponding time average request card (DISAVE, ANGAVE or TORAVE,
 respectively) is also present.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
DUMPFREQ Istep1 is the only parameter read, and it sets the frequency at
 which the coordinates in the distance or angle restraints are dumped to
 the file specified by the DUMPAVE command in the I/O redirection section.
 (For these cards, ISTEP1 and IMULT are ignored).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
END END of this section.
\end_layout

\begin_layout Standard

\shape italic
NOTES:
\end_layout

\begin_layout Enumerate
All weights are relative to a default of 1.0 in the standard force field.
\end_layout

\begin_layout Enumerate
Weights are not cumulative.
\end_layout

\begin_layout Enumerate
For any range where the weight of a term is not modified by the above, the
 weight reverts to 1.0.
 For any range where TEMP0, SOFTR or CUTOFF is not specified, the value
 of the relevant constant is set to that specified in the input file.
\end_layout

\begin_layout Enumerate
If a weight is set to 0.0, it is set internally to 1.0D-7.
 This can be overridden by setting the weight to a negative number.
 In this case, a weight of exactly 0.0 will be used.
 
\shape italic
However,
\shape default
 if any weight is set to exactly 0.0, it cannot be changed again during this
 run of the program.
\end_layout

\begin_layout Enumerate
If two (or more) cards change a particular weight over the same range, the
 weight given on the last applicable card will be the one used.
\end_layout

\begin_layout Enumerate
Once any weight change for which NSTEP2=0 becomes active (i.e.
 one which will be effective for the remainder of the run), the weight of
 this term cannot be further modified by other instructions.
\end_layout

\begin_layout Enumerate
Changes to RSTAR result in exponential weighting changes to the attractive
 and repulsive terms (proportional to the scale factor**6 and **12, respectively
).
 For this reason, scaling RSTAR to a very small value (e.g.
 
\begin_inset Formula $\le$
\end_inset

0.1) may result in a zeroing-out of the vdw term.
\end_layout

\begin_layout Section

\series bold
\begin_inset CommandInset label
LatexCommand label
name "sec:File-redirection-commands"

\end_inset

File redirection commands
\end_layout

\begin_layout Standard
Input/output redirection information can be read as described here.
 Redirection cards must follow the end of the weight change information.
 Redirection card input is terminated by the first non-blank line which
 does not start with a recognized redirection TYPE (e.g.
 LISTIN, LISTOUT, etc.).
\end_layout

\begin_layout Standard
The format of the redirection cards is
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
TYPE = filename 
\end_layout

\begin_layout Standard
where TYPE is any valid redirection keyword (see below), and filename is
 any character string.
 The equals sign ("=") is required, and TYPE must be given in 
\shape italic
uppercase
\shape default
 letters.
\end_layout

\begin_layout Standard
Valid redirection keywords are: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
LISTIN An output listing of the restraints which have been read, and their
 deviations from the target distances 
\shape italic
before
\shape default
 the simulation has been run.
 By default, this listing is not printed.
 cedureIf POUT is used for the filename, these deviations will be printed
 in the normal output file.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
LISTOUT An output listing of the restraints which have been read, and their
 deviations from the target distances 
\shape italic
_after
\shape default
 the simulation has finished.
 By default, this listing is not printed.
 If POUT is used for the filename, these deviations will be printed in the
 normal output file.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DISANG The file from which the distance and angle restraint information
 described below (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:disang"

\end_inset

) will be read.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
NOESY File from which NOESY volume information (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:noesy"

\end_inset

) will be read.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
SHIFTS File from which chemical shift information (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:shift"

\end_inset

) will be read.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
PCSHIFT File from which paramagnetic shift information (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:shift"

\end_inset

) will be read.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DIPOLE File from which residual dipolar couplings (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:rdc"

\end_inset

) will be read.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
CSA File from which CSA or pseduo-CSA restraints (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:csa"

\end_inset

) will be read.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
DUMPAVE File to which the time-averaged values of all restraints will be
 written.
 If DISAVI / ANGAVI / TORAVI has been used to set IDMPAV
\begin_inset Formula $\ne$
\end_inset

0, then averaged values will be output.
 If the DUMPFREQ command has been used, the instantaneous values will be
 output.
\end_layout

\begin_layout Section

\series bold
Getting debugging information
\end_layout

\begin_layout Standard
The debug options in 
\shape italic
sander
\shape default
 are there principally to help developers test new options or to test results
 between two machines or versions of code, but can also be useful to users
 who want to test the effect of parameters on the accuracy of their ewald
 or pme calculations.
 If the debug options are set, 
\shape italic
sander
\shape default
 will exit after performing the debug tasks set by the user.
\end_layout

\begin_layout Standard
To access the debug options, include a &debugf namelist.
 Input parameters are: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
do_debugf
\begin_inset Index idx
status open

\begin_layout Plain Layout
do
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

debugf
\end_layout

\end_inset

 Flag to perform this module.
 Possible values are zero or one.
 Default is zero.
 Set to one to turn on debug options.
\end_layout

\begin_layout Standard
One set of options is to test that the atomic forces agree with numerical
 differentiation of energy.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
atomn
\begin_inset Index idx
status open

\begin_layout Plain Layout
atomn
\end_layout

\end_inset

 Array of atom numbers to test atomic forces on.
 Up to 25 atom numbers can be specified, separated by commas.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nranatm
\begin_inset Index idx
status open

\begin_layout Plain Layout
nranatm
\end_layout

\end_inset

 number of random atoms to test atomic forces on.
 Atom numbers are generated via a random number generator.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ranseed
\begin_inset Index idx
status open

\begin_layout Plain Layout
ranseed
\end_layout

\end_inset

 seed of random number generator used in generating atom numbers default
 is 71277 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
neglgdel
\begin_inset Index idx
status open

\begin_layout Plain Layout
neglgdel
\end_layout

\end_inset

 negative log of delta used in numerical differentiating; e.g.
 4 means delta is 10
\begin_inset Formula $^{-4}$
\end_inset

 Angstroms.
 Default is 5.
 
\shape italic
Note
\shape default
: In general it does no good to set nelgdel larger than about 6.
 This is because the relative force error is at best the square root of
 the numerical error in the energy, which ranges from 10
\begin_inset Formula $^{-15}$
\end_inset

 up to 10
\begin_inset Formula $^{-12}$
\end_inset

 for energies involving a large number of terms.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
chkvir
\begin_inset Index idx
status open

\begin_layout Plain Layout
chkvir
\end_layout

\end_inset

 Flag to test the atomic and molecular virials numerically.
 Default is zero.
 Set to one to test virials.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
dumpfrc
\begin_inset Index idx
status open

\begin_layout Plain Layout
dumpfrc
\end_layout

\end_inset

 Flag to dump energies, forces and virials, as well as components of forces
 (bond, angle forces etc.) to the file "forcedump.dat" This produces an ascii
 file.
 Default is zero.
 Set to one to dump forces.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
rmsfrc
\begin_inset Index idx
status open

\begin_layout Plain Layout
rmsfrc
\end_layout

\end_inset

 Flag to compare energies forces and virials as well as components of forces
 (bond, angle forces etc.) to those in the file "forcedump.dat".
 Default is zero.
 Set to one to compare forces.
\end_layout

\begin_layout Standard
Several other options are also possible to modify the calculated forces.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
zerochg
\begin_inset Index idx
status open

\begin_layout Plain Layout
zerochg
\end_layout

\end_inset

 Flag to zero all charges before calculating forces.
 Default zero.
 Set to one to remove charges.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
zerovdw
\begin_inset Index idx
status open

\begin_layout Plain Layout
zerovdw
\end_layout

\end_inset

 Flag to remove all van der Waals interactions before calculating forces.
 Default zero.
 Set to one to remove van der Waals.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
zerodip
\begin_inset Index idx
status open

\begin_layout Plain Layout
zerodip
\end_layout

\end_inset

 Flag to remove all atomic dipoles before calculating forces.
 Only relevant when polarizability is invoked.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
do_dir,
\begin_inset space ~
\end_inset

do_rec,
\begin_inset space ~
\end_inset

do_adj,
\begin_inset space ~
\end_inset

do_self,
\begin_inset space ~
\end_inset

do_bond,
\begin_inset space ~
\end_inset

do_cbond,
\begin_inset space ~
\end_inset

do_angle,
\begin_inset space ~
\end_inset

do_ephi,
\begin_inset space ~
\end_inset

do_xconst,
\begin_inset space ~
\end_inset

do_cap These are flags which turn on or off the subroutines they refer to.
 The defaults are one.
 Set to zero to prevent a subroutine from running.
 For example, set do_dir=0 to turn off the direct sum interactions (van
 der Waals as well as electrostatic).
 These options, as well as the zerochg, zerovdw, zerodip flags, can be used
 to fine tune a test of forces, accuracy, etc.
\end_layout

\begin_layout Standard
EXAMPLES:
\end_layout

\begin_layout Standard
This input list tests the reciprocal sum forces on atom 14 numerically,
 using a delta of 10
\begin_inset Formula $^{-4}$
\end_inset

.
\end_layout

\begin_layout LyX-Code
&debugf
\end_layout

\begin_layout LyX-Code
neglgdel=4, nranatm = 0, atomn = 14,
\end_layout

\begin_layout LyX-Code
do_debugf = 1,do_dir = 0,do_adj = 0,do_rec = 1, do_self = 0,
\end_layout

\begin_layout LyX-Code
do_bond = 1,do_angle = 0,do_ephi = 0, zerovdw = 0, zerochg = 0,
\end_layout

\begin_layout LyX-Code
chkvir = 0,
\end_layout

\begin_layout LyX-Code
dumpfrc = 0,
\end_layout

\begin_layout LyX-Code
rmsfrc = 0,
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout Standard
This input list causes a dump of force components to "forcedump.dat".
 The bond, angle and dihedral forces are not calculated, and van der Waals
 interactions are removed, so the total force is the Ewald electrostatic
 force, and the only nonzero force components calculated are electrostatic.
\end_layout

\begin_layout LyX-Code
&debugf
\end_layout

\begin_layout LyX-Code
neglgdel=4, nranatm = 0, atomn = 0,
\end_layout

\begin_layout LyX-Code
do_debugf = 1,do_dir = 1,do_adj = 1,do_rec = 1, do_self = 1,
\end_layout

\begin_layout LyX-Code
do_bond = 0,do_angle = 0,do_ephi = 0, zerovdw = 1, zerochg = 0,
\end_layout

\begin_layout LyX-Code
chkvir = 0,
\end_layout

\begin_layout LyX-Code
dumpfrc = 1,
\end_layout

\begin_layout LyX-Code
rmsfrc = 0,
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout Standard
In this case the same force components as above are calculated, and compared
 to those in "forcedump.dat".
 Typically this is used to get an RMS force error for the Ewald method in
 use.
 To do this, when doing the force dump use ewald or pme parameters to get
 high accuracy, and then normal parameters for the force compare:
\end_layout

\begin_layout LyX-Code
&debugf
\end_layout

\begin_layout LyX-Code
neglgdel=4, nranatm = 0, atomn = 0,
\end_layout

\begin_layout LyX-Code
do_debugf = 1,do_dir = 1,do_adj = 1,do_rec = 1, do_self = 1,
\end_layout

\begin_layout LyX-Code
do_bond = 0,do_angle = 0,do_ephi = 0, zerovdw = 1, zerochg = 0,
\end_layout

\begin_layout LyX-Code
chkvir = 0,
\end_layout

\begin_layout LyX-Code
dumpfrc = 0,
\end_layout

\begin_layout LyX-Code
rmsfrc = 1,
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout Standard
For example, if you have a 40x40x40 unit cell and want to see the error
 for default pme options (cubic spline, 40x40x40 grid), run 2 jobs—— (assume
 box params on last line of inpcrd file)
\end_layout

\begin_layout Standard
Sample input for 1st job:
\end_layout

\begin_layout LyX-Code
&cntrl
\end_layout

\begin_layout LyX-Code
dielc =1.0,
\end_layout

\begin_layout LyX-Code
cut = 11.0, nsnb = 5, ibelly = 0,
\end_layout

\begin_layout LyX-Code
ntx = 5, irest = 1,
\end_layout

\begin_layout LyX-Code
ntf = 2, ntc = 2, tol = 0.0000005,
\end_layout

\begin_layout LyX-Code
ntb = 1, ntp = 0, temp0 = 300.0, tautp = 1.0,
\end_layout

\begin_layout LyX-Code
nstlim = 1, dt = 0.002, maxcyc = 5, imin = 0, ntmin = 2,
\end_layout

\begin_layout LyX-Code
ntpr = 1, ntwx = 0, ntt = 0, ntr = 0,
\end_layout

\begin_layout LyX-Code
jfastw = 0, nmrmax=0, ntave = 25,
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout LyX-Code
&debugf
\end_layout

\begin_layout LyX-Code
do_debugf = 1,do_dir = 1,do_adj = 1,do_rec = 1, do_self = 1,
\end_layout

\begin_layout LyX-Code
do_bond = 0,do_angle = 0,do_ephi = 0, zerovdw = 1, zerochg = 0,
\end_layout

\begin_layout LyX-Code
chkvir = 0,
\end_layout

\begin_layout LyX-Code
dumpfrc = 1,
\end_layout

\begin_layout LyX-Code
rmsfrc = 0,
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout LyX-Code
&ewald
\end_layout

\begin_layout LyX-Code
nfft1=60,nfft2=60,nfft3=60,order=6, ew_coeff=0.35,
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout Standard
Sample input for 2nd job:
\end_layout

\begin_layout LyX-Code
&cntrl
\end_layout

\begin_layout LyX-Code
dielc =1.0,
\end_layout

\begin_layout LyX-Code
cut = 8.0, nsnb = 5, ibelly = 0,
\end_layout

\begin_layout LyX-Code
ntx = 5, irest = 1,
\end_layout

\begin_layout LyX-Code
ntf = 2, ntc = 2, tol = 0.0000005,
\end_layout

\begin_layout LyX-Code
ntb = 1, ntp = 0, temp0 = 300.0, tautp = 1.0,
\end_layout

\begin_layout LyX-Code
nstlim = 1, dt = 0.002, maxcyc = 5, imin = 0, ntmin = 2,
\end_layout

\begin_layout LyX-Code
ntpr = 1, ntwx = 0, ntt = 0, ntr = 0,
\end_layout

\begin_layout LyX-Code
jfastw = 0, nmrmax=0, ntave = 25,
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout LyX-Code
&debugf
\end_layout

\begin_layout LyX-Code
do_debugf = 1,do_dir = 1,do_adj = 1,do_rec = 1, do_self = 1,
\end_layout

\begin_layout LyX-Code
do_bond = 0,do_angle = 0,do_ephi = 0, zerovdw = 1, zerochg = 0,
\end_layout

\begin_layout LyX-Code
chkvir = 0,
\end_layout

\begin_layout LyX-Code
dumpfrc = 0,
\end_layout

\begin_layout LyX-Code
rmsfrc = 1,
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout LyX-Code
&ewald
\end_layout

\begin_layout LyX-Code
ew_coeff=0.35,
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout Standard
Note that an Ewald coefficient of 0.35 is close to the default error for
 an 8 Angstrom cutoff.
 However, the first job used an 11 Angstrom cutoff.
 The direct sum forces calculated in the 2nd job are compared to these,
 giving the RMS error due to an 8 Angstrom cutoff, with this value of ew_coeff.
 The reciprocal sum error calculated in the 2nd job is with respect to the
 pme reciprocal forces in the 1st job considered as "exact".
\end_layout

\begin_layout Standard
Note further that if in these two jobs you had not specified "ew_coeff"
 
\shape italic
sander
\shape default
 would have calculated ew_coeff according to the cutoff and the direct sum
 tolerance, defaulted to 10
\begin_inset Formula $^{-5}$
\end_inset

.
 This would give two different ewald coefficients.
 Under these circumstances the direct, reciprocal and adjust energies and
 forces would not agree well between the two jobs.
 However the total energy and forces should agree reaso
\family typewriter
nrespa
\family default
nably, (forces to within about 5x10
\begin_inset Formula $^{-4}$
\end_inset

 relative RMS force error) Since the totals are invariant to the coefficient.
\end_layout

\begin_layout Standard
Finally, note that if other force components are calculated, such as van
 der Waals, bond, angle, etc., then the total force will include these, and
 the relative RMS force errors will be with respect to this total force
 in the denominator.
\end_layout

\begin_layout Section
multisander
\begin_inset CommandInset label
LatexCommand label
name "sec:multisander"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
multisander
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
multisander
\emph default
 functionality is available in the parallel versions of the programs (i.e.,
 
\emph on
sander.MPI
\emph default
).
 This mode allows multiple independent simulations, or replicas, to be run
 in the same program instance.
 It is particularly useful for computer clusters in which priority is given
 to large CPU-count jobs.
 In this case, the command-line usage of sander and pmemd is slightly altered,
 as shown below:
\end_layout

\begin_layout LyX-Code
mpirun -np <#proc> sander.MPI -ng <#groups> -groupfile groupfile
\end_layout

\begin_layout Standard
In this case, 
\family typewriter
#proc
\family default
 processors will be evenly divided among 
\family typewriter
#groups
\family default
 individual simulations (
\family typewriter
#proc
\family default
 must be a multiple of 
\family typewriter
#group
\family default
!).
 The groupfile consists of a number of lines which is the command-line for
 each of the 
\family typewriter
#groups
\family default
 simulations you wish to run.
 Comment lines (i.e., those with # in the first column) are ignored, after
 which the first 
\family typewriter
#groups
\family default
 lines are read as the command-line flags of the 
\begin_inset Formula $N^{th}$
\end_inset

 simulation.
\end_layout

\begin_layout Standard
The multisander and multipmemd mechanisms are also utilized for methods
 requiring multiple simulations to communicate with one another, such as
 thermodynamic integration in sander and replica exchange molecular dynamics
 (both described later).
 An example groupfile and program call are shown below.
\end_layout

\begin_layout Standard
Groupfile:
\end_layout

\begin_layout LyX-Code
# Comment lines must start with a pound sign
\end_layout

\begin_layout LyX-Code
# and there can be as many comment lines as you
\end_layout

\begin_layout LyX-Code
# want, wherever you want them.
\end_layout

\begin_layout LyX-Code
-O -p prmtop1 -c inpcrd1 -i replica1.mdin -suffix replica1
\end_layout

\begin_layout LyX-Code
-O -p prmtop2 -c inpcrd2 -i replica2.mdin -suffix replica2
\end_layout

\begin_layout LyX-Code
-O -p prmtop3 -c inpcrd3 -i replica3.mdin -suffix replica3
\end_layout

\begin_layout LyX-Code
-O -p prmtop4 -c inpcrd4 -i replica4.mdin -suffix replica4
\end_layout

\begin_layout Standard
The 
\family typewriter
-suffix
\family default
 flag behaves slightly differently than it does for classical use.
 In standard simulations (
\emph on
i.e.
\emph default
, without 
\emph on
multisander
\emph default
 or 
\emph on
multipmemd
\emph default
), the provided suffix will be applied only to output files that are printed
 but were not given names on the command-line.
 With multisander, however, each thread has to produce different output
 files so that different replicas do not try to write to the same file.
 As a result, a default suffix of 000, 001, 002, etc.
 is given to the replicas and is added to every unspecified output file.
 If a 
\family typewriter
-suffix
\family default
 is specified in the groupfile, as shown above, every output file—including
 those given an explicit name for that replica—are given the additional
 suffix.
 
\end_layout

\begin_layout Standard
The four simulations shown in the groupfile above can be run on 8 processors
 each with the following command (note, running 
\emph on
sander.MPI
\emph default
 may differ on your system).
\end_layout

\begin_layout LyX-Code
mpirun -np 32 sander.MPI -ng 4 -groupfile groupfile
\end_layout

\begin_layout Standard
The 
\emph on
multisander
\emph default
 and 
\emph on
multipmemd
\emph default
 concepts are implemented via the use of MPI communicators.
 Each replica is assigned a replica-wide communicator along which all communicat
ions required for standard MD simulations are performed (called 
\family typewriter
commsander
\family default
 and 
\family typewriter
pmemd_comm
\family default
 in 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
, respectively).
 Each replica communicator has a master thread (rank 0 in that communicator),
 and the master thread of each replica are joined in another MPI communicator
 of replica masters (called 
\family typewriter
commmaster
\family default
 and 
\family typewriter
pmemd_master_comm
\family default
 in 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
, respectively).
 All inter-replica communication is performed via 
\family typewriter
commmaster
\family default
 or 
\family typewriter
pmemd_master_comm
\family default
.
\end_layout

\begin_layout Standard
By default, all 
\begin_inset Formula $N$
\end_inset

 threads are allocated to each of the 
\begin_inset Formula $M$
\end_inset

 groups by dividing the threads sequentially.
 That is, the first 
\begin_inset Formula $N/M$
\end_inset

 threads are assigned to replica 0, the second group of 
\begin_inset Formula $N/M$
\end_inset

 threads are assigned to replica 1, etc.
 The 
\family typewriter
-ng-nonsequential
\family default
 flag will stripe the thread assignments.
 Replica 0 will receive threads 0, 
\begin_inset Formula $N-1$
\end_inset

, 
\begin_inset Formula $2N-1$
\end_inset

, etc., while replica 1 receives threads 1, 
\begin_inset Formula $N$
\end_inset

, 
\begin_inset Formula $2N$
\end_inset

, etc.
\end_layout

\begin_layout Chapter

\series bold
\begin_inset CommandInset label
LatexCommand label
name "sec:genborn"

\end_inset

The Generalized Born/Surface Area Model
\end_layout

\begin_layout Standard
Implicit solvent methods can speed up atomistic simulations by approximating
 the discrete solvent as a continuum, thus drastically reducing the number
 of particles in the system.
 An additional effective speedup often comes from much faster sampling of
 the conformational space afforded by these methods.
\begin_inset CommandInset citation
LatexCommand citep
key "David2000,Feig2007,Amaro2009,Zagrovic2003,Anandakrishnan2015"
literal "true"

\end_inset

 The generalized Born (GB) solvation model is the most commonly used implicit
 solvent model for atomistic MD simulation; it has been most widely tested
 on ff99SB and ff14SBonlysc, but in principle could be used with other non-polar
izable force fields, such as ff03.
 A recent (2019) review gives a good overview.
\begin_inset CommandInset citation
LatexCommand citep
key "Onufriev19"
literal "true"

\end_inset

 To estimate the total solvation free energy of a molecule, 
\begin_inset Formula $\Delta G_{solv}$
\end_inset

, one typically assumes that it can be decomposed into the "electrostatic"
 and "non-electrostatic" parts:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\Delta G_{solv}=\Delta G_{el}+\Delta G_{nonel}
\end{equation}

\end_inset

where 
\begin_inset Formula $\Delta G_{nonel}$
\end_inset

 is the free energy of solvating a molecule from which all charges have
 been removed (i.e.
 partial charges of every atom are set to zero), and 
\begin_inset Formula $\Delta G_{el}$
\end_inset

 is the free energy of first removing all charges in the vacuum, and then
 adding them back in the presence of a continuum solvent environment.
 Generally speaking, 
\begin_inset Formula $\Delta G_{nonel}$
\end_inset

 comes from the combined effect of two types of interaction: the favorable
 van der Waals attraction between the solute and solvent molecules, and
 the unfavorable cost of breaking the structure of the solvent (water) around
 the solute.
 In the current Amber codes, this is taken to be proportional to the total
 solvent accessible surface area (SA) of the molecule, with a proportionality
 constant derived from experimental solvation energies of small non-polar
 molecules, and uses a fast LCPO algorithm 
\begin_inset CommandInset citation
LatexCommand cite
key "Weiser99"
literal "true"

\end_inset

 to compute an analytical approximation to the solvent accessible area of
 the molecule.
\end_layout

\begin_layout Standard
The Poisson-Boltzmann approach described in the next section has traditionally
 been used in calculating 
\begin_inset Formula $\Delta G_{el}$
\end_inset

.
 However, in molecular dynamics applications, the associated computational
 costs are often very high, as the Poisson-Boltzmann equation needs to be
 solved every time the conformation of the molecule changes.
 Amber developers have pursued an alternative approach, the analytic generalized
 Born (GB) method, to obtain a reasonable, computationally efficient estimate
 to be used in molecular dynamics simulations.
 The methodology has become popular,
\begin_inset CommandInset citation
LatexCommand cite
key "Still90,Schaefer96,Edinger97,Jayaram98,Cramer99,Bashford00,Onufriev00,Lee02"
literal "true"

\end_inset

 especially in molecular dynamics applications,
\begin_inset CommandInset citation
LatexCommand cite
key "Dominy99,Tsui00,Calimet01,Onufriev04"
literal "true"

\end_inset

 due to its relative simplicity and computational efficiency, compared to
 the more standard numerical solution of the Poisson-Boltzmann equation.
 Within Amber GB models, each atom in a molecule is represented as a sphere
 of radius 
\begin_inset Formula $R_{i}$
\end_inset

 with a charge 
\begin_inset Formula $q_{i}$
\end_inset

 at its center; the interior of the atom is assumed to be filled uniformly
 with a material of dielectric constant 1.
 The molecule is surrounded by a solvent of a high dielectric 
\begin_inset Formula $\varepsilon$
\end_inset

 (80 for water at 300 K).
 The GB model approximates 
\begin_inset Formula $\Delta G_{el}$
\end_inset

 by an analytical formula,
\begin_inset CommandInset citation
LatexCommand cite
key "Still90,Srinivasan99"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\Delta G_{el}\approx-\frac{1}{2}\sum_{ij}\frac{q_{i}q_{j}}{f_{GB}(r_{ij},R_{i},R_{j})}\left(1-\frac{\exp[-\kappa f_{GB}]}{\varepsilon}\right)\label{eq:gb1}
\end{equation}

\end_inset

where 
\begin_inset Formula $r_{ij}$
\end_inset

 is the distance between atoms 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

, the 
\begin_inset Formula $R_{i}$
\end_inset

 are the so-called 
\shape italic
effective Born radii,
\shape default
 and 
\begin_inset Formula $f_{GB}()$
\end_inset

 is a certain smooth function of its arguments.
 The electrostatic screening effects of (monovalent) salt are incorporated
 
\begin_inset CommandInset citation
LatexCommand cite
key "Srinivasan99"
literal "true"

\end_inset

 via the Debye-Huckel screening parameter 
\begin_inset Formula $\kappa$
\end_inset

.
\end_layout

\begin_layout Standard
A common choice 
\begin_inset CommandInset citation
LatexCommand cite
key "Still90"
literal "true"

\end_inset

 of 
\begin_inset Formula $f_{GB}$
\end_inset

 is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
f_{GB}=\left[r_{ij}^{2}+R_{i}R_{j}\exp(-r_{ij}^{2}/4R_{i}R_{j})\right]^{1/2}\label{eq:fgb}
\end{equation}

\end_inset

although other expressions have been tried.
\begin_inset CommandInset citation
LatexCommand cite
key "Jayaram98,Onufriev02"
literal "true"

\end_inset

 The effective Born radius of an atom reflects the degree of its burial
 inside the molecule: for an isolated ion, it is equal to its van der Waals
 (VDW) radius 
\begin_inset Formula $\rho_{i}$
\end_inset

.
 Then one obtains the particularly simple form:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\Delta G_{el}=-\frac{q_{i}^{2}}{2\rho_{i}}\left(1-\frac{1}{\varepsilon}\right)\label{eq:Born}
\end{equation}

\end_inset

where we assumed 
\begin_inset Formula $\kappa=0$
\end_inset

 (pure water).
 This is the famous expression due to Born for the solvation energy of a
 single ion.
 The function 
\begin_inset Formula $f_{GB}()$
\end_inset

 is designed to interpolate, in a clever manner, between the limit 
\begin_inset Formula $r_{ij}\rightarrow0$
\end_inset

, when atomic spheres merge into one, and the opposite extreme 
\begin_inset Formula $r_{ij}\rightarrow\infty$
\end_inset

, when the ions can be treated as point charges obeying the Coulomb's law.
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev00"
literal "true"

\end_inset

 For deeply buried atoms, the effective radii are large, 
\begin_inset Formula $R_{i}\gg\rho_{i}$
\end_inset

, and for such atoms one can use a rough estimate 
\begin_inset Formula $R_{i}\approx L_{i}$
\end_inset

, where 
\begin_inset Formula $L_{i}$
\end_inset

 is the distance from the atom to the molecular surface.
 Closer to the surface, the effective radii become smaller, and for a completely
 solvent exposed side-chain one can expect 
\begin_inset Formula $R_{i}$
\end_inset

 to approach 
\begin_inset Formula $\rho_{i}$
\end_inset

.
\end_layout

\begin_layout Standard
The effective radii depend on the molecule's conformation, and so have to
 be re-computed every time the conformation changes.
 This makes the computational efficiency a critical issue, and various approxima
tions are normally made that facilitate an effective estimate of 
\begin_inset Formula $R_{i}$
\end_inset

.
 With the exception of GBNSR6 (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:gbnsr6"

\end_inset

), the so-called 
\shape italic
Coulomb field approximation
\shape default
, or 
\shape italic
CFA
\shape default
, is used for Amber GB models, which replaces the true electric displacement
 around the atom by the Coulomb field.
 Within this assumption, the following expression can be derived:
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev00"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
R_{i}^{-1}=\rho_{i}^{-1}-\frac{1}{4\pi}\int\theta(|\mathbf{r}|-\rho_{i})r^{-4}d^{3}\mathbf{r}\label{eq:cfa}
\end{equation}

\end_inset

where the integral is over the solute volume surrounding atom 
\begin_inset Formula $i$
\end_inset

.
 For a realistic molecule, the solute boundary (molecular surface) is anything
 but trivial, and so further approximations are made to obtain a closed-form
 analytical expression for the above equation, 
\begin_inset Formula $e.g.$
\end_inset

 the so-called pairwise de-screening approach of Hawkins, Cramer and Truhlar,
\begin_inset CommandInset citation
LatexCommand cite
key "Hawkins96"
literal "true"

\end_inset

 which leads to a GB model implemented in Amber with 
\shape italic
igb=1
\shape default
.
 The 3D integral used in the estimation of the effective radii is performed
 over the van der Waals (VDW) spheres of solute atoms, which implies a definitio
n of the solute volume in terms of a set of spheres, rather than the complex
 molecular surface,
\begin_inset CommandInset citation
LatexCommand cite
key "Richards77"
literal "true"

\end_inset

 commonly used in the PB calculations.
 For macromolecules, this approach tends to underestimate the effective
 radii for buried atoms,
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev00"
literal "true"

\end_inset

 arguably because the standard integration procedure treats the small vacuum–fil
led crevices between the van der Waals (VDW) spheres of protein atoms as
 being filled with water, even for structures with large interior.
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev02"
literal "true"

\end_inset

 This error is expected to be greatest for deeply buried atoms characterized
 by large effective radii, while for the surface atoms it is largely canceled
 by the opposing error arising from the Coulomb approximation, which tends
 
\begin_inset CommandInset citation
LatexCommand cite
key "Schaefer96,Bashford00,Schaefer90"
literal "true"

\end_inset

 to overestimate 
\begin_inset Formula $R_{i}$
\end_inset

.
\end_layout

\begin_layout Standard
The deficiency of the model described above can, to some extent, be corrected
 by noticing that even the optimal packing of hard spheres, which is a reasonabl
e assumption for biomolecules, still occupies only about three quarters
 of the space, and so "scaling-up" of the integral by a factor of four thirds
 should effectively increase the underestimated radii by about the right
 amount, without any loss of computational efficiency.
 This idea was developed and applied in the context of pH titration,
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev00"
literal "true"

\end_inset

 where it was shown to improve the performance of the GB approximation in
 calculating pKa values of protein sidechains.
 However, the one-parameter correction introduced in Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev00"
literal "true"

\end_inset

 was not optimal in keeping the model's established performance on small
 molecules.
 It was therefore proposed 
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev04"
literal "true"

\end_inset

 to re-scale the effective radii with the re-scaling parameters being proportion
al to the degree of the atom's burial, as quantified by the value 
\begin_inset Formula $I_{i}$
\end_inset

 of the 3D integral.
 The latter is large for the deeply buried atoms and small for exposed ones.
 Consequently, one seeks a well-behaved re-scaling function, such that 
\begin_inset Formula $R_{i}\approx(\rho_{i}^{-1}-I_{i})^{-1}$
\end_inset

 for small 
\begin_inset Formula $I_{i}$
\end_inset

, and 
\begin_inset Formula $R_{i}>(\rho_{i}^{-1}-I_{i})^{-1}$
\end_inset

 when 
\begin_inset Formula $I_{i}$
\end_inset

 becomes large.
 The following simple, infinitely differentiable re-scaling function was
 chosen to replace the model's original expression for the effective radii:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
R_{i}^{-1}=\tilde{\rho}_{i}^{-1}-\rho_{i}^{-1}\tanh(\alpha\Psi-\beta\Psi^{2}+\gamma\Psi^{3})
\end{equation}

\end_inset

 where 
\begin_inset Formula $\Psi=I_{i}\tilde{\rho}_{i}$
\end_inset

, and 
\begin_inset Formula $\alpha$
\end_inset

, 
\begin_inset Formula $\beta$
\end_inset

, 
\begin_inset Formula $\gamma$
\end_inset

 are treated as adjustable dimensionless parameters which were optimized
 using the guidelines mentioned earlier (primarily agreement with the PB).
 Currently, Amber supports two GB models ( termed OBC ) based on this idea.
 These differ by the values of 
\begin_inset Formula $\alpha$
\end_inset

, 
\begin_inset Formula $\beta$
\end_inset

, 
\begin_inset Formula $\gamma$
\end_inset

, and are invoked by setting igb to either igb=2 or igb=5.
 The details of the optimization procedure and the performance of the OBC
 model relative to the PB treatment and in MD simulations on proteins is
 described in Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev04"
literal "true"

\end_inset

; an independent comparison to the PB in calculating the electrostatic part
 of solvation free energy on a large data set of proteins can be found in
 Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Feig04"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
Our experience with generalized Born simulations is mainly with
\shape italic
 
\shape default
\emph on
ff99SB, ff14SBonlysc
\emph default
 or 
\shape italic
ff03
\shape default
; the current GB models are not compatible with polarizable force fields.
 Replacing explicit water with a GB model is equivalent to specifying a
 different force field, and users should be aware that none of the GB options
 (in Amber or elsewhere) is as mature as simulations with explicit solvent;
 user discretion is advised.
 For example, it was shown that salt bridges are too strong in some of these
 models 
\begin_inset CommandInset citation
LatexCommand cite
key "Geney06,Okur08"
literal "true"

\end_inset

 and some of them provide secondary structure distributions that differ
 significantly from those obtained using the same protein parameters in
 explicit solvent, with GB having too much 
\begin_inset Formula $\alpha$
\end_inset

-helix present.
\begin_inset CommandInset citation
LatexCommand cite
key "Okur06,Roe07"
literal "true"

\end_inset

 The combination of the 
\emph on
ff14SBonlysc
\emph default
 force field with igb=8 gives the best results for proteins 
\begin_inset CommandInset citation
LatexCommand citep
key "Nguyen2013"
literal "true"

\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Nguyen2014"
literal "true"

\end_inset

, nucleic acids and protein-nucleic acid complexes.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Nguyen15b"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
Despite these limitations, implicit treatment of solvent is widely used
 in molecular simulations for two main reasons: algorithmic/computational
 speed and conformational sampling.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Anandakrishnan2015,Onufriev2010"
literal "true"

\end_inset

 Implicit solvent methods can be algorithmically/computationally faster,
 as measured by simulation time steps per processor (CPU) time, because
 the vast number of individual interactions between the atoms of individual
 solvent molecules do not need to be explicitly computed.
 Implicit-solvent simulations can also sample conformational space faster
 in the low viscosity regime afforded by the implicit solvent model.
\begin_inset CommandInset citation
LatexCommand citep
key "David2000,Feig2007,Amaro2009,Zagrovic2003,Anandakrishnan2015"
literal "true"

\end_inset

 To some extent, the interest in implicit-solvent-based simulations is motivated
 by the need to sample very large conformational spaces for problems such
 as protein folding, binding-affinity calculations, or large-scale fluctuations
 of nucleosomal DNA fragments.
 The speedup of conformational change can vary considerably, depending on
 the details of the transition, and can range from no speedup at all to
 almost a 100-fold speedup.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Anandakrishnan2015"
literal "true"

\end_inset

 In general, the larger the conformational change, the higher the speedup
 one may expect, but this tendency is not universal or uniform.
 These speedup values are also expected to vary by the specific flavour
 of GB model used, a detailed analysis for igb5 can be found in Ref.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Anandakrishnan2015"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
The generalized Born models used here are based on the "pairwise" model
 introduced by Hawkins, Cramer and Truhlar,
\begin_inset CommandInset citation
LatexCommand cite
key "Hawkins95,Hawkins96"
literal "true"

\end_inset

 which in turn is based on earlier ideas by Still and others.
\begin_inset CommandInset citation
LatexCommand cite
key "Still90,Bashford00,Schaefer90,Schaefer98"
literal "true"

\end_inset

 The so-called overlap parameters for most models are taken from the Tinker
 molecular modeling package (http://tinker.wustl.edu).
 The effects of added monovalent salt are included at a level that approximates
 the solutions of the linearized Poisson-Boltzmann equation.
\begin_inset CommandInset citation
LatexCommand cite
key "Srinivasan99"
literal "true"

\end_inset

 The original implementation was by David Case, who thanks Charlie Brooks
 for inspiration.
 Details of our implementation of generalized Born models can be found in
 Refs.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Tsui01,Sosa01"
literal "true"

\end_inset

.
\end_layout

\begin_layout Section

\series bold
GB/SA input parameters
\end_layout

\begin_layout Standard
As outlined above, there are several "flavors" of GB available, depending
 upon the value of 
\shape italic
igb
\shape default
.
 The version that has been most extensively tested corresponds to 
\shape italic
igb
\shape default
=1; the "OBC" models (
\shape italic
igb
\shape default
=2 and 5) are newer, but appear to give significant improvements and are
 recommended for most projects (certainly for peptides or proteins).
 The newest, most advanced, and least extensively tested model, 
\shape italic
GBn
\shape default
 (
\shape italic
igb
\shape default
=7), yields results in considerably better agreement with molecular surface
 Poisson-Boltzmann and explicit solvent results than the "OBC" models under
 many circumstances.
\begin_inset CommandInset citation
LatexCommand cite
key "Roe07"
literal "true"

\end_inset

 The 
\shape italic
GBn
\shape default
 model was parameterized for peptide and protein systems and is not recommended
 for use with nucleic acids.
 A modification on the GBn model (igb=8) further improves agreement between
 Poisson-Boltzmann and explicit solvent data compared to the original formulatio
n (igb=7).
\begin_inset CommandInset citation
LatexCommand citep
key "Nguyen2013"
literal "true"

\end_inset

 Users should understand that all (current) GB models have limitations and
 should proceed with caution.
 Generalized Born simulations can only be run for non-periodic systems,
 
\begin_inset Formula $i.e.$
\end_inset

 where 
\shape italic
ntb
\shape default
=0.
 Unlike its use in explicit solvent PME simulations, short nonbonded cutoff
 values have much stronger impact on accuracy of the GB calculations.
 Essentially, any cutoff values other than 
\shape italic
cut > structure size
\shape default
 can lead to artifacts.
 Current GPU implementation of the GB can not use cutoffs.
 An alternative that retains most of the speed of the GB with a cutoff,
 but without most of its artifacts, is GB-HCP described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:hcp"

\end_inset

.
 If the nonbonded cutoff is used in GB calculations, it should be greater
 than that for PME calculations, perhaps cut=16.
 The slowly-varying forces generally do not have to be evaluated at every
 step for GB, either nrespa=2 or 4, although that option may lead to some
 artifacts as well.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
mbondi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
mbondi2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
mbondi2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
bondi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
mbondi3
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:gbradii"

\end_inset

Recommended radii sets for various GB models.
 For values of igb given in the top row, the string in the second row should
 be entered in LEaP as 
\begin_inset Quotes eld
\end_inset

set default PBRadii xxx
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tbl:radii"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
igb
\begin_inset Index idx
status open

\begin_layout Plain Layout
igb
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sander_igb"

\end_inset


\series default
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 No generalized Born term is used.
 (Default) 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 The Hawkins, Cramer, Truhlar
\begin_inset CommandInset citation
LatexCommand cite
key "Hawkins95,Hawkins96"
literal "true"

\end_inset

 pairwise generalized Born model is used, with parameters described by Tsui
 and Case.
\begin_inset CommandInset citation
LatexCommand cite
key "Tsui01"
literal "true"

\end_inset

 This model uses the default radii set up by LEaP.
 It is slightly different from the GB model that was included in Amber6.
 If you want to compare to Amber 6, or need to continue an ongoing simulation,
 you should use the command "set default PBradii amber6" in LEaP, and set
 
\shape italic
igb
\shape default
=1 in 
\shape italic
sander
\shape default
.
 For reference, the Amber6 values are those used by an earlier Tsui and
 Case paper.
\begin_inset CommandInset citation
LatexCommand cite
key "Tsui00"
literal "true"

\end_inset

 Note that most nucleic acid simulations have used this model, so you take
 care when using other values.
 Also note that Tsui and Case used an offset (see below) of 0.13 
\begin_inset Formula $\textrm{Å}$
\end_inset

, which is different from its default value.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 Use a modified GB model developed by A.
 Onufriev, D.
 Bashford and D.A.
 Case; the main idea was published earlier,
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev00"
literal "true"

\end_inset

 but the actual implementation here
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev04"
literal "true"

\end_inset

 is an elaboration of this initial idea.
 Within this model, the effective Born radii are re-scaled to account for
 the interstitial spaces between atom spheres missed by the 
\begin_inset Formula $GB^{HCT}$
\end_inset

 approximation.
 In that sense, 
\begin_inset Formula $GB^{OBC}$
\end_inset

 is intended to be a closer approximation to true molecular volume, albeit
 in an average sense.
 With 
\shape italic
igb
\shape default
=2, the inverse of the effective Born radius is given
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
by:cedure
\end_layout

\begin_layout Standard
\begin_inset Formula $R_{i}^{-1}=\overline{\rho}_{i}^{-1}-\tanh\left(\alpha\Psi-\beta\Psi^{2}+\gamma\Psi^{3}\right)/\rho_{i}$
\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\overline{\rho}_{i}=\rho_{i}-offset$
\end_inset

, and 
\begin_inset Formula $\Psi=I\rho_{i}$
\end_inset

, with 
\begin_inset Formula $I$
\end_inset

 given in our earlier paper.
 The parameters 
\begin_inset Formula $\alpha$
\end_inset

, 
\begin_inset Formula $\beta$
\end_inset

, and 
\begin_inset Formula $\gamma$
\end_inset

 were determined by empirical fits, and have the values 0.8, 0.0, and 2.909125.
 This corresponds to model I in Ref 
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev04"
literal "true"

\end_inset

.
 With this option, you should use the LEaP command "set default PBradii
 mbondi2" to prepare the 
\shape italic
prmtop
\shape default
 file.
 
\end_layout

\end_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

3
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset

4 These values are unused; they were used in Amber 7 for parameter sets
 that are no longer supported.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

5 Same as 
\shape italic
igb=2
\shape default
, except that now 
\begin_inset Formula $\alpha,\beta,\gamma$
\end_inset

 are 1.0, 0.8, and 4.85.
 This corresponds to model II in Ref 
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev04"
literal "true"

\end_inset

.
 With this option, you should use the command "set default PBradii mbondi2"
 in setting up the 
\shape italic
prmtop
\shape default
 file, although "set default PBradii bondi" is also OK.
 When tested in MD simulations of several proteins,
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev04"
literal "true"

\end_inset

 both of the above parameterizations of the "OBC" model showed equal performance
, although further tests 
\begin_inset CommandInset citation
LatexCommand cite
key "Feig04"
literal "true"

\end_inset

 on an extensive set of protein structures revealed that the 
\shape italic
igb=5
\shape default
 variant agrees better with the Poisson-Boltzmann treatment in calculating
 the electrostatic part of the solvation free energy.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

6 With this option, there is no continuum solvent model used at all; this
 corresponds to a non-periodic, "vacuum", model where the non-bonded interaction
s are just Lennard-Jones and Coulomb interactions.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

7 The 
\shape italic
GBn
\shape default
 model described by Mongan, Simmerling, McCammon, Case and Onufriev
\begin_inset CommandInset citation
LatexCommand cite
key "Mongan07"
literal "true"

\end_inset

 is employed.
 This model uses a pairwise correction term to 
\begin_inset Formula $GB^{HCT}$
\end_inset

 to approximate a molecular surface dielectric boundary; that is to eliminate
 interstitial regions of high dielectric smaller than a solvent molecule.
 This correction affects all atoms and is geometry-specific, going beyond
 the geometry-free, "average" re-scaling approach of 
\begin_inset Formula $GB^{OBC}$
\end_inset

, which mostly affects buried atoms.
 With this method, you should use the bondi radii set.
 The overlap or screening parameters in the 
\shape italic
prmtop
\shape default
 file are ignored, and the model-specific 
\shape italic
GBn
\shape default
 optimized values are substituted.
 The model carries little additional computational overhead relative to
 the other GB models described above.
\begin_inset CommandInset citation
LatexCommand cite
key "Mongan07"
literal "true"

\end_inset

 This method is not recommended fcedureor systems involving nucleic acids.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

8 Same GB functional form as the GBn model (igb=7), but with different parameter
s.
 The offset, overlap screening parameters, and gbneckscale are changed.
 In addition, individual α , β , and γ parameters can be specified for each
 of the elements H, C, N, O, S, P.
 Parameters for other elements have not been optimized, and the default
 values used are the ones from igb=5, which were not element-dependent.
 Default values were optimized for H, C, N, O and S atoms in protein systems.
\begin_inset CommandInset citation
LatexCommand citep
key "Nguyen2013"
literal "true"

\end_inset

 Although the parameters for P in proteins can be specified, the default
 values were not optimized and are the igb=5 values.
 Nucleic acids have separate parameters from those used for proteins, and
 default values were optimized for H, C, N, O and P atoms in nucleic acid
 systems.
\begin_inset CommandInset citation
LatexCommand citep
key "Nguyen15b"
literal "true"

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The following are the default parameters sander uses with 
\emph on
igb=8
\emph default
: 
\end_layout

\begin_layout LyX-Code
Sh=1.425952, Sc=1.058554, Sn=0.733599,
\end_layout

\begin_layout LyX-Code
So=1.061039, Ss=-0.703469, Sp=0.5,
\end_layout

\begin_layout LyX-Code
offset=0.195141, gbneckscale=0.826836,
\end_layout

\begin_layout LyX-Code
gbalphaH=0.788440, gbbetaH=0.798699, gbgammaH=0.437334,
\end_layout

\begin_layout LyX-Code
gbalphaC=0.733756, gbbetaC=0.506378, gbgammaC=0.205844,
\end_layout

\begin_layout LyX-Code
gbalphaN=0.503364, gbbetaN=0.316828, gbgammaN=0.192915,
\end_layout

\begin_layout LyX-Code
gbalphaOS=0.867814, gbbetaOS=0.876635, gbgammaOS=0.387882,
\end_layout

\begin_layout LyX-Code
gbalphaP=1.0, gbbetaP=0.8, gbgammaP=4.85
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
screen_hnu=1.69654, screen_cnu=1.26890, 
\end_layout

\begin_layout LyX-Code
screen_nnu=1.425974, screen_onu=0.18401, screen_pnu=1.54506, 
\end_layout

\begin_layout LyX-Code
gb_alpha_hnu=0.53705, gb_beta_hnu=0.36286, gb_gamma_hnu=0.11670, 
\end_layout

\begin_layout LyX-Code
gb_alpha_cnu=0.33167, gb_beta_cnu=0.19684, gb_gamma_cnu=0.09342, 
\end_layout

\begin_layout LyX-Code
gb_alpha_nnu=0.68631, gb_beta_nnu=0.46319, gb_gamma_nnu=0.13872, 
\end_layout

\begin_layout LyX-Code
gb_alpha_onu=0.60634, gb_beta_onu=0.46301, gb_gamma_onu=0.14226, 
\end_layout

\begin_layout LyX-Code
gb_alpha_pnu=0.41836, gb_beta_pnu=0.29005, gb_gamma_pnu=0.10642
\end_layout

\begin_layout Standard
Parameters for proteins and for nucleic acids were optimized separately
 and can be independently specified.
 Protein parameters: Sh, Sc, Sn, So, Ss and Sp are scaling parameters, gbalphaX,
 gbbetaX, gbgammaX are the α , β , γ set for element X.
 gbalphaOS, gbbetaOS, gbgammaOS is the α , β , γ set applied to both O and
 S.
 The phosphorus parameters (in proteins) were not optimized and are simply
 taken as the parameters used in the OBC-2 model (igb=5).
 Nucleic acid parameters (end with "nu"): screen_Xnu (X=h, c, n, o, p) are
 scaling parameters, gb_alpha_Xnu (X=h, c, n, o, p) are the α , β , γ set
 for element X.
 
\end_layout

\begin_layout Standard
Since parameters are assigned for each atom based on its residue name (hard-code
d in "sander/egb.F90" (subroutine isnucat)), users need to update the residue
 table in the sander source code if nucleic acids with different names are
 simulated using this GB model.
 
\end_layout

\begin_layout Standard
The default values for offset=0.195141, gbneckscale=0.826836 are recommended
 for both proteins and nucleic acids.
 
\end_layout

\begin_layout Standard
mbondi3 radii are recommended with igb=8 and can be employed with the LEaP
 command "set default PBradii mbondi3".
 The mbondi3 radii were adjusted based on protein simulations, and optimization
 of these radii for nucleic acids is currently underway.
\end_layout

\end_deeper
\begin_layout Description
=10 Calculate the reaction field and nonbonded interactions using a numerical
 Poisson-Boltzmann solver.
 This option is described in the 
\begin_inset CommandInset ref
LatexCommand formatted
reference "cha:PBSA"

\end_inset

.
 Note that this is 
\shape italic
not
\shape default
 a generalized Born simulation, in spite of its use of 
\shape italic
igb
\shape default
; it is rather an alternative continuum solvent model.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
intdiel
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
intdiel
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sander_intdiel"

\end_inset

 Sets the interior dielectric constant of the molecule of interest.
 Default is 1.0.
 Other values have not been extensively tested.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
extdiel
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
extdiel
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sander_extdiel"

\end_inset

 Sets the exterior or solvent dielectric constant.
 Default is 78.5.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
saltcon
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
saltcon
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sander_saltcon"

\end_inset


\series default
 Sets the concentration (M) of 1-1 mobile counterions in solution, using
 a modified generalized Born theory based on the Debye-Hückel limiting law
 for ion screening of interactions.
\begin_inset CommandInset citation
LatexCommand cite
key "Srinivasan99"
literal "true"

\end_inset

 Default is 0.0 M (
\begin_inset Formula $i.e.$
\end_inset

 no Debye-Hückel screening.) Setting 
\shape italic
saltcon
\shape default
 to a nonzero value does result in some increase in computation time.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
rgbmax
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rgbmax
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sander_rgbmax"

\end_inset


\series default
 This parameter controls the maximum distance between atom pairs that will
 be considered in carrying out the pairwise summation involved in calculating
 the effective Born radii.
 Atoms whose associated spheres are farther way than 
\shape italic
rgbmax
\shape default
 from given atom will not contribute to that atom's effective Born radius.
 This is implemented in a "smooth" fashion (thanks mainly to W.A.
 Svrcek-Seiler), so that when part of an atom's atomic sphere lies inside
 
\shape italic
rgbmax
\shape default
 cutoff, that part contributes to the low-dielectric region that determines
 the effective Born radius.
 The default is 25 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AA
\end_layout

\end_inset

, which is usually plenty for single-domain proteins of a few hundred residues.
 Even smaller values (of 10-15 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AA
\end_layout

\end_inset

) are reasonable, changing the functional form of the generalized Born theory
 a little bit, in exchange for a considerable speed-up in efficiency, and
 without introducing the usual cut-off artifacts such as drifts in the total
 energy.
 
\begin_inset Newline newline
\end_inset

 The 
\shape italic
rgbmax
\shape default
 parameter affects only the effective Born radii (and the derivatives of
 these values with respect to atomic coordinates).
 The 
\shape italic
cut
\shape default
 parameter, on the other hand, determines the maximum distance for the electrost
atic, van der Waals and "off-diagonal" terms of the generalized Born interaction.
 The value of 
\shape italic
rgbmax
\shape default
 might be either greater or smaller than that of 
\shape italic
cut
\shape default
: these two parameters are independent of each other.
 However, values of 
\shape italic
cut
\shape default
 that are too small are more likely to lead to artifacts than are small
 values of 
\shape italic
rgbmax
\shape default
; therefore one typically sets 
\shape italic
rgbmax 
\begin_inset Formula $<$
\end_inset

= cut
\shape default
.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
rbornstat
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rbornstat
\end_layout

\end_inset

 If 
\shape italic
rbornstat = 1
\shape default
, the statistics of the effective Born radii for each atom of the molecule
 throughout the molecular dynamics simulation are reported in the output
 file.
 Default is 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
offset
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
offset
\end_layout

\end_inset

 The dielectric radii for generalized Born calculations are decreased by
 a uniform value "offset" to give the "intrinsic radii" used to obtain effective
 Born radii.
 Default is 0.09 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
AA
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
gbsa
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gbsa
\end_layout

\end_inset


\series default
 Option to carry out GB/SA (generalized Born/surface area) simulations.
 For the default value of 0, surface area will not be computed and will
 not be included in the solvation term.
 If 
\shape italic
gbsa = 1
\shape default
, surface area will be computed using the LCPO model.
\begin_inset CommandInset citation
LatexCommand cite
key "Weiser99"
literal "true"

\end_inset

 If 
\shape italic
gbsa = 2
\shape default
, surface area will be computed by recursively approximating a sphere around
 an atom, starting from an icosahedra.
 Note that no forces are generated in this case, hence, 
\shape italic
gbsa = 2
\shape default
 only works for a single point energy calculation and is mainly intended
 for energy decomposition in the realm of MM-GBSA.
 If 
\shape italic
gbsa = 3, 
\shape default
surface area will be computed using a fast pairwise approximation 
\begin_inset CommandInset citation
LatexCommand citep
key "Huangpwsasa"
literal "true"

\end_inset

 suitable for GPU computing in pmemd.cuda program; the acceleration in pmemd.cuda
 compared with 
\shape italic
gbsa = 2
\shape default
 is ~30 times faster 
\begin_inset CommandInset citation
LatexCommand citep
key "Huangpwsasa"
literal "true"

\end_inset

.
 Note that 
\shape italic
gbsa = 3 
\shape default
is currently not supported in sander, MM-GBSA, QM/MM or libsff.
 Although 
\shape italic
gbsa = 3
\shape default
 is supported in pmemd, the general usage is not recommended as the speed
 gain is trivial, given that the algorithm was particularly designed for
 fast approximation of surface area in GPU-accelerated GB simulations.
 Therefore, we recommend users to use gbsa=3 with pmemd.cuda.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
surften
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
surften
\end_layout

\end_inset


\series default
 Surface tension used to calculate the nonpolar contribution to the free
 energy of solvation (when 
\shape italic
gbsa = 1
\shape default
), as Enp = surften*SA.
 The default is 0.005 kcal/mol/A
\begin_inset Formula $^{2}$
\end_inset

.
\begin_inset CommandInset citation
LatexCommand cite
key "Sitkoff94"
literal "true"

\end_inset

 For 
\shape italic
gbsa = 3
\shape default
, suften works comparably with 
\shape italic
gbsa = 1
\shape default
 given the same value.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Huangpwsasa"
literal "true"

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
rdt
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rdt
\end_layout

\end_inset


\series default
 This parameter is only used for GB simulations with LES (Locally Enhanced
 Sampling).
 In GB+LES simulations, non-LES atoms require multiple effective Born radii
 due to alternate descreening effects of different LES copies.
 When the multiple radii for a non-LES atom differ by less than RDT, only
 a single radius will be used for that atom.
 See 
\begin_inset CommandInset ref
LatexCommand formatted
reference "cha:LES"

\end_inset

 for more details.
 Default is 0.0 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
AA
\end_layout

\end_inset

.
\end_layout

\begin_layout Chapter
Reference Interaction Site Model
\begin_inset CommandInset label
LatexCommand label
name "chap:RISM"

\end_inset


\end_layout

\begin_layout Standard
In addition to explicit and continuum implicit solvation models, Amber also
 has a third type of solvation
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solvation
\end_layout

\end_inset

 model for molecular mechanics simulations, the reference interaction site
 model (RISM
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
RISM
\end_layout

\end_inset

) of molecular solvation
\begin_inset CommandInset citation
LatexCommand citep
key "Luchko10,Chandler72,Hirata81,Hirata82,Hirata83,Chandler86a,Chandler86b,Beglov95,Beglov97,Kovalenko98,Kovalenko99b,Kovalenko03,Kovalenko00a,Kovalenko00b"
literal "true"

\end_inset

.
 In AmberTools, 1D-RISM
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
1D-RISM
\end_layout

\end_inset

 is available as 
\family sans
rism1d
\family typewriter

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
rism1d
\end_layout

\end_inset


\family default
.
 3D-RISM
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
3D-RISM
\end_layout

\end_inset

 is available as an option in 
\family sans
NAB
\family default
, 
\family sans
MMPBSA.py
\family default
 and 
\family sans
sander
\family default
.
 
\family sans
rism3d.snglpnt
\family default
 is a simplified, standalone interface, ideal for calculating solvation
 thermodynamics on individual structures and trajectories.
 Details specific to using 
\family sans
sander
\family default
 and 
\family sans
sander.MPI
\family default
 can be found in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:sander"

\end_inset

.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
RISM is an inherently microscopic approach, calculating the equilibrium
 distribution of the solvent, from which all thermodynamic properties are
 then determined.
 Specifically, RISM is an approximate solution to the Ornstein-Zernike
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Ornstein-Zernike
\end_layout

\end_inset

 (OZ) equation
\begin_inset CommandInset citation
LatexCommand citep
key "Chandler72,Hansen90,Hirata03a,Kovalenko03,Kovalenko99b"
literal "true"

\end_inset

 
\begin_inset Formula 
\begin{equation}
h(r_{12},\Omega_{1},\Omega_{2})=c(r_{12},\Omega_{1},\Omega_{2})+\rho\int d\mathbf{r}_{3}\,d\Omega_{3}\,c(r_{13},\Omega_{1},\Omega_{3})\,h(r_{32},\Omega_{3},\Omega_{2}),\label{eq:oz_gen}
\end{equation}

\end_inset

where 
\begin_inset Formula $r_{12}$
\end_inset

 is the separation between particles 1 and 2 while 
\begin_inset Formula $\Omega_{1}$
\end_inset

 and 
\begin_inset Formula $\Omega_{2}$
\end_inset

 are their orientations relative to the vector 
\begin_inset Formula $\mathbf{r}_{12}$
\end_inset

.
 The two functions in this relation are 
\begin_inset Formula $h$
\end_inset

, the total correlation function
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
total correlation function
\end_layout

\end_inset

, and 
\begin_inset Formula $c$
\end_inset

, the direct correlation function
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
direct correlation function
\end_layout

\end_inset

.
 The total correlation function is defined as 
\begin_inset Formula 
\[
h_{ab}(r_{ab},\Omega_{a},\Omega_{b})\equiv g_{ab}(r_{ab},\Omega_{a},\Omega_{b})-1,
\]

\end_inset

where 
\begin_inset Formula $g_{ab}$
\end_inset

 is the pair-distribution function
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pair-distribution function
\end_layout

\end_inset

, which gives the conditional density distribution of species 
\begin_inset Formula $b$
\end_inset

 about 
\begin_inset Formula $a$
\end_inset

.
 In cases where only radial separation is considered, for example by orientation
al averaging over site 
\begin_inset Formula $\alpha$
\end_inset

 of species 
\begin_inset Formula $a$
\end_inset

 and site 
\begin_inset Formula $\gamma$
\end_inset

 of species 
\begin_inset Formula $b$
\end_inset

, gives the familiar one dimensional site-site radial distribution function,
 
\begin_inset Formula $g_{\alpha\gamma}(r_{\alpha\gamma})$
\end_inset

.
\end_layout

\begin_layout Standard
For real mixtures, it is often convenient to speak in terms of a solvent,
 V, of high concentration and a solute, U, of low concentration.
 A generic case of solvation is infinite dilution of the solute, i.e., 
\begin_inset Formula $\rho^{\text{U}}\rightarrow0$
\end_inset

.
 We can rewrite Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:oz_gen"

\end_inset

, in the limit of infinite dilution, as a set of three equations:
\begin_inset Formula 
\begin{align}
h^{\text{VV}}(r_{12},\Omega_{1},\Omega_{2}) & =c^{\text{VV}}(r_{12},\Omega_{1},\Omega_{2})+\rho^{\text{V}}\int d\mathbf{r}_{3}\,d\Omega_{3}\,c^{\text{VV}}(r_{13},\Omega_{1},\Omega_{3})\,h^{\text{VV}}(r_{32},\Omega_{3},\Omega_{2}),\label{eq:oz_hvv}\\
h^{\text{UV}}(r_{12},\Omega_{1},\Omega_{2}) & =c^{\text{UV}}(r_{12},\Omega_{1},\Omega_{2})+\rho^{\text{V}}\int d\mathbf{r}_{3}\,d\Omega_{3}\,c^{\text{UV}}(r_{13},\Omega_{1},\Omega_{3})\,h^{\text{VV}}(r_{32},\Omega_{3},\Omega_{2}),\label{eq:oz_huv}\\
h^{\text{UU}}(r_{12},\Omega_{1},\Omega_{2}) & =c^{\text{UU}}(r_{12},\Omega_{1},\Omega_{2})+\rho^{\text{V}}\int d\mathbf{r}_{3}\,d\Omega_{3}\,c^{\text{UV}}(r_{13},\Omega_{1},\Omega_{3})\,h^{\text{VU}}(r_{32},\Omega_{3},\Omega_{2}).\label{eq:oz_huu}
\end{align}

\end_inset

Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:oz_huv"

\end_inset

 is directly relevant for biomolecular simulations where we are often interested
 in the properties of a single, arbitrarily complex solute in the solution
 phase.
 Solutions to Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:oz_huv"

\end_inset

 can be obtained using 3D-RISM.
 However, a solution to Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:oz_hvv"

\end_inset

 for pure solvent is a necessary prerequisite and is readily obtained from
 1D-RISM.
\end_layout

\begin_layout Standard
To obtain a solution to the OZ equations it is necessary to have a second
 equation that relates 
\begin_inset Formula $h$
\end_inset

 and 
\begin_inset Formula $c$
\end_inset

 or uniquely defines one of these functions.
 The general closure relation is
\begin_inset CommandInset citation
LatexCommand citep
key "Hansen90"
literal "true"

\end_inset


\begin_inset Formula 
\begin{equation}
g(r_{12},\Omega_{1},\Omega_{2})=\exp\left[-\beta u(r_{12},\Omega_{1},\Omega_{2})+h(r_{12},\Omega_{1},\Omega_{2})-c(r_{12},\Omega_{1},\Omega_{2})+b(r_{12},\Omega_{1},\Omega_{2})\right]\label{eq:closure}
\end{equation}

\end_inset


\begin_inset Formula $u$
\end_inset

 is the potential energy function for the two particles and 
\begin_inset Formula $b$
\end_inset

 is known as the bridge function (a non-local functional, representable
 as infinite diagrammatic series in terms of 
\begin_inset Formula $h$
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Hansen90"
literal "true"

\end_inset

).
 It should be noted that 
\begin_inset Formula $u$
\end_inset

 is the only point at which the interaction potential enters the equations.
 Depending on the method used to solve the OZ equations, 
\begin_inset Formula $u$
\end_inset

 is generally an explicit potential.
 In principle, it should now be possible to solve our two equations.
 For example, we may wish to use SPC/E as a water model.
 Inputting the relevant aspects of the SPC/E model into 
\begin_inset Formula $u$
\end_inset

, 1D-RISM can be used to calculate the equilibrium properties of the SPC/E
 model.
 A different explicit water model will yield different properties.
\end_layout

\begin_layout Standard
A fundamental problem for all OZ-like integral equation theories is the
 bridge function
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bridge function
\end_layout

\end_inset

, which contains multiple integrals that are readily solved only in special
 circumstances.
 In practice, an approximate closure relation must be used.
 While many closures have been developed, at this time only three are implemente
d in 3D-RISM: hypernetted-chain approximation
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
hypernetted-chain approximation
\end_layout

\end_inset

 (HNC
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
HNC
\end_layout

\end_inset

), Kovalenko-Hirata
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Kovalenko-Hirata
\end_layout

\end_inset

 (KH
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
KH
\end_layout

\end_inset

) and the partial series expansion of order-
\begin_inset Formula $n$
\end_inset

 (
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PSE-n 
\end_layout

\end_inset

PSE-
\begin_inset Formula $n$
\end_inset

).
\end_layout

\begin_layout Standard
For HNC, we set 
\begin_inset Formula $b=0$
\end_inset

, giving
\begin_inset CommandInset citation
LatexCommand citep
key "Hansen90"
literal "true"

\end_inset


\begin_inset Formula 
\begin{align}
g^{\text{\text{HNC}}}(r_{12},\Omega_{1},\Omega_{2}) & =\exp\left(-\beta u(r_{12},\Omega_{1},\Omega_{2})+h(r_{12},\Omega_{1},\Omega_{2})-c(r_{12},\Omega_{1},\Omega_{2})\right)\nonumber \\
 & =\exp\left(t^{*}(r_{12},\Omega_{1},\Omega_{2})\right)\label{eq:hnc}
\end{align}

\end_inset

where 
\begin_inset Formula $t^{*}$
\end_inset

 is the renormalize-indirect correlation function.
 HNC works well in many situations, including charged particles, but has
 difficulties when the size ratios of particles in the system are highly
 varied and may not always converge on a solution when one should exist.
 Also, as the bridge term is generally repulsive, HNC allows particles to
 approach too closely, overestimating non-Coulombic interactions
\begin_inset CommandInset citation
LatexCommand citep
key "Kovalenko03"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
KH is a combination of HNC and the mean spherical approximation (MSA), the
 former being applied to the spatial regions of solvent density depletion
 (
\begin_inset Formula $g<1$
\end_inset

), including the repulsive core, and the latter to those of solvent density
 enrichment (
\begin_inset Formula $g>1$
\end_inset

), such as association peaks
\begin_inset CommandInset citation
LatexCommand citep
key "Kovalenko99b,Kovalenko03"
literal "true"

\end_inset


\begin_inset Formula 
\begin{equation}
g^{\text{KH}}(r_{12},\Omega_{1},\Omega_{2})=\left\{ \begin{array}{ll}
\exp\Bigl(t^{*}(r_{12},\Omega_{1},\Omega_{2})\Bigr) & \text{for }g(r_{12},\Omega_{1},\Omega_{2})\leq1\\
1+t^{*}(r_{12},\Omega_{1},\Omega_{2}) & \text{for }g(r_{12},\Omega_{1},\Omega_{2})>1
\end{array}\right..\label{eq:kh}
\end{equation}

\end_inset

Like HNC, KH handles Coulombic systems well but overestimates non-Coulombic
 interactions.
 Unlike HNC, it does not have difficulties with highly asymmetric particle
 sizes and readily converges to stable solutions for almost all systems
 of practical interest.
 The reliability of the KH closure makes it particularly suitable for molecular
 mechanics calculations.
\end_layout

\begin_layout Standard
PSE-
\begin_inset Formula $n$
\end_inset

 offers the ability to interpolate between KH and HNC.
 Here, the exponential regions of solvent density enrichment are treated
 as a Taylor expansion, 
\begin_inset Formula 
\begin{equation}
g^{\text{PSE-n}}(r_{12},\Omega_{1},\Omega_{2})=\left\{ \begin{array}{ll}
\exp\Bigl(t^{*}(r_{12},\Omega_{1},\Omega_{2})\Bigr) & \text{for }g(r_{12},\Omega_{1},\Omega_{2})\leq1\\
\sum_{i=0}^{n}\nicefrac{\left(t^{*}(r_{12},\Omega_{1},\Omega_{2})\right)^{i}}{i!} & \text{for }g(r_{12},\Omega_{1},\Omega_{2})>1
\end{array}\right..\label{eq:pse-n}
\end{equation}

\end_inset

In the case of 
\begin_inset Formula $n=1$
\end_inset

, the KH closure is obtained, while in the limit of 
\begin_inset Formula $n\rightarrow\infty$
\end_inset

 HNC is recovered.
 This allows a balance between the numerical stability of KH and the often
 better accuracy of HNC.
\end_layout

\begin_layout Subsection
3D-RISM
\begin_inset CommandInset label
LatexCommand label
name "subsec:3D-RISM"

\end_inset


\end_layout

\begin_layout Standard
With the results from 1D-RISM, a 3D-RISM
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
3D-RISM
\end_layout

\end_inset

 calculation for a specific solute can be carried out.
 For 3D-RISM calculations, only the solvent orientational degrees of freedom
 are averaged over and Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:oz_huv"

\end_inset

 becomes
\begin_inset CommandInset citation
LatexCommand citep
key "Kovalenko98,Kovalenko99b"
literal "true"

\end_inset


\begin_inset Formula 
\begin{equation}
h_{\gamma}^{\text{UV}}\left(\mathbf{r}\right)=\sum_{\alpha}\int d\mathbf{r}^{\prime}c_{\alpha}^{\text{UV}}\left(\mathbf{r}-\mathbf{r}^{\prime}\right)\chi_{\alpha\gamma}^{\text{VV}}(r^{\prime}),\label{eq:3d-rism}
\end{equation}

\end_inset

where 
\begin_inset Formula $\chi_{\alpha\gamma}^{\text{VV}}(r)$
\end_inset

 is the site-site susceptibility of the solvent, obtained from 1D-RISM and
 given by 
\begin_inset Formula 
\[
\chi_{\alpha\gamma}^{\text{VV}}(r)=\omega_{\alpha\gamma}^{\text{VV}}(r)+\rho_{\alpha}h_{\alpha\gamma}^{\text{VV}}(r).
\]

\end_inset


\end_layout

\begin_layout Standard
3D-RISM supports HNC, KH and PSE-
\begin_inset Formula $n$
\end_inset

 closures (see Sections 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:rism3d.snglpnt-usage"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:NAB-Basic-molecular-mechanics"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:mmpbsa-rism"

\end_inset

).
 As with the 1D-RISM closures, these are constructed by analogy from Eqs.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:hnc"

\end_inset

-
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:pse-n"

\end_inset

.
 For example, HNC becomes
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
g_{\gamma}^{\text{HNC,UV}}\left(\mathbf{r}\right)=\exp\Bigl(-\beta u_{\gamma}^{\text{UV}}\left(\mathbf{r}\right)+h_{\gamma}^{\text{UV}}\left(\mathbf{r}\right)-c_{\gamma}^{\text{UV}}\left(\mathbf{r}\right)\Bigr).\label{eq:3d-hnc}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
As with 1D-RISM, correlation functions are represented on (3D) grids, convolutio
n integrals are performed in reciprocal space and a self-consistent solution
 is iteratively converged upon using the MDIIS accelerated solver.
 There is one 3D grid for each solvent type for each correlation function.
 For example, for a solute in SPC/E water there will be both 
\begin_inset Formula $g_{\text{H}}^{\text{UV}}(\mathbf{r})$
\end_inset

 and 
\begin_inset Formula $g_{\text{O}}^{\text{UV}}(\mathbf{r})$
\end_inset

 grids.
 Each point on the 
\begin_inset Formula $g_{\text{H}}^{\text{UV}}(\mathbf{r})$
\end_inset

 will give the fractional density of water hydrogen a that location of real-spac
e.
\end_layout

\begin_layout Standard
To properly treat electrostatic forces in electrolyte solution with polar
 molecular solvent and ionic species, the electrostatic asymptotics of all
 the correlation functions (both the 3D and radial ones) are treated analyticall
y
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Kovalenko03,Kaminski10,Kovalenko00a"
literal "true"

\end_inset

.
 The non-periodic electrostatic asymptotics are separated out in the direct
 and reciprocal space and the remaining short-range terms of the correlation
 functions are discretized on a 3D grid in a non-periodic box large enough
 to ensure decay of the short-range terms at the box boundaries 
\begin_inset CommandInset citation
LatexCommand citep
key "Kaminski10"
literal "true"

\end_inset

.
 The convolution of the short-range terms in the integral equation 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:3d-rism"

\end_inset

 is calculated using 3D fast Fourier transform
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Frigo98,Frigo99"
literal "true"

\end_inset

.
 Accordingly, the electrostatic asymptotics terms in the thermodynamics
 integral 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:exchem-kh"

\end_inset

 below are handled analytically and reduced to one-dimensional integrals
 easy to compute
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Kaminski10"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
With a converged 3D-RISM solution for 
\begin_inset Formula $h^{\text{UV}}$
\end_inset

 and 
\begin_inset Formula $c^{\text{UV}}$
\end_inset

, it is straightforward to calculate solvation
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solvation
\end_layout

\end_inset

 thermodynamics
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
thermodynamics
\end_layout

\end_inset

.
 From the perspective of molecular simulations, the most important thermodynamic
 values are the excess chemical potential
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
excess chemical potential
\end_layout

\end_inset

 of solvation (solvation free energy
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solvation free energy
\end_layout

\end_inset

), 
\begin_inset Formula $\mu^{\text{ex}}$
\end_inset

 and the mean solvation force
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mean solvation force
\end_layout

\end_inset

, 
\begin_inset Formula $\mathbf{f}_{i}^{\text{UV}}(\mathbf{R}_{i})$
\end_inset

, on each solute atom, 
\begin_inset Formula $i$
\end_inset

.
 
\begin_inset Formula $\mu^{\text{ex}}$
\end_inset

 can be obtained through analytical thermodynamic integration for HNC
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
HNC
\end_layout

\end_inset

, 
\begin_inset Formula 
\begin{equation}
\mu^{\text{ex,HNC}}=k_{\text{B}}T\sum_{\alpha}\rho_{\alpha}^{\text{V}}\int d\mathbf{r}\left[\frac{1}{2}\left(h_{\alpha}^{\text{UV}}(\mathbf{r})\right)^{2}-c_{\alpha}^{\text{UV}}(\mathbf{r})-\frac{1}{2}h_{\alpha}^{\text{UV}}(\mathbf{r})c_{\alpha}^{\text{UV}}(\mathbf{r})\right],\label{eq:exchem-hnc}
\end{equation}

\end_inset

KH
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
KH
\end_layout

\end_inset

 ,
\begin_inset Formula 
\begin{equation}
\mu^{\text{ex,KH}}=k_{\text{B}}T\sum_{\alpha}\rho_{\alpha}^{\text{V}}\int d\mathbf{r}\left[\frac{1}{2}\left(h_{\alpha}^{\text{UV}}(\mathbf{r})\right)^{2}\Theta\left(-h_{\alpha}^{\text{UV}}(\mathbf{r})\right)-c_{\alpha}^{\text{UV}}(\mathbf{r})-\frac{1}{2}h_{\alpha}^{\text{UV}}(\mathbf{r})c_{\alpha}^{\text{UV}}(\mathbf{r})\right],\label{eq:exchem-kh}
\end{equation}

\end_inset

and 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PSE-n 
\end_layout

\end_inset

PSE-
\begin_inset Formula $n$
\end_inset

,
\begin_inset Formula 
\begin{multline}
\mu^{\text{ex,PSE-}n}=k_{\text{B}}T\sum_{\alpha}\rho_{\alpha}^{\text{V}}\int d\mathbf{r}\left[\frac{1}{2}\left(h_{\alpha}^{\text{UV}}(\mathbf{r})\right)^{2}-c_{\alpha}^{\text{UV}}(\mathbf{r})-\frac{1}{2}h_{\alpha}^{\text{UV}}(\mathbf{r})c_{\alpha}^{\text{UV}}(\mathbf{r})\right.\\
\left.-\frac{\left(t^{*}\left(\mathbf{r}\right)\right)^{n+1}}{\left(n+1\right)!}\Theta\left(h_{\alpha}^{\text{UV}}(\mathbf{r})\right)\right],\label{eq:exchem-psen}
\end{multline}

\end_inset

where 
\begin_inset Formula $\Theta$
\end_inset

 is the Heaviside function.
 
\end_layout

\begin_layout Standard
Analogous versions of Eqns.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:hnc"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:exchem-kh"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:exchem-psen"

\end_inset

 are used in 1D-RISM.
 While these are used for DRISM they are have been derived for XRISM.
 Furthermore, these equations have been derived a number of different ways
 with slightly different functional forms of the 
\begin_inset Formula $-\frac{1}{2}hc$
\end_inset

 term
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Singer1985,Pettitt1986,Kovalenko99b,Kast2003,Schmeer2010"
literal "true"

\end_inset

.
 These different functional forms are equivalent in XRISM but not in DRISM.
 The form introduced by Pettitt and Rossky
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Pettitt1986"
literal "true"

\end_inset

 is the most popular in the literature and the default selection in 
\family typewriter
rism1d
\family default
.
 It is possible to have 
\family typewriter
rism1d
\family default
 evaluate and output all three functional forms (see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec:rism1d_Output"

\end_inset

) but, for DRISM, none of these expressions are strictly correct.
\end_layout

\begin_layout Standard
The force equation
\begin_inset Formula 
\[
\mathbf{f}_{i}^{\text{UV}}(\mathbf{R}_{i})=-\frac{\partial\mu^{\text{ex}}}{\partial\mathbf{R}_{i}}=-\sum_{\alpha}\rho_{\alpha}\int d\mathbf{r}g_{\alpha}^{\text{UV}}(\mathbf{r})\frac{\partial u_{\alpha}^{\text{UV}}(\mathbf{r}-\mathbf{R}_{i})}{\partial\mathbf{R}_{i}}
\]

\end_inset

is valid for all closures with a path independent expression for the excess
 chemical potential, such as HNC, KH and PSE-
\begin_inset Formula $n$
\end_inset

 closures implemented in 3D-RISM
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Gusarov06,Miyata07,Luchko10,Kast08"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
In addition to closure specific expressions for the solvation free energy,
 other approximations also exist.
 The Gaussian fluctuation
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Gaussian fluctuation
\end_layout

\end_inset

 (GF) approximation
\begin_inset CommandInset citation
LatexCommand citep
key "Chandler84,Ichiye88"
literal "true"

\end_inset

 is given as 
\begin_inset Formula 
\begin{equation}
\mu_{\text{}}^{\text{ex,GF}}=k_{\text{B}}T\sum_{\alpha}\rho_{\alpha}^{\text{V}}\int d\mathbf{r}\left[-c_{\alpha}^{\text{UV}}\left(\mathbf{r}\right)-\frac{1}{2}h_{\alpha}^{\text{UV}}\left(\mathbf{r}\right)c_{\alpha}^{\text{UV}}\left(\mathbf{r}\right)\right]\label{eq:rism-GF-functional}
\end{equation}

\end_inset

and has been shown to yield improved absolute solvation free energies for
 both polar and non-polar solutes
\begin_inset CommandInset citation
LatexCommand citep
key "Ichiye88,Lee93"
literal "true"

\end_inset

 but not necessarily for relative free energies
\begin_inset CommandInset citation
LatexCommand citep
key "Genheden10"
literal "true"

\end_inset

.
 It is not associated with a particular closure but is typically used in
 place of the expression for a given closure.
 
\end_layout

\begin_layout Standard
Eqs.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:exchem-hnc"

\end_inset

-
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:exchem-psen"

\end_inset

 give the total solvation free energy, 
\begin_inset Formula $\Delta G_{\text{sol}}$
\end_inset

, but it is often useful to decompose this into electrostatic (solvent polarizat
ion), 
\begin_inset Formula $\Delta G_{\text{pol}}$
\end_inset

, and non-electrostatic (dispersion and cavity formation), 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
\lang english

\begin_inset Formula $\left(\Delta G_{\text{dis}}+\Delta G_{\text{cav}}\right)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
\lang american
, terms.
 Conceptually, we can divide the path of the thermodynamic integration into
 two steps: first the solute without partial charges is inserted into the
 solvent (dispersion and cavity formation) and then partial charges are
 introduced, which polarize the solvent,
\begin_inset Formula 
\[
\mu^{\text{ex}}=\Delta G_{\text{sol}}=\Delta G_{\text{pol}}+\Delta G_{\text{dis}}+\Delta G_{\text{cav}}.
\]

\end_inset


\begin_inset Formula $\Delta G_{\text{sol}}$
\end_inset

 is produced by a 3D-RISM calculation on the charged solute.
 
\begin_inset Formula $\Delta G_{\text{pol}}$
\end_inset

 is then the difference of the two calculations.
 As a point of reference, generalized-Born and Poisson-Boltzmann methods
 calculate only 
\begin_inset Formula $\Delta G_{\text{pol}}$
\end_inset

 and, typically, use a calculation involving solvent accessible surface
 area to predict 
\begin_inset Formula $\Delta G_{\text{dis}}+\Delta G_{\text{cav}}$
\end_inset

.
\end_layout

\begin_layout Section
Practical Considerations
\end_layout

\begin_layout Subsection
Computational Requirements and Parallel Scaling
\end_layout

\begin_layout Standard
Calculating a 3D-RISM solution for a single solute conformation typically
 requires about 100 times more computer time than the same calculation with
 explicit solvent or PB.
 While there are other factors to consider, such as sampling confined solvent
 or overall efficiency of sampling in the whole statistical ensemble at
 once, this can be prohibitive for many applications.
 Memory is also an issue as the 3D correlation grids require anywhere from
 a few megabytes for the smallest solutes to gigabytes for large complexes.
 A lower bound and very good estimate for the total memory required is
\begin_inset Formula 
\begin{align*}
\text{Total memory}\geq8\,\text{bytes}\times & \left[N_{\text{box}}\vphantom{\underbrace{1}_{2}}\right.N^{\text{V}}\left(\underbrace{2N_{\text{MDIIS}}}_{c,\text{residual}}+\underbrace{1_{\vphantom{p}}}_{u}+\underbrace{N_{\text{decomp}}}_{\text{polar decomp}}\underbrace{N_{\text{propagate}}}_{\text{past solutions}}\right)\\
 & \phantom{\left[\vphantom{\underbrace{1}_{2}}\right.}\left.\left(N_{\text{box}}+2N_{y}N_{z}\right)\left\{ \underbrace{4}_{\text{asymptotics}}+\underbrace{1}_{\text{FFT scratch}}+\underbrace{2}_{g,h}N^{\text{V}}\right\} \vphantom{\underbrace{1}_{2}}\right]
\end{align*}

\end_inset

where 
\begin_inset Formula $N_{\text{box}}=N_{x}\times N_{y}\times N_{z}$
\end_inset

 is the total number of grid points, 
\begin_inset Formula $N^{\text{V}}$
\end_inset

 is the number of solvent atom species and 
\begin_inset Formula $N_{\text{MDIIS}}$
\end_inset

 is the number of MDIIS vectors used to accelerate convergence.
 
\begin_inset Formula $u^{\text{UV}}$
\end_inset

, 
\begin_inset Formula $c^{\text{UV}}$
\end_inset

 and the residual of 
\begin_inset Formula $c^{\text{UV}}$
\end_inset

 are stored in real-space only and require a full grid for each solvent.
 
\begin_inset Formula $c^{\text{UV}}$
\end_inset

 and its residual also require 
\begin_inset Formula $N_{\text{MDIIS}}$
\end_inset

 grids for the MDIIS routine (see the 
\family sans
mdiis_nvec
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
nvec
\end_layout

\end_inset

 keyword) and 
\begin_inset Formula $N_{\text{propagate}}$
\end_inset

 grids to make use of solutions from previous solute configurations to improve
 the initial guess (see the 
\family sans
npropagate
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
npropagate
\end_layout

\end_inset

 keyword).
 If a polar/non-polar decomposition is requested (see the 
\family sans
polardecomp
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
polardecomp
\end_layout

\end_inset

 keyword) an additional set of grids for past solutions with no solute charges
 is kept (
\begin_inset Formula $N_{\text{decomp}}=2$
\end_inset

); by default this is turned off (
\begin_inset Formula $N_{\text{decomp}}=1$
\end_inset

).
 The full real space grid plus an additional 
\begin_inset Formula $2N_{y}N_{x}$
\end_inset

 grid points are needed (due to the FFT) for 
\begin_inset Formula $g$
\end_inset

 and 
\begin_inset Formula $h$
\end_inset

 for each solvent species and for the four grids required to compute the
 long range asymptotics.
 Memory, therefore, scales linearly with 
\begin_inset Formula $N_{\text{box}}$
\end_inset

 while computation time scales as 
\begin_inset Formula $O(N_{\text{box}}\log(N_{\text{box}}))$
\end_inset

 due to the requirements of calculating the 3D fast Fourier transform (3D-FFT).
 To overcome these requirements, two options are available beyond optimizations
 already in place, multiple time steps and parallelization.
 Multiple time step methods are available only in sander (
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:sander"

\end_inset

) and are applicable to molecular dynamics calculations only.
 Parallelization is available for all calculations but is limited by system
 size and computational resources.
\end_layout

\begin_layout Standard
Both 
\family typewriter
sander
\family default
 and 
\family typewriter
NAB
\family default
 have MPI implementations of 3D-RISM (see Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Compiling-MPI-3D-RISM"

\end_inset

 for NAB compiling instructions) that distribute both memory requirements
 and computational load.
 As memory is distributed, the aggregate memory of many computers can be
 used to perform calculations on very large systems.
 Memory distribution is handled by the FFTW 3.3 library so decomposition
 is done along the z-axis.
 If a variable solvation box size is used, the only consideration is to
 avoid specifying a large, prime number of processes (
\begin_inset Formula $\ge7$
\end_inset

).
 For fixed box sizes, the number of grids points in each dimension must
 be divisible by two (a general requirement) and the number of grid points
 in the z-axis must be divisible by the number of processes.
 
\family typewriter
sander.MPI
\family default
 also has the additional consideration that the number of processes cannot
 be larger than the number of solute residues; 
\family typewriter
NAB
\family default
 does not suffer from this limitation.
\end_layout

\begin_layout Subsection
Output
\end_layout

\begin_layout Standard
\begin_inset Formula $g^{\text{UV}}$
\end_inset

, 
\begin_inset Formula $h^{\text{UV}}$
\end_inset

 and 
\begin_inset Formula $c^{\text{UV}}$
\end_inset

 files can be output for 3D-RISM calculations and are useful for visualization
 and calculation of thermodynamic quantities.
 As all file formats save only one density per file (see 
\begin_inset CommandInset href
LatexCommand href
name "https://ambermd.org/FileFormats.php"
target "https://ambermd.org/FileFormats.php"
literal "false"

\end_inset

), there is one file for each solvent atom type for each requested frame.
 For the default MRC format, each file is 
\begin_inset Formula $\left(256+N_{\text{box}}\times4\right)$
\end_inset


\begin_inset space ~
\end_inset

bytes, which can quickly fill disk space.
 Note that these file format use single precision floating point numbers.
\end_layout

\begin_layout Subsection
Numerical Accuracy
\begin_inset CommandInset label
LatexCommand label
name "subsec:RISM-Numerical-Accuracy"

\end_inset


\end_layout

\begin_layout Standard
Numerical accuracy depends on the residual tolerance specified for the numerical
 solution at runtime and the solvation box physical size and grid spacing.
 In most cases, you will need to test these parameters to ensure you have
 the accuracy required.
 As a rough guide, the numerical error in the solvation free energy is related
 to the tolerance by
\begin_inset Formula 
\begin{equation}
\epsilon_{\Delta G_{\text{solv}}}\approx10\times\text{tolerance}.\label{eq:rism_obs_err_tol}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Molecular dynamics 
\begin_inset CommandInset citation
LatexCommand citep
key "Luchko10"
literal "true"

\end_inset

, minimization and trajectory post-processing 
\begin_inset CommandInset citation
LatexCommand citep
key "Genheden10"
literal "true"

\end_inset

 have different requirements for the maximum residual tolerance.
 Molecular dynamics does well with a tolerance of 
\begin_inset Formula $10^{-5}$
\end_inset

 and 
\family typewriter
npropagate=5
\family default
.
 Minimization requires tolerances of 
\begin_inset Formula $10^{-11}$
\end_inset

 or lower and is typically limited to 
\begin_inset Formula $\mathtt{drms}\ge10^{-4}$
\end_inset

.
 Trajectory post-processing for MM/RISM should use enough digits to obtain
 the necessary accuracy when differences in solvation free energy are computed.
 For example, if a error 
\begin_inset Formula $<\unit[0.2]{kcal/mol}$
\end_inset

 is required for 
\begin_inset Formula $\Delta\Delta G{}_{\text{solv}}$
\end_inset

, then 
\begin_inset Formula $\Delta G_{\text{solv}}$
\end_inset

 should be computed with an absolute error of 
\begin_inset Formula $\unit[0.1]{kcal/mol}$
\end_inset

.
 The relative error required to achieve this depends on the magnitude of
 
\begin_inset Formula $\Delta G_{\text{solv}}$
\end_inset

.
\end_layout

\begin_layout Standard
Almost all applications should use a grid spacing of 0.3 to 0.5
\begin_inset space ~
\end_inset

Å or smaller.
 A larger grid spacing quickly leads to severe errors in thermodynamic quantitie
s.
 Smaller grid spacing may be necessary for some applications (e.g., mapping
 potentials of mean force).
 
\end_layout

\begin_layout Subsection
Solution Convergence
\begin_inset CommandInset label
LatexCommand label
name "subsec:rism-Solution-Convergence"

\end_inset


\end_layout

\begin_layout Standard
The default parameters for 3D-RISM are selected to provide the best performance
 for the majority of systems.
 In cases where a convergence is not achieved, the strategies below may
 be useful.
 
\end_layout

\begin_layout Subsubsection
Closure Bootstrap
\end_layout

\begin_layout Standard
When a PSE-
\begin_inset Formula $n$
\end_inset

 or HNC closure is desired, the most effective method to overcome convergence
 issues is to use a low order closure
\begin_inset Index idx
status open

\begin_layout Plain Layout
closure
\end_layout

\end_inset

 solution as a starting guess.
 The KH closure should be the starting point as it is numerically robust
 and, typically, converges easily in the vast majority of case.
 After this, higher orders of PSE-
\begin_inset Formula $n$
\end_inset

 can be used until the desired closure is reached.
 The procedure for 1D-RISM and 3D-RISM differs slightly in practice.
\end_layout

\begin_layout Paragraph
3D-RISM
\end_layout

\begin_layout Standard
All 3D-RISM interfaces have closure bootstrapping builtin via the 
\emph on
closure
\begin_inset Index idx
status open

\begin_layout Plain Layout
closure
\end_layout

\end_inset


\emph default
 and 
\emph on
tolerance
\begin_inset Index idx
status open

\begin_layout Plain Layout
tolerance
\end_layout

\end_inset


\emph default
 keywords.
 Closures should be specified as an ordered list with last closure being
 the highest order closure.
 The solutions of the intermediate closures can have a high tolerance.
 The default tolerance for intermediate closures is 1 and there is no observed
 benefit to tolerances less than 1e-2.
 
\end_layout

\begin_layout Subsubsection
MDIIS Settings
\end_layout

\begin_layout Standard
MDIIS
\begin_inset Index idx
status open

\begin_layout Plain Layout
MDIIS
\end_layout

\end_inset

 default setting are appropriate for most cases.
 Should your residual diverge or the solver get stuck on a particular value,
 you can try modest adjustments.
\end_layout

\begin_layout Paragraph
Decrease 
\emph on
mdiis_del
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
mdiis_del
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
mdiis_del
\emph default
 controls the step size of MDIIS.
 A smaller step size can help convergence but if this is set too small it
 can cause convergence problems.
 For 
\family typewriter
rism1d
\family default
, this should be no lower than 0.1 or 0.2.
 For 3D-RISM, it should be 0.5 at the lowest.
\end_layout

\begin_layout Paragraph
Increase 
\emph on
mdiis_nvec
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
mdiis_nvec
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the number of trial solutions that are saved for predicting a new
 solution.
 The optimal number for rapid convergence is typically 10 for 3D-RISM and
 20 for 1D-RISM.
 However, for 3D-RISM, the default choice of 5 requires much less memory
 and is computationally faster even though more iterations are required.
 Increasing the 
\emph on
mdiis_nvec
\emph default
 may help for 3D-RISM but is unlikely to help for 1D-RISM.
\end_layout

\begin_layout Paragraph
Increase 
\emph on
mdiis_restart
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
mdiis_restart
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Occasionally, the MDIIS routine goes in the wrong direction and the residual
 increases significantly.
 If it increases more than 
\emph on
mdiis_restart
\emph default
 then the MDIIS routine selects the solution with the lowest residual and
 purges the other trial solutions.
 The default value of 10 can be too aggressive and cause the solver to cycle.
 Increasing the value to 100 or 1000 sometimes allows the solver to recover
 from a misstep.
 
\end_layout

\begin_layout Subsubsection
Parameter Annealing
\end_layout

\begin_layout Standard
Chargeless, hot gases are the easiest systems to converge.
 For 1D-RISM, this can be used to bootstrap a solution in a similar manner
 to closure bootstrapping.
 By slowly turning on charges, lowering the temperature or increasing the
 density, a converged solution may be reached.
 This only works for 1D-RISM because it requires restarting from a previous
 solution.
 As with closure bootstrapping, files should be carefully renamed during
 the procedure.
 There is no general protocol but the parameter increment should be reduced
 as the target value is approached.
 E.g., turning on charges in a linear fashion usually isn't helpful.
\end_layout

\begin_layout Subsubsection
Forcefield selection
\end_layout

\begin_layout Standard
The forcefield may affect convergence due to the number of solvent sites
 involved or the particular parameters of the forcefield.
\end_layout

\begin_layout Paragraph
Number of Sites
\end_layout

\begin_layout Standard
Molecules with more sites are more difficult to converge.
 Six or more sites is already difficult to converge and more that 10 may
 not be possible under any circumstances.
 One solution is to use a united atom or coarse grained forcefields to reduce
 the number of sites.
\end_layout

\begin_layout Paragraph
Alternate Parameterization
\end_layout

\begin_layout Standard
Some parameter sets simply yield a stiffer set of equations to solve.
 Choosing an alternate parameter set may allow convergence with only small
 differences in the numerical results.
 For example, the cSPC/E water model with SPC/E Joung/Cheatham ions is easier
 to converge at higher ion concentrations in 1D-RISM than cTIP3P water with
 TIP3P Joung/Cheatham ions.
 Both models give nearly identical results in RISM at lower concentrations
 but NaCl in cTIP3P water will not converge above 0.5 M for the PSE-3 closure
 despite using all of the above methods.
\end_layout

\begin_layout Section
3D-RISM in sander
\begin_inset CommandInset label
LatexCommand label
name "sec:RISM"

\end_inset


\end_layout

\begin_layout Standard
3D-RISM
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
3D-RISM
\end_layout

\end_inset

 functionality is available in 
\emph on
sander
\emph default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sander
\end_layout

\end_inset

 and is built as part of the standard install procedure.
 MPI functionality for 3D-RISM in sander requires some additional information
 at compile time, described in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Compiling-MPI-3D-RISM"

\end_inset

.
 Some features specific to 
\emph on
sander
\emph default
 are discussed here.
\end_layout

\begin_layout Subsection
3D-RISM in 
\family typewriter
sander
\end_layout

\begin_layout Standard
Full 3D-RISM functionality is available in 
\family sans
sander
\family default
 as part of the standard install procedure.
 However, some methods available in 
\family typewriter
sander
\family default
 are not compatible with 3D-RISM, such as QM/MM simulations.
 At this time, only standard molecular dynamics, minimization and trajectory
 post-processing with non-polarizable force fields are supported.
 With the exception of multiple time step features, 3D-RISM keywords in
 
\family sans
sander
\family default
 are identical to those in NAB, 
\family sans
rism3d.snglpnt
\family default
 and 
\family sans
MMPBSA.py
\family default
.
 
\end_layout

\begin_layout Standard
3D-RISM specific command line options for 
\family sans
sander
\family default
 are
\end_layout

\begin_layout LyX-Code
sander [standard options] -xvv xvvfile -guv guvroot -huv huvroot 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
-cuv cuvroot -uuv uuvroot -asymp asympfile 
\end_layout

\begin_layout LyX-Code
-quv quvroot -chgdist chgdistroot 
\end_layout

\begin_layout LyX-Code
-exchem exchemroot -solvene solveneroot -entropy entropyroot -potUV potUVroot
\end_layout

\end_deeper
\begin_layout Description
xvvfile
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
xvv
\end_layout

\end_inset

 
\emph on
input
\emph default
 description of bulk solvent properties, required for 3D-RISM calculations.
 Produced by 
\family typewriter
rism1d
\family default
.
\end_layout

\begin_layout Description
guvroot
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
guv
\end_layout

\end_inset

 
\emph on
output
\emph default
 root name for solute-solvent 3D pair distribution function, 
\begin_inset Formula $G^{\text{UV}}(\mathbf{R})$
\end_inset

.
 This will produce one file for each solvent atom type for each frame requested.
\end_layout

\begin_layout Description
huvroot
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
huv
\end_layout

\end_inset

 
\emph on
output
\emph default
 root name for solute-solvent 3D total correlation function, 
\begin_inset Formula $H^{\text{UV}}(\mathbf{R})$
\end_inset

.
 This will produce one file for each solvent atom type for each frame requested.
\end_layout

\begin_layout Description
cuvroot
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cuv
\end_layout

\end_inset

 
\emph on
output
\emph default
 root name for solute-solvent 3D total correlation function, 
\begin_inset Formula $C^{\text{UV}}(\mathbf{R})$
\end_inset

.
 This will produce one file for each solvent atom type for each frame requested.
\end_layout

\begin_layout Description
uuvroot
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cuv
\end_layout

\end_inset

 
\emph on
output
\emph default
 root name for solute-solvent 3D potential energy function, 
\begin_inset Formula $U^{\text{UV}}(\mathbf{R})$
\end_inset

, in units of 
\begin_inset Formula $kT$
\end_inset

.
 This will produce one file for each solvent atom type for each frame requested.
\end_layout

\begin_layout Description
asympfile
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
long-range asymptotics
\end_layout

\end_inset

 
\emph on
output
\emph default
 root name for solute-solvent 3D long-range real-space asymptotics for 
\begin_inset Formula $C$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

.
 This will produce one file for each of 
\begin_inset Formula $C$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

 for each frame requested and does not include the solvent site charge.
 Multiply the distribution by the solvent site charge to obtain the long-range
 asymptotics for that site.
\end_layout

\begin_layout Description
quvroot
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
charge density
\end_layout

\end_inset

 
\emph on
output
\emph default
 root name for solute-solvent 3D charge density distribution [
\emph on
e/
\emph default
Å].
 This will produce one file that combines contributions from all solvent
 atom types for each frame requested.
\end_layout

\begin_layout Description
chgdistroot
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
charge distribution
\end_layout

\end_inset

 
\emph on
output
\emph default
 root name for solute-solvent 3D charge distribution [
\emph on
e
\emph default
].
 This will produce one file that combines contributions from all solvent
 atom types for each frame requested.
\end_layout

\begin_layout Description
exchemroot
\begin_inset Index idx
status open

\begin_layout Plain Layout
exchem
\end_layout

\end_inset

 
\emph on
output
\emph default
 root name for 3D excess chemical potential distribution files.
\end_layout

\begin_layout Description
solveneroot
\begin_inset Index idx
status open

\begin_layout Plain Layout
solvene
\end_layout

\end_inset

 
\emph on
output
\emph default
 root name for 3D solvation energy distribution files.
\end_layout

\begin_layout Description
entropyroot
\begin_inset Index idx
status open

\begin_layout Plain Layout
entropy
\end_layout

\end_inset

 
\emph on
output 
\emph default
root name for 3D solvation entropy distribution files.
\end_layout

\begin_layout Description
potUVroot
\begin_inset Index idx
status open

\begin_layout Plain Layout
potUVroot
\end_layout

\end_inset

 
\emph on
output
\emph default
 root name for 3D solute-solvent potential energy distribution files.
\end_layout

\begin_layout Standard
Generated output files can be large and numerous.
 For each type of correlation, a separate file is produced for each solvent
 atom type.
 The frequency that files are produced is controlled by the 
\family typewriter
ntwrism
\family default
 parameter.
 Every time step that output is produced, a new set of files is written
 with the time step number in the file name.
 For example, a molecular dynamics calculation using an SPC/E water model
 with 
\family typewriter
ntwrism=2
\family default
 and 
\family typewriter
-guv guv
\family default
 on the command line will produce two files on time step ten: 
\family typewriter
guv.O.10.mrc
\family default
 and 
\family typewriter
guv.H1.10.mrc
\family default
.
\end_layout

\begin_layout Subsubsection
Keywords
\begin_inset CommandInset label
LatexCommand label
name "subsec:rism3d_sander_Keywords"

\end_inset


\end_layout

\begin_layout Standard
With the exception of 
\family sans
irism
\family default
, which is found in the 
\family sans
&cntrl
\family default
 name list, all 3D-RISM options are specified in the 
\family sans
&rism
\family default
 name list.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
irism
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\series bold
irism
\end_layout

\end_inset


\series default
 [0] Use 3D-RISM.
 Found in 
\family typewriter
&cntrl
\family default
 name list.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space \space{}
\end_inset

0 Off.
\end_layout

\begin_layout Description
=
\begin_inset space \space{}
\end_inset

1 On.
\end_layout

\end_deeper
\begin_layout Paragraph
Closure Approximation
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
closure
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
closure
\end_layout

\end_inset

 [KH] Comma separate list of closure approximations.
 If more than one closure is provided, the 3D-RISM solver will use the closures
 in order to obtain a solution for the last closure in the list when no
 previous solutions are available.
 The solution for the last closure in the list is used for all output.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space \space{}
\end_inset

KH Kovalenko-Hirata (KH).
\end_layout

\begin_layout Description
=
\begin_inset space \space{}
\end_inset

HNC Hyper-netted chain equation (HNC).
\end_layout

\begin_layout Description
=PSE
\emph on
n
\emph default
 Partial series expansion of order-
\begin_inset Formula $n$
\end_inset

 (PSE-
\begin_inset Formula $n$
\end_inset

), where 
\begin_inset Quotes eld
\end_inset


\emph on
n
\emph default

\begin_inset Quotes erd
\end_inset

 is a positive integer.
\end_layout

\end_deeper
\begin_layout Paragraph
Solvation Free Energy Corrections
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
gfCorrection
\begin_inset Index idx
status open

\begin_layout Plain Layout
gfCorrection
\end_layout

\end_inset

 [0] Compute the Gaussian fluctuation excess chemical potential functional
 (see §
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:3D-RISM"

\end_inset

).
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 Off.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 On.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
pcpluscorrection
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
PC+/3D-RISM
\end_layout

\end_inset

 [0] Compute the PC+/3D-RISM excess chemical potential functional (see §
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:rism:Solvation-Free-Energy-Corrections"

\end_inset

).
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 Off.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 On.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
uccoeff
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
uccoeff
\end_layout

\end_inset

 [0,0,0,0] Compute the UC excess chemical potential functional with the
 provided coefficients (see §
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:rism:Solvation-Free-Energy-Corrections"

\end_inset

).
 
\emph on
a
\emph default
 and 
\emph on
b
\emph default
 are the coefficients for the original UC functional, though using the closure
 excess chemical potential functional.
 
\emph on
a1
\emph default
 and 
\emph on
b1
\emph default
 are optional and provide temperature dependence to the correction (UCT
 in 
\begin_inset CommandInset citation
LatexCommand citep
key "Johnson16"
literal "true"

\end_inset

).
\end_layout

\begin_layout Subparagraph
Fixed Box Size
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
ng3
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\series medium
ng3
\end_layout

\end_inset

 
\series default
[] Sets the number of grid points for a fixed size solvation box.
 This is only used if 
\family sans
buffer
\family default

\begin_inset Formula $<0$
\end_inset

.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
nx,ny,nz Points for 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

 and 
\begin_inset Formula $z$
\end_inset

 dimensions.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
solvbox
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\series medium
solvbox
\end_layout

\end_inset

 
\series default
[] Sets the size in Å of the fixed size solvation box.
 This is only used if 
\family sans
buffer
\family default

\begin_inset Formula $<0$
\end_inset

.
 See §
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:RISM-Numerical-Accuracy"

\end_inset

 for details on how this affects numerical accuracy and how this interacts
 with 
\family typewriter
ljTolerance
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
ljTolerance
\end_layout

\end_inset

, and 
\family typewriter
tolerance
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tolerance
\end_layout

\end_inset

.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
lx,ly,lz Box length in 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

 and 
\begin_inset Formula $z$
\end_inset

 dimensions.
\end_layout

\end_deeper
\begin_layout Paragraph
Solution Convergence
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
tolerance
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\series medium
tolerance
\end_layout

\end_inset

 
\series default
[1e-5] A list of maximum residual values for solution convergence.
 When used in combination with a list of closures it is possible to define
 different tolerances for each of the closures.
 This can be useful for difficult to converge.
 For the sake of efficiency, it is best to use as high a tolerance as possible
 for all but the last closure.
 For minimization a tolerance of 1e-11 or lower is recommended.
 See §
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:RISM-Numerical-Accuracy"

\end_inset

 for details on how this affects numerical accuracy and how this interacts
 with 
\family typewriter
ljTolerance
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
ljTolerance
\end_layout

\end_inset

, 
\family typewriter
buffer
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer
\end_layout

\end_inset

, and 
\family typewriter
solvbox
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solvbox
\end_layout

\end_inset


\family default
.
 Three formats of list are possible.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
one
\begin_inset space ~
\end_inset

tolerance All closures but the last use a tolerance of 1.
 The last tolerance in the list is used by the last closure.
 In practice this, is the most efficient.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
two
\begin_inset space ~
\end_inset

tolerances All closures but the last use the first tolerance in the list.
 The last tolerance in the list is used by the last closure.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $n$
\end_inset


\begin_inset space ~
\end_inset

tolerances Tolerances from the list are assigned to the closure list in
 order.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
ljTolerance
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
ljTolerance
\end_layout

\end_inset


\family default
 [-1] Determines the Lennard-Jones cutoff distance based on the desired
 accuracy of the calculation.
 See §
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:RISM-Numerical-Accuracy"

\end_inset

 for details on how this affects numerical accuracy and how this interacts
 with 
\family typewriter
tolerance
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tolerance
\end_layout

\end_inset

, 
\family typewriter
buffer
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer
\end_layout

\end_inset

, and 
\family typewriter
solvbox
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solvbox
\end_layout

\end_inset


\family default
.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
asympKSpaceTolerance
\family typewriter

\begin_inset Index idx
status open

\begin_layout Plain Layout
asympKSpaceTolerance
\end_layout

\end_inset


\family default
\emph on
 
\emph default
[-1] Determines the reciprocal space long range asymptotics cutoff distance
 based on the desired accuracy of the calculation.
 See §
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:RISM-Numerical-Accuracy"

\end_inset

 for details on how this affects numerical accuracy.
 Possible values are
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $<0$
\end_inset

 
\family typewriter
asympKSpaceTolerance=tolerance/10,
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
0 no cutoff, and
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $>0$
\end_inset

 given value determines the maximum error in the reciprocal-space long range
 asymptotics calculations.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
mdiis_del
\begin_inset Index idx
status open

\begin_layout Plain Layout
mdiis_del
\end_layout

\end_inset

 [0.7] 
\begin_inset Quotes eld
\end_inset

Step size
\begin_inset Quotes erd
\end_inset

 in MDIIS.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
mdiis_nvec
\begin_inset Index idx
status open

\begin_layout Plain Layout

\series medium
mdiis_nvec
\end_layout

\end_inset

 
\series default
[5] Number of vectors used by the MDIIS method.
 Higher values for this parameter can greatly increase memory requirements
 but may also accelerate convergence.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mdiis_restart
\begin_inset Index idx
status open

\begin_layout Plain Layout
mdiis_restart
\end_layout

\end_inset

 [10] If the current residual is 
\family typewriter
mdiis_restart
\family default
 times larger than the smallest residual in memory, then the MDIIS procedure
 is restarted using the lowest residual solution stored in memory.
 Increasing this number can sometimes help convergence.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mdiis_method
\begin_inset Index idx
status open

\begin_layout Plain Layout
mdiis_method
\end_layout

\end_inset

 [2] Specify implementation of the MDIIS routine.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space \space{}
\end_inset

0 Original.
 For small systems (e.g.
 
\begin_inset Formula $<64^{3}$
\end_inset

 grid points) this implementation may be faster than the BLAS optimized
 version.
\end_layout

\begin_layout Description
=
\begin_inset space \space{}
\end_inset

1 BLAS optimized.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 BLAS and memory optimized.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
maxstep
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
maxstep
\end_layout

\end_inset

 [10000] Maximum number of iterations allowed to converge on a solution.
\family typewriter
nrespa
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
npropagate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
npropagate
\end_layout

\end_inset

 [5] Number of previous solutions propagated forward to create an initial
 guess for this solute atom configuration.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space \space{}
\end_inset

0 Do not use any previous solutions
\end_layout

\begin_layout Description
=
\begin_inset space \space{}
\end_inset

1..5 Values greater than 0 but less than 4 or 5 will use less system memory
 but may introduce artifacts to the solution (e.g., energy drift).
\end_layout

\end_deeper
\begin_layout Paragraph
Minimization and Molecular Dynamics
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
zerofrc
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\series medium
zerofrc
\end_layout

\end_inset

 
\series default
[1] Redistribute solvent forces across the solute such that the net solvation
 force on the solute is zero.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space \space{}
\end_inset

0 Unmodified forces.
\end_layout

\begin_layout Description
=
\begin_inset space \space{}
\end_inset

1 Zero net force.
\end_layout

\end_deeper
\begin_layout Paragraph
Trajectory Post-Processing
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
apply_rism_force
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\series medium
apply
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

rism
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

force
\end_layout

\end_inset

 
\series default
[1] Calculate and use solvation forces from 3D-RISM.
 Not calculating these forces can save computation time and is useful for
 trajectory post-processing.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space \space{}
\end_inset

0 Do not calculate forces.
\end_layout

\begin_layout Description
=
\begin_inset space \space{}
\end_inset

1 Calculate forces.
\end_layout

\end_deeper
\begin_layout Paragraph
Output
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
ntwrism
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\series medium
ntwrism
\end_layout

\end_inset

 
\series default
[0] Indicates that solvent density grid should be written to file every
 
\family typewriter
ntwrism
\family default
 iterations.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space \space{}
\end_inset

0 No files written.
\end_layout

\begin_layout Description
>=
\begin_inset space \space{}
\end_inset

1 Output every 
\family typewriter
ntwrism
\family default
 time steps.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
molReconstruction
\begin_inset Index idx
status open

\begin_layout Plain Layout
molReconstruction
\end_layout

\end_inset

 [0] For any thermodynamic distributions requested, also out the molecular
 reconstruction (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Molecular-Reconstruction"

\end_inset

).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
volfmt
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
volfmt
\end_layout

\end_inset

 [`mrc'] Format of volumetric data files.
 May be 
\family sans
mrc
\family default
, 
\family sans
ccp4
\family default
, 
\family sans
dx
\family default
 or 
\family sans
xyzv
\family default
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:RISM-File-Formats"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "https://ambermd.org/FileFormats.php"
target "https://ambermd.org/FileFormats.php"
literal "false"

\end_inset


\end_layout

\end_inset

).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
verbose
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
verbose
\end_layout

\end_inset

 [0] Indicates level of diagnostic detail about the calculation written
 to the log file.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space \space{}
\end_inset

0 No output.
\end_layout

\begin_layout Description
=
\begin_inset space \space{}
\end_inset

1 Print the number of iterations used to converge.
\end_layout

\begin_layout Description
=
\begin_inset space \space{}
\end_inset

2 Print details for each iteration and information about what FCE is doing
 every 
\family typewriter
progress
\family default
 iterations.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
write_thermo
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
write_thermo
\end_layout

\end_inset

 [1] Print solvation thermodynamics in addition to standard 
\family sans
\shape italic
\emph on
sander
\family default
\shape default
\emph default
 output.
 The format is the same as that found in 
\shape italic
\emph on
NAB
\shape default
\emph default
 and 
\family sans
\shape italic
\emph on
rism3d.snglpnt
\family default
\shape default
\emph default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
polarDecomp
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
polarDecomp
\end_layout

\end_inset

 [0] Decomposes solvation free energy into polar and non-polar components.
 Note that this typically requires 80% more computation time.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 No polar/non-polar decomposition.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 Polar/non-polar decomposition.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
progress
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
progress
\end_layout

\end_inset

 [1] Display progress of the 3D-RISM solution every 
\family typewriter
kshow
\family default
 iterations.
 0 indicates this information will not be displayed.
 Must be used with 
\begin_inset Formula $\mathtt{verbose}>1$
\end_inset

.
\end_layout

\begin_layout Subsubsection

\family typewriter
Example
\end_layout

\begin_layout Paragraph
Molecular Dynamics (
\family typewriter
imin=0
\family default
)
\end_layout

\begin_layout LyX-Code
molecular dynamics with 3D-RISM and impulse MTS
\end_layout

\begin_layout LyX-Code
&cntrl
\end_layout

\begin_layout LyX-Code
    ntx=1, ntpr=100, ntwx=1000,ntwr=10000,
\end_layout

\begin_layout LyX-Code
    nstlim=10000,dt=0.001,                !No shake or r-RESPA
\end_layout

\begin_layout LyX-Code
    ntt=3, temp0=300, gamma_ln=20,        !Langevin dynamics
\end_layout

\begin_layout LyX-Code
    ntb=0,                                !Non-periodic
\end_layout

\begin_layout LyX-Code
    cut=999.,                             !Calculate all 
\end_layout

\begin_layout LyX-Code
                                          !solute-solute
\end_layout

\begin_layout LyX-Code
                                          !interactions
\end_layout

\begin_layout LyX-Code
    irism=1,
\end_layout

\begin_layout LyX-Code
/ 
\end_layout

\begin_layout LyX-Code
&rism
\end_layout

\begin_layout LyX-Code
    rismnrespa=5,                         !r-RESPA MTS 
\end_layout

\begin_layout LyX-Code
    fcenbasis=10,fcestride=2,fcecrd=2     !FCE MTS
\end_layout

\begin_layout LyX-Code
/ 
\end_layout

\begin_layout Paragraph
Minimization (
\family typewriter
imin=1
\family default
)
\end_layout

\begin_layout LyX-Code
Default XMIN minimization with 3D-RISM
\end_layout

\begin_layout LyX-Code
&cntrl
\end_layout

\begin_layout LyX-Code
    imin=1, maxcyc=200,
\end_layout

\begin_layout LyX-Code
    drms=1e-3,          !RMS force.
 Can be as low as 1e-4
\end_layout

\begin_layout LyX-Code
    ntmin=3,            !XMIN
\end_layout

\begin_layout LyX-Code
    ntpr=5,
\end_layout

\begin_layout LyX-Code
    ntb=0,              !Non-periodic
\end_layout

\begin_layout LyX-Code
    cut=999.,           !Calculate all 
\end_layout

\begin_layout LyX-Code
                        !solute-solute interactions
\end_layout

\begin_layout LyX-Code
    irism=1
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout LyX-Code
&rism
\end_layout

\begin_layout LyX-Code
    tolerance=1e-11,    !Low tolerance
\end_layout

\begin_layout LyX-Code
    solvcut=9999,       !No cut-off for 
\end_layout

\begin_layout LyX-Code
                        !solute-solvent interactions
\end_layout

\begin_layout LyX-Code
    centering=2         !Solvation box centering 
\end_layout

\begin_layout LyX-Code
                        !using center-of-geometry
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout Paragraph
Trajectory Post-Processing (
\family typewriter
imin=5
\family default
)
\end_layout

\begin_layout LyX-Code
Trajectory post-processing with 3D-RISM
\end_layout

\begin_layout LyX-Code
&cntrl
\end_layout

\begin_layout LyX-Code
    ntx=1, ntpr=1, ntwx=1,
\end_layout

\begin_layout LyX-Code
    imin=5,maxcyc=1,       !Single-point energy calculation
\end_layout

\begin_layout LyX-Code
                           !on each frame
\end_layout

\begin_layout LyX-Code
    ntb=0,                 !Non-periodic
\end_layout

\begin_layout LyX-Code
    cut=9999.,             !Calculate all 
\end_layout

\begin_layout LyX-Code
                           !solute-solute interactions
\end_layout

\begin_layout LyX-Code
    irism=1
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout LyX-Code
&rism
\end_layout

\begin_layout LyX-Code
    tolerance=1e-4,        !Saves some time compared to 1e-5
\end_layout

\begin_layout LyX-Code
    apply_rism_force=0,    !Saves some time.
 Forces are not used.
\end_layout

\begin_layout LyX-Code
    npropagate=1           !Saves some time and 4*8*Nbox bytes
\end_layout

\begin_layout LyX-Code
                           !of memory compared to npropagate=5.
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout Section
MoFT: analysis of volumetric data
\begin_inset CommandInset label
LatexCommand label
name "sec:MoFT"

\end_inset


\end_layout

\begin_layout Standard
MoFT is a series of computational programs and libraries for analysis of
 volumetric data generated by theoretical models (MD, MC simulations, 3D-RISM,
 NLPB) or derived from experimental measurement (e.g X-ray crystallography,
 cryo-EM).
 
\family typewriter
metatwist
\family default
 is an application that provides a low level access to most of the functionaliti
es available in MoFT and is supported by metaFFT, a templated interface
 to FFTW library v3 (http://www.fftw.org/), that supports discrete Fourier
 transforms, correlations, convolutions on 1 or 3-dimensional data of float,
 double of complex datatypes.
 
\end_layout

\begin_layout Standard

\series bold
Examples of MoFT usage and how to cite.

\series default
 The development of the functionalities available in MoFT has been driven
 by applied work which has been reported in the references bellow.
 Consider including these publications in your reference list when using
 MoFT:
\end_layout

\begin_layout Enumerate
"Ion counting from explicit-solvent simulations and 3D-RISM" GM Giambaşu,
 T Luchko, D Herschlag, DM York, DA Case 
\series bold
Biophysical Journal
\series default
 106 (4), 883-894 doi:10.1016/j.bpj.2014.01.021
\end_layout

\begin_layout Enumerate
"Competitive interaction of monovalent cations with DNA from 3D-RISM" GM
 Giambaşu, MK Gebala, MT Panteva, T Luchko, DA Case, DM York 
\series bold
Nucleic Acids Research
\series default
 43 (17), 8405-8415 doi:10.1093/nar/gkv830
\end_layout

\begin_layout Enumerate
"Predicting site-binding modes of ions and water to nucleic acids using
 molecular solvation theory" GM Giambaşu, DA Case, DM York 
\series bold
Journal of the American Chemical Society
\series default
 doi:10.1021/jacs.8b11474
\end_layout

\begin_layout Subsection
Usage
\end_layout

\begin_layout Standard
Most of the functionalities available in MoFT are exposed through the
\family typewriter
 metatwist
\family default
 application, and include: 
\end_layout

\begin_layout Enumerate
Reading, converting and writing 
\family typewriter
.dx
\family default
 (OpenDX 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
antiquated format that is still widely used by most molecular graphics programs,
 see 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/IBM_OpenDX
\end_layout

\end_inset

.
\end_layout

\end_inset

), 
\family typewriter
.mrc
\family default
 
\begin_inset Foot
status open

\begin_layout Plain Layout
a common binary format in use by X-ray crystallography and cryo-EM, see
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.ccpem.ac.uk/mrc_format/mrc2014.php
\end_layout

\end_inset


\end_layout

\end_inset

, 
\family typewriter
.ccp4
\family default
 
\begin_inset Foot
status open

\begin_layout Plain Layout
another common, but older, binary format in use by X-ray crystallography
 and cryo-EM, see 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.ccp4.ac.uk/html/maplib.html
\end_layout

\end_inset


\end_layout

\end_inset

 volumetric data formats.
\end_layout

\begin_layout Enumerate
Dimensionality reduction of volumetric data:
\end_layout

\begin_deeper
\begin_layout Enumerate
radial distribution functions using cylindrical and spherical frames of
 references (3D -> 1D).
\end_layout

\begin_layout Enumerate
projection of 3D-data on x,y or z coordinates (3D -> 1D).
\end_layout

\begin_layout Enumerate
worm plots (3D -> 1D), useful to characterize how density changes along
 curvilinear paths (such as channels) which are represented as B-splines
 and whose pivot points are provided by the user.
 The abscissa is the result of integrating the 3D density within a tube
 of specified radius around the curvilinear path.
 See 
\begin_inset CommandInset citation
LatexCommand citep
key "Giambasu2019"
literal "true"

\end_inset

 for examples of how worm plots can be used to analyze water and ion distributio
n in ion channels and G-quadruplexes.
 
\end_layout

\begin_layout Enumerate
twisted, untwisted maps (3D -> 2D), meant to map the density of ions and
 water in an average plane of nucleic acid basepairs that are part of helical
 regions.
 Twisted maps are simply average densities in a plane perpendicular to the
 helical axis.
 Untwisted maps deconvolute this information with a mobile frame of reference
 that moves against the natural twist of the helical motif.
 See 
\begin_inset CommandInset citation
LatexCommand citep
key "Giambasu2014,Giambasu2015"
literal "true"

\end_inset

 for examples of untwisted maps usage.
\end_layout

\end_deeper
\begin_layout Enumerate
Convolutions of volumetric data with several kernels, including Gaussian,
 sinc, box, Laplacian of a Gaussian, Butterworth filter for reduction of
 resolution range in the reciprocal space, crystallographic atomic form
 factors and densities to obtain to corresponding electron densities.
 
\end_layout

\begin_layout Enumerate
Transformations, including numerical derivatives (finite difference Laplacian),
 logarithm operators to compute potentials of mean force from equilibrium
 distributions.
\end_layout

\begin_layout Enumerate
Water and ion placement using Laplacian mapping.
\end_layout

\begin_layout Standard

\family typewriter
metatwist 
\family default
has the following command line options:
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--help Produces help message.
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--dx Input density file(s): *.dx(gz,bz2)|*.mrc|*.ccp4.
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--ldx Input Laplacian file (*.dx|*.ccp4) for use with 
\begin_inset Quotes eld
\end_inset

-- map blobs(per)
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--odx Output density file.
 File type is determined by extension: *.dx, *.mrc or *.ccp4.
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--map Mapping type: 
\begin_inset Newline newline
\end_inset

~ cylindrical (1D): cylindrical RDF along z-axis.
 
\begin_inset Newline newline
\end_inset

~ twist (2D): twisted helical map along z-axis.
\begin_inset Newline newline
\end_inset

~ untwist (2D): untwisted helical map along z-axis.
 
\begin_inset Newline newline
\end_inset

~ spherical (1D): spherical RDF.
 
\begin_inset Newline newline
\end_inset

~ projxyz: (1D) project 3D-map on x,y,z axes.
 
\begin_inset Newline newline
\end_inset

~ excess: excess number of particles.
 
\begin_inset Newline newline
\end_inset

~ blobs: Laplacian blob analysis.
 
\begin_inset Newline newline
\end_inset

~ blobsper: Laplacian blob analysis on a periodic 3D-map.
 
\begin_inset Newline newline
\end_inset

~ rhoel (3D) : Electron density using atomic form factors.
 
\begin_inset Newline newline
\end_inset

~ rhoelreal (3D): Electron density using atomic densities.
 
\begin_inset Newline newline
\end_inset

~ cutresol (3D): Cut 3D-map resolution range.
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--bin Bin size for re-sampling (Å) .
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--(x|y|z|r)max Extent in the x,y, z or r directions (Å).
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--utrate Untwisting rate for use with 
\begin_inset Quotes eld
\end_inset

--map twist
\begin_inset Quotes erd
\end_inset

.
 Untwisting rate: 0.18587 rad/Å - BDNA 0.16870 rad/Å - TDNA 0.25590 rad/Å -
 ARNA (rad/Å).
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--com COM coordinates .
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--resolution Min and max resolution thresholds (in Å) for use with 
\begin_inset Quotes eld
\end_inset

 -- map cutresol
\begin_inset Quotes erd
\end_inset

 (default 
\begin_inset Quotes eld
\end_inset

1.0 10.0
\begin_inset Quotes erd
\end_inset

, Å).
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--bulkdens Bulk density (M, mol/L, molar).
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--species Chemical species: atom, e.g.
 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

, or atom & residue, e.g.
 
\begin_inset Quotes eld
\end_inset

O WAT
\begin_inset Quotes erd
\end_inset

, useful for water and ions placement as well as for computing electron
 densities.
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--sigma Convolution kernel width, sigma (in Å).
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--threshold Laplacian threshold.
 Sometimes not all the locally concentrated regions might be interesting.
 The threshold limits the region of interest to min(L[rho]) to threshold*min(L[r
ho]).
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--convolve Convolution type: (1) Gaussian, (2) box, (3) sinc, (4) Laplacian
 of Gaussian.
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--nlog Take the negative natural logarithm of the input density.
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--laplacian Compute Laplacian of the input density using finite difference.
 
\end_layout

\begin_layout Labeling
\labelwidthstring --(x|y|z|r)maxaa
--average Average volumetric data when multiple datasets have been loaded.
 Otherwise, data will be accumulated.
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Standard
All files relevant for these examples are available in $MSANDERHOME/src/moft/exa
mples/.
 
\end_layout

\begin_layout Subsection*
Water and ion placement using Laplacian mapping
\end_layout

\begin_layout Standard
We will use MoFT to locate and map tightly bound solution particles to a
 solute molecule of interest using molecular distribution functions obtained
 from 3D-RISM.
 Specifically, we will try to locate K+ binding mode(s) to a small molecule
 ionophore - a crown ether.
\end_layout

\begin_layout Standard
Generally, molecular density distributions of ions and water have alternating
 regions where they are highly concentrated and others where they are locally
 depleted.
 While these complex topologies are a benefit of models that include particle-pa
rticle correlations (such as explicit solvent MD, RISM) they make determination
 of boundaries of 
\begin_inset Quotes eld
\end_inset

binding modes
\begin_inset Quotes erd
\end_inset

 a complex task.
 Our solution is to demarcate these binding modes using the Laplacian of
 the solvent distributions.
 When applied to 3D distributions, the Laplacian measures the difference
 between the local particle density and the average of the density in a
 small neighborhood of that point.
 Hence, where the Laplacian is positive the local particle density is 
\shape italic
locally depleted
\shape default
, while for the regions with negative values of the Laplacian the particle
 density is 
\shape italic
locally concentrated
\shape default
.
 Experience shows that a pre-conditioning using kernels that smooth out
 small local variations in the density can help eliminate false positives.
 Here we will apply the Laplacian mapping on the density convolution with
 a 3D Gaussian which can be carried out in a single step by a convolution
 with a Laplacian of a Gaussian kernel.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/case/amber.git/doc/laplacian-bc5.pdf
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
(Left) The negative Laplacian (cyan) can be used to map locally concentrated
 regions of a density distribution, 
\begin_inset Formula $\rho$
\end_inset

.
 (Middle) A bis-crown ether (shown as CPK) binding mode to K+ (violet sphere)
 determined using density distributions obtained using RISM and located
 using Laplacian mapping in MoFT.
 (Right) Two level sets of the Laplacian of the K+ distribution, one using
 a threshold (see documentation) of 0.1 (solid cyan) and the other using
 a threshold of 0.01 (semi-transparent cyan).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
(1) Generate density distributions.
\end_layout

\begin_layout Standard
Solvent density distributions can be determined by several means, but here
 RISM is used (See 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:RISM"

\end_inset

 for how to run RISM).
 When running RISM, make sure to specify the 
\begin_inset Quotes eld
\end_inset

-- guv
\begin_inset Quotes erd
\end_inset

 keyword to have the solution components density distributions outputted:
\end_layout

\begin_layout LyX-Code
rism3d.snglpnt --prmtop bc5-k.parm7 --xvv KCl-aq-0.2M-pse3.xvv 
\backslash

\end_layout

\begin_layout LyX-Code
               --closure pse1,pse2,pse3 --tolerance 1e-03,1e-06 
\backslash

\end_layout

\begin_layout LyX-Code
               --ng 192,192,192 --solvbox 96,96,96 --buffer -1 
\backslash

\end_layout

\begin_layout LyX-Code
               --mdiis_del 0.5 --mdiis_nvec 10 
\backslash

\end_layout

\begin_layout LyX-Code
               --verbose 2 --npropagate 0 --guv g > rism.out
\end_layout

\begin_layout Paragraph*
(2) Compute the Laplacian map.
\end_layout

\begin_layout Standard
First, one has to take the Laplacian of the distribution, using the 
\begin_inset Quotes eld
\end_inset

convolve
\begin_inset Quotes erd
\end_inset

 option:
\end_layout

\begin_layout LyX-Code

\family typewriter
metatwist --dx g.K+.1.dx.bz2 --odx lp-K+.dx --species K+ K+ --bulkdens 0.2
\backslash

\end_layout

\begin_layout LyX-Code

\family typewriter
          --convolve 4 --sigma 1.0
\end_layout

\begin_layout Standard
Here, --dx specifies the input density, --odx the root of the output file
 containing the Laplacian density.
 Option 
\begin_inset Quotes eld
\end_inset

--convolve 4
\begin_inset Quotes erd
\end_inset

 specifies the type of convolution that leads to the Laplacian; here we
 have chosen to obtain the Laplacian using a convolution with the Laplacian
 of a Gaussian, in this case of width 1.0, specified using 
\begin_inset Quotes eld
\end_inset

–sigma 1.0
\begin_inset Quotes erd
\end_inset

.
 This step produces a 
\begin_inset Quotes eld
\end_inset

convolution-lp-K+.dx
\begin_inset Quotes erd
\end_inset

 file that can be visualized in your molecular graphics application and
 will be used in the next step.
\end_layout

\begin_layout Paragraph*
(3) Solvent Placement.
\end_layout

\begin_layout Standard
Second, using the determined Laplacian, we can proceed to the actual analysis:
\end_layout

\begin_layout LyX-Code

\family typewriter
metatwist --dx g.K+.1.dx.bz2 --ldx convolution-lp-K+.dx --species K+ K+ 
\backslash

\end_layout

\begin_layout LyX-Code

\family typewriter
          --bulkdens 0.2 --map blobs --thresh 0.1 
\end_layout

\begin_layout Standard
Here, --ldx specifies the input Laplacian, 
\begin_inset Quotes eld
\end_inset

--map blobs
\begin_inset Quotes erd
\end_inset

 asks for solvent placement analysis to be carried out (you can think about
 solvent binding modes as blobs) using a Laplacian threshold of 0.1.
 While all the regions of space having a negative Laplacian can be considered
 as 
\begin_inset Quotes eld
\end_inset

locally concentrated
\begin_inset Quotes erd
\end_inset

, often a tighter (more negative) threshold can simplify the analysis.
 Lastly, --bulkdens specifies the concentration of the solution particle;
 in this case K+ has a bulk concentration of 0.2M.
 With these settings, a pdb file named 
\begin_inset Quotes eld
\end_inset

g.K+.1-convolution-lp-K+-blobs-centroid.pdb
\begin_inset Quotes erd
\end_inset

 is produced that contains the coordinates of the centroid of each solvation
 binding mode (in this case only one mode has been found), its occupancy
 and temperature factor.
\end_layout

\begin_layout LyX-Code
ATOM      1  K+   K+ C   1      10.926  12.084   4.026  0.10 92.73          K+
\end_layout

\begin_layout Subsection*
Converting particle density distributions to electron densities
\end_layout

\begin_layout Standard
It is often necessary to convert particle density distributions to electron
 densities to directly compare against experimentally derived data, such
 as that obtained from X-ray crystallography.
 To illustrate this functionality, we will use the aforementioned RISM calculati
on on the crown ether immersed in a KCl aqueous solution which produced
 density distributions for K+, Cl-, water H and water O.
 In the first step, each of the particle densities is converted to their
 corresponding electron densities using model atomic factors used in crystallogr
aphy.
 In a second stage, all the electron densities are accumulated into a resulting
 total electron density.
 Note the use of 
\begin_inset Quotes eld
\end_inset

 --species
\begin_inset Quotes erd
\end_inset

 option to guide the choice of model density based on the ionization or
 oxidation number of each atom as well as the 
\begin_inset Quotes eld
\end_inset

 --map rhoel
\begin_inset Quotes erd
\end_inset

 option to ask for computation of the electron density map.
 A similar option 
\begin_inset Quotes eld
\end_inset

--map rhoelreal
\begin_inset Quotes erd
\end_inset

 could be used which instead of atomic factors will use reference atomic
 densities to compute the overall electron density.
\end_layout

\begin_layout LyX-Code
# (1) convert each particle density to electron densities :
\end_layout

\begin_layout LyX-Code
metatwist --dx g.K+.1.dx.bz2  --species K+  --odx rho.K+.1.dx  --map rhoel --bulkdens
 0.2 
\end_layout

\begin_layout LyX-Code
metatwist --dx g.Cl-.1.dx.bz2 --species Cl- --odx rho.Cl-.1.dx --map rhoel --bulkdens
 0.2
\end_layout

\begin_layout LyX-Code
metatwist --dx g.O.1.dx.bz2   --species O2- --odx rho.O.1.dx   --map rhoel --bulkdens
 55.55
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# (2) assembly of all densities into rho.dx :
\end_layout

\begin_layout LyX-Code
metatwist --dx rho.Cl-.1.dx   rho.K+.1.dx    rho.O.1.dx --odx rho.dx --species none
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:sqm"

\end_inset

sqm: Semi-empirical quantum chemistry
\end_layout

\begin_layout Standard

\family sans
AmberTools
\family default
 contains its own quantum chemistry program, called 
\emph on
sqm
\emph default
.
 This is code extracted from the QM/MM portions of 
\emph on
sander
\emph default
, but is limited to 
\begin_inset Quotes eld
\end_inset

pure QM
\begin_inset Quotes erd
\end_inset

 calculations.
 A principal current use is as a replacement for MOPAC for deriving AM1-bcc
 charges, but the code is much more general than that.
 Presently, it is limited to single point calculations and energy minimizations
 (geometry optimizations) for closed-shell systems.
 It supports a wide variety of semi-empirical Hamiltonians, including many
 recent ones.
 An external electric field generated by a set of point charges can be included
 for single point calculations.
 Our plan is to add capabilities to subsequent versions.
 The major contributors are as follows:
\end_layout

\begin_layout Itemize
The original semi-empirical support was written by Ross Walker, Mike Crowley,
 and Dave Case,
\begin_inset CommandInset citation
LatexCommand cite
key "Walker08"
literal "true"

\end_inset

 based on public-domain MOPAC codes of Various SCF convergence schemes were
 added by Tim Giese and Darrin York.
\end_layout

\begin_layout Itemize
The PM6 Hamiltonian was added by Andreas Goetz and dispersion and hydrogen
 bond corrections were added by Andreas Goetz and Kyoyeon Park.
 
\end_layout

\begin_layout Itemize
The extension for MNDO type Hamiltonians to support d orbitals was written
 by Tai-Sung Lee, Darrin York and Andreas Goetz.
\end_layout

\begin_layout Itemize
The charge-dependent exchange-dispersion corrections of vdW interactions
\begin_inset CommandInset citation
LatexCommand cite
key "Giese07"
literal "true"

\end_inset

 was contributed by Tai-Sung Lee, Tim Giese, and Darrin York.
\end_layout

\begin_layout Itemize
Support for reading user-defined parameters for NDDO methods was added by
 Tai-Sung Lee and Darrin York.
\end_layout

\begin_layout Section
Available Hamiltonians
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
sloppy 
\end_layout

\end_inset

 Available MNDO-type semi-empirical Hamiltonians are PM3,
\begin_inset CommandInset citation
LatexCommand cite
key "Stewart89"
literal "true"

\end_inset

 AM1,
\begin_inset CommandInset citation
LatexCommand cite
key "Dewar85"
literal "true"

\end_inset

 RM1,
\begin_inset CommandInset citation
LatexCommand cite
key "Rocha06"
literal "true"

\end_inset

 MNDO,
\begin_inset CommandInset citation
LatexCommand cite
key "Dewar77"
literal "true"

\end_inset

 PDDG/PM3,
\begin_inset CommandInset citation
LatexCommand cite
key "Repasky02"
literal "true"

\end_inset

 PDDG/MNDO,
\begin_inset CommandInset citation
LatexCommand cite
key "Repasky02"
literal "true"

\end_inset

 PM3CARB1,
\begin_inset CommandInset citation
LatexCommand cite
key "McNamara04"
literal "true"

\end_inset

, PM3-MAIS
\begin_inset CommandInset citation
LatexCommand cite
key "BR00,ARB07"
literal "true"

\end_inset

, MNDO/d
\begin_inset CommandInset citation
LatexCommand citep
key "TV92,TV96,TV96a"
literal "true"

\end_inset

, AM1/d (Mg from AM1/d
\begin_inset CommandInset citation
LatexCommand cite
key "Imhof06"
literal "true"

\end_inset

 and H, O, and P from AM1/d-PhoT
\begin_inset CommandInset citation
LatexCommand cite
key "Nam07"
literal "true"

\end_inset

) and PM6
\begin_inset CommandInset citation
LatexCommand citep
key "Stewart07"
literal "true"

\end_inset

.
 
\end_layout

\begin_layout Standard
Also available is the density functional theory-based tight-binding (DFTB)
 Hamiltonian
\begin_inset CommandInset citation
LatexCommand cite
key "Seabra07,Porezag95,Seifert96"
literal "true"

\end_inset

 and its self-consistent-charge version with Taylor expansion up to second
 order (SCC-DFTB or DFTB2)
\begin_inset CommandInset citation
LatexCommand cite
key "Elstner98"
literal "true"

\end_inset

 and third-order (DFTB3)
\begin_inset CommandInset citation
LatexCommand citep
key "Gaus2011"
literal "true"

\end_inset

.
 If you use the mio-1-1 parameters for DFTB2, you can add an empirical correctio
n for dispersion effects
\begin_inset CommandInset citation
LatexCommand cite
key "Elstner01"
literal "true"

\end_inset

 and calculate CM3 charges
\begin_inset CommandInset citation
LatexCommand cite
key "Kalinowski04"
literal "true"

\end_inset

 (both only for elements H, C, N, O, S, P).
 Diagonal third-order corrections are available for DFTB2
\begin_inset CommandInset citation
LatexCommand cite
key "Yang07"
literal "true"

\end_inset

 with mio-1-1 parameters but it is recommended to perform full DFTB3 simulations
 instead.
 Neither dispersion corrections nor halogen corrections are implemented
 for DFTB3.
\end_layout

\begin_layout Standard
The elements supported by each QM method are:
\end_layout

\begin_layout Itemize
MNDO: H, Li, Be, B, C, N, O, F, Al, Si, P, S, Cl, Zn, Ge, Br, Cd, Sn, I,
 Hg, Pb
\end_layout

\begin_layout Itemize
MNDO/d: H, Li, Be, B, C, N, O, F, Na, Mg, Al, Si, P, S, Cl, Zn, Ge, Br,
 Sn, I, Hg, Pb
\end_layout

\begin_layout Itemize
AM1: H, C, N, O, F, Al, Si, P, S, Cl, Zn, Ge, Br, I, Hg
\end_layout

\begin_layout Itemize
AM1/d: H, C, N, O, F, Mg, Al, Si, P, S, Cl, Zn, Ge, Br, I, Hg
\end_layout

\begin_layout Itemize
PM3: H, Be, C, N, O, F, Mg, Al, Si, P, S, Cl, Zn, Ga, Ge, As, Se, Br, Cd,
 In, Sn, Sb, Te, I, Hg, Tl, Pb, Bi
\end_layout

\begin_layout Itemize
PDDG/PM3: H, C, N, O, F, Si, P, S, Cl, Br, I
\end_layout

\begin_layout Itemize
PDDG/MNDO: H, C, N, O, F, Cl, Br, I
\end_layout

\begin_layout Itemize
RM1: H, C, N, O, P, S, F, Cl, Br, I
\end_layout

\begin_layout Itemize
PM3CARB1: H, C, O
\end_layout

\begin_layout Itemize
PM3-MAIS: H, O, Cl
\end_layout

\begin_layout Itemize
PM6: H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K,
 Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb,
 Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba,
 La, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi
\end_layout

\begin_layout Standard
The PM6 implementation has not been extensively tested for all available
 elements.
 Please check your results carefully, possibly by comparison to other codes
 that implement PM6, if transition metal elements are present.
 SCF convergence may be more difficult to achieve for transition metal elements
 with partially filled valence shells.
 
\end_layout

\begin_layout Section
Dispersion and hydrogen bond correction
\end_layout

\begin_layout Standard
An empirical dispersion and hydrogen bonding correction is implemented for
 the MNDO type Hamiltonians AM1 and PM6
\begin_inset CommandInset citation
LatexCommand citep
key "Korth10"
literal "true"

\end_inset

.
 The empirical dispersion correction follows the formalism for DFT-D
\begin_inset CommandInset citation
LatexCommand citep
key "JCHS07"
literal "true"

\end_inset

 and consists of a physically sound 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$r^{-6}$
\end_layout

\end_inset

 term that is damped at short distances to avoid the short-range repulsion
 which can be written as 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{equation}
\end_layout

\begin_layout Plain Layout

 E_{
\backslash
mathrm dis}=-s_6
\backslash
sum_{ij}f_{
\backslash
mathrm damp}(r_{ij},R_{ij}^0)C_{6,ij}r_{ij}^{-6},
\end_layout

\begin_layout Plain Layout


\backslash
end{equation}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$r_{ij}$
\end_layout

\end_inset

 is the distance between two atoms 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$i$
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$j$
\end_layout

\end_inset

, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$R_{ij}^0$
\end_layout

\end_inset

 is the equilibrium van der Waals (vdW) separation derived from the atomic
 vdW radii, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$C_{6,ij}$
\end_layout

\end_inset

 the dispersion coefficient, and 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$s_6$
\end_layout

\end_inset

 a general scaling factor.
 The damping function is given as
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{equation}
\end_layout

\begin_layout Plain Layout

 f_{
\backslash
mathrm damp}(r_{ij},R_{ij}^0)=
\backslash
left[     1+
\backslash
exp
\backslash
left(-
\backslash
alpha
\backslash
frac{r_{ij}}{s_RR_{ij}^0}-1
\backslash
right)
\backslash
right]^{-1}.
 
\backslash
end{equation} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Bondi vdW radii
\begin_inset CommandInset citation
LatexCommand citep
key "Bondi64"
literal "true"

\end_inset

 are used and for a pair of unlike atoms we have
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{equation}
\end_layout

\begin_layout Plain Layout

 R_{ij}^0=
\backslash
frac{{R_{ii}^0}^3+{R_{jj}^0}^3}{{R_{ii}^0}^2+{R_{jj}^0}^2}.
 
\backslash
end{equation}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For the 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$C_6$
\end_layout

\end_inset

 coefficients the following equation is used, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{equation}
\end_layout

\begin_layout Plain Layout

 C_{6,ij}=2
\backslash
frac{(C_{6,ii}^2C_{6,jj}^2N_{{
\backslash
mathrm eff},i}N_{{
\backslash
mathrm eff},j})^{1/3}} {(C_{6,ii}N_{{
\backslash
mathrm eff},j}^2)^{1/3}+(C_{6,jj}N_{{
\backslash
mathrm eff},i}^2)^{1/3}},
\end_layout

\begin_layout Plain Layout


\backslash
end{equation}
\end_layout

\end_inset

 where the Slater-Kirkwood effective number of electrons 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$N_{{
\backslash
mathrm eff},i}$
\end_layout

\end_inset

 and the 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$C_6$
\end_layout

\end_inset

 coefficients can easily be found in the literature
\begin_inset CommandInset citation
LatexCommand citep
key "JCHS07"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
An empirical hydrogen bonding correction
\begin_inset CommandInset citation
LatexCommand citep
key "Korth10"
literal "true"

\end_inset

 that is transferable among different semiempirical Hamiltonians and has
 been parametrized for use with the dispersion correction described above
 is also available.
 This correction does not make the assumption of a specific acceptor/hydrogen/do
nor binding situation.
 Instead it considers the hydrogen bond as a charge-independent atom- atom
 term between two atoms capable of serving as an acceptor or donor (for
 example, O, N) and weights this by a function that accounts for the steric
 arrangement of the two atoms and the favorable positioning of a hydrogen
 atom inbetween.
 A damping function corrects for long- and short-range behavior, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{equation}
\end_layout

\begin_layout Plain Layout

 E_{
\backslash
mathrm H-bond}=
\backslash
frac{C_{AB}}{r^2_{AB}}f_{
\backslash
mathrm geom}f_{
\backslash
mathrm damp},
\end_layout

\begin_layout Plain Layout


\backslash
end{equation} 
\backslash
begin{equation}
\end_layout

\begin_layout Plain Layout

 
\backslash
label{e:fgeom}   f_{
\backslash
mathrm geom}=
\backslash
cos(
\backslash
theta_A)^2
\backslash
cos(
\backslash
phi_A)^2
\backslash
cos(
\backslash
psi_A)^2   
\backslash
cos(
\backslash
phi_B)^2
\backslash
cos(
\backslash
phi_B)^2
\backslash
cos(
\backslash
psi_B)^2f_{
\backslash
mathrm bond},
\end_layout

\begin_layout Plain Layout


\backslash
end{equation}
\end_layout

\begin_layout Plain Layout


\backslash
begin{equation}
\end_layout

\begin_layout Plain Layout

 f_{
\backslash
mathrm bond}=1-
\backslash
frac{1}{1+
\backslash
exp[-60(r_{
\backslash
mathrm XH}/1.2-1)]},
\end_layout

\begin_layout Plain Layout


\backslash
end{equation}
\end_layout

\begin_layout Plain Layout


\backslash
begin{equation}
\end_layout

\begin_layout Plain Layout

 f_{
\backslash
mathrm damp}=
\backslash
left(
\backslash
frac{1}{1+
\backslash
exp[-100(r_{AB}/2.4-1)]}
\backslash
right)   
\backslash
left(1-
\backslash
frac{1}{1+
\backslash
exp[-10(r_{
\backslash
mathrm AB}/7.0-1)]}
\backslash
right),
\end_layout

\begin_layout Plain Layout


\backslash
end{equation}
\end_layout

\begin_layout Plain Layout


\backslash
begin{equation}
\end_layout

\begin_layout Plain Layout

 C_{
\backslash
mathrm AB}=
\backslash
frac{C_{
\backslash
mathrm A}+C_{
\backslash
mathrm B}}{2}.
\end_layout

\begin_layout Plain Layout


\backslash
end{equation} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$C_{
\backslash
mathrm A}$
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$C_{
\backslash
mathrm B}$
\end_layout

\end_inset

 are the atomic hydrogen bonding correction parameters and the (torsion)
 angles in the function 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$f_{
\backslash
mathrm geom}$
\end_layout

\end_inset

 are defined similarly to an earlier hydrogen bond correction
\begin_inset CommandInset citation
LatexCommand citep
key "KPRH10"
literal "true"

\end_inset

.
 
\end_layout

\begin_layout Standard
The hydrogen bond correction can be used both for single point energy calculatio
ns or geometry optimizations with SQM and for molecular dynamics simulations
 with SANDER.
 However, we do not recommend the use for molecular dynamics at present
 since cutoffs needed to be implemented for the calculation of 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

$f_{
\backslash
mathrm geom}$
\end_layout

\end_inset

 of equation 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
eqref{e:fgeom}
\end_layout

\end_inset

.
 This and some other conditional evaluations give rise to discontinuities
 in the potential energy surface and thus make this method unattractive
 for MD simulations.
\end_layout

\begin_layout Section

\series bold
Usage
\begin_inset CommandInset label
LatexCommand label
name "sec:qmmm-Namelist"

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
sqm
\emph default
 program uses the following simple command line:
\end_layout

\begin_layout LyX-Code
sqm [-O] -i <input-file> -o <output-file>
\end_layout

\begin_layout Standard

\emph on
mdin
\emph default
 is the default input-file name, and 
\emph on
mdout
\emph default
 is the default output-file name.As in other Amber programs, the 
\begin_inset Quotes eld
\end_inset

-O
\begin_inset Quotes erd
\end_inset

 flag allows the program to over-write the output file.
\end_layout

\begin_layout Standard
An example input file for running a simple minimization is shown here:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Run semi-empirical minimization 
\end_layout

\begin_layout Plain Layout

 &qmmm  
\end_layout

\begin_layout Plain Layout

  qm_theory='AM1',   qmcharge=0, 
\end_layout

\begin_layout Plain Layout

 /
\end_layout

\begin_layout Plain Layout

    6    CG       -1.9590        0.1020        0.7950
\end_layout

\begin_layout Plain Layout

    6   CD1       -1.2490        0.6020       -0.3030
\end_layout

\begin_layout Plain Layout

    6   CD2       -2.0710        0.8650        1.9630
\end_layout

\begin_layout Plain Layout

    6   CE1       -0.6460        1.8630       -0.2340
\end_layout

\begin_layout Plain Layout

    6    C6       -1.4720        2.1290        2.0310
\end_layout

\begin_layout Plain Layout

    6    CZ       -0.7590        2.6270        0.9340
\end_layout

\begin_layout Plain Layout

    1   HE2       -1.5580        2.7190        2.9310
\end_layout

\begin_layout Plain Layout

   16   S15       -2.7820        0.3650        3.0600
\end_layout

\begin_layout Plain Layout

    1   H19       -3.5410        0.9790        3.2740
\end_layout

\begin_layout Plain Layout

    1   H29       -0.7870       -0.0430       -0.9380
\end_layout

\begin_layout Plain Layout

    1   H30        0.3730        2.0450       -0.7840
\end_layout

\begin_layout Plain Layout

    1   H31       -0.0920        3.5780        0.7810
\end_layout

\begin_layout Plain Layout

    1   H32       -2.3790       -0.9160        0.9010
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
&qmmm
\emph default
 namelist contains variables that allow you to control the options used.
 Following that is one line per atom, giving the atomic number, atom name,
 and Cartesian coordinates (free format).
 The variables in the 
\emph on
&qmmm
\emph default
 namelist are these:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
qm_theory
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
qm
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

theory
\end_layout

\end_inset

 Level of theory to use for the QM region of the simulation (Hamiltonian).
 Default is to use the semi-empirical Hamiltonian PM3.
 Options are AM1, RM1, MNDO, PM3-PDDG, MNDO-PDDG, PM3-CARB1, MNDO/d (same
 as MNDOD), AM1/d (same as AM1D), PM6, DFTB2 (same as DFTB), and DFTB3.
 The dispersion correction can be switched on for AM1 and PM6 by choosing
 AM1-D* and PM6-D, respectively.
 The dispersion and hydrogen bond correction will be applied for AM1-DH+
 and PM6-DH+.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
qmcharge
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
qmcharge
\end_layout

\end_inset

 Charge on the QM system in electron units (must be an integer).
 (Default = 0) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
spin
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
spin
\end_layout

\end_inset

 Multiplicity of the QM system.
 Currently only singlet calculations are possible and so the default value
 of 1 is the only available option.
 Note that this option is ignored by DFTB/SCC-DFTB, which allows only ground
 state calculations.
 In this case, the spin state will be calculated from the number of electrons
 and orbital occupancy.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
qmqmdx
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
qmqmdx
\end_layout

\end_inset

 Flag for whether to use analytical or numerical derivatives of the semiempirica
l electron repulsion integrals.
 The default (and recommended) option is to use ANALYTICAL QM-QM derivatives.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

1 (default) - Use analytical derivatives for QM-QM forces.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 Use numerical derivatives for QM-QM forces.
 Note: the numerical derivative code has not been optimised as aggressively
 as the analytical code and as such is significantly slower.
 Numerical derivatives are intended mainly for testing purposes.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
verbosity
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
verbosity
\end_layout

\end_inset

 Controls the verbosity of QM/MM related output.
 
\shape italic
Warning:
\shape default
 Values of 2 or higher will produce a 
\shape italic
lot
\shape default
 of output.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 (default) - only minimal information is printed - Initial QM geometry
 and link atom positions as well as the SCF energy at every ntpr steps.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 Print SCF energy at every step to many more significant figures than usual.
 Also print the number of SCF cycles needed on each step.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 As 1 and also print info about memory reallocations, number of pairs per
 QM atom, QM core - QM core energy, QM core - MM atom energy, and total
 energy.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

3 As 2 and also print SCF convergence information at every step.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

4 As 3 and also print forces on the QM atoms due to the SCF calculation
 and the coordinates of the link atoms at every step.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

5 As 4 and also print all of the info in kJ/mol as well as kcal/mol.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
tight_p_conv
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tight
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

p
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

conv
\end_layout

\end_inset

 Controls the tightness of the convergence criteria on the density matrix
 in the SCF.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=0 (default) - loose convergence on the density matrix (or Mulliken charges,
 in case of a SCC-DFTB calculation).
 SCF will converge if the energy is converged to within scfconv and the
 largest change in the density matrix is within 0.05*sqrt(scfconv).
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 Tight convergence on density(or Mulliken charges, in case of a SCC-DFTB
 calculation).
 Use same convergence (scfconv) for both energy and density (charges) in
 SCF.
 Note: in the SCC-DFTB case, this option can lead to instabilities.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
scfconv
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
scfconv
\end_layout

\end_inset

 Controls the convergence criteria for the SCF calculation, in kcal/mol.
 In order to conserve energy in a dynamics simulation with no thermostat
 it is often necessary to use a convergence criterion of 1.0d-9 or tighter.
 Note, the tighter the convergence the longer the calculation will take.
 Values tighter than 1.0d-11 are not recommended as these can lead to oscillation
s in the SCF, due to limitations in machine precision, that can lead to
 convergence failures.
 Default is 1.0d-8 kcal/mol.
 Minimum usable value is 1.0d-14.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
pseudo_diag
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pseudo
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

diag
\end_layout

\end_inset

 Controls the use of 'fast' pseudo diagonalisations in the SCF routine.
 By default the code will attempt to do pseudo diagonalisations whenever
 possible.
 However, if you experience convergence problems then turning this option
 off may help.
 Not available for DFTB/SCC-DFTB.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 Always do full diagonalisation.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 Do pseudo diagonalisations when possible (default).
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
pseudo_diag_criteria
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pseudo
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

diag
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

criteria
\end_layout

\end_inset

 Float controlling criteria used to determine if a pseudo diagonalisation
 can be done.
 If the difference in the largest density matrix element between two SCF
 iterations is less than this criteria then a pseudo diagonalisation can
 be done.
 This is really a tuning parameter designed for expert use only.
 Most users should have no cause to adjust this parameter.
 (Not applicable to DFTB/SCC-DFTB calculations.) Default = 0.05 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
diag_routine
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
diag
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

routine
\end_layout

\end_inset

 Controls which diagonalization routine will be used during the SCF procedure.
 This is an advanced option to fine-tune performance which has negligible
 effect on energies (and generally little effect on geometries in the case
 of SQM energy minimizations).
 The speed of each diagonalizer is a function of the number and type of
 QM atoms as well as the LAPACK library that the program was linked to.
 As such there is not always an obvious choice to obtain the best performance.
 The simplest option is to set diag_routine = 0 in which case the program
 will test each diagonalizer in turn, including the pseudo diagonalizer,
 and select the one that gives optimum performance.
 As of AmberTools 15 diag_routine = 0 is the default for both SQM and QMMM
 in Sander.
 Not available for DFTB/SCC-DFTB.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 Automatically select the fastest routine (default).
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 Use internal diagonalization routine.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 Use lapack dspev.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

3 Use lapack dspevd.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

4 Use lapack dspevx.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

5 Use lapack dsyev.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

6 Use lapack dsyevd.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

7 Use lapack dsyevr.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
printcharges
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
printcharges
\end_layout

\end_inset

 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 Don't print any info about QM atom charges to the output file (default)
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 Print Mulliken QM atom charges to output file every 
\shape italic
ntpr
\shape default
 steps.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
print_eigenvalues
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
print_eigenvalues
\end_layout

\end_inset

 Controls printing of MO eigenvalues.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 Do not print MO eigenvalues
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 Print MO eigenvalues at the end of a single point calculation or geometry
 optimization (default)
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 Print MO eigenvalues at the end of every SCF cycle (only NDDO methods,
 not DFTB)
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

3 Print MO eigenvalues during each step of the SCF cycle (only NDDO methods,
 not DFTB)
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
qxd
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
qxd
\end_layout

\end_inset

 Flag to turn on (=.true.) or off (=.false., default) the charge-dependent exchange-
dispersion corrections of vdW interactions
\begin_inset CommandInset citation
LatexCommand cite
key "Giese07"
literal "true"

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
parameter_file
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
parameterfle
\end_layout

\end_inset

 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
= 'PARAM.FILE' Read user-defined parameters from the file 'PARAM.FILE'.
 The first three space-separated entries (case insensitive) of each line
 will be interpreted as a user-modified parameter in the sequence of 
\shape italic
parameter name, element name,
\shape default
 and 
\shape italic
value
\shape default
.
 For example, a line contains 
\begin_inset Quotes eld
\end_inset

USS Cl -111.6139480D0 
\begin_inset Quotes eld
\end_inset

 will cause the USS parameter of the Cl element changed to -111.6139480.
 A line beginning with 
\begin_inset Quotes eld
\end_inset

END
\begin_inset Quotes erd
\end_inset

 will stop the reading.
 This function currently only works for MNDO, AM1, PM3, MNDO/d, and AM1/d.
 Also, when new nuclear core-core parameters (FN, in PM3, AM1, and AM1/d)
 are re-defined, the number of FNN parameter sets (NUM_FN) also needs to
 be defined.
 For example, if FN
\shape italic
n
\shape default
3 (
\shape italic
n
\shape default
 = 1, 2, or 3) is defined, then NUM_FN needs to be set to 3 or 4.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
peptide_corr
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
peptide
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

corr
\end_layout

\end_inset

 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 Don't apply MM correction to peptide linkages.
 (default) 
\end_layout

\begin_layout Description
= 1 Apply a MM correction to peptide linkages.
 This correction is of the form 
\begin_inset Formula $E_{scf}=E_{scf}+h_{type}(i_{type})\sin^{2}\phi$
\end_inset

, where 
\begin_inset Formula $\phi$
\end_inset

 is the dihedral angle of the H-N-C-O linkage and 
\shape italic

\begin_inset Formula $h_{type}$
\end_inset


\shape default
 is a constant dependent on the Hamiltonian used.
 (Recommended, except for DFTB/SCC-DFTB.) 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
itrmax
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
itrmax
\end_layout

\end_inset

 Integer specifying the maximum number of SCF iterations to perform before
 assuming that convergence has failed.
 Default is 1000.
 Typically higher values will not do much good since if the SCF hasn't converged
 after 1000 steps it is unlikely to.
 If the convergence criteria have not been met after itrmax steps the SCF
 will stop and the minimisation will proceed with the gradient at itrmax.
 Hence if you have a system which does not converge well you can set itrmax
 smaller so less time is wasted before assuming the system won't converge.
 In this way you may be able to get out of a bad geometry quite quickly.
 Once in a better geometry SCF convergence should improve.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
maxcyc
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
maxcyc
\end_layout

\end_inset

 Maximum number of minimization cycles to allow, using the 
\emph on
xmin
\emph default
 minimizer (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:lmod"

\end_inset

) with the TNCG method.
 Default is 9999.
 Single point calculations can be done with 
\emph on
maxcyc
\emph default
 = 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ntpr
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ntpr
\end_layout

\end_inset

 Print the progress of the minimization every 
\emph on
ntpr
\emph default
 steps; default is 10.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
grms_tol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
grms
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

tol
\end_layout

\end_inset

 Terminate minimization when the gradient falls below this value; default
 is 0.02
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ndiis_attempts
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ndiis
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

attempts
\end_layout

\end_inset

 Controls the number of iterations that DIIS (direct inversion of the iterative
 subspace) extrapolations will be attempted.
 Not available for DFTB/SCC-DFTB.
 The SCF does not even begin to exhaust its attempts at using DIIS extrapolation
s until the end of iteration 100.
 Therefore, for example, if ndiis_attempts=50, then DIIS extrapolations
 would be performed at end of iterations 100 to 150.
 The purpose of not performing DIIS extrapolations before iteration 100
 is because the existing code base performs quite well for most molecules;
 however, if convergence is not met after 100 iterations, then it is presumed
 that further iterations will not yield SCF convergence without doing something
 different, i.e., DIIS.
 Thus, the implementation of DIIS in SQM is a mechanism to try and force
 SCF convergence for molecules that are otherwise difficult to converge.
 Default 0.
 Maximum 1000.
 Minimum 0.
 Note that DIIS will automatically turn itself on for 100 attempts at the
 end of iteration 800 even if you did not explicitly set ndiis_attempts
 to a nonzero value.
 This is done as a final effort to achieve convergence.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ndiis_matrices
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ndiis
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

matrices
\end_layout

\end_inset

 Controls the number of matrices used in the DIIS extrapolation.
 Including only one matrix is the same as not performing an extrapolation.
 Including an excessive number of matrices may require a large amount of
 memory.
 Not available for DFTB/SCC-DFTB.
 Default 6.
 Minimum 1.
 Maximum 20.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
vshift
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
vshift
\end_layout

\end_inset

 Controls level shifting (only NDDO methods, not DFTB).
 Virtual orbitals can be shifted up by vshift (in eV) to improve SCF convergence
 in cases with small HOMO/LUMO gap.
 Default 0.0 (no level shift).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
errconv
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
errconv
\end_layout

\end_inset

 SCF tolerance on the maximum absolute value of the error matrix, i.e., the
 commutator of the Fock matrix with the density matrix.
 The value has units of hartree.
 The default value of errconv is sufficiently large to effectively remove
 this tolerance from the SCF convergence criteria.
 Not available for DFTB/SCC-DFTB.
 Default 1.d-1.
 Minimum 1.d-16.
 Maximum 1.d0.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
qmmm_int
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
qmmm
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

int
\end_layout

\end_inset

 When running QM calculations in the sqm program, an electric field of external
 point charges can be added.
 In this way, the electrostatic effect outside of the QM region can be modeled,
 making the calculation a simplified QM/MM calculation without QM/MM vdW's
 contribution.
 Like QM/MM calculations (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:QMMM"

\end_inset

), the method to couple QM and MM electrostatic interactions for external
 charges and semiempirical Hamiltonians can be specified via the 
\emph on
qmmm_int
\emph default
 namelist variable.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The current implementation limits use of external charges to only single
 point energy calculations.
 To run such a calculation, an additional field, which begins with #EXCHARGES
 and ends with #END, is required to specify the external point charges in
 the input.
 Each external point charge must include atomic number, atom name, X, Y,
 Z coordinates and the charge in units of the electron charge.
 An example input looks like: 
\end_layout

\end_deeper
\begin_layout LyX-Code
single point energy calculation (adenine), with external charges (thymine)
\end_layout

\begin_layout LyX-Code
&qmmm  
\end_layout

\begin_layout LyX-Code
 qm_theory = 'PM3',
\end_layout

\begin_layout LyX-Code
 qmcharge = 0,
\end_layout

\begin_layout LyX-Code
 maxcyc = 0,
\end_layout

\begin_layout LyX-Code
 qmmm_int = 1,
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout LyX-Code
7  N   1.0716177  -0.0765366   1.9391390
\end_layout

\begin_layout LyX-Code
1  H   0.0586915  -0.0423765   2.0039181
\end_layout

\begin_layout LyX-Code
1  H   1.6443796  -0.0347395   2.7619159
\end_layout

\begin_layout LyX-Code
6  C   1.6739638  -0.0357766   0.7424316
\end_layout

\begin_layout LyX-Code
7  N   0.9350155  -0.0279801  -0.3788916
\end_layout

\begin_layout LyX-Code
6  C   1.5490760   0.0012569  -1.5808009
\end_layout

\begin_layout LyX-Code
1  H   0.8794435   0.0050260  -2.4315709
\end_layout

\begin_layout LyX-Code
7  N   2.8531510   0.0258031  -1.8409596
\end_layout

\begin_layout LyX-Code
6  C   3.5646109   0.0195446  -0.7059872
\end_layout

\begin_layout LyX-Code
6  C   3.0747955  -0.0094480   0.5994562
\end_layout

\begin_layout LyX-Code
7  N   4.0885824  -0.0054429   1.5289786
\end_layout

\begin_layout LyX-Code
6  C   5.1829921   0.0253971   0.7872176
\end_layout

\begin_layout LyX-Code
1  H   6.1882591   0.0375542   1.1738824
\end_layout

\begin_layout LyX-Code
7  N   4.9294871   0.0412404  -0.5567274
\end_layout

\begin_layout LyX-Code
1  H   5.6035368   0.0648755  -1.3036811
\end_layout

\begin_layout LyX-Code
#EXCHARGESwill be 
\end_layout

\begin_layout LyX-Code
6  C  -4.7106131   0.0413373   2.1738637  -0.03140
\end_layout

\begin_layout LyX-Code
1  H  -4.4267056   0.9186178   2.7530256   0.06002
\end_layout

\begin_layout LyX-Code
1  H  -4.4439282  -0.8302573   2.7695655   0.05964
\end_layout

\begin_layout LyX-Code
1  H  -5.7883971   0.0505530   2.0247280   0.03694
\end_layout

\begin_layout LyX-Code
6  C  -3.9917387   0.0219348   0.8663338  -0.25383
\end_layout

\begin_layout LyX-Code
6  C  -4.6136833   0.0169051  -0.3336520   0.03789
\end_layout

\begin_layout LyX-Code
1  H  -5.6909220   0.0269347  -0.4227183   0.16330
\end_layout

\begin_layout LyX-Code
7  N  -3.9211729  -0.0009646  -1.5163659  -0.47122
\end_layout

\begin_layout LyX-Code
1  H  -4.4017172  -0.0036078  -2.4004924   0.35466
\end_layout

\begin_layout LyX-Code
6  C  -2.5395897  -0.0149474  -1.5962357   0.80253
\end_layout

\begin_layout LyX-Code
8  O  -1.9416783  -0.0291878  -2.6573783  -0.63850
\end_layout

\begin_layout LyX-Code
7  N  -1.9256484  -0.0110593  -0.3638948  -0.58423
\end_layout

\begin_layout LyX-Code
1  H  -0.8838255  -0.0216168  -0.3784269   0.35404
\end_layout

\begin_layout LyX-Code
6  C  -2.5361367   0.0074651   0.8766724   0.71625
\end_layout

\begin_layout LyX-Code
8  O  -1.8674730   0.0112093   1.9120833  -0.60609
\end_layout

\begin_layout LyX-Code
#END
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Chapter
Atom and Residue Selections
\begin_inset CommandInset label
LatexCommand label
name "MASKS"

\end_inset


\end_layout

\begin_layout Standard
There are three ways to select atoms and residues in AMBER-related routines:
 the 
\series bold
AMBER "mask"
\series default
 notation, used by most programs, the 
\series bold
NAB "atom expressions"
\series default
, which work only with NAB-compiled applications, and an older 
\begin_inset Quotes eld
\end_inset

GROUP
\begin_inset Quotes erd
\end_inset

 specification used in 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
.
 Information about these is collected in this chapter.
\end_layout

\begin_layout Section
Amber Masks
\begin_inset CommandInset label
LatexCommand label
name "AMBERMASK"

\end_inset


\end_layout

\begin_layout Standard
A "mask" is a notation which selects atoms or residues for special treatment.
 A frequent usage is fixing or tethering selected atoms or residues during
 minimization or molecular dynamics.
\end_layout

\begin_layout Standard
The following lines are partially copied from the original AMBER documentation.
 For more details, refer to the entire section of that documentation describing
 the 
\emph on
ambmask
\emph default
 utility.
\end_layout

\begin_layout Standard
The "mask" selection expression is composed of "elementary selections".
 These start with "
\series bold
:
\series default
" to select by residues, or "
\series bold
@
\series default
" to select by atoms.
 Residues can be selected by numbers (given as numbers separated by commas,
 or as ranges separated by a dash) or by names (given as a list of residue
 names separated by commas).
 The same holds true for atom selections by atom numbers or atom names.
 In addition, atoms can be selected by AMBER atom type, in which case "@"
 must be immediately followed by "%".
 The notation ":*" means all residues and "@*" means all atoms.
 The following examples show the usage of this syntax.
\end_layout

\begin_layout Subsubsection*
Residue Number List Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

:1-10      = "residues 1 to 10"
\end_layout

\begin_layout Plain Layout

:1,3,5     = "residues 1, 3, and 5"
\end_layout

\begin_layout Plain Layout

:1-3,5,7-9 = "residues 1 to 3 and residue 5 and residues 7 to 9"
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Residue Name List Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

:LYS          = "all lysine residues"
\end_layout

\begin_layout Plain Layout

:ARG,ALA,GLY  = "all arginine and alanine and glycine residues"
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Atom Number List Examples
\end_layout

\begin_layout Standard
Note that these masks use the 
\series bold
actual sequential numbers of atoms
\series default
 in the file.
 This is tricky and a serious source of error.
 You must know these numbers correctly.
 Using the atom numbers of a PDB file written out by an AMBER tool is an
 appropriate way to avoid pitfalls.
 
\series bold
Do not use the original atom numbers from the raw PDB file you started with.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@12,17       = "atoms 12 and 17"
\end_layout

\begin_layout Plain Layout

@54-85       = "all atoms from 54 to 85"
\end_layout

\begin_layout Plain Layout

@12,54-85,90 = "atom 12 and all atoms from 54 to 85 and atom 90"
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Atom Name List Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@CA         = all atoms with the name CA (i.e., all C-alpha atoms)
\end_layout

\begin_layout Plain Layout

@CA,C,O,N,H = all atoms with names CA or C or O or N or H
\end_layout

\begin_layout Plain Layout

                  (i.e., the entire protein backbone)
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Atom Type List Examples
\end_layout

\begin_layout Standard
This last mask type is only used by specialists and mentioned here for completen
ess.
 It allows the selection of AMBER atom types and requires detailed knowledge
 of AMBER force fields.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@%CT         = all atoms with the force field type CT
\end_layout

\begin_layout Plain Layout

               (the standard sp3 aliphatic carbon)
\end_layout

\begin_layout Plain Layout

@%N*,N3      = all atoms with the force field type N* or N3
\end_layout

\begin_layout Plain Layout

               (N* is a special sp2 nitrogen, N3 is an sp3 nitrogen)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that in the above example, 
\family typewriter
N*
\family default
 is actually an atom type.
 The * is 
\series bold
not
\series default
 a wild card meaning "all N-something types"!
\end_layout

\begin_layout Subsubsection*
Logical Combinations
\end_layout

\begin_layout Standard
The selections above can be combined by various logical operators, including
 selections like "all atoms within a certain distance from...".
 The use of such combinations goes beyond this introductory script.
 Interested users should refer to the next section for details.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:ambmask"

\end_inset


\series bold
ambmask
\end_layout

\begin_layout Description
NAME
\end_layout

\begin_layout Standard
ambmask - test group input FIND mask (or mask string given in the &cntrl
 section) and dump the resulting atom selection in a given format 
\end_layout

\begin_layout Description
SYNOPSIS 
\end_layout

\begin_layout LyX-Code
ambmask -p prmtop -c inpcrd -prnlev [0-3] -out [short
\begin_inset Formula $\vert$
\end_inset

 pdb
\begin_inset Formula $\vert$
\end_inset

 amber] -find [maskstr] 
\end_layout

\begin_layout Description
DESCRIPTION
\end_layout

\begin_layout Standard

\series bold
ambmask
\series default
 acts as a filter that inputs an Amber topology file and an Amber coordinate
 file and applies the "maskstr" selection string to select specific atoms
 or residues.
  (The "maskstr" selection string is similar syntactically to UCSF Chimera/Midas.
) Residues can be selected by their numbers or names.
 Atoms can be selected by numbers, names, or Amber (forcefield) type.
 Selections are case insensitive.
 The selected atoms are printed to 
\series bold
stdout
\series default
 (by default, in Amber-style PDB format).
 Atom and residue names and numbers are taken from the Amber topology.
 Beware that the selection string works on those names and not the ones
 from the original PDB file.
 If you are not sure how atoms or residues are named or numbered in the
 Amber topology, use 
\series bold
ambmask
\series default
 with a selection string ":*" (which is the default) to dump the whole PDB
 file with corresponding Amber atom/residue names and numbers.
\end_layout

\begin_layout Standard
The "maskstr" selection expression is composed of "elementary selections".
 These start with ":" to select by residues, or "@" to select by atoms.
 Residues can be selected by numbers (given as numbers separated by commas,
 or as ranges separated by a dash) or by names (given as a list of residue
 names separated by commas).
 The same holds true for atom selections by atom numbers or atom names.
 In addition, atoms can be selected by Amber atom type, in which case "@"
 must be immediately followed by "%".
 ":*" means all residues and "@*" means all atoms.
 The following examples show the usage of this syntax.
 Square brackets should not be used in actual expressions, they are only
 used below to denote individual selection string examples:
\end_layout

\begin_layout LyX-Code
:{residue numlist} [:1-10] [:1,3,5] [:1-3,5,7-9]
\end_layout

\begin_layout LyX-Code
:{residue namelist} [:LYS] [:ARG,ALA,GLY]
\end_layout

\begin_layout LyX-Code
@{atom numlist} [@12,17] [@54-85] [@12,54-85,90]
\end_layout

\begin_layout LyX-Code
@{atom namelist} [@CA] [@CA,C,O,N,H]
\end_layout

\begin_layout LyX-Code
@%{atom typelist} [@%CT] [@%N*,N3]
\end_layout

\begin_layout Standard
These "elementary selections" can be combined into more complex selections
 using binary operators "&" (and) and "
\begin_inset Formula $\vert$
\end_inset

" (or), unary operator "!" (negation), distance binary operators "
\begin_inset Formula $<$
\end_inset

:", "
\begin_inset Formula $>$
\end_inset

:", "
\begin_inset Formula $<$
\end_inset

@", "
\begin_inset Formula $>$
\end_inset

@", and parentheses.
 Spaces around operators are irrelevant.
 Parentheses have the highest priority, followed by distance operators ("
\begin_inset Formula $<$
\end_inset

:", "
\begin_inset Formula $>$
\end_inset

:", "
\begin_inset Formula $<$
\end_inset

@", "
\begin_inset Formula $>$
\end_inset

@"), "!" (negation), "&" (and) and "
\begin_inset Formula $\vert$
\end_inset

" (or) in order of descending priority.
 A wildcard "=" in an atom or residue name matches any name starting with
 a given character (or characters).
 For example, [:AS=] would match all aspartic acid residues (ASP), and asparagin
es (ASN); [@H=] would match all atom names starting with H (which are effectivel
y all hydrogens).
 It cannot be used to match the end part of names (such as [:=A]).
 Some examples of more complex selections follow:
\end_layout

\begin_layout LyX-Code
[@C= & !@CA,C]
\end_layout

\begin_layout Standard
..
 all carbons except backbone alpha and carbonyl carbon
\end_layout

\begin_layout LyX-Code
[(:1-3@CA 
\begin_inset Formula $\vert$
\end_inset

 :5-7@CB)]
\end_layout

\begin_layout Standard
..
 alpha carbons in residues 1-3 and beta carbons in residues 5-7
\end_layout

\begin_layout LyX-Code
[:CYS,ARG & !(:1-10 
\begin_inset Formula $\vert$
\end_inset

 @CA,CB)]
\end_layout

\begin_layout Standard
..
 all CYS and ARG atoms except those which are in residues 1-10 and which
 are CA or CB
\end_layout

\begin_layout LyX-Code
[:* & !@H=] or [!@H=]
\end_layout

\begin_layout Standard
..
 all heavy atoms (i.e.
 except hydrogens)
\end_layout

\begin_layout LyX-Code
[:5 
\begin_inset Formula $<$
\end_inset

@4.5]
\end_layout

\begin_layout Standard
..
 all atoms within 4.5A from residue 5 
\end_layout

\begin_layout LyX-Code
[(:1-55 
\begin_inset Formula $<$
\end_inset

:3.0) & :WAT]
\end_layout

\begin_layout Standard
..
 all water molecules within 3A from residues 1-55
\end_layout

\begin_layout Standard
Compound expressions of the following type are also allowed:
\end_layout

\begin_layout LyX-Code
:{residue numlist
\begin_inset Formula $\vert$
\end_inset

namelist}@{atom numlist
\begin_inset Formula $\vert$
\end_inset

namelist
\begin_inset Formula $\vert$
\end_inset

typelist}
\end_layout

\begin_layout LyX-Code
[:1-10@CA] is equivalent to [:1-10 & @CA]
\end_layout

\begin_layout LyX-Code
[:LYS@H=] is equivalent to [:LYS & @H=]
\end_layout

\begin_layout Description
OPTIONS
\end_layout

\begin_layout Standard
The program needs an Amber topology file and coordinates (restrt format).
 The filename specified with the -
\begin_inset Formula $p$
\end_inset

 option is Amber topology, while the filename given with the -
\begin_inset Formula $c$
\end_inset

 option is a coordinate file.
 If -
\begin_inset Formula $p$
\end_inset

 or -
\begin_inset Formula $c$
\end_inset

 options are not given, the program expects that files "prmtop" and/or "inpcrd"
 exist in the current directory, which will be taken as topology and coordinate
 files correspondingly.
 If no command line options are given, the program prints the usage statement.
\end_layout

\begin_layout Standard
The option 
\shape italic
-prnlev
\shape default
 specifies how much (debugging) information is printed to 
\series bold
stdout
\series default
.
 If it is 0, only selected atoms are printed.
 More verbose output (which might be useful for debugging purposes) is achieved
 with higher values: 1 prints original "maskstr" in its tokenized (with
 operands enclosed in square brackets) and postfix (or Reverse Polish Notation)
 forms; number of atoms and residues in the topology file and number of
 selected atoms are also printed to 
\series bold
stdout
\series default
.
 2 prints the resulting mask array, which is an array of integer values,
 with '1' representing a selected atom, and '0' an unselected one.
 Value of 3, in addition, prints mask arrays as they are pushed or popped
 from the stack (this is really only useful for tracing the problems occurring
 during stack operations).
 The 
\shape italic
-prnlev
\shape default
 values of 0 or 1 should suffice for most uses.
\end_layout

\begin_layout Standard
The option 
\shape italic
-out
\shape default
 specifies the format of printed atoms.
 "short" means a condensed output using residue (:) and atom (@) designators
 followed by residue ranges and atom names.
 "pdb" (default) prints atoms in Amber-style PDB format with the original
 "maskstr" printed as a REMARK at the top of the PDB file, and "amber" prints
 atom/residue ranges in the format suitable for copying into group input
 section of Amber input file.
\end_layout

\begin_layout Standard
The option 
\shape italic
-find
\shape default
 is followed by "maskstr" expression.
 This is a string where some characters have a special meaning and thus
 express what parts (atoms/residues) of the molecule will get selected.
 The syntax of this string is explained in the section above (DESCRIPTION).
 If this option is left out, it defaults to ":*", which selects all atoms
 in the given topology file.
 The length of "maskstr" is limited to 80 characters.
 If the "maskstr" contains spaces or special characters (which would be
 expanded by the shell), it should be protected by single or double quotes
 (depending on the shell).
 In addition, for C-shells even a quoted exclamation character may be expanded
 for history substitution.
 Thus, it is recommended that the operand of the negation operator always
 be enclosed in parentheses so that "!" is always followed by a "(" to produce
 "!(" which disables the special history interpretation.
 For example, [@C=
\begin_inset space ~
\end_inset

&
\begin_inset space ~
\end_inset

!(@CA,C)] selects all carbons except backbone alpha and carbonyl carbon;
 the parentheses are redundant but shell safe.
 The man page indicates further ways to disable history substitution.
 
\end_layout

\begin_layout Description
FILES
\end_layout

\begin_layout Standard
Assumes that 
\shape italic
prmtop
\shape default
 and 
\shape italic
inpcrd
\shape default
 files exists in the current directory if they are not specified with -
\begin_inset Formula $p$
\end_inset

 and -
\begin_inset Formula $c$
\end_inset

 options.
 Resulting (i.e.
 selected) atoms are written to 
\series bold
stdout
\series default
.
 
\end_layout

\begin_layout Description
BUGS
\end_layout

\begin_layout Standard
Because all atom names are left justified in Amber topology and the selections
 are case insensitive, there is no way to distinguish some atom names: alpha
 carbon CA and a calcium ion Ca are a notorious example of that.
\end_layout

\begin_layout Section

\series bold
GROUP Specification
\begin_inset CommandInset label
LatexCommand label
name "cha:GROUP-Specification"

\end_inset


\end_layout

\begin_layout Standard
This section describes the format used to define groups of atoms in various
 Amber programs.
 In 
\shape italic
sander
\shape default
, a group can be specified as a movable "belly" while the other atoms are
 fixed absolutely in space (aside from scaling caused by constant pressure
 simulation), and/or a group of movable atoms can independently restrained
 (held by a potential) at their positions.
 In 
\shape italic
anal
\shape default
, groups can be defined for energy analysis.
 In sander and pmemd, GROUP input comes at the end of the mdin input file,
 as discussed in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:mdin-info"

\end_inset

.
\end_layout

\begin_layout Standard
Except in the analysis module where different groups of atoms are considered
 with different group numbers for energy decomposition, in all other places
 the groups of atoms defined are considered as marked atoms to be included
 for certain types of calculations.
 In the case of constrained minimization or dynamics, the atoms to be constraine
d are read as groups with a different weight for each group.
\end_layout

\begin_layout Standard
Reading of groups is performed by the routine RGROUP, and you are advised
 to consult it if there is still some ambiguity in the documentation.
\end_layout

\begin_layout Standard

\series bold
Input description:
\end_layout

\begin_layout LyX-Code

\size small
- 1 - Title 
\shape italic
format(20a4)
\end_layout

\begin_layout LyX-Code

\size small
ITITL Group title for identification.
\end_layout

\begin_layout LyX-Code

\size small
Setting ITITL = 'END' ends group input.
\end_layout

\begin_layout LyX-Code

\size small
------------------------------------------------------------------------
\end_layout

\begin_layout LyX-Code

\size small
- 1A - Weight 
\shape italic
format(f)
\end_layout

\begin_layout LyX-Code

\size small
This line is only provided/read when using GROUP input to
\end_layout

\begin_layout LyX-Code

\size small
define restrained atoms.
\end_layout

\begin_layout LyX-Code

\size small
WT The harmonic force constants in kcal/mol-A**2 for the group
\end_layout

\begin_layout LyX-Code

\size small
of atoms for restraining to a reference position.
\end_layout

\begin_layout LyX-Code

\size small
------------------------------------------------------------------------
\end_layout

\begin_layout LyX-Code

\size small
- 1B - Control to define the group
\end_layout

\begin_layout LyX-Code

\size small
KTYPG , (IGRP(I) , JGRP(I) , I = 1,7) 
\shape italic
format(a,14i)
\end_layout

\begin_layout LyX-Code

\size small
KTYPG Type of atom selection performed.
 A molecule can be
\end_layout

\begin_layout LyX-Code

\size small
defined by using only 'ATOM' or 'RES', or part of the
\end_layout

\begin_layout LyX-Code

\size small
molecule can be defined by 'ATOM' and part by 'RES'.
\end_layout

\begin_layout LyX-Code

\size small
'ATOM' The group is defined in terms of atom numbers.
 The atom
\end_layout

\begin_layout LyX-Code

\size small
number list is given in igrp and jgrp.
\end_layout

\begin_layout LyX-Code

\size small
'RES' The group is defined in terms of residue numbers.
 The
\end_layout

\begin_layout LyX-Code

\size small
residue number list is given in igrp and jgrp.
\end_layout

\begin_layout LyX-Code

\size small
'FIND' This control is used to make additional conditions
\end_layout

\begin_layout LyX-Code

\size small
(apart from the 'ATOM' and 'RES' controls) which a given
\end_layout

\begin_layout LyX-Code

\size small
atom must satisfy to be included in the current group.
\end_layout

\begin_layout LyX-Code

\size small
The conditions are read in the next section (1C) and are
\end_layout

\begin_layout LyX-Code

\size small
terminated by a SEARCH card.
\end_layout

\begin_layout LyX-Code

\size small
Note that the conditions defined by FIND filter any set(s) of atoms
\end_layout

\begin_layout LyX-Code

\size small
defined by the following ATOM/RES instructions.
 For example,
\end_layout

\begin_layout LyX-Code

\size small
-- group input: select main chain atoms --
\end_layout

\begin_layout LyX-Code

\size small
FIND
\end_layout

\begin_layout LyX-Code

\size small
* * M *
\end_layout

\begin_layout LyX-Code

\size small
SEARCH
\end_layout

\begin_layout LyX-Code

\size small
RES 1 999
\end_layout

\begin_layout LyX-Code

\size small
END
\end_layout

\begin_layout LyX-Code

\size small
END
\end_layout

\begin_layout LyX-Code

\size small
'END' End input for the current group.
 Followed by either another
\end_layout

\begin_layout LyX-Code

\size small
group definition (starting again with line 1 above), or by a second
\end_layout

\begin_layout LyX-Code

\size small
'END' "card", which terminates all group input.
\end_layout

\begin_layout LyX-Code

\size small
IGRP(I) , JGRP(I)
\end_layout

\begin_layout LyX-Code

\size small
The atom or residue pointers.
 If ktypg .eq.
 'ATOM' all
\end_layout

\begin_layout LyX-Code

\size small
atoms numbered from igrp(i) to jgrp(i) will be put into
\end_layout

\begin_layout LyX-Code

\size small
the current group.
 If ktypg .eq.
 'RES' all atoms in the
\end_layout

\begin_layout LyX-Code

\size small
residues numbered from igrp(i) to jgrp(i) will be put
\end_layout

\begin_layout LyX-Code

\size small
into the current group.
 If igrp(i) = 0 the next control
\end_layout

\begin_layout LyX-Code

\size small
card is read.
\end_layout

\begin_layout LyX-Code

\size small
It is not necessary to fill groups according to the
\end_layout

\begin_layout LyX-Code

\size small
numerical order of the residues.
 In other words, Group 1
\end_layout

\begin_layout LyX-Code

\size small
could contain residues 40-95 of a protein, Group 2 could
\end_layout

\begin_layout LyX-Code

\size small
contain residues 1-40 and Group 3 could contain residues
\end_layout

\begin_layout LyX-Code

\size small
96-105.
\end_layout

\begin_layout LyX-Code

\size small
If ktypg .eq.
 'RES', then associating a minus sign with
\end_layout

\begin_layout LyX-Code

\size small
igrp(i) will cause all residues igrp(i) through jgrp(i)
\end_layout

\begin_layout LyX-Code

\size small
to be placed in separate groups.
\end_layout

\begin_layout LyX-Code

\size small
In the analysis modules, all atoms not explicitly defined
\end_layout

\begin_layout LyX-Code

\size small
as members of a group will be combined as a unit in the
\end_layout

\begin_layout LyX-Code

\size small
(n + 1) group, where the (n) group in the last defined
\end_layout

\begin_layout LyX-Code

\size small
group.
\end_layout

\begin_layout LyX-Code

\size small
------------------------------------------------------------------------
\end_layout

\begin_layout LyX-Code

\size small
- 1C - Section to read atom characteristics
\end_layout

\begin_layout LyX-Code

\size small
***** Read only if KTYPG = 'FIND' *****
\end_layout

\begin_layout LyX-Code

\size small
JGRAPH(I) , JSYMBL(I) , JTREE(I) , JRESNM(I) 
\shape italic
format(4a)
\end_layout

\begin_layout LyX-Code

\size small
A series of filter specifications are read.
 Each filter consists
\end_layout

\begin_layout LyX-Code

\size small
of four fields (JGRAPH,JSYMBL,JTREE,JRESNM), and each filter is placed
\end_layout

\begin_layout LyX-Code

\size small
on a separate line.
 Filter specification is terminated by a line with
\end_layout

\begin_layout LyX-Code

\size small
JGRAPH = 'SEARCH'.
 A maximum of 10 filters may be specified for a
\end_layout

\begin_layout LyX-Code

\size small
single 'FIND' command.
\end_layout

\begin_layout LyX-Code

\size small
The union of the filter specifications is applied to the atoms defined
\end_layout

\begin_layout LyX-Code

\size small
by the following ATOM/RES cards.
 I.e.
 if an atom satisfies any of the
\end_layout

\begin_layout LyX-Code

\size small
filters, it will be included in the current group.
 Otherwise, it is not
\end_layout

\begin_layout LyX-Code

\size small
included.
 For example, to select all non main chain atoms from residues
\end_layout

\begin_layout LyX-Code

\size small
1 through 999:
\end_layout

\begin_layout LyX-Code

\size small
-- group input: select non main chain atoms --
\end_layout

\begin_layout LyX-Code

\size small
FIND
\end_layout

\begin_layout LyX-Code

\size small
* * S *
\end_layout

\begin_layout LyX-Code

\size small
* * B *
\end_layout

\begin_layout LyX-Code

\size small
* * 3 *
\end_layout

\begin_layout LyX-Code

\size small
* * E *
\end_layout

\begin_layout LyX-Code

\size small
SEARCH
\end_layout

\begin_layout LyX-Code

\size small
RES 1 999
\end_layout

\begin_layout LyX-Code

\size small
END
\end_layout

\begin_layout LyX-Code

\size small
END
\end_layout

\begin_layout LyX-Code

\size small
'END' End input for the current group.
 Followed by either another
\end_layout

\begin_layout LyX-Code

\size small
The four fields for each filter line are:
\end_layout

\begin_layout LyX-Code

\size small
JGRAPH(I) The atom name of atom to be included.
 If this and the
\end_layout

\begin_layout LyX-Code

\size small
following three characteristics are satisfied the atom is
\end_layout

\begin_layout LyX-Code

\size small
included in the group.
 The wild card '*' may be used to
\end_layout

\begin_layout LyX-Code

\size small
to indicate that any atom name will satisfy the search.
\end_layout

\begin_layout LyX-Code

\size small
JSYMBL(I) Amber atom type of atom to be included.
 The wild card
\end_layout

\begin_layout LyX-Code

\size small
'*' may be used to indicate that any atom type will
\end_layout

\begin_layout LyX-Code

\size small
satisfy the search.
\end_layout

\begin_layout LyX-Code

\size small
JTREE(I) The tree name (M, S, B, 3, E) of the atom to be included.
\end_layout

\begin_layout LyX-Code

\size small
The wild card '*' may be used to indicate that any tree
\end_layout

\begin_layout LyX-Code

\size small
name will satisfy the search.
\end_layout

\begin_layout LyX-Code

\size small
JRESNM(I) The residue name to which the atom has to belong to be
\end_layout

\begin_layout LyX-Code

\size small
included in the group.
 The wild card '*' may be used to
\end_layout

\begin_layout LyX-Code

\size small
indicate that any residue name will satisfy the search.
\end_layout

\begin_layout LyX-Code

\size small
------------------------------------------------------------------------
\end_layout

\begin_layout Standard

\series bold
Examples:
\end_layout

\begin_layout Standard
The molecule 18-crown-6 will be used to illustrate the group options.
 This molecule is composed of six repeating (-CH2-O-CH2-) units.
 Let us suppose that one created three residues in the PREP unit: CRA, CRB,
 CRC.
 Each of these is a (-CH2-O-CH2-) moiety and they differ by their dihedral
 angles.
 In order to construct 18-crown-6, the residues CRA, CRB, CRC, CRB, CRC,
 CRB are linked together during the LINK module with the ring closure being
 between CRA(residue 1) and CRB(residue 6).
\end_layout

\begin_layout Standard

\series bold
Input 1:
\end_layout

\begin_layout LyX-Code
Title one
\end_layout

\begin_layout LyX-Code
RES 1 5
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout LyX-Code
Title two
\end_layout

\begin_layout LyX-Code
RES 6
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout Standard

\series bold
Output 1:
\series default
 Group 1 will contain residues 1 through 5 (CRA, CRB, CRC, CRB, CRC) and
 Group 2 will contain residue 6 (CRB).
\end_layout

\begin_layout Standard

\series bold
Input 2:
\end_layout

\begin_layout LyX-Code
Title one
\end_layout

\begin_layout LyX-Code
RES 1 5
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout LyX-Code
Title two
\end_layout

\begin_layout LyX-Code
ATOM 36 42
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout Standard

\series bold
Output 2:
\series default
 Group 1 will contain residues 1 through 5 (CRA, CRB, CRC, CRB, CRC) and
 Group 2 will contain atoms 36 through 42.
 Coincidentally, atoms 36 through 42 are also all the atoms in residue 6.
\end_layout

\begin_layout Standard

\series bold
Input 3:
\end_layout

\begin_layout LyX-Code
Title one
\end_layout

\begin_layout LyX-Code
RES -1 6
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout Standard

\series bold
Output 3:
\series default
 Six groups will be created; Group 1: CRA, Group 2: CRB,..., Group 6: CRB.
\end_layout

\begin_layout Standard

\series bold
Input 4:
\end_layout

\begin_layout LyX-Code
Title one
\end_layout

\begin_layout LyX-Code
FIND
\end_layout

\begin_layout LyX-Code
O2 OS M CRA
\end_layout

\begin_layout LyX-Code
SEARCH
\end_layout

\begin_layout LyX-Code
RES 1 6
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout Standard

\series bold
Output 4:
\series default
 Group 1 will contain those atoms with the atom name 'O2', atom type 'OS',
 tree name 'M' and residue name 'CRA'.
\end_layout

\begin_layout Standard

\series bold
Input 5:
\end_layout

\begin_layout LyX-Code
Title one
\end_layout

\begin_layout LyX-Code
FIND
\end_layout

\begin_layout LyX-Code
O2 OS * *
\end_layout

\begin_layout LyX-Code
SEARCH
\end_layout

\begin_layout LyX-Code
RES 1 6
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout Standard

\series bold
Output 5:
\series default
 Group 1 will contain those atoms with the atom name 'O2', atom type 'OS',
 any tree name and any residue name.
\end_layout

\begin_layout Standard

\series bold
Input 6:
\end_layout

\begin_layout LyX-Code
Title one
\end_layout

\begin_layout LyX-Code
RES 1 3 6 6
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout Standard

\series bold
Output 6:
\series default
 One group is created containing residues 1 to 3 and 6.
 Up to seven ranges of contiguous residues can be specified per group.
 (In this case there are two ranges).
\end_layout

\begin_layout Standard

\series bold
Input 7:
\end_layout

\begin_layout LyX-Code
First restraint group
\end_layout

\begin_layout LyX-Code
10.0
\end_layout

\begin_layout LyX-Code
FIND
\end_layout

\begin_layout LyX-Code
CA * * *
\end_layout

\begin_layout LyX-Code
SEARCH
\end_layout

\begin_layout LyX-Code
RES 1 17   25 36
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout LyX-Code
Second restraint group, with a different restraint weight
\end_layout

\begin_layout LyX-Code
1.0
\end_layout

\begin_layout LyX-Code
FIND
\end_layout

\begin_layout LyX-Code
CA * * *
\end_layout

\begin_layout LyX-Code
SEARCH
\end_layout

\begin_layout LyX-Code
RES 61 127
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout LyX-Code
END
\end_layout

\begin_layout Standard

\series bold
Output 7:
\series default
 CA atoms in residues 1-17 and 25-36 will be restrained to their initial
 positions with a strong weight of 
\begin_inset Formula $10.0\mathrm{kcal}\cdot\mathrm{mol}^{-1}\cdot\mathrm{\AA}^{-2}$
\end_inset

; CA atoms in residues 61 to 127 will have a weaker restraint force constant.
\end_layout

\begin_layout Chapter
Sampling configuration space
\end_layout

\begin_layout Standard
The "middle" scheme [Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:middle-scheme"

\end_inset

] offers an efficient approach to accurately sample configuration space
 in standard molecular dynamics simulations.
 There are many instances when standard molecular dynamics simulations get
 
\begin_inset Quotes eld
\end_inset

stuck
\begin_inset Quotes erd
\end_inset

 near the starting configuration, and fail to adequately sample the available
 low-energy configurational space.
 This chapter describes a variety of techniques that can partially overcome
 such problems.
 The following chapter (on Free Energies) continues many of these ideas,
 adapting them to the calculation of alchemical or configurational free
 energy differences.
 There is no good distinction between these two chapters, because good sampling
 of the canonical distribution and estimation of free energies go hand-in-hand.
 But the present chapter covers methods that are 
\emph on
primarily
\emph default
 devoted to enhanced or accelerated sampling, whereas the following chapter
 considers methods that explicitly estimate free energy differences.
\end_layout

\begin_layout Section

\series bold
Self-Guided Langevin dynamics
\begin_inset CommandInset label
LatexCommand label
name "sec:Self-Guided-Langevin-dynamics"

\end_inset


\end_layout

\begin_layout Standard
Self-guided Langevin dynamics (SGLD) is designed to enhance conformational
 search efficiency in either a molecular dynamics (MD) simulation (when
 
\shape italic
gamma_ln=0
\shape default
) or a Langevin dynamics (LD) simulation (when 
\shape italic
gamma_ln
\begin_inset Formula $>$
\end_inset

0
\shape default
).
 This method accelerates low frequency motion to enhance conformational
 sampling.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Wu03,Wu12,Wu13a,Wu16,Wu20"
literal "true"

\end_inset

 
\end_layout

\begin_layout Standard

\series bold
Overview:
\series default
 The input parameter, 
\shape italic
tsgavg
\shape default
, defines the lower limit period of the low frequency motion.
 Typically, 
\shape italic
tsgavg
\shape default
=0.2 ps is sutiable to define bond stretching and bending motions as high
 frequency motion and is recommanded to enhance motions like phase separation,
 secondary structure folding, and ligand docking, while 
\shape italic
tsgavg
\shape default
=1.0 ps is suitable to include more local motions such as bond rotation and
 solvent relaxation and is recommended for protein domain motion, and protein-pr
otein docking.
 The input parameter, 
\shape italic
sgft
\shape default
 or 
\emph on
sgff
\emph default
, defines the strength of the guiding effect.
 
\shape italic
sgft
\shape default
 between 
\begin_inset Formula $-1$
\end_inset

 and +1 sets the momentum guiding effect, with 0 for regular LD or MD simulation
s.
 A larger 
\shape italic
sgft
\shape default
 will enhance low frequency motion to accelerate conformational search.
 
\shape italic
sgff 
\emph on
between 
\begin_inset Formula $-0.32$
\end_inset

 and +0.32
\shape default
\emph default
 defines a force guiding factor to target energy barriers.
 A negative value will flatten energy barriers.
 Normally, 
\shape italic
sgft
\shape default
 and 
\shape italic
sgff
\shape default
 have opposite effects on conformational distribution and there exist balanced
 values to conserve the canonical ensemble.
 SGLD accelerates slow events to an affordable time scale while minimizing
 the perturbation to the conformational distribution.
 The guiding force can be applied to a part of a simulation system between
 atom 
\shape italic
isgsta
\shape default
 and atom 
\shape italic
isgend
\shape default
.
\end_layout

\begin_layout Standard
The conformational distribution of SGLD can be reweighted to produce canonical
 ensemble averages
\begin_inset CommandInset citation
LatexCommand citep
key "Wu11a,Wu12,Wu20"
literal "true"

\end_inset

.
 The current implementation is mainly based on the most recent reformulation
 named the generallized self-guided molecular simulation method (SGMDg or
 SGLDg)
\begin_inset CommandInset citation
LatexCommand citep
key "Wu20"
literal "true"

\end_inset

.
 The previous method
\begin_inset CommandInset citation
LatexCommand citep
key "Wu11a,Wu11b"
literal "true"

\end_inset

, SGLDfp is no longer available.
 As an alternative to Langevin dynamics (LD), self-guided Langevin dynamics
 via generalized Langevin equation (SGLD-GLE) 
\begin_inset CommandInset citation
LatexCommand citep
key "Wu16"
literal "true"

\end_inset

 can exactly preserve canonical ensemble while avoiding the slow down by
 friction forces.
 SGLD-GLE method can be turned on by setting 
\shape italic
sgfg
\shape default
 between 
\begin_inset Formula $-1$
\end_inset

 and +1.
 SGLD-GLE can be used with SGLDg by setting 
\shape italic
sgft
\shape default
, 
\shape italic
sgff
\shape default
, and 
\shape italic
sgfg
\shape default
.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
isgld
\begin_inset Index idx
status open

\begin_layout Plain Layout
isgld
\end_layout

\end_inset

 SGLD algorithm index.
 Default 
\shape italic
isgld
\shape default
= 0, SGLD is diabled; 
\shape italic
isgld
\shape default
>0 will turn on SGLDg/SGMDg and/or SGLD-GLE method.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
tsgavg
\begin_inset Index idx
status open

\begin_layout Plain Layout
tsgavg
\end_layout

\end_inset

 Local averaging time (
\shape italic
psec
\shape default
) for the guiding force calculation.
 Default 0.2 
\shape italic
psec
\shape default
.
 A larger value defines slower motion to be enhanced.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
sgft
\begin_inset Index idx
status open

\begin_layout Plain Layout
sgft
\end_layout

\end_inset

 Momentum guiding factor.
 Defines the strength of the guiding effect.
 Default 0.0.
 Suggested value is 1.0 when 
\shape italic
sgff=0.

\shape default
 Its value range is -1~1 with larger value leads to stronger low frequency
 motion.
 When 
\shape italic
sgft
\shape default
 is set <-1 or >1, it is reset to the balanced value of 
\shape italic
sgff
\shape default
 to preserve canonical ensemble.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
sgff
\begin_inset Index idx
status open

\begin_layout Plain Layout
sgff
\end_layout

\end_inset

 Force guiding factor.
 
\shape italic
sgff
\shape default
 is used to scale down low frequency energy surface by a factor, (1+
\shape italic
sgff
\shape default
).
 
\shape italic
sgff
\shape default
 is suggested to take values between -0.32 and 0.32, with default value of
 0.
  Suggested value is -0.3 when 
\shape italic
sgft=0.
 
\shape default
 When sgff is set <-1 or >1, it is reset to the balanced value of 
\shape italic
sgft
\shape default
 to preserv canonical ensemble.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
sgfg
\begin_inset Index idx
status open

\begin_layout Plain Layout
sgft
\end_layout

\end_inset

 momentum guiding factor for SGLD-GLE.
 Degault is 0.
 Its value range is -1~1 with larger value resulting in faster low frequency
 motion.
  Suggested value is 1 when
\shape italic
 sgft=0 and sgff=0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
isgsta
\begin_inset Index idx
status open

\begin_layout Plain Layout
isgsta
\end_layout

\end_inset

 The first atom index of SGLD region.
 Default is 1.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
isgend
\begin_inset Index idx
status open

\begin_layout Plain Layout
isgend
\end_layout

\end_inset

 The last atom index of SGLD region.
 Default is 
\shape italic
natom
\shape default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nsgsize
\begin_inset Index idx
status open

\begin_layout Plain Layout
nsgsize
\end_layout

\end_inset

 size of the bonded substructure for each atom used to calculate average
 guiding forces.
 1 for no bonded structure is considered; 2 for all atoms connected through
 bonds or angles ; 3 for all atoms connected through bonds, angles, and
 dihedral angles.
 Default is 1.
\end_layout

\begin_layout Standard
The output of SGMD/SGLD simulations contains the following properties related
 to the enhancement in conformational search and reweighting of conformational
 distribution:
\end_layout

\begin_layout Standard
METHOD: GAMM TEMPLF TEMPHF EPOTLF EPOTHF EPOTLLF SGWT
\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
These quantities are instantaneous values defined as below: 
\end_layout

\begin_layout Standard
METHOD: SGLD when 
\shape italic
gamma_ln
\begin_inset Formula $>$
\end_inset

0 
\shape default
or SGMD when 
\shape italic
gamma_ln=0
\end_layout

\begin_layout Standard
GAMM: Average atomic friction constant based on atom interactions.
 
\end_layout

\begin_layout Standard
TEMPLF: low frequency temperature 
\end_layout

\begin_layout Standard
TEMPHF: high frequency temperature.
 Apparent temperature=TEMPLF+TEMPHF
\end_layout

\begin_layout Standard
EPOTLF: low frequency potential energy 
\end_layout

\begin_layout Standard
EPOTHF: high frequency potential energy, EPOT=EPOTLF+EPOTHF
\end_layout

\begin_layout Standard
EPOTLLF: Average of low frequency potential energy.
 It is needed for reweighting.
 
\end_layout

\begin_layout Standard
SGWT: Weighting number.
 exp(SGWT) is the weighting factor of current frame.
 
\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\noindent
The weight of a conformation is calculated by 
\end_layout

\begin_layout LyX-Code
Weight=exp(SGWT) =exp(((p(sgft)-sgff)*(EPOTLF-EPOTLLF)/(KBOLTZ*Temp))
\end_layout

\begin_layout LyX-Code
where: sgft=(1+p(sgft))^2-1/(1+p(sgft))
\end_layout

\begin_layout Standard
or:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbf{\mathit{w}}_{i}=\exp\left(\frac{\lambda_{FP}-\lambda_{F}}{kT}(E_{LF}-E_{LLF})\right)
\]

\end_inset


\end_layout

\begin_layout Standard
where p(sgft) or 
\begin_inset Formula $\lambda_{FP}$
\end_inset

 is called the balanced force guiding factor of 
\begin_inset Formula $\lambda_{P}$
\end_inset

.
 The relation between sgft, 
\begin_inset Formula $\lambda_{P}$
\end_inset

, and p(sgft), 
\begin_inset Formula $\lambda_{FP}$
\end_inset

, is: 
\begin_inset Formula $\lambda_{P}=(1+\lambda_{FP})^{2}-\frac{1}{1+\lambda_{FP}}$
\end_inset

.
 Similarly, 
\begin_inset Formula $\lambda_{PF}$
\end_inset

 is called the balanced momentum guiding factor of 
\begin_inset Formula $\lambda_{F}$
\end_inset

, where 
\begin_inset Formula $\lambda_{PF}=(1+\lambda_{F})^{2}-\frac{1}{1+\lambda_{F}}$
\end_inset

.
 When both 
\begin_inset Formula $\lambda_{P}$
\end_inset

 and 
\begin_inset Formula $\lambda_{F}$
\end_inset

 are used in a SGMDg/SGLDg simulation, it is recommanded that 
\begin_inset Formula $-1\leq\lambda_{p}-\lambda_{PF}\leq1$
\end_inset

.
\end_layout

\begin_layout Standard
Below are example input files to run SGMD/SGLD simulations.
\end_layout

\begin_layout Standard
1.
 a SGLD simulation with sgft only:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Sample SGLD simulation for enhanced conformational search 
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

nstlim=1000, cut=99.0, igb=1, saltcon=0.1,
\end_layout

\begin_layout Plain Layout

ntpr=100, ntwr=100000, ntt=3, gamma_ln=10.0,
\end_layout

\begin_layout Plain Layout

ntx=5, irest=1,
\end_layout

\begin_layout Plain Layout

ntc=2, ntf=2, tol=0.000001,
\end_layout

\begin_layout Plain Layout

dt=0.002, ntb=0, tempi=300., temp0=300.,
\end_layout

\begin_layout Plain Layout

isgld=1,tsgavg=0.2,sgft=1.0,
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
2.
 a SGLD simulation using bonded substructure(nsgsize=2) to estimate low
 frequency motion, which reduces noises due to bond stretching and bending.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Sample SGLD simulation using bonded substructures 
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

nstlim=1000, cut=99.0, igb=1, saltcon=0.1,
\end_layout

\begin_layout Plain Layout

ntpr=100, ntwr=100000, ntt=3, gamma_ln=10.0,
\end_layout

\begin_layout Plain Layout

ntx=5, irest=1, 
\end_layout

\begin_layout Plain Layout

ntc=2, ntf=2, tol=0.000001,
\end_layout

\begin_layout Plain Layout

dt=0.002, ntb=0, tempi=300., temp0=300.,
\end_layout

\begin_layout Plain Layout

isgld=1,tsgavg=0.2,sgft=1.0, nsgsize=2,
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
3.
 a SGLDg simulation using both 
\shape italic
sgft
\shape default
 and 
\shape italic
sgff
\shape default
 factors.
 When both guiding factors are used, it is recommand that 
\begin_inset Formula $-1\leq\lambda_{p}-(1+\lambda_{F})^{2}+\frac{1}{1+\lambda_{F}}\leq1$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Sample SGLDg simulation using both sgft and sgff 
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

nstlim=1000, cut=99.0, igb=1, saltcon=0.1,
\end_layout

\begin_layout Plain Layout

ntpr=100, ntwr=100000, ntt=3, gamma_ln=10.0,
\end_layout

\begin_layout Plain Layout

ntx=5, irest=1, 
\end_layout

\begin_layout Plain Layout

ntc=2, ntf=2, tol=0.000001,
\end_layout

\begin_layout Plain Layout

dt=0.002, ntb=0, tempi=300., temp0=300.,
\end_layout

\begin_layout Plain Layout

isgld=1,tsgavg=0.2,sgft=0.5,sgff=-0.1,
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
4.
 a SGMDg simulation when gamma_ln=0:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Sample SGMDg simulation using both sgft and sgff 
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

nstlim=1000, cut=99.0, igb=1, saltcon=0.1,
\end_layout

\begin_layout Plain Layout

ntpr=100, ntwr=100000, ntt=1, tautp=1.0,
\end_layout

\begin_layout Plain Layout

ntx=5, irest=1, 
\end_layout

\begin_layout Plain Layout

ntc=2, ntf=2, tol=0.000001,
\end_layout

\begin_layout Plain Layout

dt=0.002, ntb=0, tempi=300., temp0=300.,
\end_layout

\begin_layout Plain Layout

isgld=1,tsgavg=0.2,sgft=0.5,sgff=-0.1,
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
5.
 a SGLD-GLE simulation using sgfg to achieve enhanced conformational search
 while conserve canonical ensemble exactly:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Sample SGLD-GLE simulation to conserve canonical ensemble
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

nstlim=1000, cut=99.0, igb=1, saltcon=0.1,
\end_layout

\begin_layout Plain Layout

ntpr=100, ntwr=100000, ntt=3, gamma_ln=10.0,
\end_layout

\begin_layout Plain Layout

ntx=5, irest=1,
\end_layout

\begin_layout Plain Layout

ntc=2, ntf=2, tol=0.000001,
\end_layout

\begin_layout Plain Layout

dt=0.002, ntb=0, tempi=300., temp0=300.,
\end_layout

\begin_layout Plain Layout

isgld=1,tsgavg=0.2,sgfg=1.0,
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section

\series bold
Targeted MD
\end_layout

\begin_layout Standard
The targeted MD option adds an additional term to the energy function based
 on the mass-weighted root mean square deviation of a set of atoms in the
 current structure compared to a reference structure.
 The reference structure is specified using the 
\shape italic
-ref
\shape default
 flag in the same manner as is used for Cartesian coordinate restraints
 (NTR=1).
 Targeted MD can be used with or without positional restraints.
 If positional restraints are not applied (ntr=0), 
\shape italic
sander
\shape default
 performs a best-fit of the reference structure to the simulation structure
 based on selection in 
\shape italic
tgtfitmask
\shape default
 and calculates the RMSD for the atoms selected by 
\shape italic
tgtrmsmask
\shape default
.
 The two masks can be identical or different.
 This way, fitting to one part of the structure but calculating the RMSD
 (and thus restraint force) for another part of the structure is possible.
 If targeted MD is used in conjunction with positional restraints (ntr=1),
 only 
\shape italic
tgtrmsmask
\shape default
 should be given in the control input because the molecule is 'fitted' implicitl
y by applying positional restraints to atoms specified in 
\shape italic
restraintmask
\shape default
.
 
\begin_inset Newline newline
\end_inset

 The energy term has the form:
\end_layout

\begin_layout LyX-Code
E = 0.5 * TGTMDFRC * NATTGTRMS * (RMSD-TGTRMSD)**2
\end_layout

\begin_layout Standard
The energy will be added to the RESTRAINT term.
 Note that the energy is weighted by the number of atoms that were specified
 in the 
\shape italic
tgtrmsmask
\shape default
 (NATTGTRMS).
 The RMSD is the root mean square deviation and is mass weighted.
 The force constant is defined using the 
\shape italic
tgtmdfrc
\shape default
 variable (see below).
 This option can be used with molecular dynamics or minimization.
 When targeted MD is used, 
\shape italic
sander
\shape default
 will print the current values for the actual and target RMSD to the energy
 summary in the output file.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
itgtmd
\begin_inset Index idx
status open

\begin_layout Plain Layout
itgtmd
\end_layout

\end_inset

 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 no targeted MD (default) 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 use targeted MD 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 use targeted MD to multiple targets (Multiply-targeted MD, or MTMD, see
 next section below)
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
tgtrmsd
\begin_inset Index idx
status open

\begin_layout Plain Layout
tgtrmsd
\end_layout

\end_inset

 Value of the target RMSD.
 The default value is 0.
 This value can be changed during the simulation by using the weight change
 option.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
tgtmdfrc
\begin_inset Index idx
status open

\begin_layout Plain Layout
tgtmdfrc
\end_layout

\end_inset

 This is the force constant for targeted MD.
 The default value is 0, which will result in no penalty for structure deviation
s regardless of the RMSD value.
 Note that this value can be negative, which would force the coordinates
 AWAY from the reference structure.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
tgtfitmask
\begin_inset Index idx
status open

\begin_layout Plain Layout
tgtfitmask
\end_layout

\end_inset

 Define the atoms that will be used for the rms superposition between the
 current structure and the reference structure.
 Syntax is in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:ambmask"

\end_inset

.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
tgtrmsmask
\begin_inset Index idx
status open

\begin_layout Plain Layout
tgtrmsmask
\end_layout

\end_inset

 Define the atoms that will be used for the rms difference calculation (and
 hence the restraint force), as outlined above.
 Syntax is in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:ambmask"

\end_inset

.
\end_layout

\begin_layout Standard
One can imagine many uses for this option, but a few things should be kept
 in mind.
 In this implementation of targeted MD, there is currently only one reference
 coordinate set, so there is no way to force the coordinates to any specific
 structure other than the one reference.
 To move a structure toward a reference coordinate set, one might use an
 initial 
\shape italic
tgtrmsd
\shape default
 value corresponding to the actual RMSD between the input and reference
 (
\shape italic
inpcrd
\shape default
 and 
\shape italic
refc
\shape default
).
 Then the weight change option could be used to decrease this value to 0
 during the simulation.
 To move a structure away from the reference, one can increase 
\shape italic
tgtrmsd
\shape default
 to values larger than zero.
 The minimum for this energy term will then be at structures with an RMSD
 value that matches 
\shape italic
tgtrmsd
\shape default
.
 Keep in mind that many different structures may have similar RMSD values
 to the reference, and therefore one cannot be sure that increasing 
\shape italic
tgtrmsd
\shape default
 to a given value will result in a particular structure that has that RMSD
 value.
 In this case it is probably wiser to use the final structure, rather than
 the initial structure, as the reference coordinate set, and decrease 
\shape italic
tgtrmsd
\shape default
 during the simulation.
 To address this, multiply-targeted MD is now available in Amber (
\shape italic
sander only
\shape default
), and is described in the next section.
 As an additional note, a negative force constant 
\shape italic
tgtmdfrc
\shape default
 can be used, but this can cause problems since the energy will continue
 to decrease as the RMSD to the reference increases.
\end_layout

\begin_layout Standard
Also keep in mind that phase space for molecular systems can be quite complex,
 and this method does not guarantee that a low energy path between initial
 and target structures will be followed.
 It is possible for the simulation to become unstable if the restraint energies
 become too large if a low-energy path between a simulated structure and
 the reference is not accessible.
\end_layout

\begin_layout Standard
Note also that the input and reference coordinates are expected to match
 the 
\shape italic
prmtop
\shape default
 file and have atoms in the same sequence.
 No provision is made for symmetry; rotation of a methyl group by 120° would
 result in a nonzero RMSD value.
\end_layout

\begin_layout Section

\series bold
Multiply-Targeted MD (MTMD)
\end_layout

\begin_layout Standard
In Amber (
\shape italic
sander only
\shape default
), the user may perform targeted MD calculations using multiple reference
 structures.
 Each reference may have its own associated target RMSD value and force
 constant, each of which can evolve independently in time.
 Additionally, the masks for each defined target may differ, and targeting
 to any given reference structure can be activated for some or part of the
 simulation.
 The energy term for MTMD is simply the sum of the energies that would be
 calculated for the molecule calculated relative to each target given the
 target RMSD and force constant for that target.
 The energy will then be added to the RESTRAINT term.
\end_layout

\begin_layout Standard
To use MTMD, the MTMD input file is specified using the 
\shape italic
-mtmd
\shape default
 flag in the command line arguments for 
\shape italic
sander
\shape default
.
 The MTMD input file will contain one instance of the tgt namelist (
\begin_inset Quotes eld
\end_inset

&tgt
\begin_inset Quotes erd
\end_inset

) for each reference structure used.
 The user may specify any number of reference structures.
\end_layout

\begin_layout Subsection

\series bold
Variables in the
\series default
 &tgt 
\series bold
namelist:
\series default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
refin
\begin_inset Index idx
status open

\begin_layout Plain Layout
refin
\end_layout

\end_inset

 The file name of the reference structure used.
 The input and reference coordinates are expected to match the 
\shape italic
prmtop
\shape default
 file and have atoms in the same sequence.
 
\shape italic
Default for refin is '', no reference structure given.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mtmdform 
\begin_inset Index idx
status open

\begin_layout Plain Layout
mtmdform
\end_layout

\end_inset

 If MTMDFORM > 0, then the reference coordinate file is formatted.
 Otherwise, the reference coordinate file is an unformatted (binary) file.
 
\shape italic
Default for MTMDFORM is the value assigned to MTMDFORM in the most recent
 namelist where MTMDFORM was specified.
 If MTMDFORM has not been specified in any namelist, it defaults to 1.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mtmdstep1,
\begin_inset space ~
\end_inset

mtmdstep2
\begin_inset Index idx
status open

\begin_layout Plain Layout
mtmdstep1
\end_layout

\end_inset

 Targeted MD for this structure is run for steps/iterations MTMDSTEP1 through
 MTMDSTEP2.
 If MTMDSTEP2 = 0, then TMD will be run through the end of the run, and
 the values of the target RMSD and the force constant will not change with
 time.
 Note that the first step/iteration is considered step 0.
 
\shape italic
Defaults for MTMDSTEP1 and MTMDSTEP2 are the values assigned to them in
 the most recent namelist where MTMDSTEP1 and MTMDSTEP2 were specified.
 If MTMDSTEP1 and MTMDSTEP2 have not been specified in any namelist, they
 default to 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mtmdvari
\begin_inset Index idx
status open

\begin_layout Plain Layout
mtmdvari
\end_layout

\end_inset

 If MTMDVARI 
\begin_inset Formula $>$
\end_inset

 0, then the force constant and target RMSD will vary with step number.
 Otherwise, they are constant throughout the run.
 If MTMDVARI 
\begin_inset Formula $>$
\end_inset

0, then the values MTMDSTEP2, MTMDRMSD2, and MTMDFORCE2 must be specified
 (see below).
 
\shape italic
Default for
\shape default
 MTMDVARI 
\shape italic
is the value assigned to
\shape default
 MTMDVARI 
\shape italic
in the most recent namelist where
\shape default
 MTMDVARI 
\shape italic
was specified.
 If
\shape default
 MTMDVARI 
\shape italic
has not been specified in any namelist, it defaults to 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mtmdrmsd,
\begin_inset space ~
\end_inset

mtmdrmsd2
\begin_inset Index idx
status open

\begin_layout Plain Layout
mtmdrmsd
\end_layout

\end_inset

 The target RMSD for this reference.
 If MTMDVARI 
\begin_inset Formula $>$
\end_inset

0, then the value of MTMDRMSD will vary between MTMDSTEP1 and MTMDSTEP2,
 so that, e.g.
 MTMDRMSD(MTMDSTEP1) = MTMDRMSD and MTMDRMSD(MTMDSTEP2) = MTMDRMSD2.
 
\shape italic
Defaults for MTMDRMSD and MTMDRMSD2 are the values assigned to them in the
 most recent namelist where MTMDRMSD and MTMDRMSD2 were specified.
 If MTMDRMSD and MTMDRMSD2 have not been specified in any namelist, they
 default to 0.0.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mtmdforce,
\begin_inset space ~
\end_inset

mtmdforce2
\begin_inset Index idx
status open

\begin_layout Plain Layout
mtmdforce
\end_layout

\end_inset

 The force constant for this reference.
 If MTMDVARI 
\begin_inset Formula $>$
\end_inset

0, then the value of MTMDFORCE will vary between MTMDSTEP1 and MTMDSTEP2,
 so that, e.g.
 MTMDFORCE(MTMDSTEP1) = MTMDFORCE and MTMDFORCE(MTMDSTEP2) = MTMDFORCE2.
 
\shape italic
Defaults for
\shape default
 MTMDFORCE 
\shape italic
and
\shape default
 MTMDFORCE2 
\shape italic
are the values assigned to them in the most recent namelist where
\shape default
 MTMDFORCE 
\shape italic
and
\shape default
 MTMDFORCE2 
\shape italic
were specified.
 If
\shape default
 MTMDFORCE 
\shape italic
and
\shape default
 MTMDFORCE2 
\shape italic
have not been specified in any namelist, they default to 0.0.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mtmdninc
\begin_inset Index idx
status open

\begin_layout Plain Layout
mtmdninc
\end_layout

\end_inset

 If MTMDVARI 
\begin_inset Formula $>$
\end_inset

0 and MTMDNINC 
\begin_inset Formula $>$
\end_inset

 0, then the changes in the values of of MTMDRMSD and MTMDFORCE are applied
 as a step function, with NINC steps/iterations between each change in the
 target values.
 If MTMDNINC = 0, the change is effected continuously (at every step).
 
\shape italic
Default for MTMDNINC is the value assigned to MTMDNINC in the most recent
 namelist where MTMDNINC was specified.
 If MTMDNINC has not been specified in any namelist, it defaults to 0.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mtmdmult
\begin_inset Index idx
status open

\begin_layout Plain Layout
mtmdmult
\end_layout

\end_inset

 If MTMDMULT=0, and the values of MTMDFORCE changes with step number, then
 the changes in the force constant will be linearly interpolated from MTMDFORCE
\begin_inset Formula $\to$
\end_inset

MTMDFORCE2 as the step number changes.
 If MTMDMULT=1 and the force constant is changing with step number, then
 the changes in the force constant will be effected by a series of multiplicativ
e scalings, using a single factor, R, for all scalings.
 
\begin_inset Formula $i.e.$
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
MTMDFORCE2 = R**INCREMENTS * MTMDFORCE 
\end_layout

\begin_layout Standard
INCREMENTS is the number of times the target value changes, which is determined
 by MTMDSTEP1, MTMDSTEP2, and MTMDNINC.
 
\shape italic
Default for MTMDMULT is the value assigned to MTMDMULT in the most recent
 namelist where MTMDMULT was specified.
 If MTMDMULT has not been specified in any namelist, it defaults to 0.

\shape default
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
mtmdmask
\begin_inset Index idx
status open

\begin_layout Plain Layout
mtmdmask
\end_layout

\end_inset

 Define the atoms that will be used for both the rms superposition between
 the current structure and the reference structure and the rms difference
 calculation (and hence the restraint force), as outlined above.
 Syntax is in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:ambmask"

\end_inset

.
\shape italic
Default for MTMDMASK is the value assigned to MTMDMASK in the most recent
 namelist where MTMDMASK was specified.
 If MTMDMASK has not been specified in any namelist, it defaults to '*',
 use all atoms in the fit and force calculations.

\shape default
 
\backslash

\end_layout

\begin_layout Standard
Namelist &tgt is read for each reference structure.
 Input ends when a namelist statement with refin = '' (or refin not specified)
 is found.
 Note that comments can precede or follow any namelist statement, allowing
 comments and reference definitions to be freely mixed.
\end_layout

\begin_layout Section

\series bold
Low-MODe (LMOD) methods
\end_layout

\begin_layout Standard
István Kolossváry's LMOD methods for minimization, conformational searching,
 and flexible docking
\begin_inset CommandInset citation
LatexCommand cite
key "Kolossvary96,Kolossvary99,Kolossvary01,Keseru01"
literal "true"

\end_inset

 are fully implemented in Amber.
 The centerpiece of LMOD is a conformational search algorithm based on eigenvect
or following of low frequency vibrational modes.
 It has been applied to a spectrum of computational chemistry domains including
 protein loop optimization and flexible active site docking.
 
\end_layout

\begin_layout Standard
In the Amber 2020 release, the LMOD optimization code has been updated with
 major improvements and new features including more accurate flexible docking,
 the option to visualize normal modes, utilization of random mixtures of
 low-frequency modes, and the option to work with a range of modes anywhere
 in the spectrum and not just the lowest frequency modes.
 The latter is particularly useful for docking where the modes relevant
 to binding a ligand molecule are usually not the lowest frequency modes.
  The interface of the new LMOD has not changed, everything works exactly
 the same way as in Amber18 and earlier versions, a few parameters simply
 have additional options as documented below.
 The new features are demonstrated with production quality examples.
\end_layout

\begin_layout Standard
Details of the LMOD procedure, and hints on getting good performance, are
 given Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:lmod"

\end_inset

, which should be consulted before trying the procedures in 
\emph on
sander
\emph default
.
 The only difference between the 
\emph on
sander
\emph default
 and 
\emph on
NAB
\emph default
 implementations is the input specification; the same LMOD code is linked
 into both.
 The sections below give input details for 
\emph on
sander
\emph default
.
\end_layout

\begin_layout Standard
There are
\series bold
 four 
\begin_inset Quotes eld
\end_inset

real-life
\begin_inset Quotes erd
\end_inset

 examples
\series default
 of performing LMOD searches and in 
\emph on
lmod_vib_anim
\series bold
\emph default
 three examples
\series default
 of updates in Amber20 including generating LMOD-vibration visualization.
 These are available at 
\emph on
https://ambermd.org/Manuals.php
\emph default
.
 Each directory in the tar file has a README file with more information.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:XMIN"

\end_inset

XMIN
\end_layout

\begin_layout Standard
The XMIN methods for minimization are traditional and manifold in the field
 of unconstrained optimization: PRCG is a Polak-Ribiere nonlinear Conjugate
 Gradient algorithm,
\begin_inset CommandInset citation
LatexCommand cite
key "Press89"
literal "true"

\end_inset

 LBFGS is a Limited-memory Broyden-Fletcher-Goldfarb-Shanno quasi-Newton
 algorithm,
\begin_inset CommandInset citation
LatexCommand cite
key "Liu89"
literal "true"

\end_inset

 and TNCG is a Truncated Newton linear Conjugate Gradient method with optional
 LBFGS preconditioning.
\begin_inset CommandInset citation
LatexCommand cite
key "Nocedal00"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
Some of the &cntrl namelist variables that control Amber's other minimization
 facilities also control XMIN.
 Consequently, non-experts can employ the default XMIN method merely by
 specifying ntmin = 3.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
maxcyc
\begin_inset Index idx
status open

\begin_layout Plain Layout
maxcyc
\end_layout

\end_inset

 The maximum number of cycles of minimization.
 Default is 1 to be consistent with Amber's other minimization facilities
 although it may be unrealistically short.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ntmin
\begin_inset Index idx
status open

\begin_layout Plain Layout
ntmin
\end_layout

\end_inset

 The flag for the method of minimization.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

3 The XMIN method is used.
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

4 The LMOD method is used.
 The LMOD procedure employs XMIN for energy relaxation and minimization.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
drms
\begin_inset Index idx
status open

\begin_layout Plain Layout
drms
\end_layout

\end_inset

 The convergence criterion for the energy gradient: minimization will halt
 when the root-mean-square of the Cartesian elements of the gradient is
 less than this.
 Default is 
\begin_inset Formula $10^{-4}\mathrm{kcal}\cdot\mathrm{mol}^{-1}\cdot\mathrm{\AA}^{-1}$
\end_inset

.
 This is consistent with Amber's other minimization facilities.
  In Amber18 and earlier this default may have been unrealistically strict.
  In Amber20 this criterion refers to the minimization of the input structure
 for which the normal modes are computed, and to avoid unnatural vibrational
 modes it should be set to even stricter values, e.g., 
\begin_inset Formula $10^{-8}$
\end_inset

.
  Compare with input parameter lmod_minimize_grms below.
\end_layout

\begin_layout Standard
Other options that control XMIN are in the scope of the &lmod namelist.
 These parameters enable expert control of XMIN.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
lbfgs_memory_depth
\begin_inset Index idx
status open

\begin_layout Plain Layout
lbfgs
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

memory
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

depth
\end_layout

\end_inset

 The depth of the LBFGS memory for LBFGS minimization, or LBFGS preconditioning
 in TNCG minimization.
 Default is 3.
 Suggested alternate value is 5.
 The value 0 turns off LBFGS preconditioning in TNCG minimization.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
matrix_vector_product_method
\begin_inset Index idx
status open

\begin_layout Plain Layout
matrix
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

vector
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

product
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

method
\end_layout

\end_inset

 The finite difference Hv matrix-vector product method: "forward" = forward
 difference, "central" = central difference.
 Default is forward difference.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
xmin_method
\begin_inset Index idx
status open

\begin_layout Plain Layout
xmin
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

method
\end_layout

\end_inset

 The minimization method: "PRCG" = Polak-Ribiere Conjugate Gradient, "LBFGS"
 = Limited-memory Broyden-Fletcher-Goldfarb-Shanno, and "TNCG" = Optionally
 LBFGS-preconditioned Truncated Newton Conjugate Gradient.
 Default is LBFGS.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
xmin_verbosity
\begin_inset Index idx
status open

\begin_layout Plain Layout
xmin
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

verbosity
\end_layout

\end_inset

 The verbosity of the internal status output from the XMIN package: 0 =
 none, 1 = minimization details, and 2 = minimization and line search details
 plus CG details in TNCG.
 Currently, the XMIN status output may be disordered with respect to Amber's
 output.
 Default is 0, no output of the XMIN package internal status.
 Note that XMIN is also available in AmberTools, in the NAB package.
 An annotated example output corresponding to XMIN_VERBOSITY=2 can be found
 in the NAB documentation.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:LMOD"

\end_inset

LMOD
\end_layout

\begin_layout Standard
Some of the options that control LMOD have the same names as Amber's other
 minimization facilities.
 See the XMIN section immediately above.
 Other options that control LMOD are in the scope of the &lmod namelist.
 These parameters enable expert control of LMOD.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
arnoldi_dimension
\begin_inset Index idx
status open

\begin_layout Plain Layout
arnoldi
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

dimension
\end_layout

\end_inset

 The dimension of the ARPACK Arnoldi factorization.
 Zero specifies the whole space, that is, three times the number of atoms.
 Default is 0, the whole space.
 Basically, the ARPACK package used for the eigenvector calculations solves
 multiple "small" eigenvalue problems instead of a single "large" problem,
 which is the diagonalization of the three times the number of atoms by
 three times the number of atoms Hessian matrix.
 This parameter is the user specified dimension of the "small" problem.
 The allowed range is total_low_modes + 1 
\begin_inset Formula $<$
\end_inset

= arnoldi_dimension 
\begin_inset Formula $<$
\end_inset

= three times the number of atoms.
 The default means that the "small" problem and the "large" problem are
 identical.
 This is the preferred, i.e., fastest, calculation for small to medium size
 systems, because ARPACK is guaranteed to converge in a single iteration.
 The ARPACK calculation scales with three times the number of atoms times
 the arnoldi_dimension squared and, therefore, for larger molecules there
 is an optimal arnoldi_dimension much less than three times the number of
 atoms that converges much faster in multiple iterations (possibly thousands
 or tens of thousands of iterations).
 The key to good performance is to select an arnoldi_dimension such that
 all the ARPACK storage fits in memory.
 For proteins, arnoldi_dimension=1000 is generally a good value, but often
 a very small 50-100 Arnoldi dimension provides the fastest net computational
 cost with very many iterations.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
conflib_filename
\begin_inset Index idx
status open

\begin_layout Plain Layout
conflib
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

filename
\end_layout

\end_inset

 The user-given filename of the LMOD conformational library.
 The file format is Amber standard formatted trajectory output regardless
 of the value of &cntrl namelist variable ioutfm.
 The conformations are stored in energetic order (global minimum energy
 structure first), the number of conformations
\begin_inset Formula $<$
\end_inset

= conflib_size.
 The default filename is 
\shape italic
conflib
\shape default
.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
conflib_size
\begin_inset Index idx
status open

\begin_layout Plain Layout
conflib
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

size
\end_layout

\end_inset

 The number of conformations to store in conflib.
 Default is 3.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
energy_window
\begin_inset Index idx
status open

\begin_layout Plain Layout
energy
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

window
\end_layout

\end_inset

 The energy window for conformation storage; the energy of a stored structure
 will be in the interval [global_min, global_min + energy_window].
 Default is 0, only storage of the global minimum structure.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
explored_low_modes
\begin_inset Index idx
status open

\begin_layout Plain Layout
explored
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

low
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

modes
\end_layout

\end_inset

 The number of low frequency vibrational modes used per LMOD iteration.
 Default is 3.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
frequency_eigenvector_recalc
\begin_inset Index idx
status open

\begin_layout Plain Layout
frequency
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

eigenvector
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

recalc
\end_layout

\end_inset

 The frequency, measured in LMOD iterations, of the recalculation of eigenvector
s.
 Default is 3.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
frequency_ligand_rotrans
\begin_inset Index idx
status open

\begin_layout Plain Layout
frequency
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

ligand
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

rotrans
\end_layout

\end_inset

 The frequency, measured in LMOD iterations, of the application of rigid-body
 rotational and translational motions to the ligand(s).
 At each frequency_ligand_rotrans-th LMOD iteration number_ligand_rotrans
 rotations and translations are applied to the ligand(s).
 Default is 1, ligand(s) are rotated and translated at every LMOD iteration.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
lmod_job_title
\begin_inset Index idx
status open

\begin_layout Plain Layout
lmod
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

job
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

title
\end_layout

\end_inset

 The user-given title for the job that goes in the first line of the conflib
 and lmod_trajectory files.
 The default job title is "job_title_goes_here".
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
lmod_minimize_grms
\begin_inset Index idx
status open

\begin_layout Plain Layout
lmod
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

minimize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

grms
\end_layout

\end_inset

 In Amber18 and earlier the gradient root-mean-square convergence criterion
 of structure minimization.
 In Amber 20 this was specified to be the criterion to minimize low-energy
 conformations; such conformations do not require as strict a convergence
 criterion as does the first minimization whose convergence is now controlled
 with input parameter drms, see above.
 Default is 0.1.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
lmod_relax_grms
\begin_inset Index idx
status open

\begin_layout Plain Layout
lmod
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

relax
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

grms
\end_layout

\end_inset

 The gradient RMS convergence criterion of structure relaxation.
 Default is 1.0.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
lmod_restart_frequency
\begin_inset Index idx
status open

\begin_layout Plain Layout
lmod
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

restart
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

frequency
\end_layout

\end_inset

 The frequency, in LMOD iterations, of conflib updating and LMOD restarting
 with a randomly chosen structure from the pool.
 Default is 5.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
lmod_step_size_max
\begin_inset Index idx
status open

\begin_layout Plain Layout
lmod
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

step
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

size
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

max
\end_layout

\end_inset

 The maximum length of a single LMOD ZIG move.
 Default is 5.0 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AA
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
lmod_step_size_min
\begin_inset Index idx
status open

\begin_layout Plain Layout
lmod
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

step
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

size
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

min
\end_layout

\end_inset

 The minimum length of a single LMOD ZIG move.
 Default is 2.0 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AA
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
lmod_trajectory_filename
\begin_inset Index idx
status open

\begin_layout Plain Layout
lmod
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

trajectory
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

filename
\end_layout

\end_inset

 The filename of the LMOD pseudo trajectory.
 The file format is standard Amber trajectory file.
 The conformations in this file show the progress of the LMOD search.
 The number of conformations = number_lmod_iterations + 1.
 The default filename is 
\shape italic
lmod_trajectory
\shape default
.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
lmod_verbosity
\begin_inset Index idx
status open

\begin_layout Plain Layout
lmod
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

verbosity
\end_layout

\end_inset

 The verbosity of the internal status output from the LMOD package: 0 =
 none, 1 = some details, 2 = more details, 3 = everything including ARPACK
 information, 4 = ARPACK only, 5 = visualize normal modes.
 Currently, the LMOD status output may be disordered with respect to Amber's
 output.
 Default is 0, no output of the LMOD package internal status.
 Note that LMOD is also available in AmberTools, in the NAB package.
 An annotated example output corresponding to LMOD_VERBOSITY=2 can be found
 in the NAB documentation.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
monte_carlo_method
\begin_inset Index idx
status open

\begin_layout Plain Layout
monte
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

carlo
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

method
\end_layout

\end_inset

 The Monte Carlo method: "Metropolis" = Metropolis Monte Carlo, "Total_Quench"
 = the LMOD trajectory always proceeds towards the lowest lying neighbor
 of a particular energy well found after exhaustive search along all of
 the low modes, and "Quick_Quench" = the LMOD trajectory proceeds towards
 the first neighbor found, which is lower in energy than the current point
 on the path, without exploring the remaining modes.
 Default is Metropolis Monte Carlo.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
number_free_rotrans_modes
\begin_inset Index idx
status open

\begin_layout Plain Layout
number
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

free
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

rotrans
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

modes
\end_layout

\end_inset

 In Amber18 and earlier this was solely the number of rotational and translation
al degrees of freedom (dof) which is related to the number of frozen or
 tethered atoms in the system: 0 atoms dof=6, 1 atom dof=3, 2 atoms dof=1,
 
\begin_inset Formula $>$
\end_inset

=3 atoms dof=0.
 In Amber20 the input domain was extended to any non-negative integer, and
 it represents the number of modes for LMOD to skip.
  In this way LMOD can now explore a range of modes instead of simply modes
 starting with the lowest frequency.
  Note that it is recommended to set this to 0 once in order to examine
 the ro-translational modes.
 Default is 6.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
number_ligand_rotrans
\begin_inset Index idx
status open

\begin_layout Plain Layout
number
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

ligand
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

rotrans
\end_layout

\end_inset

 The number of rigid-body rotational and translational motions applied to
 the ligand(s).
 Such applications occur at each frequency_ligand_rotrans-th LMOD iteration.
 Default is 0, no rigid-body motions applied to the ligand(s).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
number_ligands
\begin_inset Index idx
status open

\begin_layout Plain Layout
number
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

ligands
\end_layout

\end_inset

 The number of ligands for flexible docking.
 Default is 0, no ligand(s).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
number_lmod_iterations
\begin_inset Index idx
status open

\begin_layout Plain Layout
number
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

lmod
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

iterations
\end_layout

\end_inset

 The number of LMOD iterations.
 Default is 10.
 Note that setting number_lmod_iterations = 0 will result in a single energy
 minimization.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
number_lmod_moves
\begin_inset Index idx
status open

\begin_layout Plain Layout
number
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

lmod
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

moves
\end_layout

\end_inset

 The number of LMOD ZIG-ZAG moves.
 Zero means that the number of ZIG-ZAG moves is not pre-defined, instead
 LMOD will attempt to cross the barrier in as many ZIG-ZAG moves as it is
 necessary.
 The criterion of crossing an energy barrier is stated above in the "LMOD
 Procedure" background section.
 number_lmod_moves 
\begin_inset Formula $>$
\end_inset

 0 means that multiple barriers may be crossed and LMOD can carry the molecule
 to a large distance on the potential energy surface without severely distorting
 the geometry.
 Default is 0, LMOD will determine automatically where to stop the ZIG-ZAG
 sequence.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
random_seed
\begin_inset Index idx
status open

\begin_layout Plain Layout
random
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

seed
\end_layout

\end_inset

 The seed of the random number generator.
 Default is 314159.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
restart_pool_size
\begin_inset Index idx
status open

\begin_layout Plain Layout
restart
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

pool
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

size
\end_layout

\end_inset

 The size of the pool of lowest-energy structures to be used for restarting.
 Default is 3.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
rtemperature
\begin_inset Index idx
status open

\begin_layout Plain Layout
rtemperature
\end_layout

\end_inset

 The value of RT in Amber energy units.
 This is utilized in the Metropolis criterion.
 Default is 1.5.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
total_low_modes
\begin_inset Index idx
status open

\begin_layout Plain Layout
total
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

low
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

modes
\end_layout

\end_inset

 The total number of low frequency vibrational modes to be used.
 Default is the minimum of 10 and three times the number of atoms minus
 the number of rotational and translational degrees of freedom (number_free_rotr
ans_modes).
\end_layout

\begin_layout Standard
The following commands are part of the &lmod namelist.
 These commands control the way LMOD applies explicit translations and rotations
 to one or more ligands and take effect only if number_ligands 
\begin_inset Formula $>$
\end_inset

= 1.
 All commands are lists in square brackets, separated by commas such as
 [1, 33, 198], however, the list is read by Sander as a string and, therefore,
 it should be enclosed in single quotes.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ligstart_list,
\begin_inset space ~
\end_inset

ligend_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
ligstart
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

list
\end_layout

\end_inset

 The serial number(s) of the first/last atom(s) of the ligand(s).
 Type integer.
 The number(s) should correspond to the numbering in the Amber input files
 prmtop and inpcrd/restart.
 For example, if there is only one ligand and it starts at atom 193, the
 command should be ligstart_list = '[193]'.
 If there are three ligands, the command should be, e.g., '[193, 244, 1435]'.
 The same format holds for all of the following commands.
 Note that the ligand(s) can be anywhere in the atom list, however, a single
 ligand must have continuous numbering between the corresponding ligstart_list
 and ligend_list values.
 For example, ligstar_list = '[193, 244, 1435]' and ligend_list = '[217,
 302, 1473]'.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ligcent_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
ligcent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

list
\end_layout

\end_inset

 The serial number(s) of the atom(s) of the ligand(s), which serves as the
 center of rotation.
 Type integer.
 The value zero means that the center of rotation will be the geometric
 center of gravity of the ligand.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
rotmin_list,
\begin_inset space ~
\end_inset

rotmax_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
rotmin
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

list
\end_layout

\end_inset

 The range of random rotation of a particular ligand about the origin defined
 by the corresponding ligcent_list value is specified by the commands rotmin_lis
t and rotmax_list.
 The angle is given in +/- degrees.
 Type float.
 For example, in case of a single ligand and ligcent_list = '[0]', rotmin_list
 = '[30.0]' and rotmax_list = '[180.0]' means that random rotations by an
 angle +/- 30-180 degrees about the center of gravity of the ligand, will
 be applied.
 Similarly, with number_ligands = 2, ligcent_list= 120.0]' means that the
 first ligand will be rotated like in the single ligand example in this
 paragraph, but a second ligand will be rotated about its atom number 201,
 by an angle +/- 60-120 degrees.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
trmin_list,
\begin_inset space ~
\end_inset

trmax_list
\begin_inset Index idx
status open

\begin_layout Plain Layout
trmin
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

list
\end_layout

\end_inset

 The range of random translation(s) of ligand(s) is defined by the same
 way as rotation.
 For example, with number_ligand = 1, trmin_list = '[0.1]' and trmax_list
 = '[1.0]' means that a single ligand is translated in a random direction
 by a random distance between 0.1 and 1.0 Angstroms.
\end_layout

\begin_layout Chapter
Free energies
\end_layout

\begin_layout Section

\series bold
Thermodynamic integration
\series default
\lang english

\begin_inset CommandInset label
LatexCommand label
name "sec:TI"

\end_inset


\end_layout

\begin_layout Standard
In a free energy calculation, the system evolves according to a mixed potential
 (such as in Eqs.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:linearmix"

\end_inset

 or 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:klambdamix"

\end_inset

, below).
 The essence of free energy calculations is to record and analyze the fluctuatio
ns in the values of 
\begin_inset Formula $V_{0}$
\end_inset

 and 
\begin_inset Formula $V_{1}$
\end_inset

 (that is, what the energies 
\shape italic
would have been
\shape default
 with the endpoint potentials) as the simulation progresses.
 For thermodynamic integration (which is a very straightforward form of
 analysis) the required averages can be computed "on-the-fly" (as the simulation
 progresses), and printed at the end of a run.
 For more complex analyses (such as the Bennett acceptance ratio scheme),
 one needs to write the history of the values of 
\begin_inset Formula $V_{0}$
\end_inset

 and 
\begin_inset Formula $V_{1}$
\end_inset

 to a file, and later post-process this file to obtain the final free energy
 estimates.
\end_layout

\begin_layout Standard
There is not room here to discuss the theory of free energy simulations,
 and there are many excellent discussions elsewhere.
\begin_inset CommandInset citation
LatexCommand cite
key "Kollman93,Simonson01,Frenkel02"
literal "true"

\end_inset

 There are also plenty of recent examples to consult.
\begin_inset CommandInset citation
LatexCommand cite
key "Steinbrecher06,Steinbrecher08"
literal "true"

\end_inset

 Such calculations are demanding, both in terms of computer time, and in
 a level of sophistication to avoid pitfalls that can lead to poor convergence.
 Since there is no one "best way" to estimate free energies, 
\shape italic
sander
\shape default
 and 
\shape italic
pmemd
\shape default
 primarily provide the tools to collect the statistics that are needed.
 Assembling these into a final answer, and assessing the accuracy and significan
ce of the results, generally requires some calculations outside of what
 Amber provides, 
\shape italic
per se
\shape default
.
 The discussion here will assume a certain level of familiarity with the
 basis of free energy calculations.
\end_layout

\begin_layout Standard
Both 
\shape italic
sander
\shape default
 and 
\shape italic
pmemd
\shape default
 have the capability of doing simple thermodynamic free energy calculations,
 using either PME or generalized Born potentials.
 When 
\shape italic
icfe
\shape default
 is set to 1, information useful for doing thermodynamic integration estimates
 of free energy changes will be computed.
 The implementation is different between 
\shape italic
sander
\shape default
 and 
\shape italic
pmemd
\shape default
.
 For 
\shape italic
sander
\shape default
, you must use the 
\emph on
multisander
\emph default
 capability to create two groups, one corresponding to the starting state,
 and a second corresponding to the ending state (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:multisander"

\end_inset

 for information); you will need a 
\shape italic
prmtop
\shape default
 file for each of these two endpoints.
 For 
\shape italic
pmemd
\shape default
, you use a single 
\shape italic
prmtop
\shape default
 file which contains both the starting and ending states.
 For both 
\shape italic
sander
\shape default
 and 
\shape italic
pmemd
\shape default
 a mixing parameter 
\begin_inset Formula $\lambda$
\end_inset

 is used to interpolate between the "unperturbed" and "perturbed" potential
 functions.
\end_layout

\begin_layout Subsection

\series bold
Thermodynamic integration using Sander
\end_layout

\begin_layout Standard
There are now two different ways to prepare a thermodynamic integration
 free energy calculation in Sander.
 The first is unchanged from previous versions of Amber: Here, the two prmtop
 files that you create must have the same number of atoms, and the atoms
 must appear 
\shape italic
in the same order
\shape default
 in the two files.
 This is because there is only one set of coordinates that are propagated
 in the molecular dynamics algorithm.
 If there are more atoms in the initial state than in the final, "dummy"
 atoms must be introduced into the final state to make up the difference.
 Although there is quite a bit of flexibility in choosing the initial and
 final states, it is important in general that the system be able to morph
 "smoothly" from the initial to the final state.
 Alternatively, you can set up your system to use the softcore potential
 algorithm described below.
 This will remove the requirement to prepare "dummy" atoms and allows the
 two 
\shape italic
prmtop
\shape default
 files to have different numbers of atoms.
\end_layout

\begin_layout Standard
The basics of the 
\emph on
multisander
\emph default
 functionality are given in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:multisander"

\end_inset

, but the mechanics are really quite simple.
 You start a free energy calculation as follows:
\end_layout

\begin_layout LyX-Code
mpirun -np 4 sander.MPI -ng 2 -groupfile 
\begin_inset Formula $<$
\end_inset

filename
\begin_inset Formula $>$
\end_inset


\end_layout

\begin_layout Standard
Since there are 4 total cpu's in this example, each of the two groups will
 run in parallel with 2 cpu's each.
 The number of processors must be a multiple of two.
 The 
\shape italic
groups
\shape default
 file might look like this:
\end_layout

\begin_layout LyX-Code
-O -i mdin -p prmtop.0 -c eq1.x -o md1.o -r md1.x -inf mdinfo
\end_layout

\begin_layout LyX-Code
-O -i mdin -p prmtop.1 -c eq1.x -o md1b.o -r md1b.x -inf mdinfob
\end_layout

\begin_layout Standard
The input (
\shape italic
mdin
\shape default
) and starting coordinate files must be the same for the two groups.
 Furthermore, the two 
\shape italic
prmtop
\shape default
 files must have the same number number of atoms, in the same order (since
 one common set of coordinates will be used for both.) The simulation will
 use the masses found in the first 
\shape italic
prmtop
\shape default
 file; in classical statistical mechanics, the Boltzmann distribution in
 coordinates is independent of the masses so this should not represent any
 real restriction.
\end_layout

\begin_layout Standard
On output, the two restart files should be identical, and the two output
 files should differ only in trivial ways such as timings; there should
 be no differences in any energy-related quantities, except if energy decomposit
ion is turned on (
\emph on
idecomp
\emph default
 > 0); then only the output file of the first group contains the per residue
 contributions to 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle $
\end_inset

.
 For our example, this means that one could delete the 
\shape italic
md1b.o
\shape default
 and 
\shape italic
md1b.x
\shape default
 files, since the information they contain is also in 
\shape italic
md1.o
\shape default
 and 
\shape italic
md1.x
\shape default
.
 (It is a good practice, however, to check these file identities, to make
 sure that nothing has gone wrong.)
\end_layout

\begin_layout Subsection

\series bold
Basic inputs for thermodynamic integration
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
icfe
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
icfe
\end_layout

\end_inset

 The basic flag for free energy calculations.
 The default value of 0 skips such calculations.
 Setting this flag to 1 turns them on, using the mixing rules in Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:linearmix"

\end_inset

, below.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
clambda
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
clambda
\end_layout

\end_inset

 The value of 
\begin_inset Formula $\lambda$
\end_inset

 for this run, as in Eqs.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:linearmix"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:klambdamix"

\end_inset

, below.
 Zero corresponds to the unperturbed Hamiltonian 
\begin_inset Formula $V_{0}$
\end_inset

.
 
\begin_inset Formula $\lambda$
\end_inset

=1 corresponds to the perturbed Hamiltonian 
\begin_inset Formula $V_{1}$
\end_inset

.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
klambda
\begin_inset Index idx
status open

\begin_layout Plain Layout
klambda
\end_layout

\end_inset

 The exponent in Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:klambdamix"

\end_inset

, below.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
tishake
\begin_inset Index idx
status open

\begin_layout Plain Layout
tishake
\end_layout

\end_inset

 Flag that determines how SHAKE is handled:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 Coordinates are synchronized after SHAKE, no constraints removed (default).
 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 SHAKE is removed between bonds containing one common and one unique atom.
 This was the default in previous versions of 
\shape italic
sander.

\shape default
 Note that disabling SHAKE requires the use of a 1 fs timestep.
 
\end_layout

\end_deeper
\begin_layout Subsubsection
Input flags specific to Sander
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
idecomp
\begin_inset Index idx
status open

\begin_layout Plain Layout
idecomp
\end_layout

\end_inset

 Flag that turns on/off decomposition of 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle $
\end_inset

 on a per-residue level.
 The default value of 0 turns off energy decomposition.
 A value of 1 turns the decomposition on, and 1-4 nonbonded energies are
 added to internal energies (bond, angle, torsional).
 A value of 2 turns the decomposition on, and 1-4 nonbonded energies are
 added to EEL and VDW energies, respectively.
 The frequency by which values of 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle $
\end_inset

 are included into the decomposition is determined by the NTPR flag.
 This ensures that the sum of all contributions equals the average of all
 total 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle $
\end_inset

 values output every NTPR steps.
 All residues, including solvent molecules, have to be chosen by the RRES
 card to be considered for decomposition.
 The RES card determines which residue information is finally output.
 The output comes at the end of the 
\emph on
mdout
\emph default
 file.
 For each residue contributions of internal -, VdW-, and electrostatic energies
 to 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle $
\end_inset

 are given as an average over all (NSTLIM/NTPR) steps.
 In a first section total per residue values are output followed below by
 further decomposed values from backbone and sidechain atoms.
\end_layout

\begin_layout Subsection

\series bold
Background theory of thermodynamic integration
\end_layout

\begin_layout Standard
The 
\emph on
sander and pmemd
\emph default
 programs do not compute free energies; it is up to the user to combine
 the output of several runs (at different values of 
\begin_inset Formula $\lambda$
\end_inset

) and to numerically estimate the integral:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\Delta A=A(\lambda=1)-A(\lambda=0)=\int_{0}^{1}\left\langle \partial V/\partial\lambda\right\rangle _{\lambda}d\lambda\label{eq:ti}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
If you understand how free energies work, this should not be at all difficult.
 However, since the actual values of 
\begin_inset Formula $\lambda$
\end_inset

that are needed, and the exact method of numerical integration, depend upon
 the problem and upon the precision desired, we have not tried to pre-code
 these into the program.
\end_layout

\begin_layout Standard
The simplest numerical integration is to evaluate the integrand at the midpoint:
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Delta A\simeq\left\langle \partial V/\partial\lambda\right\rangle _{1/2}
\]

\end_inset


\end_layout

\begin_layout Standard
This might be a good first thing to do to get some picture of what is going
 on, but is only expected to be accurate for very smooth or small changes,
 such as changing just the charges on some atoms.
 Gaussian quadrature formulas of higher order are generally more useful:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\Delta A=\sum_{i}w_{i}\left\langle \partial V/\partial\lambda\right\rangle _{i}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Some weights and quadrature points are given in the accompanying table;
 other formulas are possible,
\begin_inset CommandInset citation
LatexCommand cite
key "Hummer96"
literal "true"

\end_inset

 but the Gaussian ones listed there are probably the most useful.
 The formulas are always symmetrical about 
\begin_inset Formula $\lambda$
\end_inset

= 0.5, so that 
\begin_inset Formula $\lambda$
\end_inset

 and 
\begin_inset Formula $(1-\lambda)$
\end_inset

 both have the same weight.
 For example, if you wanted to use 5-point quadrature, you would need to
 run five jobs, setting 
\begin_inset Formula $\lambda$
\end_inset

to 0.04691, 0.23076, 0.5, 0.76923, and 0.95308 in turn.
 (Each value of 
\begin_inset Formula $\lambda$
\end_inset

 should have an equilibration period as well as a sampling period; this
 can be achieved by setting the 
\shape italic
ntave
\shape default
 parameter.) You would then multiply the values of 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle _{i}$
\end_inset

 by the weights listed in the Table, and compute the sum.
\end_layout

\begin_layout Standard
When 
\shape italic
icfe=1
\shape default
 and 
\shape italic
klambda
\shape default
 has its default value of 1, the simulation uses the mixed potential function:
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
V(\lambda)=(1-\lambda)V_{0}+\lambda V_{1}\label{eq:linearmix}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $V_{0}$
\end_inset

 is the potential with the original Hamiltonian, and 
\begin_inset Formula $V_{1}$
\end_inset

 is the potential with the perturbed Hamiltonian.
 The program also computes and prints 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle $
\end_inset

 and its averages; note that in this case, 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle =V_{1}-V_{0}$
\end_inset

.
 This is referred to as linear mixing, and is often what you want unless
 you are making atoms appear or disappear.
 If some of the perturbed atoms are "dummy" atoms (with no van der Waals
 terms, so that you are making these atoms "disappear" in the perturbed
 state), the integrand in Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:ti"

\end_inset

 diverges at 
\begin_inset Formula $\lambda$
\end_inset

= 1; this is a mild enough divergence that the overall integral remains
 finite, but it still requires special numerical integration techniques
 to obtain a good estimate of the integral.
\begin_inset CommandInset citation
LatexCommand cite
key "Simonson01"
literal "true"

\end_inset

 
\shape italic
Sander and pmemd
\shape default
 implement one simple way of handling this problem: if you set 
\shape italic
klambda
\shape default
 
\begin_inset Formula $>$
\end_inset

 1, the mixing rules are
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
V(\lambda)=(1-\lambda)^{k}V_{0}+[1-(1-\lambda)^{k}]V_{1}\label{eq:klambdamix}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $k$
\end_inset

 is given by 
\shape italic
klambda
\shape default
.
 Note that this reduces to Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:linearmix"

\end_inset

 when 
\begin_inset Formula $k$
\end_inset

 = 1, which is the default.
 If 
\begin_inset Formula $k\geq$
\end_inset

4, the integrand remains finite as 
\begin_inset Formula $\lambda\rightarrow1$
\end_inset

.
\begin_inset CommandInset citation
LatexCommand cite
key "Simonson01"
literal "true"

\end_inset

 We have found that setting 
\begin_inset Formula $k$
\end_inset

= 6 with disappearing groups as large as tryptophan works, but using the
 softcore option (
\shape italic
ifsc
\shape default

\begin_inset Formula $>$
\end_inset

0) instead is generally preferred.
\begin_inset CommandInset citation
LatexCommand cite
key "Steinbrecher07"
literal "true"

\end_inset

 Note that the behavior of 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle $
\end_inset

 as a function of 
\begin_inset Formula $\lambda$
\end_inset

 is not monotonic when 
\shape italic
klambda
\shape default
 
\begin_inset Formula $>$
\end_inset

 1.
 You may need a fairly fine quadrature to get converged results for the
 integral, and you may want to sample more carefully in regions where 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle $
\end_inset

 is changing rapidly.
\end_layout

\begin_layout Standard

\shape italic
Notes:
\end_layout

\begin_layout Enumerate
This is implemented in 
\shape italic
sander
\shape default
 by calling the force() routine independently for each 
\emph on
multisander
\emph default
 group and then combining the forces on each step.
 For a fixed number of processors this increases the cost of the calculation
 compared with the 
\shape italic
pmemd
\shape default
 code, which only calculates the differences between 
\begin_inset Formula $V_{0}$
\end_inset

 and 
\begin_inset Formula $V_{1}$
\end_inset

.
\end_layout

\begin_layout Enumerate
It is rather easy to make mistakes when running TI calculations.
 It is generally good to carry out a short run (say 50 steps) setting ntpr=1.
 Then check the following; if either test fails, be sure to fix the problem
 before proceeding.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
The restart files from 
\begin_inset Formula $V_{0}$
\end_inset

 and 
\begin_inset Formula $V_{1}$
\end_inset

 should be identical for 
\shape italic
sander
\shape default
 (for 
\shape italic
pmemd
\shape default
 there will only be a single restart file).
\end_layout

\begin_layout Enumerate
If you diff the output files for 
\shape italic
sander
\shape default
, there should only be simple differences (for 
\shape italic
pmemd
\shape default
 there will only be a single combined output file).
 All energies, temperatures, pressures, etc.
 should be the same in the two files.
 Simulations with 
\shape italic
sander
\shape default
 using the QM/MM facility may show differences in the SCF energies, but
 be sure that the total energies, and all the MM components, are the same.
\end_layout

\end_deeper
\begin_layout Enumerate
Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:klambdamix"

\end_inset

 is designed for having dummy atoms in the perturbed Hamiltonian, and "real"
 atoms in the regular Hamiltonian.
 You must ensure that this is the case when you set up the system in LEaP.
 (See the softcore section, below, for a more general way to handle disappearing
 atoms, which does not require dummy atoms at all.)
\end_layout

\begin_layout Enumerate
One common application of this model is to pKa calculations, where the charges
 are mutated from the protonated to the deprotonated form.
 Since H atoms bonded to oxygen already have zero van der Waals radii (in
 the Amber force fields and in TIP3P water), once their charge is removed
 (in the deprotonated form) they are really then like dummy atoms.
 For this special situation, there is no need to use 
\shape italic
klambda
\shape default
 
\begin_inset Formula $>$
\end_inset

 1: since the van der Waals terms are missing from both the perturbed and
 unperturbed states, the proton's position can never lead to the large contribut
ions to 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle $
\end_inset

 that can occur when one is changing from a zero van der Waals term to a
 finite one.
\end_layout

\begin_layout Enumerate
The implementation requires that the masses of all atoms be the same on
 all threads.
 To enforce this, the masses found for 
\begin_inset Formula $V_{0}$
\end_inset

 are used for 
\begin_inset Formula $V_{1}$
\end_inset

 as well.
 In classical statistical mechanics, the canonical distribution of configuration
s (and hence of potential energies) is unaffected by changes in the masses,
 so this should not pose a limitation.
 Since the masses for 
\begin_inset Formula $V_{1}$
\end_inset

 are ignored, they do not have to match those found for 
\begin_inset Formula $V_{0}$
\end_inset

.
\end_layout

\begin_layout Enumerate
Special care needs to be taken when using SHAKE for atoms whose force field
 parameters differ in the two end points.
 The same bonds must be SHAKEN in both cases, and the equilibrium bond lengths
 must also be the same.
 By default, the coordinates from 
\begin_inset Formula $V_{0}$
\end_inset

 are synchronized with those from 
\begin_inset Formula $V_{1}$
\end_inset

 after SHAKE.
 This will work for small perturbations, but if there is a significant change
 in bond length, it may be necessary to use the 
\shape italic
noshakemask
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\shape italic
\emph on
noshakemask
\end_layout

\end_inset


\shape default
 input to remove SHAKE from the regions that are being perturbed.
 If this is done, be sure to set 
\shape italic
tishake
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
\emph on
tishake
\end_layout

\end_inset


\shape default
=1 and to use a 1 fs timestep.
 Special care needs to be taken when water molecules are part of the region
 that is changing.
 You need to make sure that the 
\begin_inset Quotes eld
\end_inset

number of 3-point waters
\begin_inset Quotes erd
\end_inset

 is the same in both 
\begin_inset Formula $V_{0}$
\end_inset

 and 
\begin_inset Formula $V_{1}$
\end_inset

.
 This may require setting 
\emph on
jfastw
\emph default
 and/or building the structure so that 
\emph on
sander or pmemd
\emph default
 do not think that the water molecules involved are actually rigid waters.
 Also, just setting 
\emph on
noshakemask
\emph default
 might not be enough, since this flag does not affect the 
\emph on
settle
\emph default
 routine that handles rigid waters.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="23" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\lambda_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1-\lambda_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $w_{i}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.21132
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.78867
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.1127
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.88729
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.27777
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.44444
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.04691
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.95308
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.11846
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.23076
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.76923
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.23931
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.28444
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.02544
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.97455
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.06474
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.12923
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.87076
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.13985
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.29707
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.70292
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.19091
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.20897
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.01592
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.98408
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.04064
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.08198
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.91802
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.09032
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.19331
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.80669
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.13031
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.33787
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.66213
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.15617
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.16512
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.00922
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.99078
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.02359
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.04794
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.95206
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.05347
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.11505
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.88495
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.08004
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.20634
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.79366
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.10158
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.31608
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.68392
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.11675
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.43738
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.56262
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
0.12457
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Abscissas and weights for Gaussian integration.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Softcore Potentials in Thermodynamic Integration
\end_layout

\begin_layout Standard
Softcore potentials provide an additional way to perform thermodynamic integrati
on calculations in Amber.
 The system setup has been simplified so that appearing and disappearing
 atoms can be present at the same time and no dummy atoms need to be introduced.
 For 
\shape italic
sander
\shape default
, two prmtop files, corresponding to the start and end states (
\begin_inset Formula $V_{0}$
\end_inset

 and 
\begin_inset Formula $V_{1}$
\end_inset

) of the desired transformation need to be used.
 The common atoms that are present in both states need to appear in the
 same order in both prmtop files and must have identical starting positions.
 In addition to the common atoms, each process can have any number of unique
 soft core atoms, as specified by scmask.
 For 
\shape italic
pmemd
\shape default
, a single prmtop file is used, containing the unique atoms for both the
 start and end states.
 The soft core atoms are specified by scmask1 and scmask2 for 
\begin_inset Formula $V_{0}$
\end_inset

 and 
\begin_inset Formula $V_{1}$
\end_inset

 respectively.
\end_layout

\begin_layout Standard
A modified version of the vdW equation is used to smoothly switch off non-bonded
 interactions of these atoms with their common atom neighbors:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
V_{V_{0,}disappearing}=4\epsilon(1-\lambda)\left[\frac{1}{\left[\alpha\lambda+\left(\frac{r_{ij}}{\sigma}\right)^{6}\right]^{2}}-\frac{1}{\alpha\lambda+(\frac{r_{ij}}{\sigma})^{6}}\right]\label{eq:softcoreV0}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
V_{V_{1},appearing}=4\epsilon\lambda\left[\frac{1}{\left[\alpha(1-\lambda)+\left(\frac{r_{ij}}{\sigma}\right)^{6}\right]^{2}}-\frac{1}{\alpha(1-\lambda)+(\frac{r_{ij}}{\sigma})^{6}}\right]\label{eq:softcoreV1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Please refer to Ref 
\begin_inset CommandInset citation
LatexCommand cite
key "Steinbrecher07"
literal "true"

\end_inset

 for a description of the implementation and performance testing when compared
 to the TI methods described above using 
\shape italic
sander
\shape default
.
 For similar information pertaining to pmemd please see Ref 
\begin_inset CommandInset citation
LatexCommand citep
key "Kaus13"
literal "true"

\end_inset

.
 Note that the term 
\begin_inset Quotes eld
\end_inset

disappearing
\begin_inset Quotes erd
\end_inset

 is used here, but it would probably be better to say that atoms present
 in 
\begin_inset Formula $V_{0}$
\end_inset

 but not in 
\begin_inset Formula $V_{1}$
\end_inset

 are 
\begin_inset Quotes eld
\end_inset

decoupled
\begin_inset Quotes erd
\end_inset

 from their environment: the interactions among the 
\begin_inset Quotes eld
\end_inset

disappearing
\begin_inset Quotes erd
\end_inset

 atoms are not changed, and do not contribute to 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle $
\end_inset

.
 If the disappearing atoms are a separate molecule (say a non-covalently-bound
 ligand), this can be viewed as a transfer to the gas-phase.
\end_layout

\begin_layout Standard
Note that a slightly different setup is required for using soft core potentials
 compared to older TI-implementations.
 Specifically, the difference is that to add or remove atoms without soft
 core potentials, they are transformed into interactionless dummy particles,
 so both end state prmtop files have the same number of atoms.
 When using soft core potentials instead, no dummy atoms are needed and
 the end states should be built without them.
 Therefore prmtop files for non soft core simulations may have to be adapted
 to be used with soft core potentials and vice versa.
\end_layout

\begin_layout Standard
All bonded interactions of the unique atoms are recorded separately in the
 output file (see below).
 Any bond, angle, dihedral or 1-4 term that involves at least one appearing
 or disappearing atom is not scaled by 
\begin_inset Formula $\lambda$
\end_inset

 and does not contribute to 
\begin_inset Formula $\left\langle \partial V/\partial\lambda\right\rangle $
\end_inset

.
 Therefore, output from both processes will not be identical when soft core
 potentials are used.
 Softcore transformations avoid the origin singularity effect and therefore
 linear mixing can (and should) always be used with them.
 Since the unique atoms become decoupled from their surroundings at high
 or low lambdas and energy exchange between them and surrounding solvent
 becomes inefficient, a Berendsen type thermostat should not be used for
 SC calculations.
 Unlike in previous versions, SHAKE constraints are not automatically removed
 from bonds between common and unique atoms.
 Instead, the coordinates corresponding to common atoms in 
\begin_inset Formula $V_{0}$
\end_inset

are synchronized with those of 
\begin_inset Formula $V_{1}$
\end_inset

.
 The original behavior can be restored using 
\shape italic
tishake
\begin_inset Index idx
status open

\begin_layout Plain Layout

\shape italic
\emph on
tishake
\end_layout

\end_inset


\shape default
.
 The icfe and klambda parameters should be set to 1 for a soft core run
 and the desired lambda value will be specified by clambda.
 When using softcore potentials with 
\shape italic
sander
\shape default
, 
\begin_inset Formula $\lambda$
\end_inset

 values should be picked so that 0.01 < clambda < 0.99.
 The 
\shape italic
pmemd
\shape default
 implementation allows lambda to be set to any value between 0.0 and 1.0,
 thus simulations at the endpoints are possible.
 
\end_layout

\begin_layout Standard
Additionally, the following parameters are available to control the TI calculati
on: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ifsc
\begin_inset Index idx
status open

\begin_layout Plain Layout
ifsc
\end_layout

\end_inset

 Flag for soft core potentials 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 SC potentials are not used (default) 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 SC potentials are used.
 Be sure to use prmtop files that are suitable for this, i.e.
 not-containing dummy atoms (see above)
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
scalpha
\begin_inset Index idx
status open

\begin_layout Plain Layout
alpha
\end_layout

\end_inset

 The 
\begin_inset Formula $\alpha$
\end_inset

 parameter in 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:softcoreV0"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:softcoreV1"

\end_inset

, its default value is 0.5.
 Other values have not been extensively tested 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
logdvdl
\begin_inset Index idx
status open

\begin_layout Plain Layout
logdvdl
\end_layout

\end_inset

 If set to .ne.
 0, a summary of all 
\begin_inset Formula $\partial V/\partial\lambda$
\end_inset

 values calculated during every step of the run will be printed out at the
 end of the simulation for postprocessing.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
dvdl_norest
\begin_inset Index idx
status open

\begin_layout Plain Layout
dvdl
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

norest
\end_layout

\end_inset

 This option is now deprecated.
 Restraints involving soft core atoms are now decoupled from the rest of
 the system.
 The energy is listed separately and does not contribute to 
\begin_inset Formula $\partial V/\partial\lambda$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
dynlmb
\begin_inset Index idx
status open

\begin_layout Plain Layout
dynlmb
\end_layout

\end_inset

 If set to a value .gt.
 zero, clambda is increased by dynlmb every ntave steps.
 This can be used to perform simulations with dynamically changing lambdas.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
crgmask
\begin_inset Index idx
status open

\begin_layout Plain Layout
crgmask
\end_layout

\end_inset

 Specifies a number of atoms (in ambmask format) that will have their atomic
 partial charges set to zero.
 This is mainly for convenience because it removes the need to build additional
 prmtop files with uncharged atoms for TI calculations involving the removal
 of partial charges.
\end_layout

\begin_layout Subsubsection
Input flags specific to Sander
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
scmask
\begin_inset Index idx
status open

\begin_layout Plain Layout
scmask
\end_layout

\end_inset

 Specifies the unique (soft core) atoms for this process in ambmask format.
 This, along with crgmask, is the only parameter that will frequently be
 different in the two mdin files for 
\begin_inset Formula $V_{0}$
\end_inset

 and 
\begin_inset Formula $V_{1}$
\end_inset

.
 It is valid to set scmask to an empty string.
 A summary of the atoms in scmask is printed at the end of mdout.
 
\end_layout

\begin_layout Subsubsection
One step transformations using soft core electrostatics
\end_layout

\begin_layout Standard
Alternatively to the two-step process of removing charges from atoms first
 and then changing the vdW parameters of chargeless atoms in a second TI
 calculation, 
\emph on
sander and pmemd
\emph default
 also have a soft core version of the Coulomb equation implemented for single
 step transformations under periodic boundary conditions.
 This is automatically applied to all atoms in scmask and their interactions
 with common atoms are given by:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
V_{V_{0},disappearing}=(1-\lambda)\frac{q_{i}q_{j}}{4\pi\epsilon_{o}\sqrt{\beta\lambda+r_{ij}^{2}}}\label{eq:softcore_ee}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
for disappearing atoms.
 Replace 
\begin_inset Formula $\lambda$
\end_inset

 by 
\begin_inset Formula $(1-\lambda)$
\end_inset

 and vice versa for the form for appearing atoms.
 This introduces a new parameter 
\begin_inset Formula $\beta$
\end_inset

 which controls the 'softness' of the potential.
 This is set in the input file via:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
scbeta The parameter 
\begin_inset Formula $\beta$
\end_inset

 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:softcore_ee"

\end_inset

.
 Default value is 
\begin_inset Formula $12\textrm{A}^{2}$
\end_inset

, other values have not been extensively tested.
\end_layout

\begin_layout Standard
With the use of soft core vdW and electrostatics interactions, arbitrary
 changes between systems are possible in single TI calculations.
 However, due to the unusual potential function forms introduced, it is
 not always clear that a single-step calculation will converge faster than
 one broken down into several steps.
 Ref.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Steinbrecher11"
literal "true"

\end_inset

 contains detailed information on the performance of such single step TI
 calculations.
\end_layout

\begin_layout Subsection
Collecting potential energy differences for FEP calculations
\end_layout

\begin_layout Standard
In addition to the Thermodynamic Integration capabilities described above,
 
\emph on
sander
\emph default
 can also collect potential energy values during free energy simulation
 runs for postprocessing by e.g.
 the Bennett acceptance ratio scheme.
 This will make sander calculate at given points during the simulation the
 total potential energy of the system as it would be for different 
\begin_inset Formula $\lambda$
\end_inset

-values at this conformation.
 This functionality is controlled by:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ifmbar
\begin_inset Index idx
status open

\begin_layout Plain Layout
ifmbar
\end_layout

\end_inset

 If set to 1 (Default = 0), additional output is generated for later postprocess
ing.
\end_layout

\begin_layout Standard
mbar_states 
\begin_inset Index idx
status open

\begin_layout Plain Layout
mbar
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

states
\end_layout

\end_inset

 number of lambda windows considered.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mbar_lambda 
\begin_inset Index idx
status open

\begin_layout Plain Layout
mbar
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

lambda
\end_layout

\end_inset

 lambda windows simulated.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
For example, if you want to run mbar with 15 lambda windows at 0.00, 0.05,
 0.10, 0.15, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.85, 0.90, 0.95, 1.00, you would
 use the following options:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ifmbar = 1,
\end_layout

\begin_layout Plain Layout

mbar_states = 15,
\end_layout

\begin_layout Plain Layout

mbar_lambda = 0.00, 0.05, 0.10, 0.15, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.85,
 0.90, 0.95, 1.00,
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
The options below have been deprecated.
 They are here for anyone using AMBER 16 or older, but will not work in
 AMBER 18.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
bar_intervall
\begin_inset Index idx
status open

\begin_layout Plain Layout
bar
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

intervall
\end_layout

\end_inset

 Compute potential energies every bar_intervall steps (Default = 100)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
bar_l_min
\begin_inset Index idx
status open

\begin_layout Plain Layout
bar
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

l
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

min
\end_layout

\end_inset

 Minimum 
\begin_inset Formula $\lambda$
\end_inset

-value (Default = 0.1)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
bar_l_max
\begin_inset Index idx
status open

\begin_layout Plain Layout
bar
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

l
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

max
\end_layout

\end_inset

 Maximum 
\begin_inset Formula $\lambda$
\end_inset

-value (Default = 0.9)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
bar_l_incr
\begin_inset Index idx
status open

\begin_layout Plain Layout
bar
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

l
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

incr
\end_layout

\end_inset

 The increment to increase 
\begin_inset Formula $\lambda$
\end_inset

 by between the minimum and maximum (Default = 0.1)
\end_layout

\begin_layout Standard
Such energy collection will normally be part of a regular free energy calculatio
n (using icfe=1 and ifsc=1) involving simulations at various 
\begin_inset Formula $\lambda$
\end_inset

-values.
 Activating this functionality will not have any influence on the simulation
 trajectory which will evolve according to the preset 
\emph on
clambda
\emph default
 value, it is merely a bookkeeping scheme that removes the necessity of
 postprocessing output files later.
\end_layout

\begin_layout Section
Linear Interaction Energies
\end_layout

\begin_layout Standard

\emph on
sander
\emph default
 contains rudimentary facilities to compute binding free energies using
 the linear interaction energy model.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ilrt if set to 1, turns on the computation of LIE contributions (default=0)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
lrt_interval Computer LIE contributions every lrt_interval MD steps (default=50)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
lrtmask The 'solute'.
 Interaction Energies between the atoms in lrtmask and the remainder of
 the system are computed.
\end_layout

\begin_layout Standard
The LIE facilities work by computing the system energies several times using
 different charge and vdW-parameter sets.
 This results in reduced performance if lrt_interval is set to less than
 approx.
 10.
 The LIE output at the end of the 
\emph on
mdout
\emph default
 file gives the electrostatic interaction energy between the solute and
 rest of the system 
\emph on
times 0.5
\emph default
, i.e.
 in accordance with the original formulation of LIE theory.
 The solute SASA and vdW-interaction energy with its surroundings is calculated
 unscaled.
\end_layout

\begin_layout Section
Adaptively Biased MD, Steered MD, Umbrella Sampling with REMD and String
 Method
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
The following describes a suite of modules useful for the calculation of
 the free energy associated with a reaction coordinate 
\begin_inset Formula $\sigma(\mathbf{r}_{1},\dots,\mathbf{r}_{N})$
\end_inset

 (which is defined as a smooth function of the atomic positions 
\begin_inset Formula $\mathbf{r}_{1},\dots,\mathbf{r}_{N}$
\end_inset

): 
\begin_inset Formula 
\[
f(\xi)=-k_{B}T\ln\big<\delta\left[\xi-\sigma(\mathbf{r}_{1},\dots,\mathbf{r}_{N})\right]\big>,\;
\]

\end_inset

 (the angular brackets denote an ensemble average, 
\begin_inset Formula $k_{B}$
\end_inset

 is the Boltzmann constant and 
\begin_inset Formula $T$
\end_inset

 is the temperature) that is also frequently referred to as the 
\shape italic
potential of mean force
\shape default
.
\end_layout

\begin_layout Standard
Specifically, new frameworks are provided for equilibrium umbrella sampling
 and steered molecular dynamics that enhance the functionality delivered
 by earlier implementations (described earlier in this manual), along with
 a new 
\family typewriter
A
\family default
daptively 
\family typewriter
B
\family default
iased 
\family typewriter
M
\family default
olecular 
\family typewriter
D
\family default
ynamics (
\family typewriter
ABMD
\family default
) method 
\begin_inset CommandInset citation
LatexCommand cite
key "Babin2008"
literal "true"

\end_inset

 that belongs to the general category of umbrella sampling methods with
 a time-dependent potential.
 Such methods were first introduced by Huber, Torda and van Gunsteren (the
 Local Elevation Method
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Huber_T_94"
literal "true"

\end_inset

) in the molecular dynamics (
\family typewriter
MD
\family default
) context, and by Wang and Landau in the context of Monte Carlo simulations
 
\begin_inset CommandInset citation
LatexCommand cite
key "Wang_F_01"
literal "true"

\end_inset

.
 More recent approaches include the metadynamics method 
\begin_inset CommandInset citation
LatexCommand cite
key "Laio_A_02,Iannuzzi_M_03"
literal "true"

\end_inset

.
 All these methods estimate the free energy of a reaction coordinate from
 an evolving ensemble of realizations, and use that estimate to bias the
 system dynamics to flatten an effective free energy surface.
 Collectively, these methods may all be considered to be umbrella sampling
 methods with an evolving potential.
 The algorithms discussed here were developed by the group of Prof.
 Celeste Sagui (sagui@ncsu.edu) and Prof.
 Christopher Roland (cmroland@ncsu.edu); the current version was implemented
 by Dr.
 Volodymyr Babin.
\end_layout

\begin_layout Standard
The 
\family typewriter
ABMD
\family default
 method grew out of attempts to speed up and streamline the metadynamics
 method for free energy calculations with a 
\shape italic
controllable
\shape default
 accuracy.
 It is characterized by a favorable scaling in time, and only a few (two)
 control parameters.
 It is formulated in terms of the following equations: 
\begin_inset Formula 
\[
m_{a}\frac{\mathrm{d}^{2}\mathbf{r}_{a}}{\mathrm{d}t^{2}}=\mathbf{F}_{a}+\frac{\partial}{\partial\mathbf{r}_{a}}U\big[t|\sigma\left(\mathbf{r}_{1},\dots,\mathbf{r}_{N}\right)\big],
\]

\end_inset

 
\begin_inset Formula 
\[
\frac{\partial U(t|\xi)}{\partial t}=\frac{k_{B}T}{\tau_{F}}G\big[\xi-\sigma\left(\mathbf{r}_{1},\dots,\mathbf{r}_{N}\right)\big],
\]

\end_inset

 where the first equation represents Newton's law that governs ordinary
 
\family typewriter
MD
\family default
 (temperature and pressure regulation terms are not shown) augmented with
 an additional force coming from the time dependent biasing potential 
\begin_inset Formula $U(t|\xi)$
\end_inset

 [
\begin_inset Formula $U(t=0|\xi)=0$
\end_inset

], whose time evolution is given by the second equation.
 
\begin_inset Formula $G(\xi)$
\end_inset

 is a positive definite and symmetric kernel, which may be thought of as
 a smoothed Dirac delta function.
 For large enough 
\begin_inset Formula $\tau_{F}$
\end_inset

 (the flooding timescale) and small kernel width, the biasing potential
 
\begin_inset Formula $U(t|\xi)$
\end_inset

 converges towards 
\begin_inset Formula $-f(\xi)$
\end_inset

 as 
\begin_inset Formula $t\to\infty$
\end_inset

.
\end_layout

\begin_layout Standard
Our numerical implementation of the 
\family typewriter
ABMD
\family default
 method involves the use of a bi-weight kernel along with the use of cubic
 B-splines (or products thereof) to discretize the biasing potential 
\begin_inset Formula $U(t|\xi)$
\end_inset

 w.r.t.
 
\begin_inset Formula $\xi$
\end_inset

, and an Euler-like scheme for time integration.
 
\family typewriter
ABMD
\family default
 admits two important extensions, which lead to a more uniform flattening
 of 
\begin_inset Formula $U(t|\xi)+f(\xi)$
\end_inset

 due to an improved sampling of the 
\begin_inset Quotes eld
\end_inset

evolving
\begin_inset Quotes erd
\end_inset

 canonical distribution.
 The first extension is identical in spirit to the 
\shape italic
multiple walkers metadynamics
\shape default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Lelievre_T_2007,Raiteri_P_2006"
literal "true"

\end_inset

.
 It amounts to carrying out several different 
\family typewriter
MD
\family default
 simulations biased by the same 
\begin_inset Formula $U(t|\xi)$
\end_inset

, which evolves via: 
\begin_inset Formula 
\[
\frac{\partial U(t|\xi)}{\partial t}=\frac{k_{B}T}{\tau_{F}}\sum\limits _{\alpha}G\big[\xi-\sigma\left(\mathbf{r}_{1}^{\alpha},\dots,\mathbf{r}_{N}^{\alpha}\right)\big]\;,
\]

\end_inset

 where 
\begin_inset Formula $\alpha$
\end_inset

 labels different 
\family typewriter
MD
\family default
 trajectories.
 A second extension is to gather several different 
\family typewriter
MD
\family default
 trajectories, each bearing its own biasing potential and, if desired, its
 own distinct collective variable, into a generalized ensemble for 
\begin_inset Quotes eld
\end_inset

replica exchange
\begin_inset Quotes erd
\end_inset

 with modified 
\begin_inset Quotes eld
\end_inset

exchange
\begin_inset Quotes erd
\end_inset

 rules 
\begin_inset CommandInset citation
LatexCommand cite
key "Sugita_Y_2000,Bussi2006,Piana2007"
literal "true"

\end_inset

.
 Both extensions are advantageous and lead to a more uniform flattening
 of 
\begin_inset Formula $U(t|\xi)+f(\xi)$
\end_inset

.
\end_layout

\begin_layout Standard
In order to assess and improve the accuracy of the free energies, the 
\family typewriter
ABMD
\family default
 accumulations may need to be followed up with equilibrium umbrella sampling
 runs, which make use of the biasing potential 
\begin_inset Formula $U(t|\xi)$
\end_inset

 as is.
 Such a procedure is very much in the spirit of adaptive umbrella sampling.
 With these runs, one calculates the biased probability density: 
\begin_inset Formula 
\[
p^{B}(\xi)=\big<\delta\left[\xi-\sigma(\mathbf{r}_{1},\dots,\mathbf{r}_{N})\right]\big>_{B}.
\]

\end_inset

 The idea here is that if, as a result of an 
\family typewriter
ABMD
\family default
 run, 
\begin_inset Formula $f(\xi)+U(t|\xi)=0$
\end_inset

 exactly, then the biased probability density 
\begin_inset Formula $p^{B}(\xi)$
\end_inset

 would be flat (constant).
 In practice, this is typically not the case, but one can use 
\begin_inset Formula $p^{B}(\xi)$
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

correct
\begin_inset Quotes erd
\end_inset

 the free energy via: 
\begin_inset Formula 
\[
f(\xi)=-U(\xi)-k_{B}T\ln p^{B}(\xi).
\]

\end_inset


\end_layout

\begin_layout Standard
With the ABMD procedure, one can obtain accurate free energy curves and
 equilibrium properties.
 We note that to obtain ABMD free energies requires a (minor) amount of
 post-processing by means of the nfe-umbrella-slice utility freely available
 in AmberTools as described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Post-processing-of-biasing"

\end_inset

.
 This methodology has been applied to a variety of biomolecular systems,
 including small peptides 
\begin_inset CommandInset citation
LatexCommand citep
key "Babin_V_06c,Babin2008,Babin_V_09"
literal "true"

\end_inset

, sugar puckering 
\begin_inset CommandInset citation
LatexCommand citep
key "Babin_V_10"
literal "true"

\end_inset

, polyproline systems 
\begin_inset CommandInset citation
LatexCommand citep
key "Moradi_M_09,Moradi_M_10,Moradi_M_13c"
literal "true"

\end_inset

, guest-host systems 
\begin_inset CommandInset citation
LatexCommand citep
key "Moradi_M_11,Moradi_M_11c"
literal "true"

\end_inset

, polyglutamine systems 
\begin_inset CommandInset citation
LatexCommand citep
key "Babin_V_11,Moradi_M_12"
literal "true"

\end_inset

, and DNA systems 
\begin_inset CommandInset citation
LatexCommand citep
key "Moradi_M_13,Pan_F_17,Pan_F_18a,Pan_F_18b,Pan_F_20a"
literal "true"

\end_inset

.
 In addition, SMD simulations (discussed below) have been used to examine
 transition pathways and mechanisms, to estimate free energy differences
 
\begin_inset CommandInset citation
LatexCommand citep
key "Moradi_M_10,Moradi_M_10b"
literal "true"

\end_inset

, and to calculate transition rates 
\begin_inset CommandInset citation
LatexCommand citep
key "Moradi_M_11d,Moradi_M_14a,Moradi_M_14b"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
While the above represents the basic ABMD implementation, AMBER20 introduced
 three additional algorithms – the Well-Tempered (WT) ABMD, a selection
 mechanism for multiple walker ABMD and Driven ABMD (D-ABMD)
\begin_inset CommandInset citation
LatexCommand citep
key "Moradi_M_13d"
literal "true"

\end_inset

 – all of which enhance the stability and convergence of an ABMD simulation.
 Also implemented is the Swarms-of-Trajectories String Method (STSM) 
\begin_inset CommandInset citation
LatexCommand citep
key "Pan_A_08"
literal "true"

\end_inset

, which gives a way of exploring the Minimum Free Energy Path (MFEP) on
 free energy lansdscape.
 Current version of these codes were inplemented by Dr.
 Mahmoud Moradi (moradi@uark.edu), Dr.
 Feng Pan (fpan3@ncsu.edu) and Ashkan Fakharzadeh (afakhar@ncsu.edu).
\end_layout

\begin_layout Standard

\series bold
The Well-Tempered ABMD:
\series default
 An alternative to the follow-up equilibrium simulations for increased ABMD
 accuracy is provided by the WT-ABMD, which is implemented in the spirit
 of the WT-metadynamics 
\begin_inset CommandInset citation
LatexCommand cite
key "Barducci_A_08"
literal "true"

\end_inset

.
 In the original ABMD implementation, the history dependent biasing potential
 is built up at a fixed rate: 
\begin_inset Formula 
\begin{equation}
U(\xi,t)=U^{0}(\xi)+\int_{0}^{t}dt^{\prime}\,\omega\,G(\xi-\xi^{t^{\prime}}),\label{eq:abmd}
\end{equation}

\end_inset

in which 
\begin_inset Formula $U(\xi,t)$
\end_inset

 is the biasing potential at time 
\begin_inset Formula $t$
\end_inset

, 
\begin_inset Formula $U^{0}$
\end_inset

 is an arbitrary function that typically represents the initial guess for
 the biasing potential (in the absence of a guess, this is assumed to be
 flat) and 
\begin_inset Formula $\omega=k_{B}T/\tau_{F}$
\end_inset

 is a constant, unbiased rate.
 As the simulation proceeds and reaches convergence, then 
\begin_inset Formula $\big<U(\xi,t\rightarrow\infty)\big>_{a}\approx U^{s}(\xi)+u(t)$
\end_inset

, in which 
\begin_inset Formula $\big<.\big>_{a}$
\end_inset

 is the ensemble-average over the adaptive trajectories, the stationary
 term is 
\begin_inset Formula $U^{s}\approx-F(\xi)$
\end_inset

, and 
\begin_inset Formula $u(t)$
\end_inset

 is an additive time-dependent constant 
\begin_inset CommandInset citation
LatexCommand cite
key "Barducci_A_08"
literal "true"

\end_inset

.
 Unfortunately, updating the biasing potential at the same rate throughout
 the simulation may lead to a poorly converged result, since the biasing
 potential ends up fluctuating around 
\begin_inset Formula $-F(\xi)$
\end_inset

 with an amplitude that depends on 
\begin_inset Formula $\omega$
\end_inset

.
\end_layout

\begin_layout Standard
One way to resolve this problem is to update the kernel at a non-uniform
 rate by means of a "well-tempered" 
\begin_inset Formula $\omega$
\end_inset

: 
\begin_inset Formula 
\begin{equation}
U(\xi,t)=U^{0}(\xi)+\int_{0}^{t}dt^{\prime}\,\omega(\xi^{t^{\prime}},t^{\prime})\,G(\xi-\xi^{t^{\prime}}),\label{eq:wtabmd}
\end{equation}

\end_inset

in which 
\begin_inset Formula $\omega(\xi,t)$
\end_inset

 is a time-dependent, non-uniform rate chosen to be 
\begin_inset Formula $\omega_{0}\,\mathrm{e}^{-\beta^{\prime}U(\xi,t)}$
\end_inset

 (
\begin_inset Formula $1/\beta^{\prime}=k_{B}T^{\prime}$
\end_inset

 where 
\begin_inset Formula $T^{\prime}$
\end_inset

 is a pseudo-temperature) that reduces to a constant 
\begin_inset Formula $\omega_{0}$
\end_inset

 in the 
\begin_inset Formula $\beta^{\prime}\rightarrow0$
\end_inset

 limit (
\shape italic
i.e.
\shape default
, resulting in conventional ABMD).
 With this choice, one can show that 
\begin_inset Formula $\big<U(\xi,t\rightarrow\infty)\big>_{a}\approx U^{s}(\xi)+u(t)$
\end_inset

, (
\begin_inset Formula $u(t)$
\end_inset

 is an additive constant) in which 
\begin_inset Formula $U^{s}(\xi)$
\end_inset

 and 
\begin_inset Formula $F(\xi)$
\end_inset

 are related via 
\begin_inset Formula $U^{s}(\xi)=-(1+\frac{\beta^{\prime}}{\beta})^{-1}F(\xi)$
\end_inset

 or 
\begin_inset Formula $F(\xi)=-(1+\frac{T}{T^{\prime}})U^{s}(\xi)$
\end_inset

.
 This way of updating the biasing potential leads to a considerably smoother
 convergence to the desired free energy and more stable ABMD simulations.
\end_layout

\begin_layout Standard

\series bold
Multiple walker selection algorithm:
\series default
 The ABMD multiple walker algorithm can be improved by allowing for periodic
 interactions between the different walkers and "resampling" on-the-fly.
 The rationale behind this is that not all walkers are equally effective
 in sampling the configuration space.
 A situation that is all too common is that different walkers end up being
 
\begin_inset Quotes eld
\end_inset

bunched up" or clustered together in some local metastable region, because
 of hidden barriers that are oriented along orthogonal degrees of freedom
 to the reaction coordinate.
 To improve this situation, one would like to facilitate walkers that are
 sampling the undersampled regions of phase space, and force the walkers
 in the oversampled regions to move away and explore regions not yet covered.
 Such an algorithm has previously been implemented via scripts in the NAMD
 code for the adaptive biasing force algorithm 
\begin_inset CommandInset citation
LatexCommand cite
key "Minoukadeh_K_10"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
A resampling or selection algorithms for interacting multiple walkers requires
 a continual monitoring of the walkers by means of a periodic evaluation
 of a fitness function and a resampling of the walkers according to their
 fitness efficiency
\begin_inset CommandInset citation
LatexCommand cite
key "Minoukadeh_K_10"
literal "true"

\end_inset

.
 Efficient walkers that are wandering in the undersampled regions are enhanced
 by being cloned, while inefficient walkers found in the oversampled regions
 of phase space are correspondingly killed.
 This procedure is then repeated periodically during the simulation, thereby
 accelerating convergence to a more uniform distribution of walkers and
 flattening of the free energy landscape.
\end_layout

\begin_layout Standard
Our specific interacting/resampling/selection multiple-walker algorithm
 is implemented as follows.
 Each walker 
\begin_inset Formula $n$
\end_inset

 is assigned a weight 
\begin_inset Formula $w_{n}$
\end_inset

, which is evaluated at the end of each resampling period of time 
\begin_inset Formula $\tau$
\end_inset

.
 At the 
\begin_inset Formula $i^{th}$
\end_inset

 resampling period, i.e., from time 
\begin_inset Formula $t_{(i-1)}=(i-1)\tau$
\end_inset

 to 
\begin_inset Formula $t_{i}=i\tau$
\end_inset

, walker 
\begin_inset Formula $n$
\end_inset

 moves through configuration space building up its own trajectory 
\begin_inset Formula $\left(r_{1}^{n},\dots,r_{N}^{n}\right)$
\end_inset

.
 The weights are then tested and updated every fixed time interval of length
 
\begin_inset Formula $\tau$
\end_inset

.
 Specifically, after the 
\begin_inset Formula $i^{th}$
\end_inset

 time interval, weights are estimated by: 
\begin_inset Formula 
\[
w_{n}=K^{-1}\exp\bigg(\int_{t_{i-1}}^{t_{i}}S(\xi_{n}^{t})dt\bigg),
\]

\end_inset

where 
\begin_inset Formula $\xi_{n}^{t}$
\end_inset

 represents the collective variable evaluated at time t for trajectory 
\begin_inset Formula $n$
\end_inset

, 
\begin_inset Formula $K=\sum_{n=1}^{N_{w}}w_{n}$
\end_inset

 is the normalization factor, and 
\begin_inset Formula 
\[
S(\xi)=C\nabla^{2}(\rho(\xi))/\rho(\xi),
\]

\end_inset

with 
\begin_inset Formula $\rho(\xi)$
\end_inset

 representing the density of microstates in the collective variable space
 and 
\begin_inset Formula $C$
\end_inset

 a constant.
 The quantity 
\begin_inset Formula $S(\xi)$
\end_inset

 will be positive typically if the walker is found in the undersampled regions,
 which have a convex density function.
 Similarly, a negative 
\begin_inset Formula $S(\xi)$
\end_inset

 value indicates that the system is in the concave region of the density
 function, which typically is oversampled.
 In the context of ABMD implementation, the biasing potential is approximately
 proportional to the histogram of the collective variable by construction,
 and represents a good estimate for 
\begin_inset Formula $\rho$
\end_inset

.
 The implementation is therefore straightforward; the integral above is
 estimated for each trajectory independently by summing over 
\begin_inset Formula $S(\xi_{n}^{t})$
\end_inset

 at every step from 
\begin_inset Formula $t=t_{i-1}$
\end_inset

 to 
\begin_inset Formula $t=t_{i}$
\end_inset

, in which 
\begin_inset Formula $\Delta t$
\end_inset

 is the MD 
\shape italic
timestep
\shape default
.
 At the end of each period the walkers send their unnormalized weight estimates
 to the "master processor" to normalize them.
 A stochastic resampling method is then used to clone/kill the replicas
 based on their weight factors 
\begin_inset CommandInset citation
LatexCommand cite
key "Minoukadeh_K_10"
literal "true"

\end_inset

.
 The number of copies present in the next period for walker 
\begin_inset Formula $n$
\end_inset

 is determined by the integer number: 
\begin_inset Formula 
\begin{eqnarray*}
W_{1} & = & \lfloor\eta_{1}+N_{w}w_{1}\rfloor,\\
W_{n} & = & \lfloor\eta_{n}+N_{w}\sum_{m=1}^{n}w_{m}\rfloor-\lfloor\eta_{n}+N_{w}\sum_{m=1}^{n-1}w_{m}\rfloor,\;\;\;\text{for}\;n>1.\\
\end{eqnarray*}

\end_inset

in which 
\begin_inset Formula $0<\eta_{n}<1$
\end_inset

 is drawn from a uniform distribution (using a random number generator).
 The atomic coordinates and velocities of the walkers with 
\begin_inset Formula $N_{n}>0$
\end_inset

 are "sent" to 
\begin_inset Formula $N_{n}$
\end_inset

 walkers.
 The resampling algorithm above guarantees 
\begin_inset Formula $\sum_{n}W_{n}=N_{w}$
\end_inset

.
\end_layout

\begin_layout Standard
In terms of an ABMD simulation, the selection algorithm is most beneficial
 during the initial and middle parts of the simulation when there are large
 variations in the biasing potential.
 In the latter parts, when the effective free energy is almost flat, the
 distribution of walkers should be roughly uniform.
 In that case, the selection mechanism is unnecessary and, if one wishes
 to continue the simulation, it is best to proceed with the non interacting
 multiple walker algorithm.
 It has been found that a convenient stopping mechanism may be based on
 the entropy of the weights.
 Defining 
\begin_inset Formula $H=\sum_{n}w_{n}log(w_{n})$
\end_inset

, the selection mechanism will be stopped if 
\begin_inset Formula $E_{w}=H-log(1/N_{w})$
\end_inset

 goes below -
\begin_inset Formula $\epsilon log(1/N_{w})$
\end_inset

.
 Here, 
\begin_inset Formula $log(1/N_{w})$
\end_inset

 represents the entropy of uniform weights, and the stopping parameter 
\begin_inset Formula $\epsilon$
\end_inset

 varies between 
\begin_inset Formula $0\leq\epsilon\leq1$
\end_inset

.
 When 
\begin_inset Formula $\epsilon=0$
\end_inset

, the algorithm never stops, while 
\begin_inset Formula $\epsilon=1$
\end_inset

 forces a stop irrespective of the values of the weights.
\end_layout

\begin_layout Standard
In addition to 
\begin_inset Formula $\epsilon$
\end_inset

, there are also two other user-defined variables in the selection algorithm,
 including the constant 
\shape italic
C
\shape default
 and the interval time 
\begin_inset Formula $\tau$
\end_inset

.
 While the physical interpretation of 
\begin_inset Formula $\tau$
\end_inset

 is straightforward, 
\shape italic
C
\shape default
 represents a pseudo diffusion constant.
 One may think of the selection algorithm as an induced diffusion in the
 reaction coordinate space; The larger the value of 
\shape italic
C
\shape default
, the faster the system will diffuse along the reaction coordinate space.
 Therefore 
\shape italic
C
\shape default
 determines the strength or aggressiveness of the resampling algorithm.
 The most efficient value for 
\shape italic
C
\shape default
 is dependent on the nature of the collective variable and the shape of
 its density 
\begin_inset Formula $\rho$
\end_inset

.
 Since the best choice of 
\shape italic
C
\shape default
 for a given problem is somewhat of an art, we refer the interested reader
 to the ABMD tutorials on the AMBER webpage for insight into choosing this
 variable.
 Finally, we also note that the multiple walker selection mechanism can
 be invoked as is or in conjunction with the WT-ABMD for enhanced stability
 and convergence.
\end_layout

\begin_layout Standard

\series bold
Driven ABMD: 
\series default
ABMD and SMD schemes are both powerful nonequilibrium sampling methods;
 however, each comes with its own practical limitations.
 For instance, SMD is often associated with a very slow convergence if used
 for free energy calculations.
 However it can be used to explore the transition paths, at least qualitatively;
 an advantage over ABMD, in which the system starting from one end of the
 configuration space (the reactant) may take a long time to visit the other
 end (the product).
 SMD and ABMD schemes, however can be integrated into a novel driven adaptive-bi
as 3 scheme, termed driven ABMD (D-ABMD) that takes advantage of both its
 driven and adaptive-bias components and is advantageous over both components
 in isolation.
 D-ABMD has an advantage over conventional (or well-tempered) ABMD in that
 it ensures the exploration of the transition pathway (from one end to the
 other) in the early stages of the simulation and gradually improves the
 estimate of the free energies almost uniformly along the reaction coordinate.
 D-ABMD has also an advantage over the conventional SMD in that the effective
 free energy surface gradually becomes smooth and flat such that the system
 can move along the reaction coordinate with progressively less amount of
 work.
 The D-ABMD method is similar to D-MetaD method, which was recently introduced
 in Ref.
\begin_inset CommandInset citation
LatexCommand citep
key "Moradi_M_13d"
literal "true"

\end_inset

 as an example of driven, adaptive-bias schemes.
 
\end_layout

\begin_layout Standard
In order to combine the two schemes described above, we have developed a
 driven adaptive-bias scheme that adds an adaptive 
\begin_inset Formula $U_{a}(\xi,t)$
\end_inset

 and a driving 
\begin_inset Formula $U_{d}(\xi,t)$
\end_inset

 potential to the Hamiltonian.
 We use an iterative approach in which an independent simulation is performed
 from time t = 0 to t = T in the 
\begin_inset Formula $n^{th}$
\end_inset

 iteration (n = 1, 2, .
 .
 .), biased by the potential 
\begin_inset Formula $U_{d}(\xi,t)+U_{a}^{n}(\xi,t)$
\end_inset

 in which 
\begin_inset Formula $U_{d}(\xi,t)=\frac{k}{2}(\xi-\eta(t))^{2}$
\end_inset

 for all n (
\begin_inset Formula $\eta(t)$
\end_inset

 is moving center of the SMD harmonic potential in the 
\begin_inset Formula $\xi$
\end_inset

 space), and:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
U_{a}^{n}(\xi,t)=U^{n-1}(\xi)+\int_{0}^{t}dt'\omega(\xi^{t'},t')K(\xi-\xi^{t'})e^{-\beta\omega^{t'}}
\]

\end_inset

in which 
\begin_inset Formula $\omega^{t}$
\end_inset

 is either defined as the accumulated work or the transferred work.
 The accumulated and transferred works are defined as 
\begin_inset Formula $\omega_{ac}^{t}=\intop_{0}^{t}dt'\,\frac{\partial}{\partial t'}U_{d}(\xi^{t'},t')$
\end_inset

 and 
\begin_inset Formula $\omega_{tr}^{t}=\omega_{ac}^{t}-U_{d}(\xi^{t},t)$
\end_inset

.
 Theoretically the 
\begin_inset Formula $e^{-\beta\omega_{tr}^{t'}}$
\end_inset

 factor or 
\begin_inset Quotes eld
\end_inset

constant weight” is more accurate but for practical reasons the 
\begin_inset Formula $e^{-\beta\omega_{ac}^{t'}}$
\end_inset

 factor or “pulling wight” is preferred.
 Particularly, in our algorithm, the constant weight 
\begin_inset Formula $e^{-\beta\omega_{tr}^{t'}}=e^{-\beta\omega_{ac}^{t'}}e^{\beta U_{d}(\xi^{t'},t')}$
\end_inset

 may become instable for large biasing potentials.
 To avoid the instability in either case a cutoff for 
\begin_inset Formula $\omega^{t}$
\end_inset

 is used (i.e., the algorithm will not be applied if 
\begin_inset Formula $\omega^{t}$
\end_inset

 is smaller than the cutoff).
 At the moment, Driven ABMD is only applicable to one-dimensional reaction
 coordinate.
\end_layout

\begin_layout Standard
If any of these modules prove to be useful, please consider quoting the
 following papers: V.
 Babin, C.
 Roland and C.
 Sagui, 
\shape italic
"Adaptively biased molecular dynamics for free energy calculations"
\shape default
, J.
 Chem.
 Phys.
 
\series bold
128
\series default
, 134101 (2008); V.
 Babin, V.
 Karpusenka, M.
 Moradi, C.
 Roland and C.
 Sagui, 
\shape italic
"Adaptively biased molecular dynamics: an umbrella sampling method with
 a time-dependent potential"
\shape default
, Int.
 J.
 Quant.
 Chem.
 
\series bold
109
\series default
, 3666 (2009).
\end_layout

\begin_layout Standard
From Amber16, we implement these modules from SANDER to PMEMD and the modules
 are GPU compatible.
 To keep the consistency in format, we do a series of changes and updates
 to the usage of these modules.
 One big change is that you must set 
\series bold
\shape italic
infe
\series default
\shape default
 = 1 in &cntrl to activate these modules.
 Also, the input format has been changed to namelist style and reaction
 coordinate variables will be read from separate files.
 For the details, please read 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Implementation-in-PMEMD"

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
infe
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
infe
\end_layout

\end_inset

 This variable controls the usage of the non-equilibrium free energy method.
 When 
\shape italic
infe=0
\shape default
, the ABMD and related methods are turned off; when 
\shape italic
infe=1
\shape default
, they are turned on and the blocks 
\family typewriter
&smd
\family default
, 
\family typewriter
&pmd
\family default
, 
\family typewriter
&abmd
\family default
, 
\family typewriter
&bbmd
\family default
 and 
\family typewriter
&stsm
\family default
 will be recognized.
 The default value is 0.
 Note that use of these algorithms may require a (minor) amount of post-processi
ng by means of the nfe-umbrella-slice utility freely available in AmberTools
 described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Post-processing-of-biasing"

\end_inset

.
\end_layout

\begin_layout Subsection
Reaction Coordinates
\end_layout

\begin_layout Standard
A reaction coordinate is defined in the 
\family typewriter
colvar
\family default
 namelist in a separate file.
 (see Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:variable"

\end_inset

).
 This section must contain a 
\family typewriter
cv_type
\family default
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
cv_type
\end_layout

\end_inset

keyword along with a value of type 
\family typewriter
STRING
\family default
 and a list of integers 
\family typewriter
cv_i
\family default
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
cv_i
\end_layout

\end_inset

 (the number of integers is defined by 
\family typewriter
cv_ni
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
cv_ni
\end_layout

\end_inset

).
 For some types of reaction coordinates the 
\family typewriter
colvar
\family default
 section must also contain a list of real numbers, 
\family typewriter
cv_r
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
cv_r
\end_layout

\end_inset

, whose length is defined by 
\family typewriter
cv_nr
\family default

\begin_inset Index idx
status open

\begin_layout Plain Layout
cv_nr
\end_layout

\end_inset

.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = STRING
\end_layout

\begin_layout Plain Layout

   cv_ni = N, cv_nr = M
\end_layout

\begin_layout Plain Layout

   cv_i = i1, i2, ..., iN
\end_layout

\begin_layout Plain Layout

   cv_r = r1, r2, ..., rM
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:variable"

\end_inset

 Syntax of reaction coordinate definition: 
\family typewriter
cv_type
\family default
 is a 
\family typewriter
STRING
\family default
, 
\family typewriter
cv_i
\family default
 is a list of integer numbers and 
\family typewriter
cv_r
\family default
 is a list of real numbers.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following reaction coordinates (specfied by 
\family typewriter
cv_type
\family default
) are currently implemented: 
\end_layout

\begin_layout Description
DISTANCE: distance (in Å) between two atoms whose indexes are read from
 the list 
\family typewriter
cv_i
\family default
.
\end_layout

\begin_layout Description
COM_DISTANCE: distance between the center of mass of two atom groups.
 The 
\family typewriter
cv_i
\family default
 list is interpreted as a list of indexes of participating atoms.
 Zeros separate the groups, the last zero is optional.
 eg: 
\family typewriter
cv_i = a1,...,aN,0,b1,...,bM,0
\family default
.
\end_layout

\begin_layout Description
DF_COM_DISTANCE: difference of distances between the center of mass of first
 two atom groups and second two atom groups.
 The 
\family typewriter
cv_i
\family default
 list is interpreted as a list of indexes of participating atoms.
 Zeros separate the groups, the last zero is optional.
 eg: 
\family typewriter
cv_i = a1,...,aN,0,b1,...bM,0,c1,...cL,0,d1,...,dK,0
\family default
, 
\family typewriter
DF_COM_DISTANCE
\family default
 is 
\family typewriter
COM_DISTANCE(a1,...,aN,0,b1,...,bM) - COM_DISTANCE(c1,...cL,0,d1,...,dK)
\family default
.
\end_layout

\begin_layout Description
LCOD: linear combination of distances (in Å) between pairs of atoms listed
 in 
\family typewriter
cv_i
\family default
 with the coefficients read from 
\family typewriter
cv_r
\family default
 list.
 For example, 
\family typewriter
i = 1,2,3,4
\family default
 and 
\family typewriter
r = 1.0,-1.0
\family default
 define the difference between 1-2 and 3-4 distances, 
\shape italic
i.e.

\shape default
 LCOD = r1*distance(1, 2) + r2*distance(3,4).
\end_layout

\begin_layout Description
ANGLE: angle (in radians) between the lines joining atoms with indexes 
\family typewriter
i1
\family default
 and 
\family typewriter
i2
\family default
 and atoms with indexes 
\family typewriter
i2
\family default
 and 
\family typewriter
i3
\family default
.
 
\end_layout

\begin_layout Description
COM_ANGLE: angle (in radians) formed by the center of mass of three atom
 groups.
 The 
\family typewriter
cv_i
\family default
 list is interpreted as a list of indexes of participating atoms.
 Zeros separate the groups, the last zero is optional.
 eg: 
\family typewriter
cv_i = a1,...,aN,0,b1,...bM,0,c1,...,cK,0
\family default
.
\end_layout

\begin_layout Description
TORSION: dihedral angle (in radians) formed by atoms with indexes 
\family typewriter
i1
\family default
, 
\family typewriter
i2
\family default
, 
\family typewriter
i3
\family default
 and 
\family typewriter
i4
\family default
.
 
\end_layout

\begin_layout Description
COM_TORSION: dihedral angle (in radians) formed by the center of mass of
 four atom groups.
 The 
\family typewriter
cv_i
\family default
 list is interpreted as a list of indexes of participating atoms.
 Zeros separate the groups, the last zero is optional.
 eg: 
\family typewriter
cv_i = a1,...,aN,0,b1,...bM,0,c1,...,CK,0,d1,...,dL,0
\family default
.
\end_layout

\begin_layout Description
COS_OF_DIHEDRAL: sum of cosines of dihedral angles formed by atoms with
 indexes in the list 
\family typewriter
cv_i
\family default
.
 The number of atoms must be a multiple of four.
\end_layout

\begin_layout Description
SIN_OF_DIHEDRAL: sum of sines of dihedral angles formed by atoms with indexes
 in the list 
\family typewriter
cv_i
\family default
.
 The number of atoms must be a multiple of four.
\end_layout

\begin_layout Description
PAIR_DIHEDRAL: sum of cosines of a list of angles each formed by summing
 two neighboring dihedral angles from a list formed by atoms with indices
 
\family typewriter
cv_i
\family default
.
 The number of atoms must be a multiple of four.
 For a list of dihedral angles such as {
\begin_inset Formula $\alpha_{1}$
\end_inset

, .
 .
 .
 ,
\begin_inset Formula $\alpha_{N}$
\end_inset

}, PAIR_DIHEDRAL is 
\begin_inset Formula ${\displaystyle \sum}_{i=1}^{N-1}cos(\alpha_{i}+\alpha_{i+1})$
\end_inset

 which ranges between 
\begin_inset Formula $-N+1$
\end_inset

 and 
\begin_inset Formula $N-1$
\end_inset

.
\end_layout

\begin_layout Description
PATTERN_DIHEDRAL: a particular pattern-recognizing function defined on a
 list of dihedral angles formed by atoms with indices 
\family typewriter
cv_i
\family default
.
 The number of atoms must be a multiple of four.
 The definition is particularly relevant for the dihedral angles with a
 binary-like behavior of being either around 0 or 180 (e.g., ω backbone dihedral
 angle).
 For a list of dihedral angles such as {
\begin_inset Formula $\alpha_{1}$
\end_inset

, .
 .
 .
 ,
\begin_inset Formula $\alpha_{N}$
\end_inset

 }, PATTERN_DIHEDRAL is 
\begin_inset Formula ${\displaystyle \sum}_{i=1}^{N}cos^{2}(\alpha_{i}/2)2^{i-1}$
\end_inset

 which ranges between 0 and 
\begin_inset Formula $2^{N}-1$
\end_inset

.
 
\end_layout

\begin_layout Description
R_OF_GYRATION: radius of gyration (in Å) of atoms with indexes given in
 the 
\family typewriter
cv_i
\family default
 list (mass weighted).
 
\begin_inset Float figure
placement tbh!
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = 'MULTI_RMSD'
\end_layout

\begin_layout Plain Layout

   cv_ni = 9, cv_nr = 21,
\end_layout

\begin_layout Plain Layout

   cv_i = 1, 2, 3, 4, 0, 3, 4, 5, 0 ! the last zero is optional  
\end_layout

\begin_layout Plain Layout

   cv_r = 1.0, 1.0, 1.0, ! group #1, atom 1
\end_layout

\begin_layout Plain Layout

        2.0, 2.0, 2.0, ! group #1, atom 2
\end_layout

\begin_layout Plain Layout

        3.0, 3.0, 3.0, ! group #1, atom 3
\end_layout

\begin_layout Plain Layout

        4.0, 4.0, 4.0, ! group #1, atom 4
\end_layout

\begin_layout Plain Layout

       23.0, 23.0, 23.0, ! group #2, atom 3
\end_layout

\begin_layout Plain Layout

          4.0, 4.0, 4.0, ! group #2, atom 4
\end_layout

\begin_layout Plain Layout

          5.0, 5.0, 5.0 ! group #2, atom 5
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:RMSD"

\end_inset

 An example of 
\family typewriter
MULTI_RMSD
\family default
 variable definition.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
MULTI_RMSD: 
\family typewriter
RMS
\family default
 (in Å, mass weighted) of 
\family typewriter
RMSD
\family default
s of several groups of atoms w.r.t.
 reference positions provided in the 
\family typewriter
cv_r
\family default
 list.
 The 
\family typewriter
cv_i
\family default
 list is interpreted as a list of indexes of participating atoms.
 Zeros separate the groups.
 An atom may enter several groups simultaneously.
 The 
\family typewriter
cv_r
\family default
 array is expected to contain the reference positions (without zero sentinels).
 The implementation uses the method (and the code) introduced in Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Coutsias2004"
literal "true"

\end_inset

.
 An example of variable of this type is presented in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:RMSD"

\end_inset

.
 Two groups are defined here: one comprises the atoms with indexes 1, 2,
 3, 4 (line 3 in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:RMSD"

\end_inset

, numbers prior to the first zero) and another one of atoms with indexes
 3, 4, 5.
 The code will first compute the (mass weighted) 
\family typewriter
RMSD
\family default
 (
\begin_inset Formula $R_{1}$
\end_inset

) of atoms belonging to the first group w.r.t.
 reference coordinates provided in the 
\family typewriter
cv_r
\family default
 array (first 
\begin_inset Formula $12=4\times3$
\end_inset

 real numbers of it; lines 4, 5, 6, 7 in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:RMSD"

\end_inset

).
 Next, the (mass weighted) 
\family typewriter
RMSD
\family default
 (
\begin_inset Formula $R_{2}$
\end_inset

) of atoms of the second group w.r.t.
 the corresponding reference coordinates (last 
\begin_inset Formula $9=3\times3$
\end_inset

 elements of the 
\family typewriter
cv_r
\family default
 array in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:RMSD"

\end_inset

) will be computed.
 Finally, the code will compute the value of the variable as follows: 
\begin_inset Formula 
\[
\mathrm{value}=\sqrt{\frac{M_{1}}{M_{1}+M_{2}}R_{1}^{2}+\frac{M_{2}}{M_{1}+M_{2}}R_{2}^{2}}\,,
\]

\end_inset

 where 
\begin_inset Formula $M_{1}$
\end_inset

 and 
\begin_inset Formula $M_{2}$
\end_inset

 are the total masses of atoms in the corresponding groups.
 
\end_layout

\begin_layout Description
N_OF_BONDS: 
\begin_inset Formula 
\[
\mathrm{value}=\sum\limits _{p}\frac{1-\left(r_{p}\Big/r_{0}\right)^{6\hphantom{1}}}{1-\left(r_{p}\Big/r_{0}\right)^{12}}\,,
\]

\end_inset

 where the sum runs over pairs of atoms 
\begin_inset Formula $p$
\end_inset

, 
\begin_inset Formula $r_{p}$
\end_inset

 denotes distance between the atoms of pair 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $r_{0}$
\end_inset

 is a parameter measured in Å.
 The 
\family typewriter
cv_r
\family default
 array must contain exactly one element that is interpreted as 
\begin_inset Formula $r_{0}$
\end_inset

.
 The 
\family typewriter
cv_i
\family default
 array is expected to contain pairs of indexes of participating atoms.
 For example, if 1 and 2 are the indexes of Oxygen atoms and 3, 4, 5 are
 the indexes of Hydrogen atoms and one intents to count all possible O-H
 bonds, the 
\family typewriter
cv_i
\family default
 list must be (1, 3, 1, 4, 1, 5, 2, 3, 2, 4, 2, 5), that is, it must explicitly
 list all the pairs to be counted.
 
\end_layout

\begin_layout Description
HANDEDNESS: 
\begin_inset Formula 
\[
\mathrm{value}=\sum_{a}\frac{\mathbf{u}_{a,3}\cdot\left[\mathbf{u}_{a,1}\times\mathbf{u}_{a,2}\right]}{\left|\mathbf{u}_{a,1}\right|\left|\mathbf{u}_{a,2}\right|\left|\mathbf{u}_{a,3}\right|}\,,
\]

\end_inset

 where 
\begin_inset Formula 
\begin{eqnarray*}
\mathbf{u}_{a,1} & = & \mathbf{r}_{a+1}-\mathbf{r}_{a}\\
\mathbf{u}_{a,2} & = & \mathbf{r}_{a+3}-\mathbf{r}_{a+2}\\
\mathbf{u}_{a,3} & = & (1-w)(\mathbf{r}_{a+2}-\mathbf{r}_{a+1})+w(\mathbf{r}_{a+3}-\mathbf{r}_{a})\,,
\end{eqnarray*}

\end_inset

 and 
\begin_inset Formula $\mathbf{r}_{a}$
\end_inset

 denote the positions of participating atoms.
 The 
\family typewriter
cv_i
\family default
 array is supposed to contain indexes of the atoms and the 
\family typewriter
cv_r
\family default
 array may provide the value of 
\begin_inset Formula $w$
\end_inset

 (
\begin_inset Formula $0\leq w\leq1$
\end_inset

, the default is zero).
 
\end_layout

\begin_layout Description
N_OF_STRUCTURES: 
\begin_inset Formula 
\[
\mathrm{value}=\sum\limits _{g}\frac{1-\left(R_{g}\Big/R_{0,g}\right)^{6\hphantom{1}}}{1-\left(R_{g}\Big/R_{0,g}\right)^{12}}\,,
\]

\end_inset

 where the sum runs over groups of atoms, 
\begin_inset Formula $R_{g}$
\end_inset

 denotes the 
\family typewriter
RMSD
\family default
 of the group 
\begin_inset Formula $g$
\end_inset

 w.r.t.
 some reference coordinates and 
\begin_inset Formula $R_{0,g}$
\end_inset

 are positive parameters measured in Å.
 The 
\family typewriter
cv_i
\family default
 array is expected to contain indexes of participating atoms with zeros
 separating different groups.
 The elements of the 
\family typewriter
cv_r
\family default
 array are interpreted as the reference coordinates of the first group followed
 by their corresponding 
\begin_inset Formula $R_{0}$
\end_inset

; then followed by the reference coordinates of the atoms of the second
 group, followed by the second 
\begin_inset Formula $R_{0}$
\end_inset

, and so forth.
 To make the presentation clearer, let us consider the example presented
 in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:N-OF-STRUCTURES"

\end_inset

.
 The atomic groups and reference coordinates are the same as the ones shown
 in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:RMSD"

\end_inset

.
 Lines 7 and 11 in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:N-OF-STRUCTURES"

\end_inset

 contain additional entries that set the values of the threshold distances
 
\begin_inset Formula $R_{0,1}$
\end_inset

 and 
\begin_inset Formula $R_{0,2}$
\end_inset

.
 To compute the variable, the code first computes the mass weighted 
\family typewriter
RMSD
\family default
 values 
\begin_inset Formula $R_{1}$
\end_inset

 and 
\begin_inset Formula $R_{2}$
\end_inset

 for both groups –much like in the 
\family typewriter
MULTI_RMSD
\family default
 case– and then combines those in a manner similar to that used in the 
\family typewriter
N_OF_BONDS
\family default
 variable.
 
\begin_inset Float figure
placement tb
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = 'N_OF_STRUCTURES'
\end_layout

\begin_layout Plain Layout

   cv_ni = 9, cv_nr = 23,
\end_layout

\begin_layout Plain Layout

   cv_i = 1, 2, 3, 4, 0, 3, 4, 5, 0 ! the last zero is optional
\end_layout

\begin_layout Plain Layout

   cv_r = 1.0, 1.0, 1.0, ! group #1, atom 1
\end_layout

\begin_layout Plain Layout

        2.0, 2.0, 2.0, ! group #1, atom 2
\end_layout

\begin_layout Plain Layout

        3.0, 3.0, 3.0, ! group #1, atom 3
\end_layout

\begin_layout Plain Layout

        4.0, 4.0, 4.0, ! group #1, atom 4
\end_layout

\begin_layout Plain Layout

        1.0,           ! R0 for group #1
\end_layout

\begin_layout Plain Layout

     23.0, 23.0, 23.0, ! group #2, atom 3
\end_layout

\begin_layout Plain Layout

        4.0, 4.0, 4.0, ! group #2, atom 4
\end_layout

\begin_layout Plain Layout

        5.0, 5.0, 5.0, ! group #2, atom 5
\end_layout

\begin_layout Plain Layout

        2.0           ! R0 for group #2
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:N-OF-STRUCTURES"

\end_inset

 An example of 
\family typewriter
N_OF_STRUCTURES
\family default
 variable.
 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
\mathrm{value}=\frac{1-\left(R_{1}\Big/R_{0,1}\right)^{6\hphantom{1}}}{1-\left(R_{1}\Big/R_{0,1}\right)^{12}}+\frac{1-\left(R_{2}\Big/R_{0,2}\right)^{6\hphantom{1}}}{1-\left(R_{2}\Big/R_{0,2}\right)^{12}}\,.
\]

\end_inset

 In other words, the variable 
\begin_inset Quotes eld
\end_inset

counts
\begin_inset Quotes erd
\end_inset

 the number of structures that match (stay close in 
\family typewriter
RMSD
\family default
 sense) with the reference structures.
 
\end_layout

\end_deeper
\begin_layout Description
QUATERNIONS: Describing large-scale atomistic conformational changes in
 biomolecular systems requires one to deal with orientational changes of
 atomistic domains with large numbers of atoms.
 While there are several ways of defining a collective variable that quantifies
 an orientation based conformational change, the orientation quaternion
 technique
\begin_inset CommandInset citation
LatexCommand cite
key "Coutsias, Fiorin, Moradi_M_15a, Moradi_M_15b"
literal "true"

\end_inset

 has proven successful as a well-behaved, flexible method for defining system-sp
ecific CVs, specifically aimed at inducing interdomain orientational changes
 or restraining the orientation of certain domains.
 The CVs in the orientation quaternion class, are all derived from an `optimal
 rotation' between a set of reference coordinates 
\begin_inset Formula $\mathbf{X}_{k}$
\end_inset

 (
\begin_inset Formula $1\leq k\leq N$
\end_inset

; where 
\begin_inset Formula $N$
\end_inset

 is the number of atoms involved) and the set of target coordinates 
\begin_inset Formula $\mathbf{Y}_{k}$
\end_inset

.
 A `quaternion' is introduced as a four-component vector that can be expressed
 as 
\begin_inset Formula $q_{0}+q_{1}\hat{i}+q_{2}\hat{j}+q_{3}\hat{k}$
\end_inset

 where 
\begin_inset Formula $q_{0}$
\end_inset

 and 
\begin_inset Formula $q_{1}\hat{i}+q_{2}\hat{j}+q_{3}\hat{k}$
\end_inset

 are called scalar and vector parts respectively.
 The optimal rotation can be parametrized
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Assuming both sets have been already shifted to bring their barycenters
 to the origin (optimum translation).
\end_layout

\end_inset

 by a unit quaternion, 
\begin_inset Formula $\hat{q}=(q_{0},q_{1},q_{2},q_{3})$
\end_inset

, that minimize 
\begin_inset Formula $<||\hat{q}\mathbf{X}_{k}\hat{q}^{*}-\mathbf{Y}_{k}||^{2}>$
\end_inset

 in which 
\begin_inset Formula $<.>$
\end_inset

 denotes an average over 
\begin_inset Formula $k$
\end_inset

,
\begin_inset Formula $q^{*}$
\end_inset

 is the conjugate of 
\begin_inset Formula $q$
\end_inset

 and 
\begin_inset Formula $||q||^{2}=q^{*}q$
\end_inset

 (see Ref.
\begin_inset CommandInset citation
LatexCommand cite
key "Coutsias"
literal "true"

\end_inset

 for more details).
 The optimal rotation unit quaternion (or orientation quaternion)
\begin_inset Formula $\hat{q}$
\end_inset

 can be written as 
\begin_inset Formula $\big(cos(\theta/2),sin(\theta/2)\hat{u}\big)$
\end_inset

, where 
\begin_inset Formula $\theta$
\end_inset

 is the optimal rotation angle and 
\begin_inset Formula $\hat{u}$
\end_inset

 is a unit vector associated with the optimal axis of rotation.
 To deal with large atomistic conformational changes, a set of quaternion-based
 CVs has implemented in AMBER20.
 For the details of usage, send emails to Ashkan Fakharzadeh (afakhar@ncsu.edu),
 Dr.
 Feng Pan (fpan3@ncsu.edu),  and Prof.
 Mahmoud Moradi (moradi@uark.edu).
 The specific quaternion-based CVs implemented are: ORIENTATION_ANGLE, ORIENTATI
ON_PROJ, TILT, SPINANGLE, QUATERNION0, QUATERNION1, QUATERNION2, and QUATERNION3.
\end_layout

\begin_layout Description

\series bold
Orientation (QUATERNION0,...,QUATERNION3):
\series default
 These define the orientation of several atoms with respect to a set of
 reference coordinates in terms of a unit quaternion vector 
\begin_inset Formula $\hat{q}=(q_{0},q_{1},q_{2},q_{3})$
\end_inset

 according to the method introduced in Ref.
\begin_inset CommandInset citation
LatexCommand cite
key "Coutsias, Fiorin"
literal "true"

\end_inset

.
 These variables return the best-fit rotation, also used in best-fit RMSD
 calculation procedures, to superimpose the coordinates 
\begin_inset Formula $\mathbf{X}$
\end_inset

 onto a set of reference coordinates 
\begin_inset Formula $\mathbf{X}_{0}$
\end_inset

.
 The unit quaternion 
\begin_inset Formula $\hat{q}=(q_{0},q_{1},q_{2},q_{3})$
\end_inset

 can be written as 
\begin_inset Formula $\big(cos(\theta/2),sin(\theta/2)\hat{u}\big)$
\end_inset

, where 
\begin_inset Formula $\theta$
\end_inset

 is the rotation angle and 
\begin_inset Formula $\hat{u}$
\end_inset

 is a unit vector associated with the axis of rotation; for example, a rotation
 of 
\begin_inset Formula $90^{\circ}$
\end_inset

 around the z axis 
\begin_inset Formula $(0,0,1)$
\end_inset

 is expressed as
\begin_inset Formula $(cos(90^{\circ}/2),0.0,0.0,sin(90^{\circ}/2))=(\sqrt{2}/2,0,0,\sqrt{2}/2)$
\end_inset

.
 The components of the unit quaternion 
\begin_inset Formula $(q_{0},q_{1},q_{2},q_{3})$
\end_inset

 were implemented separately as QUATERNION0, QUATERNION1, QUATERNION2, and
 QUATERNION3 CVs.
 To find the orientation, all four CVs QUATERNION0,...,QUATERNION3 are being
 used.
 To calculate the quaternion CVs one needs to specify a list of participating
 atoms and also their reference coordinates.
 The reference coordinates may be passed to AMBER either via direct specificatio
n inside the CV call, or by passing the name of a reference coordinates
 file.
 It is recommended that if the set of participating atoms is small (say
 no larger than 15), then these are specified directly inside the CV call.
 Otherwise, the passing of information via filename is recommended since
 these lists may contain hundreds if not thousands of atoms.
 Relevant parameters pertaining to the input of this information are: 
\begin_inset Formula $cv\_ni$
\end_inset

 represents the number of participating atoms; 
\begin_inset Formula $cv\_i$
\end_inset

 represents the list of the indices of all participating atoms; 
\begin_inset Formula $cv\_r$
\end_inset

 represents the reference coordinates (when passed directly) and 
\begin_inset Formula $refcrd\_file$
\end_inset

 is the filename for the reference coordinates when they are to be read
 from file.
 The file 
\begin_inset Formula $refcrd\_file$
\end_inset

 should be an AMBER coordinates/restart file containing coordinates, velocities,
 etc.
 of all atoms.
 The list participating atoms, 
\begin_inset Formula $cv\_i$
\end_inset

, and their reference coordinates (
\begin_inset Formula $cv\_r$
\end_inset

 and or 
\begin_inset Formula $refcrd\_file$
\end_inset

 ) must be the same for all QUATERNION0,...,QUATERNION3.
 The CVs are linked together using an attribute
\emph on
`q_index'
\emph default
.
 The
\emph on
`q_index'
\emph default
 accepts an integer between 
\begin_inset Formula $1,...,100$
\end_inset

, where its default value is one.
 The Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:orientation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is an example of Quaternion CVs syntax.
 
\begin_inset Float figure
placement tb
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = 'QUATERNION0'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   ! number of participating atoms
\end_layout

\begin_layout Plain Layout

   cv_ni = ni
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   ! index of participating atoms
\end_layout

\begin_layout Plain Layout

   cv_i = a1, a2,..., aN
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   ! AMBER coordinate/restart file to read reference coordinates
\end_layout

\begin_layout Plain Layout

   refcrd_file = 'refcrd_file'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   ! number of references which must be 3*ni; Should not be set if
\end_layout

\begin_layout Plain Layout

   ! refcrd_file is being used
\end_layout

\begin_layout Plain Layout

   cv_nr = nr
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   ! reference coordinates of participating atoms; Should not be set if
\end_layout

\begin_layout Plain Layout

   ! refcrd_file is being used
\end_layout

\begin_layout Plain Layout

   cv_r = a1x, a1y, a1z, a2x, a2y, a2z, a3x, a3y, a3z, ...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   ! an arbitrary integer between 1 to 100
\end_layout

\begin_layout Plain Layout

   q_index = n
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:orientation"

\end_inset

 Syntax of Quaternion reaction coordinates.
\end_layout

\end_inset


\end_layout

\end_inset

 An example this type of CVs is presented in the Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:quaternion"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Two set of orientations are defined here: each set consists of QUATERNION0,..,
 QUATERNION3.
 The first set comprises 
\begin_inset Formula $18$
\end_inset

 atoms with indexes 
\begin_inset Formula $11,41,48,74,104,\dots$
\end_inset

 and another one of 
\begin_inset Formula $24$
\end_inset

 atoms with indexes 
\begin_inset Formula $12,16,46,55,75,\dots$
\end_inset

.
 A file, `inpcrd' is used as an AMBER coordinate/restart file to read reference
 coordinates.
 There is no need to set 
\emph on
`q_index'
\emph default
 for the first four quaternions since the default value is one, but it is
 set to be 
\begin_inset Formula $2$
\end_inset

 for all quaternion CVs in the second set to link and normalize them.
 The returned value of each QUATERNION0,...,QUATERNION3 CVs is the corresponding
 component of the unit orientation vector 
\begin_inset Formula $\hat{q}=(q_{0},q_{1},q_{2},q_{3})$
\end_inset

.
\begin_inset Float figure
placement tb
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = 'QUATERNION0'
\end_layout

\begin_layout Plain Layout

   cv_ni = 18,
\end_layout

\begin_layout Plain Layout

   cv_i = 11 , 41 , 48 , 74 , 104 , 111 , 137 , 167 , 174 , 199 , 229 ,
 236, 262 , 
\end_layout

\begin_layout Plain Layout

          292 , 299 , 325 , 355 , 362 ,
\end_layout

\begin_layout Plain Layout

   refcrd_file = 'inpcrd'
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = 'QUATERNION1'
\end_layout

\begin_layout Plain Layout

   cv_ni = 18,
\end_layout

\begin_layout Plain Layout

   cv_i = 11 , 41 , 48 , 74 , 104 , 111 , 137 , 167 , 174 , 199 , 229 ,
 236, 262 ,
\end_layout

\begin_layout Plain Layout

          292 , 299 , 325 , 355 , 362 ,
\end_layout

\begin_layout Plain Layout

   refcrd_file = 'inpcrd'
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = 'QUATERNION2'
\end_layout

\begin_layout Plain Layout

   cv_ni = 18,
\end_layout

\begin_layout Plain Layout

   cv_i = 11 , 41 , 48 , 74 , 104 , 111 , 137 , 167 , 174 , 199 , 229 ,
 236, 262 ,
\end_layout

\begin_layout Plain Layout

          292 , 299 , 325 , 355 , 362 ,
\end_layout

\begin_layout Plain Layout

   refcrd_file = 'inpcrd'
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = 'QUATERNION3'
\end_layout

\begin_layout Plain Layout

   cv_ni = 18,
\end_layout

\begin_layout Plain Layout

   cv_i = 11 , 41 , 48 , 74 , 104 , 111 , 137 , 167 , 174 , 199 , 229 ,
 236, 262 ,
\end_layout

\begin_layout Plain Layout

          292 , 299 , 325 , 355 , 362 ,
\end_layout

\begin_layout Plain Layout

   refcrd_file = 'inpcrd'
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = 'QUATERNION0'
\end_layout

\begin_layout Plain Layout

   cv_ni = 24,
\end_layout

\begin_layout Plain Layout

   cv_i = 12 , 16 , 46 , 55 , 75 , 79 , 109 , 118 , 138 , 142 , 172 , 181
 , 200 ,
\end_layout

\begin_layout Plain Layout

          204 , 234 , 243 , 263 , 267 , 297 , 306 , 326 , 330 , 360 , 369
 ,
\end_layout

\begin_layout Plain Layout

   refcrd_file = 'inpcrd',
\end_layout

\begin_layout Plain Layout

   q_index = 2
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = 'QUATERNION1'
\end_layout

\begin_layout Plain Layout

   cv_ni = 24,
\end_layout

\begin_layout Plain Layout

   cv_i = 12 , 16 , 46 , 55 , 75 , 79 , 109 , 118 , 138 , 142 , 172 , 181
 , 200 ,
\end_layout

\begin_layout Plain Layout

          204 , 234 , 243 , 263 , 267 , 297 , 306 , 326 , 330 , 360 , 369
 ,
\end_layout

\begin_layout Plain Layout

   refcrd_file = 'inpcrd',
\end_layout

\begin_layout Plain Layout

   q_index = 2
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = 'QUATERNION2'
\end_layout

\begin_layout Plain Layout

   cv_ni = 24,
\end_layout

\begin_layout Plain Layout

   cv_i = 12 , 16 , 46 , 55 , 75 , 79 , 109 , 118 , 138 , 142 , 172 , 181
 , 200 ,
\end_layout

\begin_layout Plain Layout

          204 , 234 , 243 , 263 , 267 , 297 , 306 , 326 , 330 , 360 , 369
 ,
\end_layout

\begin_layout Plain Layout

   refcrd_file = 'inpcrd',
\end_layout

\begin_layout Plain Layout

   q_index = 2
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = 'QUATERNION3'
\end_layout

\begin_layout Plain Layout

   cv_ni = 24,
\end_layout

\begin_layout Plain Layout

   cv_i = 12 , 16 , 46 , 55 , 75 , 79 , 109 , 118 , 138 , 142 , 172 , 181
 , 200 ,
\end_layout

\begin_layout Plain Layout

          204 , 234 , 243 , 263 , 267 , 297 , 306 , 326 , 330 , 360 , 369
 ,
\end_layout

\begin_layout Plain Layout

   refcrd_file = 'inpcrd',
\end_layout

\begin_layout Plain Layout

   q_index = 2
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:quaternion"

\end_inset

 An example of 
\family typewriter
Orientation
\family default
 variable.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description

\series bold
ORIENTATION_ANGLE:
\series default
 The angle of rotation 
\begin_inset Formula $\theta=2cos^{-1}(q_{0})$
\end_inset

 between the current and the reference positions.
 This angle is between 
\begin_inset Formula $0^{\circ}$
\end_inset

 to 
\begin_inset Formula $180^{\circ}$
\end_inset

.
 The 
\begin_inset Formula $cv\_i$
\end_inset

 list is interpreted as a list of indexes of participating atoms.
\begin_inset Formula 
\[
\textit{orientation angle: }\theta=2cos^{-1}(q_{0})
\]

\end_inset


\end_layout

\begin_layout Description

\series bold
ORIENTATION_PROJ:
\series default
 The cosine of the angle of rotation 
\begin_inset Formula $\theta$
\end_inset

 between the current and the reference positions.
 While ORIENTATION_ANGLE diverges near 
\begin_inset Formula $\theta=0$
\end_inset

, because of 
\begin_inset Formula $\nabla_{X}\theta$
\end_inset

, ORIENTATION_PROJ might be used instead to apply forces.
 The range of ORIENTATION_PROJ is 
\begin_inset Formula $[-1,1]$
\end_inset

.
 The 
\begin_inset Formula $cv\_i$
\end_inset

 array is supposed to contain indexes of the atoms.
\begin_inset Formula 
\[
\textit{orientation proj: }2q_{0}^{2}-1
\]

\end_inset


\end_layout

\begin_layout Description

\series bold
SPINANGLE:
\series default
 Angle of rotation 
\begin_inset Formula $\phi$
\end_inset

 around a given unit axis 
\begin_inset Formula $\mathbf{\hat{e}}$
\end_inset

.
 The axis 
\begin_inset Formula $\mathbf{\hat{e}}$
\end_inset

 is being used to decompose a complete orientation rotation in two sub-rotations
, spin 
\begin_inset Formula $\phi$
\end_inset

 and tilt 
\begin_inset Formula $\omega$
\end_inset

.
 An advantage of this decomposition is 
\begin_inset Formula $\phi$
\end_inset

 and 
\begin_inset Formula $\omega$
\end_inset

 have the same values, regardless of which one is applied first (in comparison
 to Euler angles methods).
 The participating atoms with indexes are given in the 
\begin_inset Formula $cv\_i$
\end_inset

.
 The
\emph on
`axis'
\emph default
 must provide three components of the axis
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The axis is from the origin
\begin_inset Formula $(0.0,0.0,0.0)$
\end_inset

 to that point.
\end_layout

\end_inset


\begin_inset Formula $\mathbf{\hat{e}}$
\end_inset

 in 
\begin_inset Formula $A^{\circ}$
\end_inset

.
 The default axis of rotation is 
\begin_inset Formula $(0.0,0.0,1.0)$
\end_inset

.
 The range of SPINANGLE is between
\begin_inset Formula $[-180:180]$
\end_inset

 degrees.
 The reference coordinates are specified either via 
\begin_inset Formula $cv\_r$
\end_inset

 or 
\begin_inset Formula $refcrd\_file$
\end_inset

.
 
\begin_inset Formula 
\[
\textit{spin angle: }\phi=2tan^{-1}(\mathbf{q.e}/q_{0})
\]

\end_inset

where 
\begin_inset Formula $\mathbf{q}$
\end_inset

 is the vector part of quaternion, namely 
\begin_inset Formula $(q_{1},q_{2},q_{3})$
\end_inset

.
 An example of SPINANGLE cv is presented in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:spinangle"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The same atoms as example one are used, but the axis of rotation is set
 to be `x-axis'.
 The reference coordinates are given by 
\begin_inset Formula $cv\_nr$
\end_inset

, 
\begin_inset Formula $cv\_r$
\end_inset

 options.
\begin_inset Float figure
placement tb
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

   cv_type = 'SPINANGLE'
\end_layout

\begin_layout Plain Layout

   cv_ni = 18, cv_nr = 54,
\end_layout

\begin_layout Plain Layout

   cv_i = 11 , 41 , 48 , 74 , 104 , 111 , 137 , 167 , 174 , 199 , 229 ,
\end_layout

\begin_layout Plain Layout

          236, 262 , 292 , 299 , 325 , 355 , 362 ,
\end_layout

\begin_layout Plain Layout

   cv_r = 0.96 , -4.47 , -0.31 , 3.48 , -3.00 , 3.06 , 0.88 , 0.01 ,
\end_layout

\begin_layout Plain Layout

          3.36 ,4.55 , -0.51 , 6.46 , 3.93 , 2.38 , 9.81 , 0.26 ,
\end_layout

\begin_layout Plain Layout

          0.84 , 10.12 , 1.90 , 4.16 , 13.21 , -1.06 , 4.47 , 16.58 ,
\end_layout

\begin_layout Plain Layout

         -0.71 , 0.52 , 16.88 , -0.96 , -4.47 , 17.21 , -3.48 ,
\end_layout

\begin_layout Plain Layout

         -3.00 , 13.84 , -0.88 , 0.01 , 13.54 , -4.55 , -0.51 , 10.44 , 
\end_layout

\begin_layout Plain Layout

         -3.93 , 2.38 , 7.09 , -0.26 , 0.84, 6.78 , -1.90 , 4.16 ,
\end_layout

\begin_layout Plain Layout

          3.69 , 1.06 , 4.47 , 0.32 , 0.71 , 0.52 , 0.02 ,
\end_layout

\begin_layout Plain Layout

   axis = 1.0, 0.0, 0.0
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:spinangle"

\end_inset

 An example of 
\family typewriter
SPINANGLE
\family default
 variable.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description

\series bold
TILT:
\series default
 Cosine of the rotation orthogonal to an unit given axis.
 The tilt angle 
\begin_inset Formula $\omega$
\end_inset

, shows a rotation away from the direction 
\begin_inset Formula $\mathbf{\hat{e}}$
\end_inset

.
 The tilt combined with the `spin' sub-rotation provides the complete orientatio
n rotation of a group of atoms.
 Similar to ORIENTATION_PROJ, to avoid the discontinuity around 
\begin_inset Formula $0^{\circ}$
\end_inset

 and 
\begin_inset Formula $180^{\circ}$
\end_inset

, the cosine of the tilt is implemented instead of the tilt angle itself,
 so that derivatives are continuous almost everywhere.
 The 
\begin_inset Formula $cv\_i$
\end_inset

 and 
\emph on
`axis'
\emph default
 are the participating atoms with indexes and the given axis, respectively.
 The reference coordinates are specified either via 
\begin_inset Formula $cv\_r$
\end_inset

 or 
\begin_inset Formula $refcrd\_file$
\end_inset

.
 The value of TILT is between 
\begin_inset Formula $-1$
\end_inset

 to 
\begin_inset Formula $1$
\end_inset

, where the value 
\begin_inset Formula $1$
\end_inset

 represents an orientation fully parallel to 
\begin_inset Formula $\mathbf{\hat{e}}$
\end_inset

 (
\begin_inset Formula $\omega=0^{\circ}$
\end_inset

), and the value 
\begin_inset Formula $-1$
\end_inset

 represents an anti-parallel orientation.
 
\begin_inset Formula 
\[
\textit{tilt: }t=cos(\omega)=2\big(\frac{q_{0}}{cos(\frac{{tan^{-1}\mathbf{q.e}}}{q_{0}})}\big)^{2}-1
\]

\end_inset


\end_layout

\begin_layout Subsection
Steered Molecular Dynamics
\end_layout

\begin_layout Standard
The 
\begin_inset Index idx
status open

\begin_layout Plain Layout
nfe_smd
\end_layout

\end_inset


\family typewriter
&smd
\family default
 namelist, if present in the 
\family typewriter
MDIN
\family default
 file, activates the steered 
\family typewriter
MD
\family default
 code (the method itself is extensively described in the literature: see
 for example Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Park2003"
literal "true"

\end_inset

 and references therein).
 The prefix NFE appears in several switches to do with steered MD: this
 stands for 
\begin_inset Quotes eld
\end_inset

Non-equilibrium Free Energy
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
The following is recognized within the 
\family typewriter
&smd
\family default
 namelist: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
output_file
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
output_file
\end_layout

\end_inset

 sets the output file name.
 Default is '
\family typewriter
nfe-smd.txt
\family default
'.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
output_freq
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
output_freq
\end_layout

\end_inset

 sets the output frequency (in 
\family typewriter
MD
\family default
 steps).
 Default is 50.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
cv_file
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
cv_file
\end_layout

\end_inset

 sets the collective variable file name.
 Default is '
\family typewriter
nfe-smd-cv
\family default
'.
\end_layout

\begin_layout Standard
There must be at least one reaction coordinate defined (that is, there must
 be at least one 
\family typewriter
&colvar
\family default
 namelist in the 
\family typewriter
cv_file
\family default
).
 The steered 
\family typewriter
MD
\family default
 code requires that additional entries be present in the 
\family typewriter
&colvar
\family default
 namelist: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
path
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
path
\end_layout

\end_inset

 the steering path whose elements must be real numbers.
 The 
\family typewriter
path
\family default
 must include at least two elements.
 The upper limit on the number of entries is 20000.
 The elements define Catmull-Rom spline used for steering.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
npath
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
npath
\end_layout

\end_inset

 sets the number of elements in 
\family typewriter
path
\family default
.
 Default is 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
path_mode
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
path_mode
\end_layout

\end_inset

 The way steering paths are constructed.
 There are two modes available.
 In 
\family typewriter
SPLINE
\family default
 mode (default) the path is approximated by a spline that passes through
 the given points; in 
\family typewriter
LINES
\family default
 mode the path is represented by the line segments joining the control points.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
harm
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
harm
\end_layout

\end_inset

 specifies the harmonic constant.
 If a single number is provided, e.g., 
\family typewriter
harm = 10.0
\family default
, then it is constant throughout the run.
 If two or more numbers are provided, e.g., 
\family typewriter
harm = 10.0, 20.0
\family default
, then the harmonic constant follows a Catmull-Rom spline built upon the
 provided values.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
nharm
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
nharm
\end_layout

\end_inset

 sets the number of elements in 
\family typewriter
harm
\family default
.
 Default is 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
harm_mode
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
harm_mode
\end_layout

\end_inset

 The way harmonical paths are constructed, similar with 
\family typewriter
path_mode
\family default
.
\end_layout

\begin_layout Standard
An example of 
\family typewriter
MDIN
\family default
 file and 
\family typewriter
CV.IN
\family default
 file for steered 
\family typewriter
MD
\family default
 is shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:smd"

\end_inset

.
 The reaction coordinate is defined in 
\family typewriter
cv.in
\family default
.
 The spring constant is set constant throughout the run and the steering
 path is configured from 5.0 to 3.0.
 The values of the reaction coordinate, harmonic constant and the work performed
 on the system are requested to be dumped to the 
\family typewriter
smd.txt
\family default
 file every 50 MD steps.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement tbh!
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

title line
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

..., infe = 1
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

&smd
\end_layout

\begin_layout Plain Layout

   output_file = 'smd.txt'
\end_layout

\begin_layout Plain Layout

   output_freq = 50
\end_layout

\begin_layout Plain Layout

   cv_file = 'cv.in'
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cv_file
\end_layout

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

  cv_type = 'DISTANCE'
\end_layout

\begin_layout Plain Layout

  cv_ni = 2
\end_layout

\begin_layout Plain Layout

  cv_i = 5, 9
\end_layout

\begin_layout Plain Layout

  npath = 2, path = 5.0, 3.0, path_mode = 'LINES',
\end_layout

\begin_layout Plain Layout

  nharm = 1, harm = 10.0
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
 
\begin_inset CommandInset label
LatexCommand label
name "code:smd"

\end_inset

 An example 
\family typewriter
MDIN
\family default
 file and 
\family typewriter
CV.IN
\family default
 file for steered 
\family typewriter
MD
\family default
.
 Only the relevant part is shown.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Umbrella sampling
\end_layout

\begin_layout Standard
To activate the umbrella sampling code, the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
nfe_pmd
\end_layout

\end_inset


\family typewriter
&pmd
\family default
 namlist must be present in the 
\family typewriter
MDIN
\family default
 file.
\family typewriter
&pmd
\family default
 is currently available to both SANDER and PMEMD, and also can be fully
 applied in GPU accelerated PMEMD.
 
\family typewriter
The output_file
\family default
, 
\family typewriter
output_freq
\family default
 and 
\family typewriter
cv_file
\family default
 entries are recognized just as in the steered 
\family typewriter
MD
\family default
 case presented earlier.
 The 
\family typewriter
cv_file
\family default
 must contain at least one 
\family typewriter
&colvar
\family default
 namelist section.
 For umbrella sampling, the 
\family typewriter
&colvar
\family default
 section(s) must contain two additional entries: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
anchor_position
\series default
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
anchor_postion
\end_layout

\end_inset

 this consists of four real numbers (
\begin_inset Formula $r1,r2,r3,r4$
\end_inset

) that determine the rectangle of the umbrella (harmonic) potential.
 The default value is that all of the 
\begin_inset Formula $r's$
\end_inset

 is set to zero.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
anchor_strength
\series default
:
\begin_inset Index idx
status open

\begin_layout Plain Layout
anchor_strength
\end_layout

\end_inset

 two non-negative real numbers (
\begin_inset Formula $k1,k2$
\end_inset

) that set the harmonic constant for the umbrella (harmonic) potential.
 The default value is zero.
\end_layout

\begin_layout Standard
The umbrella (harmonic) potential 
\begin_inset Formula $U$
\end_inset

 is determined by (supposing 
\begin_inset Formula $R$
\end_inset

 is the value of reaction coordinate)
\end_layout

\begin_layout Itemize
\begin_inset Formula $U=k1*(r1-r2)*R\ \ \ \ \ \ (R\leqslant r1)$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $U=0.5*k1*(R-r2)^{2}\ \ \ \ (r1<R\leqslant r2)$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $U=0\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (r2<R\leqslant r3)$
\end_inset

 
\end_layout

\begin_layout Itemize
\begin_inset Formula $U=0.5*k2*(R-r3)^{2}\ \ \ \ (r3<R\leqslant r4)$
\end_inset

 
\end_layout

\begin_layout Itemize
\begin_inset Formula $U=k2*(r4-r3)*R\ \ \ \ \ \ (R>r4)$
\end_inset

 
\end_layout

\begin_layout Standard
A plot of the umbrella potential is shown below
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename nfe_pmd.eps
	width 50text%

\end_inset


\end_layout

\begin_layout Description
eg1: if 
\begin_inset Formula $r2=r3$
\end_inset

, 
\begin_inset Formula $r1\ll r2$
\end_inset

 and 
\begin_inset Formula $r4\gg r3$
\end_inset

, then the generated 
\begin_inset Formula $U$
\end_inset

 is simply the traditional harmonic potential.
 
\end_layout

\begin_layout Description
eg2: if 
\begin_inset Formula $r1$
\end_inset

 is slightly less than 
\begin_inset Formula $r2$
\end_inset

 and 
\begin_inset Formula $r4$
\end_inset

 is slightly larger than 
\begin_inset Formula $r3$
\end_inset

, also with very large 
\begin_inset Formula $k1$
\end_inset

, 
\begin_inset Formula $k2$
\end_inset

, the reaction coordinate is restrained in the range (
\begin_inset Formula $r2,\,r3$
\end_inset

) with no potential added.
\end_layout

\begin_layout Standard
An example of an 
\family typewriter
MDIN
\family default
 file and 
\family typewriter
CV.IN
\family default
 file for an umbrella sampling simulation is shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:pmd1"

\end_inset

.
 The first reaction coordinate here is the angle formed by the lines joining
 the 5th with 9th and 9th with 15th atoms.
 It is to be harmonically restrained near 1.0 
\begin_inset Formula $rad$
\end_inset

 (
\family typewriter
anchor_position
\family default
 entry) using the spring of strength 10.0 
\begin_inset Formula $kcal/mol/rad^{2}$
\end_inset

 (
\family typewriter
anchor_strength
\family default
 entry).
 The second reaction coordinate requested in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:pmd1"

\end_inset

 is a dihedral angle (
\family typewriter
type = 'TORSION'
\family default
) formed by the 1st, 2nd, 3rd and 4th atoms (the 
\family typewriter
cv_i
\family default
 array).
 It is to be restrained near zero with strength 23.8 
\begin_inset Formula $kcal/mol/rad^{2}$
\end_inset

.
 The values of the reaction coordinate(s) are to be dumped every 50 
\family typewriter
MD
\family default
 steps to the 
\family typewriter
pmd.txt
\family default
 file.
 Another example of restraining reaction coordinate in a specific range
 is shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:pmd2"

\end_inset

.
 The reaction coordinates here are φ and ψ angles of dialanine.
 φ is restrained between -2.0 
\begin_inset Formula $rad$
\end_inset

 and 2.0 
\begin_inset Formula $rad$
\end_inset

, ψ is restrained between -1.8 
\begin_inset Formula $rad$
\end_inset

 and 1.8 
\begin_inset Formula $rad$
\end_inset

.
\end_layout

\begin_layout Standard
The 
\family typewriter
NFE
\family default
 implementation of umbrella sampling works correctly with the Amber standard
 replica-exchange MD described earlier in this manual (compatible with different
 types of REMD for different values of 
\family typewriter
-rem
\family default
 flag in both SANDER and PMEMD).
 For example, the typical umbrella sampling with Hamiltonian Replica Exchange
 can be performed by setting 
\family typewriter
-rem
\family default
 to 3.
 In this case, both 
\family typewriter
anchor_position
\family default
 and 
\family typewriter
anchor_strength
\family default
 may be different for different temperatures.
 Even the number and type of reaction coordinate(s) could vary for different
 replicas.
 The output files (set by the 
\family typewriter
output_file
\family default
 keyword on a per-replica basis) are 
\family typewriter
MDIN
\family default
-bound, consistent with 
\family typewriter
-rem
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement tbh!
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

title line
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

..., infe = 1
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

&pmd
\end_layout

\begin_layout Plain Layout

   output_file = 'pmd.txt'
\end_layout

\begin_layout Plain Layout

   output_freq = 50
\end_layout

\begin_layout Plain Layout

   cv_file = 'cv.in'
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cv_file
\end_layout

\begin_layout Plain Layout

&colvar ! first
\end_layout

\begin_layout Plain Layout

   cv_type = 'ANGLE'
\end_layout

\begin_layout Plain Layout

   cv_ni = 3, cv_i = 5, 9, 15
\end_layout

\begin_layout Plain Layout

   anchor_position = -10.0,1.0,1.0,10.0
\end_layout

\begin_layout Plain Layout

   anchor_strength = 10.0,10.0
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

&colvar ! second
\end_layout

\begin_layout Plain Layout

   cv_type = 'TORSION'
\end_layout

\begin_layout Plain Layout

   cv_ni = 4, cv_i = 1, 2, 3, 4
\end_layout

\begin_layout Plain Layout

   anchor_position = -10.0,0.0,0.0,10.0
\end_layout

\begin_layout Plain Layout

   anchor_strength = 23.8,23.8
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:pmd1"

\end_inset

 An example 
\family typewriter
MDIN
\family default
 file and 
\family typewriter
CV.IN
\family default
 file for umbrella sampling (only relevant part is presented in full).
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement tbh!
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cv_file
\end_layout

\begin_layout Plain Layout

&colvar ! phi
\end_layout

\begin_layout Plain Layout

   cv_type = 'TORSION'
\end_layout

\begin_layout Plain Layout

   cv_ni = 4, cv_i = 5, 7, 9, 15
\end_layout

\begin_layout Plain Layout

   anchor_position = -2.05,-2.0,2.0,2.05
\end_layout

\begin_layout Plain Layout

   anchor_strength = 500.0,500.0
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

&colvar ! psi
\end_layout

\begin_layout Plain Layout

   cv_type = 'TORSION'
\end_layout

\begin_layout Plain Layout

   cv_ni = 4, cv_i = 7, 9, 15, 17
\end_layout

\begin_layout Plain Layout

   anchor_position = -1.85,-1.8,1.8,1.85
\end_layout

\begin_layout Plain Layout

   anchor_strength = 500.0,500.0
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:pmd2"

\end_inset

 An example 
\family typewriter
CV.IN
\family default
 file to restrain the φ and ψ of dialanine.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Adaptively Biased Molecular Dynamics
\end_layout

\begin_layout Standard
The implementation has a very simple and intuitive interface: the code is
 activated if either an 
\begin_inset Index idx
status open

\begin_layout Plain Layout
nfe_abmd
\end_layout

\end_inset


\family typewriter
&abmd
\family default
 (both SANDER and PMEMD) or an 
\family typewriter
&bbmd
\family default
 (both SANDER and PMEMD) namelist is present in the 
\family typewriter
MDIN
\family default
 file (the difference between those 
\begin_inset Quotes eld
\end_inset

flavors
\begin_inset Quotes erd
\end_inset

 is purely technical and will become clear later).
 Unlike in the 
\family typewriter
&smd
\family default
 and 
\family typewriter
&pmd
\family default
 cases, the dimensionality of a reaction coordinate (the number of 
\family typewriter
&colvar
\family default
 namelists in the 
\family typewriter
cv_file
\family default
) cannot exceed five (though three is already hardly useful due to statistical
 reasons).
\end_layout

\begin_layout Standard
As previously noted, in order to activate the ABMD and related algorithm,
 the variable 
\series bold
\shape italic
infe
\series default
\shape default
 in &cntrl must be set to unity (
\shape italic
i.e.

\shape default
 
\series bold
\shape italic
infe = 
\series default
\shape default
1; default value 
\series bold
\shape italic
infe
\series default
\shape default
 = 0).
\end_layout

\begin_layout Standard
In addition to the 
\family typewriter
cv_file
\family default
 entry, the following entries are recognized within the 
\family typewriter
&abmd
\family default
 (or 
\family typewriter
&bbmd
\family default
) namelist:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
mode
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
mode
\end_layout

\end_inset

 sets the execution mode.
 There are three modes available: 
\family typewriter
'ANALYSIS' | 'UMBRELLA' | 'FLOODING'
\family default
.
 In 
\family typewriter
ANALYSIS
\family default
 mode the dynamics is not altered.
 The only effect of this mode is that the value(s) of the reaction coordinate(s)
 is(are) dumped every 
\family typewriter
monitor_freq
\family default
 to 
\family typewriter
monitor_file
\family default
.
 In 
\family typewriter
UMBRELLA
\family default
 mode, biasing potential from the 
\family typewriter
umbrella_file
\family default
 is used to bias the simulation (
\begin_inset Formula $\tau_{F}=\infty$
\end_inset

, biasing potential does not change).
 In 
\family typewriter
FLOODING
\family default
 mode the adaptive biasing is enabled.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
monitor_file
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
monitor_file
\end_layout

\end_inset

 sets the name of the file to which value(s) of reaction coordinate(s) (along
 with the magnitude of biasing potential in 
\family typewriter
FLOODING
\family default
 mode) are dumped.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
monitor_freq
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
monitor_freq
\end_layout

\end_inset

 the frequency of the output to the 
\family typewriter
monitor_file
\family default
.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
timescale
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
timescale
\end_layout

\end_inset

 
\begin_inset Formula $\tau_{F}$
\end_inset

, the flooding timescale in picoseconds (only required in 
\family typewriter
FLOODING
\family default
 mode).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
umbrella_file
\series default
 biasing potential file name (the file must exist for the 
\family typewriter
UMBRELLA
\family default
 mode).
 
\end_layout

\begin_layout Standard
In 
\family typewriter
FLOODING
\family default
 mode, the following two entries are optional: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
snapshots_basename
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
snapshots_basename
\end_layout

\end_inset

 sets the name of the file to which the biasing potential is dumped during
 the simulation for snapshot.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
snapshots_freq
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
snapshots_freq
\end_layout

\end_inset

 the frequency of dumping snapshot biasing potential (in MD steps).
 If 
\family typewriter
snapshots_freq
\family default
 is not specified, the snapshot biasing potential will not be dumped.
\end_layout

\begin_layout Standard
and the 
\family typewriter
&colvar
\family default
 namelist for 
\family typewriter
&abmd
\family default
 method must also contain the following entries: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
cv_min
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
cv_min
\end_layout

\end_inset

 smallest desired value of the reaction coordinate (required, unless the
 reaction coordinate is limited from below).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
cv_max
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
cv_max
\end_layout

\end_inset

 largest desired value of the reaction coordinate (required, unless the
 reaction coordinate is limited from above).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
resolution
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
resolution
\end_layout

\end_inset

 the 
\begin_inset Quotes eld
\end_inset

spatial
\begin_inset Quotes erd
\end_inset

 resolution for the reaction coordinate.
\end_layout

\begin_layout Standard
To access the biasing potential files created in the course of 
\family typewriter
FLOODING
\family default
 simulations, the 
\family typewriter
nfe-umbrella-slice
\family default
 utility is provided (it prints a short description of itself if invoked
 with 
\family typewriter
--help
\family default
 option).
\end_layout

\begin_layout Standard
The multiple-walker selection algorithm can improve the simulation by resampling
 between different walkers.
 The well-tempered ABMD can lead to a smoother convergence to the desired
 free energy.
 These two algorithm are implemented to SANDER and PMEMD from Amber16 onwards.
\end_layout

\begin_layout Standard
The multiple-walker selection algorithm currently works with 
\family typewriter
&abmd
\family default
 only.
 The algorithm should be used only within the multiple-walker scheme (
\shape italic
i.e.
\shape default
, when command-line 
\series bold
-rem
\series default
 flag is set to zero).
 The following entries are recognized regarding with the selection algorithm
 (selection algorithm can work with 
\family typewriter
FLOODING 
\family default
and
\family typewriter
 UMBRELLA
\family default
 mode): 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
selection_freq
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
selection_freq
\end_layout

\end_inset

 positive integer number that sets the frequency of the resampling algorithm
 (in MD steps).
 If 
\family typewriter
selection_freq
\family default
 is not specified, the selection algorithm will not be used.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
selection_constant
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
selection_constant
\end_layout

\end_inset

 positive real number that sets the parameter 
\shape italic
C
\shape default
.
 if 
\family typewriter
selection_freq
\family default
 is specified, specifying 
\family typewriter
selection_constant
\family default
 is required (no default value).
 Parameter 
\shape italic
C
\shape default
 is to determine how strong the selection mechanism is.
 If 
\shape italic
C
\shape default
 is too large, all the walkers will be replaced with the most dominant one.
 If 
\shape italic
C
\shape default
 is too small, there will be no killing/duplicating of walkers.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
selection_epsilon
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
selection_epsilon
\end_layout

\end_inset

 positive real number (typically less than unity) that sets the stopping
 criterion parameter ε .
 Parameter ε determines the threshold for stopping the selection algorithm.
 If 
\family typewriter
selection_epsilon
\family default
 is not specified, there will be no stop to the algorithm.
 If 
\family typewriter
selection_epsilon
\family default
 is equal or larger than one, the algorithm will be stopped after the first
 attempt.
 
\end_layout

\begin_layout Standard
The well-tempered flavor can be used within either 
\family typewriter
&abmd
\family default
 or 
\family typewriter
&bbmd
\family default
 namelist.
 There are two entries relevant to the well-tempered feature:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
wt_temperature
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
wt_temperature
\end_layout

\end_inset

 positive real number that sets the pseudo-temperature T'.
 If this flag is not specified, conventional ABMD will be used (
\shape italic
i.e.
\shape default
, T' 
\begin_inset Formula $\rightarrow$
\end_inset

 ∞ or β' 
\begin_inset Formula $\rightarrow$
\end_inset

 0).
 The smaller the T'; the smoother/slower the convergence.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
wt_umbrella_file
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
wt_umbrella_file
\end_layout

\end_inset

 the file name of true biasing potential after modification by 1 + ( T /T'
 ) in which T is the reference temperature of the system (temp0).
 
\end_layout

\begin_layout Standard
An example 
\family typewriter
MDIN
\family default
 file and 
\family typewriter
CV.IN
\family default
 file for the 
\family typewriter
&abmd
\family default
 flavor of 
\family typewriter
ABMD
\family default
 is shown in the Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:abmd"

\end_inset

.
 
\begin_inset Float figure
placement tbh!
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

title line
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

..., infe = 1
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

&abmd
\end_layout

\begin_layout Plain Layout

   mode = 'FLOODING'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   monitor_file = 'abmd.txt'
\end_layout

\begin_layout Plain Layout

   monitor_freq = 33
\end_layout

\begin_layout Plain Layout

   cv_file = 'cv.in'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   umbrella_file = 'umbrella.nc'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   timescale = 100.0 ! in ps
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   selection_freq = 10000
\end_layout

\begin_layout Plain Layout

   selection_constant = 0.001
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   wt_temperature = 10000.0
\end_layout

\begin_layout Plain Layout

   wt_umbrella_file = 'wt_umbrella.nc'
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cv_file
\end_layout

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

  cv_type = 'DISTANCE'
\end_layout

\begin_layout Plain Layout

  cv_ni = 2, cv_i = 5, 9
\end_layout

\begin_layout Plain Layout

  cv_min = -1.0, cv_max = 10.0 ! min is not needed for DISTANCE
\end_layout

\begin_layout Plain Layout

  resolution = 0.5 ! required for mode = FLOODING
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:abmd"

\end_inset

 An example 
\family typewriter
MDIN
\family default
 file and 
\family typewriter
CV.IN
\family default
 file for 
\family typewriter
ABMD
\family default
 (only the relevant part is presented in full).
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this example, the reaction coordinate is defined as the distance between
 the 5th and 9th atoms (more than one reaction coordinates might be requested
 by mere inclusion of additional 
\family typewriter
&colvar
\family default
 subsections).
 The 
\family typewriter
mode
\family default
 is set to 
\family typewriter
FLOODING
\family default
 thus enabling the adaptive biasing with flooding timescale 
\begin_inset Formula $\tau_{F}=100ps$
\end_inset

.
 The region of interest of the reaction coordinate is specified to be between
 -1 Å
\begin_inset space ~
\end_inset

and 10 Å and the resolution is set to 0.5 Å.
 The lower bound (-1 Å) could have been omitted for 
\family typewriter
DISTANCE
\family default
 variable: the default value of zero would be used in such case.
 The code will try to load the biasing potential from the 
\family typewriter
umbrella.nc
\family default
 file and use it as the value of 
\begin_inset Formula $U(t|\xi)$
\end_inset

 at the beginning of the run.
 The biasing potential built in the course of simulation will be saved to
 the same file (
\family typewriter
umbrella.nc
\family default
) every time the 
\family typewriter
RESTRT
\family default
 file is written.
 The selection algorithm is used with the frequency of selection defined
 as 10000 MD steps and selection constant defined as 0.001.
 The well-tempered algorithm is also used, with the pseudo-temperature defined
 as 10000 K in and the true biasing potential will be dumped as 
\family typewriter
wt_umbrella.nc
\family default
 file.
 The 
\family typewriter
nfe-umbrella-slice
\family default
 utility can then be used to access its content.
 An 
\family typewriter
MDIN
\family default
 file for the follow up biased run at equilibrium would look much like the
 one shown in the Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:abmd"

\end_inset

, but with 
\family typewriter
mode
\family default
 changed from 
\family typewriter
FLOODING
\family default
 to 
\family typewriter
UMBRELLA
\family default
.
\end_layout

\begin_layout Standard
Driven ABMD can be performed using &smd block (for the SMD part of the algorithm
) along with &abmd block (for the ABMD part of the algorithm).
 There is no additional flag for the &smd block relevant to the algorithm;
 however, there are two additional flags to ABMD relevant to the “driven”
 feature.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
driven_weight
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
driven_weight
\end_layout

\end_inset

 string that sets the weighting scheme.
 The default option (i.e., not using the flag) is NONE which indicates no
 reweighting is used (NOT RECOMMENDED if SMD is performed along ABMD).
 Other options include CONSTANT and PULLING for constant and pulling reweighting
 protocols.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
driven_cutoff
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
driven_cutoff
\end_layout

\end_inset

 positive real number that sets a cutoff for work for applying the reweighting
 algorithm (default: 0.0).
 If the work (accumulated or transferred depending on the scheme) at any
 given time is lower than the cutoff, no reweighting is done at that particular
 time.
 If the cutoff is too small, it may result in instability of the algorithm.
\end_layout

\begin_layout Standard
For both SANDER and PMEMD since Amber18, the 
\family typewriter
&abmd
\family default
 code works correctly with Amber replica-exchange  similar with 
\family typewriter
&pmd
\family default
 (that is, for 
\family typewriter
-rem
\family default
 flag set to different values).
 If
\family typewriter
-rem
\family default
 is set to 3, ABMD with replica-exchange is carried out.
 In such case  different replicas can have different temperatures, collective
 variables and even different 
\family typewriter
mode
\family default
.The monitor and umbrella files are 
\family typewriter
MDIN
\family default
-bound.
 If number of 
\family typewriter
sander
\family default
 groups exceeds one (the flag 
\family typewriter
-ng
\family default
 is greater than one) and 
\family typewriter
-rem
\family default
 flag is set to zero, the code runs 
\shape italic
multiple walkers
\shape default
 
\family typewriter
ABMD
\family default
.
 In both cases the number and type(s) of variable(s) must be the same across
 all replicas.
\end_layout

\begin_layout Standard
Finally, the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
nfe_bbmd
\end_layout

\end_inset


\family typewriter
&bbmd
\family default
 flavor allows one to run replica-exchange (
\family typewriter
AB
\family default
)
\family typewriter
MD
\family default
 with different reaction coordinates and different modes (
\family typewriter
ANALYSIS
\family default
, 
\family typewriter
UMBRELLA
\family default
 or 
\family typewriter
FLOODING
\family default
) in different replicas (along with different temperatures, if desired).
 This module is outdated since 
\family typewriter
&abmd
\family default
 has been compatible with 
\family typewriter
-rem
\family default
 equals 3.
 The only advantage of 
\family typewriter
&bbmd
\family default
 is that the number of replicas can be odd numbers if desired by runs, while
 this cannot be achieved in any 
\family typewriter
-rem
\family default
 types.
 To applying 
\family typewriter
&bbmd
\family default
 module, the 
\family typewriter
-rem
\family default
 flag must be set to zero and the 
\family typewriter
&bbmd
\family default
 sections must be present in all 
\family typewriter
MDIN
\family default
 files.
 The 
\family typewriter
MDIN
\family default
 file for the replica of rank zero (first line in the group file) is expected
 to contain additional information as compared to 
\family typewriter
&abmd
\family default
 case (an example of such 
\family typewriter
MDIN
\family default
 file for replica zero is shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:bbmd"

\end_inset

).
 The 
\family typewriter
MDIN
\family default
 files for all other replicas except zero do not need any additional information
, and therefore take the same form as in the 
\family typewriter
&abmd
\family default
 flavor (except that the namelist is changed from 
\family typewriter
&abmd
\family default
 to 
\family typewriter
&bbmd
\family default
, thus activating a slightly different code path).
 Each 
\family typewriter
MDIN
\family default
 file may define its own reaction coordinates, have different 
\family typewriter
mode
\family default
 and temperature if desired.
 
\begin_inset Float figure
placement tbh!
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

title line
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

..., infe = 1
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

&bbmd
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   ! 0th replica only
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   exchange_freq = 100 ! try for exchange every 100 steps
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   exchange_log_file = 'bbmd.log'
\end_layout

\begin_layout Plain Layout

   exchange_log_freq = 25
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   mt19937_seed = 123455 ! random generator seed
\end_layout

\begin_layout Plain Layout

   mt19937_file = 'mt19937.nc' ! file to store/load the PRG
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   ! not specific for 0th replica
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

   mode = 'ANALYSIS'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   monitorfile = 'bbmd.01.txt' ! it is wise to have different
\end_layout

\begin_layout Plain Layout

                               ! names in different replicas
\end_layout

\begin_layout Plain Layout

   monitor_freq = 123
\end_layout

\begin_layout Plain Layout

   cv_file = 'cv.in'
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cv_file
\end_layout

\begin_layout Plain Layout

&colvar
\end_layout

\begin_layout Plain Layout

  cv_type = 'DISTANCE'
\end_layout

\begin_layout Plain Layout

  cv_ni = 2, cv_i = 5, 9
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:bbmd"

\end_inset

 An example 
\family typewriter
MDIN
\family default
 file and 
\family typewriter
CV.IN
\family default
 file for 
\family typewriter
&bbmd
\family default
 flavor of 
\family typewriter
ABMD
\family default
 (only the relevant part is presented in full).
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Within the first replica 
\family typewriter
&bbmd
\family default
 namelist the following additional entries are recognized: 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
exchange_freq
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
exchange_freq
\end_layout

\end_inset

 number of 
\family typewriter
MD
\family default
 steps between the exchange attempts.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
exchange_log_file
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
exchange_log_file
\end_layout

\end_inset

 the name of the file to which exchange statistics is to be reported.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
exchange_log_freq
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
exchange_log_freq
\end_layout

\end_inset

 frequency of 
\family typewriter
exchange_log_file
\family default
 updates.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
mt19937_seed
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
mt19937_seed
\end_layout

\end_inset

 seed for the random generator (Mersenne twister
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Matsumoto1998"
literal "true"

\end_inset

).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
mt19937_file
\series default

\begin_inset Index idx
status open

\begin_layout Plain Layout
mt19937_file 
\end_layout

\end_inset

 the name of the file to which the state of the Mersenne twister is dumped
 periodically (for restarts).
 
\end_layout

\begin_layout Standard
The 
\family typewriter
MDOUT
\family default
, 
\family typewriter
MDCRD
\family default
, 
\family typewriter
RESTRT
\family default
, 
\family typewriter
umbrella_file
\family default
 and 
\family typewriter
monitor_file
\family default
 files are 
\family typewriter
MDIN
\family default
-bound in course of the 
\family typewriter
bbmd
\family default
-enabled run.
 An example that uses this kind of replica exchange is presented in Ref.
\begin_inset CommandInset citation
LatexCommand citealp
key "Babin_V_10"
literal "true"

\end_inset

.
\end_layout

\begin_layout Subsection
Swarms-of-Trajectories String Method
\end_layout

\begin_layout Standard
ABMD is a robust method for calculating free energy landscapes as a function
 of a small number of collective variables.
 Since the required computer time grows enormously with the number of collective
 variables, ABMD is best for exploring one- or two-dimensional phase spaces.
 However, rather than calculating full n-dimensional free energy maps, it
 is often fruitful to focus on the so-called Minimum Free Energy Path (MFEP)
 which the system is likely to take when transitioning between two minima.
 Calculating a MFEP in a complicated phase space is often difficult, and
 so-called ''string methods"
\begin_inset CommandInset citation
LatexCommand citep
key "Maragliano_L_06"
literal "true"

\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Pan_A_08"
literal "true"

\end_inset

 represent one of the best approaches for finding the MFEP.
 Since sampling in string methods is essentially limited to regions around
 the MFEP, the cost of the method scales linearly with the length of the
 string or path, but only weakly on the number of collective variables.
 This results in considerable computational savings since the full free
 energy landscape is not calculated.
\end_layout

\begin_layout Standard
The swarms-of-trajectories string method (STSM)
\begin_inset CommandInset citation
LatexCommand citep
key "Pan_A_08"
literal "true"

\end_inset

 
\begin_inset Index idx
status open

\begin_layout Plain Layout
nfe_stsm
\end_layout

\end_inset

is one of the most popular versions of the string method and has been implemente
d here by Dr.
 Moradi (moradi@uark.edu).
 The module is available in both SANDER and PMEMD from Amber18 onwards.
 It is a path-finding algorithm that refines a putative transition pathway
 iteratively until the path is deemed to have been converged.
 The string is defined by a number of nodes or images parameterized in a
 high-dimensional space of collective variables, whose position is updated
 iteratively.
 The center of each image is first used as a restraining center to generate
 representative conformations at the current center before allowing of a
 small change in this center for the next iteration.
 The change in the center of each image is estimated by averaging over the
 drifts of a swarm of short unbiased trajectories all starting at the current
 image position (generated using the constrained simulations.
 Thus, each iteration consists of a series of restrained and free simulations.
 In the current serial version of the code, these simulations are performed
 independently.
 In parallel versions -- which are more efficient -- a very large number
 of replicas is required which are run in parallel; this method is particularly
 efficient on large supercomputers.
\end_layout

\begin_layout Standard
To invoke the swarms-of-trajectories string method, the 
\family typewriter
&stsm
\family default
 must be invoked in the 
\family typewriter
MDIN
\family default
 file.
 For a string consisting of 
\begin_inset Formula $N_{s}$
\end_inset

 nodes each requiring 
\begin_inset Formula $M$
\end_inset

 copies 
\begin_inset Formula $N_{s}\times M$
\end_inset

 replicas will be required.
 The parallel implemention of the STSM method is based on iterative restrained
 and free MD simulations followed by a reparametrization of the image centers
 defined in a multidimensional collective variable space 
\begin_inset Formula $\xi$
\end_inset

.
 For the 
\begin_inset Formula $i^{th}$
\end_inset

 iteration, first 
\begin_inset Formula $M$
\end_inset

 copies of the 
\begin_inset Formula $n^{th}$
\end_inset

 image are generated around the old center 
\begin_inset Formula $\xi_{n}^{i-1}$
\end_inset

 by MD equilibration lasting 
\begin_inset Formula $\tau_{E}$
\end_inset

 timesteps.
 The generated 
\begin_inset Formula $M$
\end_inset

 copies of the 
\begin_inset Formula $n^{th}$
\end_inset

 image are expected to be close to 
\begin_inset Formula $\xi_{n}^{i-1}$
\end_inset

 for time 
\begin_inset Formula $\tau_{E}$
\end_inset

, assuming that the invoked harmonic constant 
\begin_inset Formula $k$
\end_inset

 for the restraining potential is large enough.
 The parameters 
\begin_inset Formula $\tau_{E}$
\end_inset

 and 
\begin_inset Formula $k$
\end_inset

 thus need to be appropriately chosen in order to ensure that all copies
 of each image will be close to the image center.
 The restraint is then released, and each copy (swarm) is allowed to drift
 for 
\begin_inset Formula $\tau_{R}$
\end_inset

 timesteps.
 The newly shifted center 
\begin_inset Formula $\xi_{n}^{i}$
\end_inset

 for the 
\begin_inset Formula $n^{th}$
\end_inset

 image is then determined by averaging over all drifted copies 
\begin_inset Formula $\xi_{n,m}^{t}$
\end_inset

 at time 
\begin_inset Formula $t=\tau_{E}+\tau_{R}$
\end_inset

.
 The resulting string of images is then smoothed using a linear interpolation
 protocol.
 A smoothing parameter 
\begin_inset Formula $\epsilon$
\end_inset

 with 
\begin_inset Formula $0\leq\epsilon\leq1$
\end_inset

 determines the smoothness of the curve; it is recommended that 
\begin_inset Formula $\epsilon$
\end_inset

 be of the order of 
\begin_inset Formula $1/(N_{s}-1)$
\end_inset

.
 The last setep is a reparameterization, which gain follows a linear interpolati
on protocol in order to generate 
\begin_inset Formula $N_{s}$
\end_inset

 equidistant centers along the string.
 The two key parameters of the method are 
\begin_inset Formula $M$
\end_inset

 and 
\begin_inset Formula $\tau_{R}$
\end_inset

.
 Generally, the large the 
\begin_inset Formula $M$
\end_inset

 and the shorter 
\begin_inset Formula $\tau_{R}$
\end_inset

, the smoother (but slower) the evolution of the MFEP will be.
 These variables must be optimized empirically, but typically 10 - 30 copies
 and 5 - 20 ps are reasonable values.
 It is often advantageous to set 
\begin_inset Formula $\tau_{E}$
\end_inset

 = 
\begin_inset Formula $\tau_{R}$
\end_inset

.
\end_layout

\begin_layout Standard
An improved sequential repeat version of the algorithm has also been implemented
, which avoids the large number of copies and does not require a large number
 of processors to run.
 Here a new variable 
\begin_inset Formula $N_{R}$
\end_inset

 is introduced, as the number of repeat runs for each replica.
 Now for each copy, it will run around the old center 
\begin_inset Formula $\xi_{n}^{i-1}$
\end_inset

 for 
\begin_inset Formula $N_{R}$
\end_inset

 times sequentially.
 And each repeat run can be equally considered as a parallel run of a new
 copy around the old center.
 Namely, the new shifted center will be determined by averaging on 
\begin_inset Formula $N_{R}\times M$
\end_inset

 copies.
 So the number of processors needed will be reduced to 
\begin_inset Formula $1/N_{R}$
\end_inset

, while the running time will be multipled by 
\begin_inset Formula $N_{R}$
\end_inset

.
\end_layout

\begin_layout Standard
The following is recognized within the &stsm namelist:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
image
\begin_inset Index idx
status open

\begin_layout Plain Layout
image
\end_layout

\end_inset


\series default
 positive integer number that sets the image id (between 1 and N).
 Default is 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
repeats
\begin_inset Index idx
status open

\begin_layout Plain Layout
repeats
\end_layout

\end_inset


\series default
 positive integer number that sets the number of repeat runs, should be
 the same for each image and each copy.
 Equal to parallel implementation when not set.
 Default is 1.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
equilibration
\begin_inset Index idx
status open

\begin_layout Plain Layout
equilibration
\end_layout

\end_inset


\series default
 non-negative integer number that sets the number of MD steps specified
 for biased equlibration (restraining) at each iteration.
 Default is 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
release
\begin_inset Index idx
status open

\begin_layout Plain Layout
release
\end_layout

\end_inset


\series default
 Number of MD steps specified for the release (drift) at each iteration.
 Note: the total number of iterations is determined by the total simulation
 time (
\family typewriter
nstlim
\family default
 flag in 
\family typewriter
mdin
\family default
 file) divided by total time for each iteration given by 
\family typewriter
equilibration
\family default
+
\family typewriter
release
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
smoothing
\begin_inset Index idx
status open

\begin_layout Plain Layout
smoothing
\end_layout

\end_inset


\series default
 positive number that sets the smoothing parameter for reparametrization
 (between 0 and 1).
 Smoothing parameter should be, preferably, on the order of 
\begin_inset Formula $1/(N_{s}-1)$
\end_inset

.
 If this flag is not used, no smoothing will be performed.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
report_centers
\begin_inset Index idx
status open

\begin_layout Plain Layout
report_centers
\end_layout

\end_inset


\series default
 a string that determines if drifted and/or smoothed and/or reparametrized
 centers will be reported.
 The default value is 
\family typewriter
NONE
\family default
 and other available options include 
\family typewriter
ALL
\family default
,
\family typewriter
DRIFT
\family default
,
\family typewriter
SMOOTHED
\family default
, 
\family typewriter
REPARAMETRIZED
\family default
, 
\family typewriter
NO_DRIFT
\family default
, 
\family typewriter
NO_SMOOTHED
\family default
, 
\family typewriter
NO_REPARAMETRIZED
\family default
.
\end_layout

\begin_layout Standard

\family typewriter
The output_file
\family default
, 
\family typewriter
output_freq
\family default
 and 
\family typewriter
cv_file
\family default
 entries are recognized just as 
\family typewriter
&smd
\family default
 and 
\family typewriter
&pmd
\family default
, the information of reaction coordinates will be read from 
\family typewriter
cv_file
\family default
.
 The number of collective variables can not exceed five.
 (here be attention that the 
\family typewriter
anchor_postion
\family default
 and 
\family typewriter
anchor_strength
\family default
 will be defined using the traditional harmonical potential, different with
 
\family typewriter
&pmd
\family default
!).
 An example of 
\family typewriter
MDIN
\family default
 file and 
\family typewriter
CV.IN
\family default
 file for STSM in parallel case is shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:stsm1"

\end_inset

.
 Here we run 8 images along the path, with 
\family typewriter
I
\family default
 defining the image ID.
 We run 980 MD steps for equlibration and 20 MD steps release at each iteration,
 so there are totally 1000 MD steps for each iteration.
 With nstlim set to 10000, 10 iterations will be carried out.
 The smoothing parameter is set to 0.1 and all the centers will be reported.
 For each image, 16 copies will be run in parallel, with 
\family typewriter
J
\family default
 defining the copy ID.
 The evolution of reaction coordinate will recorded in the file 
\family typewriter
stsm.00I.J.txt
\family default
.
 For this run, at least 
\begin_inset Formula $128(8\times16)$
\end_inset

 processors are needed.
 Another example of 
\family typewriter
MDIN
\family default
 file of equivalent sampling level in sequential case is shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:stsm2"

\end_inset

.
 Here we still have 8 images to run.
 We set the number of repeats to be 16, namely 16 repeat runs for each image
 to get the new drifted center.
 Therefore, 16000 MD steps are needed for one iteration, and so we set nstlim
 to 160000 to complete 10 iterations.
 For this run, 8 processors are needed at least.
 
\end_layout

\begin_layout Standard
Part of sample 
\family typewriter
MDOUT
\family default
 file is shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "code:stsm3"

\end_inset

.
 The restoring restraint part will be only in sequential run, since the
 restraint needs to be restored after each repeat.
 The values of reaction coordinates before reporting centers are the averaged
 value over repeats for this copy and the instantaneous value.
 All the centers will be reported only in the 
\family typewriter
MDOUT
\family default
 file of first copy of first image.
 The drifted centers are the averaged value over copies, and also the smoothed
 ans reparametrized centers can be reported.
 Always the reparametrized centers will be extracted to draw the MFEP in
 the phase space.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement tbh!
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

title line
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

..., nstlim = 10000
\end_layout

\begin_layout Plain Layout

..., infe = 1
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

&stsm      ! parallel case, I from 1 to 8, J from 1 to 16
\end_layout

\begin_layout Plain Layout

  image = I 
\end_layout

\begin_layout Plain Layout

  equilibration = 980   
\end_layout

\begin_layout Plain Layout

  release = 20   
\end_layout

\begin_layout Plain Layout

  smoothing = 0.1   
\end_layout

\begin_layout Plain Layout

  report_centers = 'ALL'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  output_file = 'stsm.00I.J.txt'  
\end_layout

\begin_layout Plain Layout

  output_freq = 10   
\end_layout

\begin_layout Plain Layout

  cv_file = 'cv.I'
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cv_file
\end_layout

\begin_layout Plain Layout

&colvar ! phi
\end_layout

\begin_layout Plain Layout

   cv_type = 'TORSION'
\end_layout

\begin_layout Plain Layout

   cv_ni = 4, cv_i = 5, 7, 9, 15
\end_layout

\begin_layout Plain Layout

   anchor_position = -3.00
\end_layout

\begin_layout Plain Layout

   anchor_strength = 20.0
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

&colvar ! psi
\end_layout

\begin_layout Plain Layout

   cv_type = 'TORSION'
\end_layout

\begin_layout Plain Layout

   cv_ni = 4, cv_i = 7, 9, 15, 17
\end_layout

\begin_layout Plain Layout

   anchor_position = 3.00
\end_layout

\begin_layout Plain Layout

   anchor_strength = 20.0
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:stsm1"

\end_inset

 An example 
\family typewriter
MDIN
\family default
 file and 
\family typewriter
CV.IN
\family default
 file for 
\family typewriter
&stsm
\family default
 in parallel case (only the relevant part is presented in full)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement tbh!
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

title line
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

..., nstlim = 160000
\end_layout

\begin_layout Plain Layout

..., infe = 1
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

&stsm      ! sequential case, I from 1 to 8
\end_layout

\begin_layout Plain Layout

  image = I
\end_layout

\begin_layout Plain Layout

  repeats = 16
\end_layout

\begin_layout Plain Layout

  equilibration = 980   
\end_layout

\begin_layout Plain Layout

  release = 20   
\end_layout

\begin_layout Plain Layout

  smoothing = 0.1   
\end_layout

\begin_layout Plain Layout

  report_centers = 'ALL'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  output_file = 'stsm.00I.txt'   
\end_layout

\begin_layout Plain Layout

  output_freq = 10   
\end_layout

\begin_layout Plain Layout

  cv_file = 'cv.I'
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:stsm2"

\end_inset

 An example 
\family typewriter
MDIN
\family default
 file for 
\family typewriter
&stsm
\family default
 in sequential case (only the relevant part is presented in full) 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement tbh!
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NFE : #   restoring restraint:  
\end_layout

\begin_layout Plain Layout

NFE : #   << colvar(1) = -3.000000 >>  
\end_layout

\begin_layout Plain Layout

NFE : #   << colvar(2) = 3.000000 >> 
\end_layout

\begin_layout Plain Layout

NFE : #   equilibration begins...
    
\end_layout

\begin_layout Plain Layout

......
\end_layout

\begin_layout Plain Layout

NFE : #   << colvar(1) = -2.500688 -2.586429 >>  
\end_layout

\begin_layout Plain Layout

NFE : #   << colvar(2) = 2.782725 3.082205 >>  
\end_layout

\begin_layout Plain Layout

NFE : #  drifted center of image 1 :            8      -2.54041796      
 2.70644813  
\end_layout

\begin_layout Plain Layout

NFE : #  drifted center of image 2 :            8      -2.54963153      
 2.71715138  
\end_layout

\begin_layout Plain Layout

......
\end_layout

\begin_layout Plain Layout

NFE : #  drifted center of image 8 :            8       1.02191205      
 0.16837852  
\end_layout

\begin_layout Plain Layout

NFE : #  smoothed center of image 1 :            8      -2.54041796     
  2.70644813  
\end_layout

\begin_layout Plain Layout

NFE : #  smoothed center of image 2 :            8      -2.60416697     
  2.75924174  
\end_layout

\begin_layout Plain Layout

......
\end_layout

\begin_layout Plain Layout

NFE : #  smoothed center of image 8 :            8       1.02191205     
  0.16837852  
\end_layout

\begin_layout Plain Layout

NFE : #  reparametrized center of image 1 :            8      -2.54041796
       2.70644813  
\end_layout

\begin_layout Plain Layout

NFE : #  reparametrized center of image 2 :            8      -2.06027108
       2.47738701  
\end_layout

\begin_layout Plain Layout

......
\end_layout

\begin_layout Plain Layout

NFE : #  reparametrized center of image 8 :            8       1.02191205
       0.16837852
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "code:stsm3"

\end_inset

 An example of 
\family typewriter
MDOUT
\family default
 file for STSM run (only part is presented, and some centers are also omitted)
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Post-processing of biasing potential 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Post-processing-of-biasing"

\end_inset


\end_layout

\begin_layout Standard
When you get the biasing potential (
\family typewriter
*.nc
\family default
 file), you can always use the 
\family typewriter
nfe-umbrella-slice
\family default
 utility to access its content and get a friendly-written ASCII file from
 which one can obtain the free energy map.
 The output is the free energy value, which is the opposite of the biasing
 potential ( 
\begin_inset Formula $f=-U$
\end_inset

 (
\begin_inset Formula $units~kcal/mol$
\end_inset

)).
 The 
\family typewriter
nfe-umbrella-slice
\family default
 utility has been included in AmberTools.
\end_layout

\begin_layout Description
\paragraph_spacing onehalf
Usage: 
\family typewriter
nfe-umbrella-slice [options] bias_potential.nc
\end_layout

\begin_layout Description
\paragraph_spacing onehalf
Options:
\end_layout

\begin_layout Description

\family typewriter
-h,--help
\family default
 Print out a usage summary
\end_layout

\begin_layout Description

\family typewriter
-p,--pretend
\family default
 Only print out the basic properties of source without biasing potential
 data (off by default)
\end_layout

\begin_layout Description

\family typewriter
-g,--gradient
\family default
 Print out the gradients (off by default)
\end_layout

\begin_layout Description

\family typewriter
-r,--reset
\family default
 Set the value of minimum to zero (off by default)
\end_layout

\begin_layout Description

\family typewriter
-t,--translate
\family default
 Translate the numerical value of biasing potential by a real number (0
 by default)
\end_layout

\begin_layout Description

\family typewriter
-d,--dimensions
\family default
 Set the way of slice in different dimensions.
 The format is 
\begin_inset Quotes eld
\end_inset

D1:D2:...:Dn
\begin_inset Quotes erd
\end_inset

, where n is the number of dimensions.
 Each D can only be set with one number or three numbers separated by commas.
 If only one number is set, the variable will be fixed at that value.
 If three numbers are set, the first two define the boundary of the slice
 and the last one defines the number of points.
 
\end_layout

\begin_layout Description
Example:
\end_layout

\begin_layout Itemize

\family typewriter
nfe-umbrella-slice -r -d 
\begin_inset Quotes eld
\end_inset

-5.0,5.0,50
\begin_inset Quotes erd
\end_inset

 1d-bias.nc > FE.dat
\end_layout

\begin_layout Standard
This processes the 1-dimensional biasing potential file 
\family typewriter
1d-bias.nc
\family default
 and prints out the results to 
\family typewriter
FE.dat
\family default
.
 The minimum of free energy will be set to zero.
  The variable will be taken from -5.0 to 5.0 using 50 points.
\end_layout

\begin_layout Itemize

\family typewriter
nfe-umbrella-slice -g -t 50.0 -d 
\begin_inset Quotes eld
\end_inset

1.0:-2.0,2.0,20
\begin_inset Quotes erd
\end_inset

 2d-bias.nc > FE.dat
\end_layout

\begin_layout Standard
This processes the 2-dimensional biasing potential file 
\family typewriter
2d-bias.nc
\family default
 and prints out the results to 
\family typewriter
FE.dat
\family default
.
 All the free energy will be incremented by a constant 50.0.
 The gradients in both dimensions will be printed out.
 For the first dimension, the variable will be fixed at 1.0; for the second
 dimension, the variable will be taken from -2.0 to 2.0 using 20 points.
 
\end_layout

\begin_layout Itemize

\family typewriter
nfe-umbrella-slice wt_umbrella.nc > wt_FE.dat
\end_layout

\begin_layout Standard
This processes the biasing potential after WT-ABMD and prints out the results
 to 
\family typewriter
wt_FE.dat
\family default
.
 The default dimensional information is obtained and used by the program
 from the biasing potential file.
\end_layout

\begin_layout Chapter

\series bold
NMR refinement
\begin_inset CommandInset label
LatexCommand label
name "chap:NMR"

\end_inset


\end_layout

\begin_layout Standard
We find the 
\shape italic
sander
\shape default
 module to be a flexible way of incorporating a variety of restraints into
 a optimization procedure that includes energy minimization and dynamical
 simulated annealing.
 The "standard" sorts of NMR restraints, derived from NOE and J-coupling
 data, can be entered in a way very similar to that of programs like DISGEO,
 DIANA or X-PLOR; an aliasing syntax allows for definitions of pseudo-atoms,
 connections with peak numbers in spectra, and the use of "ambiguous" constraint
s from incompletely-assigned spectra.
 More "advanced" features include the use of time-averaged constraints,
 use of multiple copies (LES) in conjunction with NMR refinement, and direct
 refinement against NOESY intensities, paramagnetic and diamagnetic chemical
 shifts, or residual dipolar couplings.
 In addition, a key strength of the program is its ability to carry out
 the refinements (usually near the final stages) using an explicit-solvent
 representation that incorporates force fields and simulation protocols
 that are known to give pretty accurate results in many cases for unconstrained
 simulations; this ability should improve predictions in regions of low
 constraint density and should help reduce the number of places where the
 force field and the NMR constraints are in "competition" with one another.
\end_layout

\begin_layout Standard
Since there is no generally-accepted "recipe" for obtaining solution structures
 from NMR data, the comments below are intended to provide a guide to some
 commonly-used procedures.
 Generally speaking, the programs that need to be run to obtain NMR structures
 can be divided into three parts:
\end_layout

\begin_layout Enumerate

\shape italic
front-end
\shape default
 modules, which interact with NMR databases that provide information about
 assignments, chemical shifts, coupling constants, NOESY intensities, and
 so on.
 We have tried to make the general format of the input straightforward enough
 so that it could be interfaced to a variety of programs.
 We generally use the FELIX and NMRView codes, but the principles should
 be similar for other ways of keeping track of a database of NMR spectral
 information.
 As the flow-chart in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:nmr-to-rst"

\end_inset

 indicates, there are only a few files that need to be created for NMR restraint
s; these are indicated by the solid rectangles.
 The primary distance and torsion angle files have a fairly simple format
 that is largely compatible with the DIANA programs; if one wishes to use
 information from ambiguous or overlapped peaks, there is an additional
 "MAP" file that makes a translation from peak identifiers to ambiguous
 (or partial) assignments.
 Finally, there are some specialized (but still pretty straightforward)
 file formats for chemical shift or residual dipolar coupling restraints.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
There are a variety of tools, besides the ones described below, that can
 assist in preparing input for structure refinement in Amber.
\end_layout

\begin_layout Itemize
The SANE (Structure Assisted NOE Evaluation) package, 
\emph on
https://ambermd.org/sane.zip
\emph default
, is widely used at The Scripps Research Institute.
\begin_inset CommandInset citation
LatexCommand cite
key "Duggan01"
literal "true"

\end_inset

 
\end_layout

\begin_layout Itemize
If you use Bruce Johnson's NmrView package, you might also want to look
 at the additions to that: 
\emph on
http://garbanzo.scripps.edu/nmrgrp/wisdom/pipe/tips_scripts.html
\emph default
.
 In particular, the 
\shape italic
xpkTOupl
\shape default
 and 
\shape italic
starTOupl
\shape default
 scripts there convert NmrView peak lists into the "7-column" needed for
 input to makeDIST_RST.
\end_layout

\begin_layout Itemize
Users of the MARDIGRAS programs from UCSF can use the 
\shape italic
mardi2amber
\shape default
 program to do conversion to Amber format: 
\emph on
http://picasso.ucsf.edu/mardihome.html
\end_layout

\end_deeper
\begin_layout Enumerate

\shape italic
restrained molecular dynamics,
\shape default
 which is at the heart of the conformational searching procedures.
 This is the part that 
\shape italic
sander
\shape default
 itself handles.
\end_layout

\begin_layout Enumerate

\shape italic
back-end
\shape default
 routines that do things like compare families of structures, generate statistic
s, simulate spectra, and the like.
 For many purposes, such as visualization, or the running of procheck-NMR,
 the "interface" to such programs is just the set of PDB files that contain
 the family of structures to be analyzed.
 These general-purpose structure analysis programs are available in many
 locations and are not discussed here.
 The principal 
\shape italic
sander
\shape default
-specific tool is 
\shape italic
sviol
\shape default
, which prepares tables and statistics of energies, restraint violations,
 and the like.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:disang"

\end_inset


\series bold
Distance, angle and torsional restraints
\end_layout

\begin_layout Standard
Distance, angle, and other restraints are read from the DISANG file if 
\shape italic
nmropt
\shape default
 
\begin_inset Formula $>$
\end_inset

 0.
 Namelist rst ("&rst") contains the following variables; it is read repeatedly
 until a namelist &rst statement is found with IAT(1)=0, or until reaching
 the end of the DISANG file.
\end_layout

\begin_layout Standard
[In many cases, the user will not prepare this section of the input by hand,
 but will use the auxiliary programs 
\shape italic
makeDIST_RST, makeANG_RST
\shape default
 and 
\shape italic
makeCHIR_RST
\shape default
 to prepare input from simpler files.
 See also the programs 
\emph on
cyanarest_to_amberRST
\emph default
 and 
\emph on
nef_to_RST
\emph default
 if you have restraints in Cyana or NEF (NMR Exchange Format) formats.]
\end_layout

\begin_layout Subsection

\series bold
Variables in the
\series default
 &rst 
\series bold
namelist:
\series default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
iat(1)
\begin_inset Formula $\to$
\end_inset

iat
\begin_inset Index idx
status open

\begin_layout Plain Layout
iat
\end_layout

\end_inset

(8) 
\end_layout

\begin_layout Itemize

\shape italic
If IRESID = 0 (normal operation):
\shape default
 The atoms defining the restraint.
 Type of restraint is determined (in order) by:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
If IAT(3) = 0, this is a distance restraint.
 
\end_layout

\begin_layout Enumerate
If IAT(4) = 0, this is an angle restraint.
\end_layout

\begin_layout Enumerate
If IAT(5) = 0, this is a torsional (or J-coupling, if desired) restraint
 or a genereralized distance restraint of 4 atoms, a type of restraint new
 as of Amber 10 (
\shape italic
sander
\shape default
 only, see below).
 
\end_layout

\begin_layout Enumerate
If IAT(6) = 0, this is a plane-point angle restraint, a second restraint
 new as of Amber 10 (
\shape italic
sander
\shape default
 only).
 The angle is measured between the normal of a plane defined by IAT(1)..IAT(4)
 and the vector from the center of mass of atoms IAT(1)..IAT(4) to the position
 of IAT(5).
 The normal is defined by (r1 - r2) 
\begin_inset Formula $\times$
\end_inset

 (r3 - r4), where rn is the position of IAT(n).
\end_layout

\begin_layout Enumerate
If IAT(7) = 0, this is a generalized distance restraint of 6 atoms (see
 below).
\end_layout

\begin_layout Enumerate
Otherwise, if IAT(1)..IAT(8) are all nonzero, this is a plane- plane angle
 restraint, a third new restraint type as of Amber 10 (
\shape italic
sander
\shape default
 only, or a generalized distance restraint of 8 atoms (see below).
 For the plane-plane restraint, the angle is measured between the two normals
 of the two planes, which are defined by (r1 - r2) 
\begin_inset Formula $\times$
\end_inset

 (r3 - r4) and (r5 - r6) 
\begin_inset Formula $\times$
\end_inset

 (r7 - r8).
 In the case of either planar restraint, the plane may be defined using
 three atoms instead of four simply by using one atom twice.
 
\end_layout

\begin_layout Standard
If any of IAT(n) are 
\begin_inset Formula $<$
\end_inset

 0, then a corresponding group of atoms is defined below, and the coordinate-
 averaged position of this group will be used in place of atom IAT(n).
 A new feature as of Amber 10, atom groups may be used not only in distance
 restraints, but also in angle, torsion, the new plane restraints, or the
 new generalized restraints.
 If this is a distance restraint, and IAT1 
\begin_inset Formula $<$
\end_inset

0, then a group of atoms is defined below, and the coordinate-averaged position
 of this group will be used in place of the coordinates of atom 1 [IAT(1)].
 Similarly, if IAT(2) 
\begin_inset Formula $<$
\end_inset

 0, a group of atoms will be defined below whose coordinate-averaged position
 will be used in place of the coordinates for atom 2 [IAT(2)].
\end_layout

\end_deeper
\begin_layout Itemize

\shape italic
If IRESID=1:
\shape default
 IAT(1)..IAT(8) point to the *residues* containing the atoms comprising the
 internal.
 Residue numbers are the absolute in the entire system.
 In this case, the variables ATNAM(1)..ATNAM(8) must be specified and give
 the character names of the atoms within the respective residues.
 If any of IAT(n) are less than zero, then group input will still be read
 in place of the corresponding atom, as described below.
 
\end_layout

\begin_layout Itemize

\shape italic
Defaults for IAT(1)
\begin_inset Formula $\to$
\end_inset

IAT(8) are 0.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
rstwt(1)
\begin_inset Formula $\to$
\end_inset

rstwt(4) 
\begin_inset Index idx
status open

\begin_layout Plain Layout
rstwt
\end_layout

\end_inset

 New as of Amber 10 (
\shape italic
sander
\shape default
 only), users may now define a single restraint that is a function of multiple
 distance restraints, called a "generalized distance coordinate" restraint.
 The energy of such a restraint has the following form:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $U=k(w_{\text{1}}|\mathbf{r_{\text{1}}-r_{\text{2}}|}+w_{\text{2}}|\mathbf{r_{\text{3}}-r_{\text{4}}|}+w_{\text{3}}|\mathbf{r_{\text{5}}-r_{\text{6}}|}+w_{\text{4}}|\mathbf{r_{\text{7}}-r_{\text{8}}|}-r_{\text{0}})^{\text{2}}$
\end_inset


\end_layout

\begin_layout Standard
\noindent
where the weights 
\begin_inset Formula $w_{\text{n}}$
\end_inset

are given in rstwt(1)..rstwt(4) and the positions 
\begin_inset Formula $\mathbf{r_{\text{n}}}$
\end_inset

are the positions of the atoms in iat(1)..iat(8).
\end_layout

\begin_layout Standard
Generalized distance coordinate restraints must be defined with either 4,
 6, or 8 atoms and 2, 3, or 4 corresponding nonzero weights in rstwt(1)..rstwt(4).
 Weights may be any positive or negative real number.
 
\end_layout

\begin_layout Standard
If all the weights in rstwt(1)..rstwt(4) are zero and four atoms are given
 in iat(1)..iat(4) for the restraint, the restraint is a torsional or J-coupling
 restraint.
 If eight atoms are given in iat(1)..iat(8) and all weights are zero, the
 restraint is a plane-plane angle restraint.
 However, if the weights are nonzero, the restraint will be a generalized
 distance coordinate restraint.
\end_layout

\begin_layout Standard

\shape italic
Default for rstwt(1)..rstwt(4) is 0.0
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
restraint
\begin_inset Index idx
status open

\begin_layout Plain Layout
restraint
\end_layout

\end_inset

 New as of Amber 10 (
\shape italic
sander
\shape default
 only), users may now use a "natural language" system to define restraints
 by using the RESTRAINT character variable.
 Valid restraints defined in this manner will begin with a "distance( )"
 "angle( )" "torsion( )" or "coordinate( )" keyword.
 Within the parentheses, the atoms that make up the restraint are specified.
 Atoms may be defined either with an explicit atom number or by using ambmask
 format, namely :(residue#)@(atom name).
 Atoms may be separated by commas, spaces, or parentheses.
 Additionally, negative integers may be used if atom groupings are defined
 in other variables in the namelist as described below.
 In addition to the principle distance, angle, torsion, and coordinate keywords,
 Some keywords may be used within the principle keywords to define more
 complicated restraints.
 The keyword "plane( )" may be used once or twice within the parentheses
 of the "angle( ) keyword to define a planar restraint.
 Defining one plane grouping plus one other atom in this manner will create
 a plane-point angle restraint as described above.
 Defining two plane groupings will create a plane-plane angle restraint.
 The keyword "plane( )" may only be used inside of "angle( )," and is necessary
 to define either a plane-point or plane-plane restraint.
\begin_inset Newline newline
\end_inset

 Within the "coordinate( )" keyword, the user must use 2 to 4 "distance(
 )" keywords to define a generalized distance coordinate restraint.
 The "distance( )" keyword functions just like it does when used to define
 a traditional distance restraint.
 The user may specify any two atom numbers, masks, or negative numbers correspon
ding to atom groups defined outside of RESTRAINT.
 Additionally, following each "distance( )" keyword inside "coordinate(
 )" the user must specify a real-number weight to be applied to each distance
 making up the generalized coordinate.
\begin_inset Newline newline
\end_inset

 The "com( )" keyword may be used within any other keyword to define a center
 of mass grouping of atoms.
 Within the parenthesis, the user will enter a list of atom numbers or masks.
 Negative numbers, which correspond to externally-defined groups, may not
 be used.
 
\begin_inset Newline newline
\end_inset

 Any type of parenthetical character, i.e., ( ), [ ], or { }, may be used
 wherever parentheses have been used above.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

 The following are all examples of valid restraint definitions:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
restraint = "distance( (45) (49) )"
\end_layout

\begin_layout LyX-Code
= "angle (:21@C5' :21@C4' 108)"
\end_layout

\begin_layout LyX-Code
= "torsion[-1,-1,-1, com(67, 68, 69)]"
\end_layout

\begin_layout LyX-Code
= "angle( -1, plane(81, 85, 87, 90) )"
\end_layout

\begin_layout LyX-Code
= "angle(plane(com(9,10),:5@CA,31,32),plane(14,15,15,16))"
\end_layout

\begin_layout LyX-Code
= "coordinate(distance(:5@C3',:6@O5'),-1.0,distance(134,-1),1.0)"
\end_layout

\begin_layout Standard
There is a 256 character limit on RESTRAINT, so if a particularly large
 atom grouping is desired, it is necessary to specify a negative number
 instead of "com( )" and define the group as described below.
 RESTRAINT will only be parsed if IAT(1) = 0, otherwise the information
 in IAT(1) ..
 IAT(8) will define the restraint.
 
\shape italic
Default for restraint is ' '.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
atnam
\begin_inset Index idx
status open

\begin_layout Plain Layout
atnam
\end_layout

\end_inset

 If IRESID = 1, then the character names of the atoms defining the internal
 are contained in ATNAM(1)
\begin_inset Formula $\to$
\end_inset

ATNAM(8).
 Residue IAT(1) is searched for atom name ATNAM(1); residue IAT(2) is searched
 for atom name ATNAM(2); etc.
 
\shape italic
Defaults for ATNAM(1)
\begin_inset Formula $\to$
\end_inset

ATNAM(8) are ' '.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
iresid
\begin_inset Index idx
status open

\begin_layout Plain Layout
iresid
\end_layout

\end_inset

 Indicates whether IAT(I) points to an atom # or a residue #.
 See descriptions of IAT() and ATNAM() above.
 If RESTRAINT is used to define the internal instead of IAT(), IRESID has
 no effect on how RESTRAINT is parsed.
 However, it will affect the behavior of atom group definitions as described
 below if negative numbers are specified within RESTRAINT.
 
\shape italic
Default = 0
\shape default
.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nstep1
\begin_inset Index idx
status open

\begin_layout Plain Layout
nstep1
\end_layout

\end_inset

,
\begin_inset space ~
\end_inset

nstep2 This restraint is applied for steps/iterations NSTEP1 through NSTEP2.
 If NSTEP2 = 0, the restraint will be applied from NSTEP1 through the end
 of the run.
 Note that the first step/iteration is considered step zero (0).
 
\shape italic
Defaults for NSTEP1, NSTEP2 are both 0.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
irstyp
\begin_inset Index idx
status open

\begin_layout Plain Layout
irstyp
\end_layout

\end_inset

 Normally, the restraint target values defined below (R1
\begin_inset Formula $\to$
\end_inset

R4) are used directly.
 If IRSTYP = 1, the values given for R1
\begin_inset Formula $\to$
\end_inset

R4 define relative displacements from the current value (value determined
 from the starting coordinates) of the restrained internal.
 For example, if IRSTYP=1, the current value of a restrained distance is
 1.25, and R1 (below) is -0.20, then a value of R1=1.05 will be used.
 
\shape italic
Default is IRSTYP=0.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ialtd
\begin_inset Index idx
status open

\begin_layout Plain Layout
ialtd
\end_layout

\end_inset

 Determines what happens when a distance restraint gets very large.
 If IALTD=1, then the potential "flattens out", and there is no force for
 large violations; this allows for errors in constraint lists, but might
 tend to ignore constraints that 
\shape italic
should
\shape default
 be included to pull a bad initial structure towards a more correct one.
 When IALTD=0 the penalty energy continues to rise for large violations.
 See below for the detailed functional forms that are used for distance
 restraints.
 Set IALTD=0 to recover the behavior of earlier versions of 
\shape italic
sander
\shape default
.
 Default value is 0, or the last value that was explicitly set in a previous
 restraint.
 This value is set to 1 if 
\shape italic
makeDIST_RST
\shape default
 is called with the 
\shape italic
-altdis
\shape default
 flag.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ifvari
\begin_inset Index idx
status open

\begin_layout Plain Layout
ifvari
\end_layout

\end_inset

 If IFVARI 
\begin_inset Formula $>$
\end_inset

 0, then the force constants/positions of the restraint will vary with step
 number.
 Otherwise, they are constant throughout the run.
 If IFVARI 
\begin_inset Formula $>$
\end_inset

0, then the values R1A
\begin_inset Formula $\to$
\end_inset

R4A, RK2A, and RK3A must be specified (see below).
 
\shape italic
Default is IFVARI=0.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ninc
\begin_inset Index idx
status open

\begin_layout Plain Layout
ninc
\end_layout

\end_inset

 If IFVARI 
\begin_inset Formula $>$
\end_inset

 and NINC 
\begin_inset Formula $>$
\end_inset

 0, then the change in the target values of of R1
\begin_inset Formula $\to$
\end_inset

R4 and K2,K3 is applied as a step function, with NINC steps/ iterations
 between each change in the target values.
 If NINC = 0, the change is effected continuously (at every step).
 
\shape italic
Default for NINC is the value assigned to NINC in the most recent namelist
 where NINC was specified.
 If NINC has not been specified in any namelist, it defaults to 0.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
imult
\begin_inset Index idx
status open

\begin_layout Plain Layout
imult
\end_layout

\end_inset

 If IMULT=0, and the values of force constants RK2 and RK3 are changing
 with step number, then the changes in the force constants will be linearly
 interpolated from rk2
\begin_inset Formula $\to$
\end_inset

rk2a and rk3
\begin_inset Formula $\to$
\end_inset

rk3a as the step number changes.
 If IMULT=1 and the force constants are changing with step number, then
 the changes in the force constants will be effected by a series of multiplicati
ve scalings, using a single factor, R, for all scalings.
 
\begin_inset Formula $i.e.$
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
rk2a = R**INCREMENTS * rk2 
\begin_inset Newline newline
\end_inset

rk3a = R**INCREMENTS * rk3.
 
\end_layout

\begin_layout Standard
INCREMENTS is the number of times the target value changes, which is determined
 by NSTEP1, NSTEP2, and NINC.
 
\shape italic
Default for IMULT is the value assigned to IMULT in the most recent namelist
 where IMULT was specified.
 If IMULT has not been specified in any namelist, it defaults to 0.

\shape default
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
r1
\begin_inset Formula $\to$
\end_inset

r4,
\begin_inset space ~
\end_inset

rk2,
\begin_inset space ~
\end_inset

rk3,
\begin_inset space ~
\end_inset

r1a
\begin_inset Formula $\to$
\end_inset

r4a,
\begin_inset space ~
\end_inset

rk2a,
\begin_inset space ~
\end_inset

rk3a If IALTD=0, the restraint is a well with a square bottom with parabolic
 sides out to a defined distance, and then linear sides beyond that.
 If R is the value of the restraint in question: 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
R 
\begin_inset Formula $<$
\end_inset

 r1 Linear, with the slope of the "left-hand" parabola at the point R=r1.
 
\end_layout

\begin_layout Itemize
r1 
\begin_inset Formula $<$
\end_inset

= R 
\begin_inset Formula $<$
\end_inset

 r2 Parabolic, with restraint energy 
\begin_inset Formula $k_{2}(R-r_{2})^{2}$
\end_inset

.
 
\end_layout

\begin_layout Itemize
r2 
\begin_inset Formula $<$
\end_inset

= R 
\begin_inset Formula $<$
\end_inset

 r3 E = 0.
 
\end_layout

\begin_layout Itemize
r3 
\begin_inset Formula $<$
\end_inset

= R 
\begin_inset Formula $<$
\end_inset

 r4 Parabolic, with restraint energy 
\begin_inset Formula $k_{3}(R-r_{3})^{2}$
\end_inset

.
 
\end_layout

\begin_layout Itemize
r4 
\begin_inset Formula $<$
\end_inset

= R Linear, with the slope of the "right-hand" parabola at the point R=r4.
 
\end_layout

\begin_layout Standard
For torsional restraints, the value of the torsion is translated by +-n*360,
 if necessary, so that it falls closest to the mean of r2 and r3.
 Specified distances are in Angstroms.
 Specified angles are in degrees.
 Force constants for distances are in kcal/mol-
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AA
\end_layout

\end_inset

 2 Force constants for angles are in kcal/mol-rad 2 .
 (Note that angle positions are specified in degrees, but force constants
 are in radians, consistent with typical reporting procedures in the literature).
 
\end_layout

\begin_layout Standard
If IALTD=1, distance restraints are interpreted in a slightly different
 fashion.
 Again, If R is the value of the restraint in question: 
\end_layout

\begin_layout Itemize
R 
\begin_inset Formula $<$
\end_inset

 r2 Parabolic, with restraint energy 
\begin_inset Formula $k_{2}(R-r_{2})^{2}$
\end_inset

.
 
\end_layout

\begin_layout Itemize
r2 
\begin_inset Formula $<$
\end_inset

= R 
\begin_inset Formula $<$
\end_inset

 r3 E = 0.
 
\end_layout

\begin_layout Itemize
r3 
\begin_inset Formula $<$
\end_inset

= R 
\begin_inset Formula $<$
\end_inset

 r4 Parabolic, with restraint energy 
\begin_inset Formula $k_{3}(R-r_{3})^{2}$
\end_inset

.
 
\end_layout

\begin_layout Itemize
r4 
\begin_inset Formula $<$
\end_inset

= R Hyperbolic, with energy 
\begin_inset Formula $k_{3}[b/(R-r_{3})+a]$
\end_inset

, where 
\begin_inset Formula $a=3(r_{4}-r_{3})^{2}$
\end_inset

 and 
\begin_inset Formula $b=-2(r_{4}-r_{3})^{3}$
\end_inset

.
 This function matches smoothly to the parabola at 
\begin_inset Formula $R=r_{4}$
\end_inset

, and tends to an asymptote of 
\begin_inset Formula $ak_{3}$
\end_inset

at large R.
 The functional form is adapted from that suggested by Michael Nilges, 
\shape italic
Prot.
 Eng.

\shape default
 
\series bold
2,
\series default
 27-38 (1988).
 Note that if 
\shape italic
ialtd=1
\shape default
, the value of r1 is ignored.
 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
ifvari
\begin_inset Index idx
status open

\begin_layout Plain Layout
ifvari
\end_layout

\end_inset

 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

0 The values of r1
\begin_inset Formula $\to$
\end_inset

r4, rk2, and rk3 will remain constant throughout the run.
 
\end_layout

\begin_layout Description
>
\begin_inset space ~
\end_inset

0 The values r1a, r2a, r3a, r4a, r2ka and r3ka are also used.
 These variables are defined as for r1
\begin_inset Formula $\to$
\end_inset

r4 and rk2, rk3, but correspond to the values appropriate for NSTEP = NSTEP2:
 e.g., if IVARI 
\begin_inset Formula $>$
\end_inset

0, then the value of r1 will vary between NSTEP1 and NSTEP2, so that, e.g.
 r1(NSTEP1) = r1 and r1(NSTEP2) = r1a.
 Note that you 
\shape italic
must
\shape default
 specify an explicit value for 
\shape italic
nstep1
\shape default
 and 
\shape italic
nstep2
\shape default
 if you use this option.
 
\shape italic
Defaults for r1
\begin_inset Formula $\to$
\end_inset

r4,rk2,rk3,r1a
\begin_inset Formula $\to$
\end_inset

r4a,rk2a and rk3a are the values assigned to them in the most recent namelist
 where they were specified.
 They should always be specified in the first
\shape default
 &rst 
\shape italic
namelist.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
r0,
\begin_inset space ~
\end_inset

k0,
\begin_inset space ~
\end_inset

r0a,
\begin_inset space ~
\end_inset

k0a
\begin_inset Index idx
status open

\begin_layout Plain Layout
r0
\end_layout

\end_inset

 New as of Amber 10 (
\shape italic
sander
\shape default
 only), the user may more easily specify a large parabolic well if desired
 by using R0 and K0, and then R0A and K0A if IFVARI > 0.
 The parabolic well will have its zero at R = R0 and a force constant of
 K0.
 These variables simply map the disired parabolic well into r1
\begin_inset Formula $\to$
\end_inset

r4,
\begin_inset space ~
\end_inset

rk2,
\begin_inset space ~
\end_inset

rk3,
\begin_inset space ~
\end_inset

r1a
\begin_inset Formula $\to$
\end_inset

r4a,
\begin_inset space ~
\end_inset

rk2a,
\begin_inset space ~
\end_inset

and rk3a in the following manner:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
R1 = 0 for distance, angle, and planar restraints, R1 = R0 - 180 for torsion
 restraints
\end_layout

\begin_layout Itemize
R1A = 0 for distance, angle, and planar restraints, R1A = R0A - 180 for
 torsion restraints
\end_layout

\begin_layout Itemize
R2 = R0; R3 = R0
\end_layout

\begin_layout Itemize
R2A = R0A; R3A = R0A
\end_layout

\begin_layout Itemize
R4 = R0 + 500 for distance restraints, R4 = 180 for angle and planar restraints,
 R4 = R0 + 180 for torsion restraints
\end_layout

\begin_layout Itemize
RK2 = K0; RK3 = K0
\end_layout

\begin_layout Itemize
RK2A = K0A; RK3A = K0A
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
rjcoef
\begin_inset Index idx
status open

\begin_layout Plain Layout
rjcoef
\end_layout

\end_inset

(1)
\begin_inset Formula $\to$
\end_inset

rjcoef(3) By default, 4-atom sequences specify torsional restraints.
 It is also possible to impose restraints on the vicinal 3 J-coupling value
 related to the underlying torsion.
 J is related to the torsion 
\begin_inset Formula $\tau$
\end_inset

 by the approximate Karplus relationship: 
\begin_inset Formula $J=A\cos^{2}(\tau)+B\cos(\tau)+C$
\end_inset

.
 If you specify a nonzero value for either RJCOEF(1) or RJCOEF(2), then
 a J-coupling restraint, rather than a torsional restraint, will be imposed.
 At every MD step, J will be calculated from the Karplus relationship with
 A = RJCOEF(1), B = RJCOEF(2) and C = RJCOEF(3).
 In this case, the target values (R1-
\begin_inset Formula $>$
\end_inset

R4, R1A-
\begin_inset Formula $>$
\end_inset

R4A) and force constants (RK2, RK3, RK2A, RK3A) refer to J-values for this
 restraint.
 RJCOEF(1)-
\begin_inset Formula $>$
\end_inset

RJCOEF(3) must be set individually for each torsion for which you wish to
 apply a J-coupling restraint, and RJCOEF(1)-
\begin_inset Formula $>$
\end_inset

RJCOEF(3) may be different for each J-coupling restraint.
 With respect to other options and reporting, J-coupling restraints are
 treated identically to torsional restraints.
 This means that if time-averaging is requested for torsional restraints,
 it will apply to J-coupling restraints as well.
 The J-coupling restraint contribution to the energy is included in the
 "torsional" total.
 And changes in the relative weights of the torsional force constants also
 change the relative weights of the J-coupling restraint terms.
 Setting RJCOEF has no effect for distance and angle restraints.
 
\shape italic
Defaults for RJCOEF(1)-
\begin_inset Formula $>$
\end_inset

RJCOEF(3) are 0.0.
\end_layout

\begin_layout Standard
igr1
\begin_inset Index idx
status open

\begin_layout Plain Layout
igr1
\end_layout

\end_inset

(i),i=1
\begin_inset Formula $\to$
\end_inset

200,
\begin_inset space ~
\end_inset

igr2(i),i=1
\begin_inset Formula $\to$
\end_inset

200,
\begin_inset space ~
\end_inset

...
\begin_inset space ~
\end_inset

igr8(i),i..1=1
\begin_inset Formula $\to$
\end_inset

200 If IAT(n) 
\begin_inset Formula $<$
\end_inset

 0, then IGRn() gives the atoms defining the group whose coordinate averaged
 position is used to define "atom n" in a restraint.
 Alternatively, if RESTRAINT is used to define the internal, then if the
 nth atom specified is a number less than zero, IGRn() gives the atoms defining
 the group whose coordinate averaged position is used to define "atom n"
 in a restraint.
 If IRESID = 0, absolute atom numbers are specified by the elements of IGRn().
 If IRESID = 1, then IGRn(I) specifies the number of the residue containing
 atom I, and the name of atom I must be specified using GRNAMn(I).
 A maximum of 200 atoms (N # of atoms if using pmemd) are allowed in any
 group.
 Only specify those atoms that are needed.
 Default value for any unspecified element of IGRn(i) is 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
fxyz
\begin_inset Index idx
status open

\begin_layout Plain Layout
fxyz
\end_layout

\end_inset

 If iat(3)=0 and igr1 and/or igr2 is defined then it is possible to weight
 the x, y, z components of the force in the restraint to 0 (no force) or
 1 (full restraint force).
 Ex: fxyz=0, 0, 1.
 This sets no additional restraint force on the x component or y-component
 of the restraint force, and full z-component restraint force.
 Default fxyz=1,1,1.
 Note: When setting fxyz, the r1, r2, r3, r4 values should be set relative
 to a weighted distance 
\begin_inset Formula $\sqrt{\left(w_{x}*d_{x}\right)^{2}+\left(w_{y}*d_{y}\right)^{2}+\left(w_{z}*d_{z}\right)^{2}}$
\end_inset

, so if fxyz=0,0,1 then the only distance taken into account when comparing
 to r1,r2,r3,r4 is the z distance between the molecule and the center of
 mass.
 Note that the DUMPAVE value when outxyz=0 is also just the weighted distance.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
outxyz
\begin_inset Index idx
status open

\begin_layout Plain Layout
outxyz
\end_layout

\end_inset

 If iat(3)=0 and igr1 and/or igr2 is defined then it is possible to output
 the x, y, z components of the force in the restraint if outxyz is set to
 1.
 Default outyz=0.
 When outxyz is set to 1, the components of the distance and total distance
 are outputed in DUMPAVE in the order of the x-component, y-component, z-compone
nt, total distance.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
grnam1
\begin_inset Index idx
status open

\begin_layout Plain Layout
grnam1
\end_layout

\end_inset

(i),i=1
\begin_inset Formula $\to$
\end_inset

200, grnam2(i),i=1
\begin_inset Formula $\to$
\end_inset

200, ...
 grnam8(i),i=1
\begin_inset Formula $\to$
\end_inset

200 If group input is being specified (IGRn(1) 
\begin_inset Formula $>$
\end_inset

 0), 
\shape italic
and
\shape default
 IRESID = 1, then the character names of the atoms defining the group are
 contained in GRNAMn(i), as described above.
 In the case IAT(1) 
\begin_inset Formula $<$
\end_inset

 0, each residue IGR1(i) is searched for an atom name GRNAM1(i) and added
 to the first group list.
 In the case IAT(2) 
\begin_inset Formula $<$
\end_inset

 0, each residue IGR2(i) is searched for an atom name GRNAM2(i) and added
 to the second group list.
 
\shape italic
Defaults for GRNAMn(i) are '
\shape default

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

 
\shape italic
'.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ir6
\begin_inset Index idx
status open

\begin_layout Plain Layout
ir6
\end_layout

\end_inset

 If a group coordinate-averaged position is being used (see IGR1 and IGR2
 above), the average position can be calculated in either of two manners:
 If IR6 = 0, center-of-mass averaging will be used.
 If IR6=1, the 
\begin_inset Formula $\left\langle r^{-6}\right\rangle ^{-1/6}$
\end_inset

 average of all interaction distances to atoms of the group will be used.
 
\shape italic
Default for IR6 is the value assigned to IR6 in the most recent namelist
 where IR6 was specified.
 If IR6 has not been specified in any namelist, it defaults to 0.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ifntyp
\begin_inset Index idx
status open

\begin_layout Plain Layout
ifntyp
\end_layout

\end_inset

 If time-averaged restraints have been requested (see DISAVE/ANGAVE/TORAVE
 above), they are, by default, applied to all restraints of the class specified.
 Time-averaging can be overridden for specific internals of that class by
 setting IFNTYP for that internal to 1.
 IFNTYP has no effect if time-averaged restraint are not being used.
 
\shape italic
Default value is IFNTYP=0.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ixpk
\begin_inset Index idx
status open

\begin_layout Plain Layout
ixpk
\end_layout

\end_inset

,
\begin_inset space ~
\end_inset

nxpk
\begin_inset Index idx
status open

\begin_layout Plain Layout
nxpk
\end_layout

\end_inset

 These are user-defined integers than can be set for each constraint.
 They are typically the "peak number" and "spectrum number" associated with
 the cross-peak that led to this particular distance restraint.
 Nothing is ever done with them except to print them out in the "violation
 summaries", so that NMR people can more easily go from a constraint violation
 to the corresponding peak in their spectral database.
 Default values are zero.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
iconstr
\begin_inset Index idx
status open

\begin_layout Plain Layout
iconstr
\end_layout

\end_inset

 If 
\shape italic
iconstr
\shape default
 
\begin_inset Formula $>$
\end_inset

 0, (default is 0) a Lagrangian multiplier is also applied to the two-center
 internal coordinate defined by IAT(1) and IAT(2).
 The effect of this Lagrangian multiplier is to maintain the initial orientation
 of the internal coordinate.
 The rotation of the vector IAT(1)-
\begin_inset Formula $>$
\end_inset

IAT(2) is prohibited, though translation is allowed.
 For each defined two-center internal coordinate, a separate Lagrangian
 multiplier is used.
 Therefore, although one can use as many multipliers as needed, defining
 centers should NOT appear in more than one multiplier.
 This option is compatible with mass centers (i.e., negative IAT(1) or IAT(2)).
 ICONSTR can be used together with harmonic restraints.
 RK2 and RK3 should be set to 0.0 if the two-center internal coordinate is
 a simple Lagrangian multiplier.
 An example has been included in $AMBERCLASSICHOME/example/lagmul.
\end_layout

\begin_layout Standard
Namelist &rst is read for each restraint.
 Restraint input ends when a namelist statement with iat(1) = 0 (or iat(1)
 not specified) is found.
 Note that comments can precede or follow any namelist statement, allowing
 comments and restraint definitions to be freely mixed.
\end_layout

\begin_layout Section

\series bold
\begin_inset CommandInset label
LatexCommand label
name "sec:noesy"

\end_inset

NOESY volume restraints
\end_layout

\begin_layout Standard
After the previous section, NOESY volume restraints may be read.
 This data described in this section is only read if NMROPT = 2.
 The molecule may be broken in overlapping submolecules, in order to reduce
 time and space requirements.
 Input 
\shape italic
for each submolecule
\shape default
 consists of namelist "&noeexp", followed 
\shape italic
immediately
\shape default
 by standard Amber "group" cards defining the atoms in the submolecule.
 In addition to the submolecule input ("&noeexp"), you may also need to
 specify some additional variables in the cntrl namelist; see the "NMR variables
" description in that section.
\end_layout

\begin_layout Standard
In many cases, the user will not prepare this section of the input by hand,
 but will use the auxiliary program 
\shape italic
makeDIST_RST
\shape default
 to prepare input from simpler files.
 
\end_layout

\begin_layout Subsection*

\series bold
Variables in the
\series default
 &noeexp 
\series bold
namelist:
\end_layout

\begin_layout Standard
For each submolecule, the namelist "&noeexp" is read (either from 
\shape italic
stdin
\shape default
 or from the NOESY redirection file) which contains the following variables.
 There are no effective defaults for 
\shape italic
npeak, emix, ihp, jhp,
\shape default
 and 
\shape italic
aexp
\shape default
: you must specify these.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
npeak
\shape italic

\begin_inset Index idx
status open

\begin_layout Plain Layout
npeak
\end_layout

\end_inset

(imix)
\shape default
 Number of peaks for each of the "imix" mixing times; if the last mixing
 time is 
\shape italic
mxmix
\shape default
, set NPEAK(
\shape italic
mxmix+1
\shape default
) = -1.
 End the input when NPEAK(1) 
\begin_inset Formula $<$
\end_inset

 0.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
emix
\shape italic

\begin_inset Index idx
status open

\begin_layout Plain Layout
emix
\end_layout

\end_inset

(imix)
\shape default
 Mixing times (in seconds) for each mixing time.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ihp
\shape italic

\begin_inset Index idx
status open

\begin_layout Plain Layout
ihp
\end_layout

\end_inset

(imix,ipeak)
\shape default
,
\begin_inset space ~
\end_inset

jhp
\shape italic
(imix,ipeak)
\shape default
 Atom numbers for the atoms involved in cross-peak "ipeak" at mixing time
 "imix" 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
aexp
\begin_inset Index idx
status open

\begin_layout Plain Layout
aexp
\end_layout

\end_inset

(imix,ipeak) Experimental target integrated intensity for this cross peak.
 If AEXP is negative, this cross peak is part of a set of overlapped peaks.
 The computed intensity is added to the peak that follows; the next time
 a peak with AEXP 
\begin_inset Formula $>$
\end_inset

 0 is encountered, the running sum for the calculated peaks will be compared
 to the value of AEXP for that last peak in the list.
 In other words, a set of overlapped peaks is represented by one or more
 peaks with AEXP 
\begin_inset Formula $<$
\end_inset

 0 followed by a peak with AEXP 
\begin_inset Formula $>$
\end_inset

 0.
 The computed total intensity for these peaks will be compared to the value
 of AEXP for the final peak.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
arange
\shape italic

\begin_inset Index idx
status open

\begin_layout Plain Layout
arange
\end_layout

\end_inset

(imix,ipeak)
\shape default
 "Uncertainty" range for this peak: if the calculated value is within 
\begin_inset Formula $\pm$
\end_inset

ARANGE of AEXP, then no penalty will be assessed.
 Default uncertainties are all zero.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
awt
\shape italic

\begin_inset Index idx
status open

\begin_layout Plain Layout
awt
\end_layout

\end_inset

(imix,ipeak)
\shape default
 Relative weight for this cross peak.
 Note that this will be multiplied by the overall weight given by the NOESY
 weight change cards in the weight changes section (Section 1).
 Default values are 1.0, unless INVWT1,INVWT2 are set (see below), in which
 case the input values of AWT are ignored.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
invwt1
\begin_inset Index idx
status open

\begin_layout Plain Layout
invwt1
\end_layout

\end_inset

,invwt2 Lower and upper bounds on the weights for the peaks respectively,
 such that the relative weight for each peak is 1/intensity if 1/intensity
 lies between the lower and upper bounds.
 This is the intensity after being scaled by 
\shape italic
oscale
\shape default
.
 The inverse weighing scheme adopted by this option prevents placing too
 much influence on the strong peaks at the expense of weaker peaks and was
 previously invoked using the compilation flag "INVWGT".
 Default values are INVWT1=INVWT2=1.0, placing equal weights on all peaks.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
omega
\begin_inset Index idx
status open

\begin_layout Plain Layout
omega
\end_layout

\end_inset

 Spectrometer frequency, in Mhz.
 Default is 500.
 It is possible for different sub-molecules to have different frequencies,
 but omega will only change when it is explicitly re-set.
 Hence, if all of your data is at 600 Mhz, you need only set 
\shape italic
omega
\shape default
 to 600.
 in the first submolecule.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
taurot
\begin_inset Index idx
status open

\begin_layout Plain Layout
taurot
\end_layout

\end_inset

 Rotational tumbling time of the molecule, in nsec.
 Default is 1.0 nsec.
 Like 
\shape italic
omega
\shape default
, this value is "sticky", so that a value set in one submolecule will remain
 until it is explicitly reset.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
taumet
\begin_inset Index idx
status open

\begin_layout Plain Layout
taumet
\end_layout

\end_inset

 Correlation time for methyl jump motion, in ns.
 This is only used in computing the intra-methyl contribution to the rate
 matrix.
 The ideas of Woessner are used, specifically as recommended by Kalk & Berendsen.
\begin_inset CommandInset citation
LatexCommand cite
key "Kalk76"
literal "true"

\end_inset

 Default is 0.0001 ns, which is effectively the fast motion limit.
 The default is consistent with the way the rest of the rate matrix elements
 are determined (also in the fast motion limit,) but probably is not the
 best value to use, since methyl groups appear to have T1 values that are
 systematically shorter than other protons, and this is likely to arise
 from the fact that the methyl correlation time can be near to the inverse
 of the spectrometer frequency.
 A value of 0.02 - 0.05 ns is probably better than 0.0001, but this is still
 an active research area, and you are on your own here, and should consult
 the literature for further discussion.
\begin_inset CommandInset citation
LatexCommand cite
key "Olejniczak90"
literal "true"

\end_inset

 As with 
\shape italic
omega
\shape default
, 
\shape italic
taumet
\shape default
 can be different for different sub-molecules, but will only change when
 it is explicitly re-set.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
id2o
\begin_inset Index idx
status open

\begin_layout Plain Layout
id2o
\end_layout

\end_inset

 Flag for determining if exchangeable protons are to be included in the
 spin-diffusion calculation.
 If ID2O=0 (default) then all protons are included.
 If ID2O=1, then all protons bonded to nitrogen or oxygen are assumed to
 not be present for the purposes of computing the relaxation matrix.
 No other options exist at present, but they could easily be added to the
 subroutine 
\shape italic
indexn
\shape default
.
 Alternatively, you can manually rename hydrogens in the 
\shape italic
prmtop
\shape default
 file so that they do not begin with "H": such protons will not be included
 in the relaxation matrix.
 (
\shape italic
Note:
\shape default
 for technical reasons, the HOH proton of tyrosine must always be present,
 so setting ID2O=1 will not remove it; we hope that this limitation will
 be of minor importance to most users.) The 
\shape italic
id2o
\shape default
 variable retains its value across namelist reads, 
\begin_inset Formula $i.e.$
\end_inset

 its value will only change if it is explicitly reset.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
oscale
\begin_inset Index idx
status open

\begin_layout Plain Layout
oscale
\end_layout

\end_inset

 overall scaling factor between experimental and computed volume units.
 The experimental intensities are multiplied by 
\shape italic
oscale
\shape default
 before being compared to calculated intensities.
 This means that the weights WNOESY and AWT always refer to "theoretical"
 intensity scales rather than to the (arbitrary) experimental units.
 The 
\shape italic
oscale
\shape default
 variable retains its value across namelist reads, 
\begin_inset Formula $i.e.$
\end_inset

 its value will only change if it is explicitly reset.
 The initial (default) value is 1.0.
\end_layout

\begin_layout Standard
The atom numbers 
\shape italic
ihp
\shape default
 and 
\shape italic
jhp
\shape default
 are the absolute atom numbers.
 For methyl groups, use the number of the last proton of the group; for
 the delta and epsilon protons of aromatic rings, use the delta-2 or epsilon-2
 atom numbers.
 Since this input requires you to know the absolute atom numbers assigned
 by Amber to each of the protons, you may wish to use the separate 
\shape italic
makeDIST_RST
\shape default
 program which provides a facility for more turning human-readable input
 into the required file for 
\shape italic
sander
\shape default
.
\end_layout

\begin_layout Standard
Following the &noeexp namelist, give the Amber "group" cards that identify
 this submolecule.
 This combination of "&noeexp" and "group" cards can be repeated as often
 as needed for many submolecules, subject to the limits described in the
 
\shape italic
nmr.h
\shape default
 file.
 As mentioned above, this input section ends when NPEAK(1) 
\begin_inset Formula $<$
\end_inset

 0, or when and end-of-file is reached.
 
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Section

\series bold
\begin_inset CommandInset label
LatexCommand label
name "sec:shift"

\end_inset

Chemical shift restraints
\end_layout

\begin_layout Standard
After reading NOESY restraints above (if any), read the chemical shift restraint
s in namelist 
\shape italic
&shf
\shape default
, or the pseudocontact restraints in namelist 
\shape italic
&pcshift
\shape default
.
 Reading this input is triggered by the presence of a SHIFTS line in the
 I/O redirection section.
 In many cases, the user will not prepare this section of the input by hand,
 but will use the auxiliary programs 
\shape italic
shifts
\shape default
 or 
\shape italic
fantasian
\shape default
 to prepare input from simpler files.
\end_layout

\begin_layout Subsection*

\series bold
Variables in the
\series default
 &shf 
\series bold
namelist.

\series default
 
\end_layout

\begin_layout Standard
(Defaults are only available for 
\shape italic
shrang, wt
\shape default
, 
\shape italic
nter
\shape default
, and 
\shape italic
shcut
\shape default
; you must specify the rest.) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nring
\begin_inset Index idx
status open

\begin_layout Plain Layout
nring
\end_layout

\end_inset

 Number of rings in the system.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
natr
\begin_inset Index idx
status open

\begin_layout Plain Layout
natr
\end_layout

\end_inset


\begin_inset Formula $(i)$
\end_inset

 Number of atoms in the 
\shape italic
i-th
\shape default
 ring.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
iatr
\begin_inset Index idx
status open

\begin_layout Plain Layout
iatr
\end_layout

\end_inset


\begin_inset Formula $(j,i)$
\end_inset

 Absolute atom number for the 
\shape italic
j-th
\shape default
 atom of the 
\shape italic
i-th
\shape default
 ring.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
namr
\begin_inset Index idx
status open

\begin_layout Plain Layout
namr
\end_layout

\end_inset


\begin_inset Formula $(i)$
\end_inset

 Eight-character string that labels the 
\shape italic
i-th
\shape default
 ring.
 The first three characters give the residue name (in caps); the next three
 characters contain the residue number (right justified); column 7 is blank;
 column 8 may optionally contain an extra letter to distinguish the two
 rings of trp, or the 5 or 8 rings of the heme group.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
str
\begin_inset Index idx
status open

\begin_layout Plain Layout
str
\end_layout

\end_inset


\begin_inset Formula $(i)$
\end_inset

 Ring current intensity factor for the 
\shape italic
i-th
\shape default
 ring.
 Older values are summarized by Cross and Wright;
\begin_inset CommandInset citation
LatexCommand cite
key "Cross85"
literal "true"

\end_inset

 more recent empirical parametrizations seem to give improved results.
\begin_inset CommandInset citation
LatexCommand cite
key "Osapay91,Case95"
literal "true"

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nprot
\begin_inset Index idx
status open

\begin_layout Plain Layout
nprot
\end_layout

\end_inset

 Number of protons for which penalty functions are to be set up.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
iprot
\begin_inset Index idx
status open

\begin_layout Plain Layout
iprot
\end_layout

\end_inset


\begin_inset Formula $(i)$
\end_inset

 Absolute atom number of the 
\shape italic
i-th
\shape default
 proton whose shifts are to be evaluated.
 For equivalent protons, such as methyl groups or rapidly flipping phenylalanine
 rings, enter all two or three atom numbers in sequence; averaging will
 be controlled by the 
\shape italic
wt
\shape default
 parameter, described below.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
obs
\begin_inset Index idx
status open

\begin_layout Plain Layout
obs
\end_layout

\end_inset


\begin_inset Formula $(i)$
\end_inset

 Observed secondary shift for the 
\shape italic
i-th
\shape default
 proton.
 This is typically calculated as the observed value minus a random coil
 reference value.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
shrang
\begin_inset Index idx
status open

\begin_layout Plain Layout
shrang
\end_layout

\end_inset


\begin_inset Formula $(i)$
\end_inset

 "Uncertainty" range for the observed shift: if the calculated shift is
 within 
\begin_inset Formula $\pm$
\end_inset

SHRANG of the observed shift, then no penalty will be imposed.
 The default value is zero for all shifts.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
wt
\begin_inset Index idx
status open

\begin_layout Plain Layout
wt
\end_layout

\end_inset


\begin_inset Formula $(i)$
\end_inset

 Weight to be assigned to this penalty function.
 Note that this value will be multiplied by the overall weight (if any)
 given by the SHIFTS command in the assignment of weights (above).
 Default values are 1.0.
 For sets of equivalent protons, give a negative weight for all but the
 last proton in the group; the last proton gets a normal, positive value.
 The average computed shift of the group will be compared to 
\shape italic
obs
\shape default
 entered for the last proton.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
shcut
\begin_inset Index idx
status open

\begin_layout Plain Layout
shcut
\end_layout

\end_inset

 Values of calculated shifts will be printed only if the absolute error
 between calculated and observed shifts is greater than this value.
 
\shape italic
Default = 0.3 ppm.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nter
\begin_inset Index idx
status open

\begin_layout Plain Layout
nter
\end_layout

\end_inset

 Residue number of the N-terminus, for protein shift calculations; 
\shape italic
default = 1.

\shape default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cter
\begin_inset Index idx
status open

\begin_layout Plain Layout
cter
\end_layout

\end_inset

 Residue number of the C-terminus, for protein shift calculations.
 Believe it or not, the current code cannot figure this out for itself.
 
\end_layout

\begin_layout Standard
In typical usage, the 
\emph on
shifts
\emph default
 program (
\family typewriter
http://casegroup.rutgers.edu/shifts.html
\family default
) would be used to create this file, with a typical command line:
\end_layout

\begin_layout LyX-Code
shifts -readobs -sander '::H*' gcg10
\end_layout

\begin_layout Standard
Sample input and output files are in 
\family typewriter
test/rdc
\family default
.
\end_layout

\begin_layout Section
Pseudocontact shift restraints
\end_layout

\begin_layout Standard
The PCSHIFT module allows the inclusion of pseudocontact shifts as constraints
 in energy minimization and molecular dynamics calculations on paramagnetic
 molecules.
 The pseudocontact shift depends on the magnetic susceptibility anisotropy
 of the metal ion and on the location of the resonating nucleus with respect
 to the axes of the magnetic susceptibility tensor.
 For the nucleus i, it is given by: 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\delta_{pc}^{i}=\sum_{j}\frac{1}{12\pi r_{ij}^{3}}\left[\Delta\chi_{ax}^{j}(3n_{ij}^{2}-1)+(3/2)\Delta\chi_{rh}^{j}(l_{ij}^{2}-m_{ij}^{2})\right]
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $l_{ij}$
\end_inset

, 
\begin_inset Formula $m_{ij}$
\end_inset

, and 
\begin_inset Formula $n_{ij}$
\end_inset

 are the direction cosines of the position vector of atom i with respect
 to the j-th magnetic susceptibility tensor coordinate system, 
\begin_inset Formula $r_{ij}$
\end_inset

 is the distance between the j-th paramagnetic center and the proton i,
 
\shape italic

\begin_inset Formula $\Delta\chi_{ax}$
\end_inset


\shape default
 and 
\shape italic

\begin_inset Formula $\Delta\chi_{rh}$
\end_inset


\shape default
 are the axial and the equatorial (rhombic) anisotropies of the magnetic
 susceptibility tensor of the j-th paramagnetic center.
 For a discussion, see Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Banci97"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
The PCSHIFT module to be used needs a namelist file which includes information
 on the magnetic susceptibility tensor and on the paramagnetic center, and
 a line of information for each nucleus.
 This module allows to include more than one paramagnetic center in the
 calculations.
 To include pseudocontact shifts as constraints in energy minimization and
 molecular dynamics calculations the NMROPT flag should be set to 2, and
 a 
\shape italic
PCSHIFT=filename
\shape default
 statement entered in the I/O redirection section.
\end_layout

\begin_layout Standard
To perform molecular dynamics calculations it is necessary to eliminate
 the rotational and translational degree of freedom about the center of
 mass (this because during molecular dynamics calculations the relative
 orientation between the external reference coordinate system and the magnetic
 anisotropy tensor coordinate system has to be fixed).This option can be
 obtained with the NSCM flag of 
\shape italic
sander
\shape default
.
\end_layout

\begin_layout Subsection*

\series bold
Variables in the
\series default
 pcshift 
\series bold
namelist
\series default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nprot
\begin_inset Index idx
status open

\begin_layout Plain Layout
nprot
\end_layout

\end_inset

 number of pseudocontact shift constraints.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nme
\begin_inset Index idx
status open

\begin_layout Plain Layout
nme
\end_layout

\end_inset

 number of paramagnetic centers.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
nmpmc
\begin_inset Index idx
status open

\begin_layout Plain Layout
nmpmc
\end_layout

\end_inset

 name of the paramagnetic atom 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
optphi
\begin_inset Index idx
status open

\begin_layout Plain Layout
optphi
\end_layout

\end_inset

(n),
\begin_inset space ~
\end_inset

opttet(n),
\begin_inset space ~
\end_inset

optomg(n),
\begin_inset space ~
\end_inset

opta1(n),
\begin_inset space ~
\end_inset

opta2(n) the five parameters of the magnetic anisotropy tensor for each
 paramagnetic center.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
optkon
\begin_inset Index idx
status open

\begin_layout Plain Layout
optkon
\end_layout

\end_inset

 force constant for the pseudocontact shift constraints
\end_layout

\begin_layout Standard
Following this, there is a line for each nucleus for which the pseudocontact
 shift information is given has to be added.
 Each line contains : 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
iprot
\begin_inset Index idx
status open

\begin_layout Plain Layout
iprot
\end_layout

\end_inset

(i) atom number of the i-th proton whose shift is to be used as constraint.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
obs
\begin_inset Index idx
status open

\begin_layout Plain Layout
obs
\end_layout

\end_inset

(i) observed pseudocontact shift value, in ppm 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
wt
\begin_inset Index idx
status open

\begin_layout Plain Layout
wt
\end_layout

\end_inset

(i) relative weight 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
tolpro
\begin_inset Index idx
status open

\begin_layout Plain Layout
tolpro
\end_layout

\end_inset

(i) relative tolerance ix mltpro 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mltpro
\begin_inset Index idx
status open

\begin_layout Plain Layout
mltpro
\end_layout

\end_inset

(i) multiplicity of the NMR signal (for example the protons of a methyl
 group have mltprot(i)=3)
\end_layout

\begin_layout Subsection*
Example
\end_layout

\begin_layout Standard
Here is a &pcshf namelist example: a molecule with three paramagnetic centers
 and 205 pseudocontact shift constraints.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

&pcshf
\end_layout

\begin_layout Plain Layout

nprot=205,
\end_layout

\begin_layout Plain Layout

nme=3,
\end_layout

\begin_layout Plain Layout

nmpmc='FE ',
\end_layout

\begin_layout Plain Layout

optphi(1)=-0.315416,
\end_layout

\begin_layout Plain Layout

opttet(1)=0.407499,
\end_layout

\begin_layout Plain Layout

optomg(1)=0.0251676,
\end_layout

\begin_layout Plain Layout

opta1(1)=-71.233,
\end_layout

\begin_layout Plain Layout

opta2(1)=1214.511,
\end_layout

\begin_layout Plain Layout

optphi(2)=0.567127,
\end_layout

\begin_layout Plain Layout

opttet(2)=-0.750526,
\end_layout

\begin_layout Plain Layout

optomg(2)=0.355576,
\end_layout

\begin_layout Plain Layout

opta1(2)=-60.390,
\end_layout

\begin_layout Plain Layout

opta2(2)=377.459,
\end_layout

\begin_layout Plain Layout

optphi(3)=0.451203,
\end_layout

\begin_layout Plain Layout

opttet(3)=-0.0113097,
\end_layout

\begin_layout Plain Layout

optomg(3)=0.334824,
\end_layout

\begin_layout Plain Layout

opta1(3)=-8.657,
\end_layout

\begin_layout Plain Layout

opta2(3)=704.786,
\end_layout

\begin_layout Plain Layout

optkon=30,
\end_layout

\begin_layout Plain Layout

iprot(1)=26, obs(1)=1.140, wt(1)=1.000, tolpro(1)=1.00, mltpro(1)=1,
\end_layout

\begin_layout Plain Layout

iprot(2)=28, obs(2)=2.740, wt(2)=1.000, tolpro(2)=.500, mltpro(2)=1,
\end_layout

\begin_layout Plain Layout

iprot(3)=30, obs(3)=1.170, wt(3)=1.000, tolpro(3)=.500, mltpro(3)=1,
\end_layout

\begin_layout Plain Layout

iprot(4)=32, obs(4)=1.060, wt(4)=1.000, tolpro(4)=.500, mltpro(4)=3,
\end_layout

\begin_layout Plain Layout

iprot(5)=33, obs(5)=1.060, wt(5)=1.000, tolpro(5)=.500, mltpro(5)=3,
\end_layout

\begin_layout Plain Layout

iprot(6)=34, obs(6)=1.060, wt(6)=1.000, tolpro(6)=.500, mltpro(6)=3,
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

iprot(205)=1215, obs(205)=.730, wt(205)=1.000, tolpro(205)=.500,
\end_layout

\begin_layout Plain Layout

mltpro(205)=1,
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An 
\emph on
mdin
\emph default
 file that might go along with this, to perform a maximum of 5000 minimization
 cycles, starting with 500 cycles of steepest descent.
 PCSHIFT=./pcs.in redirects the input from the namelist "pcs.in" which contains
 the pseudocontact shift information.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Example of minimization including pseudocontact shift constraints
\end_layout

\begin_layout Plain Layout

&cntrl
\end_layout

\begin_layout Plain Layout

ibelly=0,imin=1,ntpr=100,
\end_layout

\begin_layout Plain Layout

ntr=0,maxcyc=500,
\end_layout

\begin_layout Plain Layout

ncyc=50,ntmin=1,dx0=0.0001,
\end_layout

\begin_layout Plain Layout

drms=.1,cut=10.,
\end_layout

\begin_layout Plain Layout

nmropt=2,pencut=0.1, ipnlty=2,
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

&wt type='REST', istep1=0,istep2=1,value1=0.,
\end_layout

\begin_layout Plain Layout

value2=1.0, /
\end_layout

\begin_layout Plain Layout

&wt type='END' /
\end_layout

\begin_layout Plain Layout

DISANG=./noe.in
\end_layout

\begin_layout Plain Layout

PCSHIFT=./pcs.in
\end_layout

\begin_layout Plain Layout

LISTOUT=POUT
\end_layout

\end_inset


\end_layout

\begin_layout Section

\series bold
\begin_inset CommandInset label
LatexCommand label
name "sec:rdc"

\end_inset

Direct dipolar coupling restraints
\end_layout

\begin_layout Standard
Energy restraints based on direct dipolar coupling constants are entered
 in this section.
 All variables are in the namelist &align; reading of this section is triggered
 by the presence of a DIPOLE line in the I/O redirection section.
\end_layout

\begin_layout Standard
When dipolar coupling restraints are turned on, the five unique elements
 of the alignment tensor are treated as additional variables, and are optimized
 along with the structural parameters.
 Their effective masses are determined by the 
\shape italic
scalm
\shape default
 parameter entered in the &cntrl namelist.
 Unlike some other programs, the variables used are the Cartesian components
 of the alignment tensor in the axis system defined by the molecule itself:
 
\begin_inset Formula $e.g.$
\end_inset

 
\begin_inset Formula $S_{mn}\equiv\left\langle (3\cos\theta_{m}\cos\theta_{n}-\delta_{mn})/2\right\rangle $
\end_inset

, where 
\begin_inset Formula $m,n=x,y,z$
\end_inset

, and 
\begin_inset Formula $\theta_{x}$
\end_inset

 is the angle between the 
\begin_inset Formula $x$
\end_inset

 axis and the spectrometer field.
\begin_inset CommandInset citation
LatexCommand cite
key "Sanders94"
literal "true"

\end_inset

 The factor of 10
\begin_inset Formula $^{5}$
\end_inset

 is just to make the values commensurate with atomic coordinates, since
 both the coordinates and the alignment tensor values will be updated during
 the refinement.
 The calculated dipolar splitting is then 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
D_{calc}=-\left(\frac{10^{-5}\gamma_{i}\gamma_{j}h}{2\pi^{2}r_{ij}^{3}}\right)\sum_{m,n=xyz}\cos\phi_{m}\cdot S_{mn}\cdot\cos\phi_{n}
\]

\end_inset

where 
\begin_inset Formula $\phi_{x}$
\end_inset

 is the angle between the internuclear vector and the 
\begin_inset Formula $x$
\end_inset

 axis.
 Geometrically, the splitting is proportional to the transformation of the
 alignment tensor onto the internuclear axis.
 This is just Eqs.
 (5) and (13) of the above reference, with any internal motion corrections
 (which might be a part of 
\begin_inset Formula $S_{system}$
\end_inset

) set to unity.
 If there is an internal motion correction which is the same for all observation
s, this can be assimilated into the alignment tensor.
 The current code does not allow for variable corrections for internal motion.
 See Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Tsui00a"
literal "true"

\end_inset

 for a fuller discussion of these issues.
\end_layout

\begin_layout Standard
At the end of the calculation, the alignment tensor is diagonalized to obtain
 information about its principal components.
 This allows the alignment tensor to be written in terms of the "axial"
 and "rhombic" components that are often used to describe alignment.
\end_layout

\begin_layout Subsection*

\series bold
Variables in the
\series default
 &align 
\series bold
namelist.

\series default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ndip
\begin_inset Index idx
status open

\begin_layout Plain Layout
ndip
\end_layout

\end_inset

 Number of observed dipolar couplings to be used as restraints.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
id
\begin_inset Index idx
status open

\begin_layout Plain Layout
id
\end_layout

\end_inset

,jd Atom numbers of the two atoms involved in the dipolar coupling.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
dobsl
\begin_inset Index idx
status open

\begin_layout Plain Layout
dobsl
\end_layout

\end_inset

,
\begin_inset space ~
\end_inset

dobsu Limiting values for the observed dipolar splitting, in Hz.
 If the calculated coupling is less than 
\shape italic
dobsl
\shape default
, the energy penalty is proportional to 
\begin_inset Formula $(D_{calc}-D_{obs,l})^{2}$
\end_inset

; if it is larger than 
\shape italic
dobsu
\shape default
, the penalty is proportional to 
\begin_inset Formula $(D_{calc}-D_{obs,lu})^{2}$
\end_inset

.
 Calculated values between 
\shape italic
dobsl
\shape default
 and 
\shape italic
dobsu
\shape default
 are not penalized.
 Note that 
\shape italic
dobsl
\shape default
 must be less than 
\shape italic
dobsu
\shape default
; for example, if the observed coupling is -6 Hz, and a 1 Hz "buffer" is
 desired, you could set 
\shape italic
dobsl
\shape default
 to -7 and 
\shape italic
dobsu
\shape default
 to -5.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
dwt
\begin_inset Index idx
status open

\begin_layout Plain Layout
dwt
\end_layout

\end_inset

 The relative weight of each observed value.
 Default is 1.0.
 The penalty function is thus:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
\begin_inset Formula $E_{align}^{i}=D_{wt}^{i}(D_{calc}^{i}-D_{obs(u,l)}^{i})^{2}$
\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $D_{wt}$
\end_inset

 may vary from one observed value to the next.
 Note that the default value is arbitrary, and a smaller value may be required
 to avoid overfitting the dipolar coupling data.
\begin_inset CommandInset citation
LatexCommand cite
key "Tsui00a"
literal "true"

\end_inset


\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
dataset
\begin_inset Index idx
status open

\begin_layout Plain Layout
dataset
\end_layout

\end_inset

 Each dipolar peak can be associated with a "dataset", and a separate alignment
 tensor will be computed for each dataset.
 This is generally used if there are several sets of experiments, each with
 a different sample or temperature, etc., that would imply a different value
 for the alignment tensor.
 By default, there is one dataset to which each observed value is assigned.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
num_datasets
\begin_inset Index idx
status open

\begin_layout Plain Layout
num
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

datasets
\end_layout

\end_inset

 The number of datasets in the constraint list.
 Default is 1.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
s11
\begin_inset Index idx
status open

\begin_layout Plain Layout
s11
\end_layout

\end_inset

,s12,s13,s22,s23 Initial values for the Cartesian components of the alignment
 tensor.
 The tensor is traceless, so S33 is calculated as -(S11+S22).
 In order to have the order of magnitude of the S values be roughly commensurate
 with coordinates in Angstroms, the alignment tensor values must be multiplied
 by 10
\begin_inset Formula $^{5}$
\end_inset

.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
gigj
\begin_inset Index idx
status open

\begin_layout Plain Layout
gigj
\end_layout

\end_inset

 Product of the nuclear "g" factors for this dipolar coupling restraint.
 These are related to the nuclear gyromagnetic rations by 
\begin_inset Formula $\gamma_{N}=g_{N}\beta_{N}/$
\end_inset

.
 Common values are 
\begin_inset Formula $^{1}$
\end_inset

H = 5.5856, 
\begin_inset Formula $^{13}$
\end_inset

C = 1.4048, 
\begin_inset Formula $^{15}$
\end_inset

N = -0.5663, 
\begin_inset Formula $^{31}$
\end_inset

P = 2.2632.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
dij
\begin_inset Index idx
status open

\begin_layout Plain Layout
dij
\end_layout

\end_inset

 The internuclear distance for observed dipolar coupling.
 If a nonzero value is given, the distance is considered to be fixed at
 the given value.
 If a 
\shape italic
dij
\shape default
 value is zero, its value is computed from the structure, and it is assumed
 to be a variable distance.
 For one-bond couplings, it is usually best to treat the bond distance as
 "fixed" to an effective zero-point vibration value.
\begin_inset CommandInset citation
LatexCommand cite
key "Case99"
literal "true"

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
dcut
\begin_inset Index idx
status open

\begin_layout Plain Layout
dcut
\end_layout

\end_inset

 Controls printing of calculated and observed dipolar couplings.
 Only values where abs(dobs(u,l) - dcalc) is greater than 
\emph on
dcut
\emph default
 will be printed.
 Default is 0.1 Hz.
 Set to a negative value to print all dipolar restraint information.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
freezemol
\begin_inset Index idx
status open

\begin_layout Plain Layout
freezemol
\end_layout

\end_inset

 If this is set to 
\shape italic
.true.
\shape default
, the molecular coordinates are not allowed to vary during dynamics or minimizat
ion: only the elements of the alignment tensor will change.
 This is useful to fit just an alignment tensor to a given structure.
 Default is 
\shape italic
.false.
\shape default
.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:csa"

\end_inset

Residual CSA or pseudo-CSA restraints
\end_layout

\begin_layout Standard
Resonance positions in partially aligned media will be shifted from their
 positions in isotropic media, and this can provide information that is
 very similar to residual dipolar coupling constriants.
 This section shows how to input these sorts of restraints.
 The entry of the alignment tensor is done as in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:rdc"

\end_inset

, so you must have a DIPOLE file (with an &align namelist) even if you don't
 have any RDC restraints.
 Then, if there is a CSA line in I/O redirection section, that file will
 be read with the following inputs:
\end_layout

\begin_layout Subsection*

\series bold
Variables in the
\series default
 &csa 
\series bold
namelist.

\series default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ncsa
\begin_inset Index idx
status open

\begin_layout Plain Layout
ndip
\end_layout

\end_inset

 Number of observed residual CSA peaks to be used as restraints.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
icsa
\begin_inset Index idx
status open

\begin_layout Plain Layout
icsa
\end_layout

\end_inset

,jcsa,kcsa Atom numbers for the csa of interest: 
\emph on
jcsa
\emph default
 is the atom whose 
\begin_inset Formula $\Delta\sigma$
\end_inset

 value has been measured; 
\emph on
icsa
\emph default
 and 
\emph on
kcsa
\emph default
 are two atoms bonded to it, used to define the local axis frame for the
 CSA tensor.
 See 
\emph on
amber12/test/pcsa/RST.csa
\emph default
 for examples of how to set these.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cobsl
\begin_inset Index idx
status open

\begin_layout Plain Layout
cobsl
\end_layout

\end_inset

,
\begin_inset space ~
\end_inset

cobsu Limiting values for the observed residual CSA, in Hz (not ppm or ppb!).
 If the calculated value of 
\begin_inset Formula $\Delta\sigma$
\end_inset

 is less than 
\shape italic
cobsl
\shape default
, the energy penalty is proportional to 
\begin_inset Formula $(\Delta\sigma_{calc}-\Delta\sigma_{obs,l})^{2}$
\end_inset

; if it is larger than 
\shape italic
cobsu
\shape default
, the penalty is proportional to 
\begin_inset Formula $(\Delta\sigma_{calc}-\Delta\sigma_{obs,u})^{2}$
\end_inset

.
 Calculated values between 
\shape italic
cobsl
\shape default
 and 
\shape italic
cobsu
\shape default
 are not penalized.
 Note that 
\shape italic
cobsl
\shape default
 must be less than 
\shape italic
cobsu
\shape default
.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
cwt
\begin_inset Index idx
status open

\begin_layout Plain Layout
cwt
\end_layout

\end_inset

 The relative weight of each observed value.
 Default is 1.0.
 The penalty function is thus:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
\begin_inset Formula $E_{csa}^{i}=C_{wt}^{i}(\Delta\sigma_{calc}^{i}-\Delta\sigma_{obs(u,l)}^{i})^{2}$
\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $C_{wt}$
\end_inset

 may vary from one observed value to the next.
 Note that the default value is arbitrary, and a smaller value may be required
 to avoid overfitting the data.
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
datasetc
\begin_inset Index idx
status open

\begin_layout Plain Layout
datasetc
\end_layout

\end_inset

 Each residual CSA can be associated with a "dataset", and a separate alignment
 tensor will be computed for each dataset.
 This is generally used if there are several sets of experiments, each with
 a different sample or temperature, etc., that would imply a different value
 for the alignment tensor.
 By default, there is one dataset to which each observed value is assigned.
 The tensors themselves are entered for each dataset in the DIPOLE file.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
field Magnetic field (in MHz) for the residual CSA being considered here.
 This is indexed from 1 to 
\emph on
ncsa,
\emph default
 and is nucleus dependent.
 For example, if the proton frequency is 600 MHz, then 
\emph on
field
\emph default
 for 
\begin_inset Formula $^{13}$
\end_inset

C would be 150, and that for 
\begin_inset Formula $^{15}$
\end_inset

N would be 60.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
sigma11,
\begin_inset space ~
\end_inset

sigma22,
\begin_inset space ~
\end_inset

sigma12,
\begin_inset space ~
\end_inset

sigma13,
\begin_inset space ~
\end_inset

sigma23 Values of the CSA tensor (in ppm) for atom 
\emph on
icsa
\emph default
, in the local coordinate frame defined by atoms 
\emph on
icsa
\emph default
, 
\emph on
jcsa
\emph default
 and 
\emph on
kcsa
\emph default
.
 See 
\emph on
test/pcsa/RST.csa
\emph default
 for examples of how to set these.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ccut
\begin_inset Index idx
status open

\begin_layout Plain Layout
ccut
\end_layout

\end_inset

 Controls printing of calculated and observed residual CSAs.
 Only values where abs(cobs(u,l) - ccalc) is greater than 
\emph on
ccut
\emph default
 will be printed.
 Default is 0.1 Hz.
 Set to a negative value to print all information.
 
\end_layout

\begin_layout Standard
The residual CSA facility is new as of Amber 10, and has not been used as
 much as other parts of the NMR refinement package.
 You should study the example files listed above to see how things work.
 The residual CSA values should closely match those found by the RAMAH package
 (
\emph on
http://www-personal.umich.edu/~hashimi/Software.html
\emph default
), and testing this should be a first step in making sure you have entered
 the data correctly.
\end_layout

\begin_layout Section

\series bold
Preparing restraint files for Sander
\begin_inset CommandInset label
LatexCommand label
name "sec:nmr-to-rst"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename nmrinfo.pdf
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:nmrinfo"

\end_inset

Notation: 
\emph on
circles
\emph default
 represent logical information, whose format might differ from one project
 to the next; 
\emph on
solid rectangles
\emph default
 are in a specific format (largely compatible with DIANA and other programs),
 and are intended to be read and edited by the user; 
\emph on
ellipses
\emph default
 are specific to 
\emph on
sander
\emph default
, and are generally not intended to be read or edited manually.
 The conversion of NOESY volumes to distance bounds can be carried out by
 a variety of programs such as 
\emph on
mardigras
\emph default
 or 
\emph on
xpk2bound
\emph default
 that are not included with Amber.
 Similarly, the analysis and partial assignment of ambiguous or overlapped
 peaks is a separate task; at TSRI, these are typically carried out using
 the programs 
\emph on
xpkasgn
\emph default
 and 
\emph on
filter.pl
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:nmrinfo"

\end_inset

 shows the general information flow for auxiliary programs that help prepare
 the restraint files.
 Once the restraint files are made, Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:nmrinfo2"

\end_inset

 shows a flow-chart of the general way in which 
\shape italic
sander
\shape default
 refinements are carried out.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename nmrinfo2.pdf
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:nmrinfo2"

\end_inset

General organization of NMR refinement calculations.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The basic ideas of this scheme owe a lot to the general experience of the
 NMR community over the past decade.
 Several papers outline procedures in the Scripps group, from which a lot
 of the NMR parts of 
\shape italic
sander
\shape default
 are derived.
\begin_inset CommandInset citation
LatexCommand cite
key "Duggan01,Gippert90,Case93,Case94,Bruschweiler94,Case98"
literal "true"

\end_inset

 They are by no means the only way to proceed.
 We hope that the flexibility incorporated into 
\shape italic
sander
\shape default
 will encourage folks to experiment with refinement protocols.
\end_layout

\begin_layout Subsection

\series bold
Preparing distance restraints: makeDIST_RST
\end_layout

\begin_layout Standard
The 
\shape italic
makeDIST_RST
\shape default
 program converts a simplified description of distance bounds into a detailed
 input for 
\shape italic
sander
\shape default
.
 A variety of input and output filenames may be specified on the command
 line:
\end_layout

\begin_layout Standard
input:
\end_layout

\begin_layout LyX-Code
-upb 
\begin_inset Formula $<$
\end_inset

filename
\begin_inset Formula $>$
\end_inset

 
\shape italic
7-col file of upper distance bounds, OR
\end_layout

\begin_layout LyX-Code
-ual 
\begin_inset Formula $<$
\end_inset

filename
\begin_inset Formula $>$
\end_inset

 
\shape italic
8-col file of upper and lower bounds, OR
\end_layout

\begin_layout LyX-Code
-vol 
\begin_inset Formula $<$
\end_inset

filename
\begin_inset Formula $>$
\end_inset

 
\shape italic
7-col file of NOESY volumes
\end_layout

\begin_layout LyX-Code
-pdb 
\begin_inset Formula $<$
\end_inset

filename
\begin_inset Formula $>$
\end_inset

 
\shape italic
Brookhaven format file
\end_layout

\begin_layout LyX-Code
-map 
\begin_inset Formula $<$
\end_inset

filename
\begin_inset Formula $>$
\end_inset

 
\shape italic
MAP file (default:map.DG-AMBER)
\end_layout

\begin_layout LyX-Code
-les 
\begin_inset Formula $<$
\end_inset

filename
\begin_inset Formula $>$
\end_inset

 
\shape italic
LES atom mappings, made by addles
\end_layout

\begin_layout Standard
output:
\end_layout

\begin_layout LyX-Code
-dgm 
\begin_inset Formula $<$
\end_inset

filename
\begin_inset Formula $>$
\end_inset

 
\shape italic
DGEOM95 restraint format
\end_layout

\begin_layout LyX-Code
-rst 
\begin_inset Formula $<$
\end_inset

filename
\begin_inset Formula $>$
\end_inset

 
\shape italic
SANDER restraint format
\end_layout

\begin_layout LyX-Code
-svf 
\begin_inset Formula $<$
\end_inset

filename
\begin_inset Formula $>$
\end_inset

 
\shape italic
Sander Volume Format, for NOESY refinement
\end_layout

\begin_layout Standard
other options:
\end_layout

\begin_layout LyX-Code
-help 
\shape italic
(gives you this explanation, overrides other parameters)
\end_layout

\begin_layout LyX-Code
-report 
\shape italic
(gives you short runtime diagnostic output)
\end_layout

\begin_layout LyX-Code
-nocorr 
\shape italic
(do not correct upper bound for r**-6 averaging)
\end_layout

\begin_layout LyX-Code
-altdis 
\shape italic
(use alternative form for the distance restraints)
\end_layout

\begin_layout Standard
The 
\shape italic
7/8 column distance bound
\shape default
 file is essentially that used by the DIANA or DISGEO programs.
 It consists of one-line per restraint, which would typically look like
 the following:
\end_layout

\begin_layout LyX-Code
23 ALA HA 52 VAL H 3.8 # comments go here
\end_layout

\begin_layout Standard
The first three columns identify the first proton, the next three the second
 proton, and the seventh column gives the upper bound.
 Only the first three letters of the residue name are used, so that DIANA
 files that contain residues like "ASP-" will be correctly interpreted.
 An alternate, 8-column, format has both upper and lower bounds as the seventh
 and eighth columns, respectively.
 A typical line might in an "8-col" file might look like this:
\end_layout

\begin_layout LyX-Code
23 ALA HA 52 VAL H 3.2 3.8 # comments go here
\end_layout

\begin_layout Standard
Here the lower bound is 3.2 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AA
\end_layout

\end_inset

 and the upper bound is 3.8 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AA
\end_layout

\end_inset

.
 Comments typically identify the spectrum and peak-number or other identificatio
n that allow cross-referencing back to the appropriate spectrum.
 If the comment contains the pattern "
\begin_inset Formula $<$
\end_inset

integer
\begin_inset Formula $>$
\end_inset

:
\begin_inset Formula $<$
\end_inset

integer
\begin_inset Formula $>$
\end_inset

", then the first integer is treated as a peak-identifier, and the second
 as a spectrum-identifier.
 These identifiers go into the 
\shape italic
ixpk
\shape default
 and 
\shape italic
nxpk
\shape default
 variables, and will later be printed out in 
\shape italic
sander
\shape default
, to facilitate going back to the original spectra to track down violations,
 etc.
\end_layout

\begin_layout Standard
The format for the 
\shape italic
-vol
\shape default
 option is the same as for the 
\shape italic
-upb
\shape default
 option except that the seventh column holds a peak intensity (volume) value,
 rather than a distance upper bound.
\end_layout

\begin_layout Standard
The input PDB file must exactly match the Amber 
\shape italic
prmtop
\shape default
 file that will be used; use the ambpdb -aatm command to create this.
\end_layout

\begin_layout Standard
If all peaks involved just single protons, and were fully assigned, this
 is all that one would need.
 In general, though, some peaks (especially methyl groups or fast-rotating
 aromatic rings) represent contributions from more than one proton, and
 many other peaks may not be fully assigned.
 
\shape italic
Sander
\shape default
 handles both of these situations in the same way, through the notion of
 an "ambiguous" peak, that may correspond to several assignments.
 These peaks are given two types of special names in the 7/8-column format
 file:
\end_layout

\begin_layout Enumerate
Commonly-occurring ambiguities, like the lack of stereospecific assignments
 to two methylene protons, are given names defined in the default MAP file.
 These names, also more-or-less consistent with DIANA, are like the names
 of "pseudo-atoms" that have long been used to identify such partially assigned
 peaks, e.g.
 "QB" refers to the (HB2,HB3) combination in most residues, and "MG1" in
 valine refers collectively to the three methyl protons at position CG1,
 etc.
\end_layout

\begin_layout Enumerate
There are generally also molecule-specific ambiguities, arising from potential
 overlap in a NOESY spectrum.
 Here, the user assigns a unique name to each such ambiguity or overlap,
 and prepares a list of the potential assignments.
 The names are arbitrary, but might be constructed, for example, from the
 chemical shifts that identify the peak, e.g.
 "p_2.52" might identify the set of protons that could contribute to a peak
 at 2.52 ppm.
 The chemical shift list can be used to prepare a list of potential assignments,
 and these lists can often be pruned by comparison to approximate or initial
 structures.
\end_layout

\begin_layout Standard
The default and molecule-specific MAP files are combined into a single file,
 which is used, along with the 7-column restraint file, the the program
 
\shape italic
makeDIST_RST
\shape default
 to construct the actual 
\shape italic
sander
\shape default
 input files.
 You should consult the help file for makeDIST_RST for more information.
 For example, here are some lines added to the MAP file for a recent TSRI
 refinement:
\end_layout

\begin_layout LyX-Code
AMBIG n2:68 = HE 86 HZ 86
\end_layout

\begin_layout LyX-Code
AMBIG n2:72 = HE 24 HD 24 HZ 24
\end_layout

\begin_layout LyX-Code
AMBIG n2:73 = HN 81 HZ 13 HE 13 HD 13 HZ 24
\end_layout

\begin_layout LyX-Code
AMBIG n2:78 = HN 76 HZ 13 HE 13 HZ 24
\end_layout

\begin_layout LyX-Code
AMBIG n2:83 = HN 96 HN 97 HD 97 HD 91
\end_layout

\begin_layout LyX-Code
AMBIG n2:86 = HD1 66 HZ2 66
\end_layout

\begin_layout LyX-Code
AMBIG n2:87 = HN 71 HH2 66 HZ3 66 HD1 66
\end_layout

\begin_layout Standard
Here the spectrum name and peak number were used to construct a label for
 each ambiguous peak.
 Then, an entry in the restraint file might look like this:
\end_layout

\begin_layout LyX-Code
123 GLY HN 0 AMB n2:68 5.5
\end_layout

\begin_layout Standard
indicating a 5.5 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AA
\end_layout

\end_inset

 upper bound between the amide proton of Gly 123 and a second proton, which
 might be either the HE or HZ protons of residue 86.
 (The "zero" residue number just serves as a placeholder, so that there
 will be the same number of columns as for non-ambiguous restraints.) If
 it is possible that the ambiguous list might not be exhaustive (e.g.
 if some protons have not been assigned), it is safest to set 
\shape italic
ialtd
\shape default
=1, which will allow "mistakes" to be present in the constraint list.
 On the other hand, if you want to be sure that every violation is "active",
 set 
\shape italic
ialtd
\shape default
=0.
\end_layout

\begin_layout Standard
If the 
\shape italic
-les
\shape default
 flag is set, the program will prepare distance restraints for multiple
 copies (LES) simulations.
 In this case, the input PDB file is one 
\shape italic
without
\shape default
 LES copies, i.e.
 with just a single copy of the molecule.
 The "lesfile" specified by this flag is created by the 
\shape italic
addles
\shape default
 program, and contains a mapping from original atom numbers into the copy
 numbers used in the multiple-copies simulation.
\end_layout

\begin_layout Standard
The 
\shape italic
-rst
\shape default
 and 
\shape italic
-svf
\shape default
 flags specify outputs for 
\shape italic
sander
\shape default
, for distance restraints and NOESY restraints, respectively.
 In each case, you may need to hand-edit the outputs to add additional parameter
s.
 You should make it a habit to compare the outputs with the descriptions
 given earlier in this chapter to make sure that the restraints are what
 you want them to be.
\end_layout

\begin_layout Standard
It is common to run makeDIST_RST several times, with different inputs that
 correspond to different spectra, different mixing times, etc.
 It is then expected that you will manually edit the various output files
 to combine them into the single file required by 
\shape italic
sander
\shape default
.
\end_layout

\begin_layout Subsection

\series bold
Preparing torsion angle restraints: makeANG_RST
\end_layout

\begin_layout Standard
There are fewer "standards" for representing coupling constant information.
 We have followed the DIANA convention in the program 
\shape italic
makeANG_RST
\shape default
.
 This program takes as input a five-column torsion angle constraint file
 along with an Amber PDB file of the molecule.
 It creates as output (to standard out) a list of constraints in RST format
 that is readable by Amber.
\end_layout

\begin_layout LyX-Code
Usage: makeANG_RST -help
\end_layout

\begin_layout LyX-Code
makeANG_RST -pdb ambpdb_file [-con constraint] [-lib libfile]
\end_layout

\begin_layout LyX-Code
[-les lesfile ]
\end_layout

\begin_layout Standard
The input torsion angle constraint file can be read from standard in or
 from a file specified by the -con option on the command line.
 The input constraint file should look something like this:
\end_layout

\begin_layout LyX-Code
1 GUA PPA 111.5 144.0
\end_layout

\begin_layout LyX-Code
2 CYT EPSILN 20.9 100.0
\end_layout

\begin_layout LyX-Code
2 CYT PPA 115.9 134.2
\end_layout

\begin_layout LyX-Code
3 THY ALPHA 20.4 35.6
\end_layout

\begin_layout LyX-Code
4 ADE GAMMA 54.7 78.8
\end_layout

\begin_layout LyX-Code
5 GLY PHI 30.5 60.3
\end_layout

\begin_layout LyX-Code
6 ALA CHI 20.0 50.0
\end_layout

\begin_layout LyX-Code
....
\end_layout

\begin_layout Standard
Lines beginning with "#" are ignored.
 The first column is the residue number; the second is the residue name
 (three letter code, or as defined in your personal torsion library file).
 Only the first three letters of the residue name are used, so that DIANA
 files that contain residues like "ASP-" will be correctly interpreted.
 Third is the angle name (taken from the torsion library described below).The
 fourth column contains the lower bound, and the fifth column specifies
 the upper bound.
 Additional material on the line is (presently) ignored.
\end_layout

\begin_layout Standard

\shape italic
Note
\shape default
: It is assumed that the lower bound and the upper bound define a region
 of allowed conformation on the unit circle that is swept out in a clockwise
 direction from 
\begin_inset Formula $lb\rightarrow ub$
\end_inset

.
 If the number in the 
\shape italic
lb
\shape default
 column is greater than the the number in the 
\shape italic
ub
\shape default
 column, 360
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textdegree
\end_layout

\end_inset

 will successively be subtracted from the 
\shape italic
lb
\shape default
 until 
\begin_inset Formula $lb<ub$
\end_inset

.
 This preserves the clockwise definition of the allowed conformation space,
 while also making the number that specifies the lower bound less than the
 number that specifies the upper bound, as is required by Amber.
 If this occurs, a warning message will be printed to 
\shape italic
stderr
\shape default
 to notify the user that the data has been modified.
\end_layout

\begin_layout Standard
The angles that one can constrain in this manner are defined in the library
 file that can be optionally specified on the command line with the -lib
 flag, or the default library "tordef.lib" (written by Garry P.
 Gippert) will be used.
 If you wish to specify your own nomenclature, or add angles that are not
 already defined in the default file, you should make a copy of this file
 and modify it to suit your needs.
 The general format for an entry in the library is:
\end_layout

\begin_layout LyX-Code
LEU PSI N CA C N+
\end_layout

\begin_layout Standard
where the first column is the residue name, the second column is the angle
 name that will appear in the input file when specifying this angle, and
 the last four columns are the atom names that define the torsion angle.
 When a torsion angle contains atom(s) from a preceding or succeeding residue
 in the structure, a "-" or "+" is appended to those atom names in the library,
 thereby specifying that this is the case.
 In the example above, the atoms that define PSI for LEU residues are the
 N, CA, and C atoms of that same LEU and the N atom of the residue after
 that LEU in the primary structure.
 Note that the order of atoms in the definition is important and should
 reflect that the torsion angle rotates about the two central atoms as well
 as the fact that the four atoms are bonded in the order that is specified
 in the definition.
\end_layout

\begin_layout Standard
If the first letter of the second field is "J", this torsion is assumed
 to be a J-coupling constraint.
 In that case, three additional floats are read at the end of the line,
 giving the A,B and C coefficients for the Karplus relation for this torsion.
 For example:
\end_layout

\begin_layout LyX-Code
ALA JHNA H N CA HA 9.5 -1.4 0.3
\end_layout

\begin_layout Standard
will set up a J-coupling restraint for the HN-HA 3-bond coupling, assuming
 a Karplus relation with A,B, C as 9.5, -1.4 and 0.3.
 (These particular values are from Brüschweiler and Case, JACS 116: 11199
 (1994).)
\end_layout

\begin_layout Standard
This program also supports pseudorotation phase angle constraints for prolines
 and nucleic acid sugars; each of these will generate restraints for the
 5 component angles which correspond to the 
\shape italic
lb
\shape default
 and 
\shape italic
ub
\shape default
 values of the input pseudorotation constraint.
 In the torsion library, a pseudorotation definition looks like:
\end_layout

\begin_layout LyX-Code
PSEUDO CYT PPA NU0 NU1 NU2 NU3 NU4
\end_layout

\begin_layout LyX-Code
CYT NU0 C4' O4' C1' C2'
\end_layout

\begin_layout LyX-Code
CYT NU1 O4' C1' C2' C3'
\end_layout

\begin_layout LyX-Code
CYT NU2 C1' C2' C3' C4'
\end_layout

\begin_layout LyX-Code
CYT NU3 C2' C3' C4' O4'
\end_layout

\begin_layout LyX-Code
CYT NU4 C3' C4' O4' C1'
\end_layout

\begin_layout Standard
The first line describes that a PSEUDOrotation angle is to be defined for
 CYT that is called PPA and is made up of the five angles NU0-NU4.
 Then the definition for NU0-NU4 should also appear in the file in the same
 format as the example given above for LEU PSI.
\end_layout

\begin_layout Standard
PPA stands for Pseudorotation Phase Angle and is the angle that should appear
 in the input constraint file when using pseudorotation constraints.
 The program then uses the definition of that PPA angle in the library file
 to look for the 5 other angles (NU0-NU4 in this case) which it then generates
 restraints for.
 PPA for proline residues is included in the standard library as well as
 for the DNA nucleotides.
\end_layout

\begin_layout Standard
If the 
\shape italic
-les
\shape default
 flag is set, the program will prepare torsion angle restraints for multiple
 copies (LES) simulations.
 In this case, the input PDB file is one 
\shape italic
without
\shape default
 LES copies, i.e.
 with just a single copy of the molecule.
 The "lesfile" specified by this flag is created by the 
\shape italic
addles
\shape default
 program, and contains a mapping from original atom numbers into the copy
 numbers used in the multiple-copies simulation.
\end_layout

\begin_layout Standard
Torsion angle constraints defined here cannot span two different copy sets,
 i.e., there cannot be some atoms of a particular torsion that are in one
 multiple copy set, and other atoms from the same torsion that are in other
 copy sets.
 It 
\shape italic
is
\shape default
 OK to have some atoms with single copies, and others with multiple copies
 in the same torsion.
 The program will create as many duplicate torsions as there are copies.
\end_layout

\begin_layout Standard
A good alternative to interpreting J-coupling constants in terms of torsion
 angle restraints is to refine directly against the coupling constants themselve
s, using an appropriate Karplus relation.
 See the discussion of the variable RJCOEF, above.
\end_layout

\begin_layout Subsection

\series bold
Chirality restraints: makeCHIR_RST
\end_layout

\begin_layout LyX-Code
Usage: makeCHIR_RST 
\begin_inset Formula $<$
\end_inset

pdb-file
\begin_inset Formula $>\quad<$
\end_inset

output-constraint-file
\begin_inset Formula $>$
\end_inset


\end_layout

\begin_layout Standard
We also find it useful to add chirality constraints and 
\shape italic
trans
\shape default
-peptide 
\begin_inset Formula $\omega$
\end_inset

 constraints (where appropriate) to prevent chirality inversions or peptide
 bond flips during the high-temperature portions of simulated annealing
 runs.
 The program 
\shape italic
makeCHIR_RST
\shape default
 will create these constraints.
 Note that you may have to edit the output of this program to change 
\shape italic
trans
\shape default
 peptide constraints to 
\shape italic
cis
\shape default
, as appropriate.
\end_layout

\begin_layout Subsection

\series bold
Direct dipolar coupling restraints: makeDIP_RST
\end_layout

\begin_layout Standard
For simulations with residual dipolar coupling restraints, the 
\shape italic
makeDIP_RST.protein
\shape default
, 
\shape italic
makeDIP_RST.dna
\shape default
 and 
\shape italic
makeDIP_RST.diana
\shape default
 are simple codes to prepare the input file.
 Use 
\shape italic
-help
\shape default
 to obtain a more detailed description of the usage.
 For now, this code only handles backbone NH and C
\begin_inset Formula $\alpha$
\end_inset

H data.
 The header specifying values for various parameters needs to be manually
 added to the output of 
\shape italic
makeDIP_RST
\shape default
.
\end_layout

\begin_layout Standard
Use of residual dipolar coupling restraints is new both for Amber and for
 the general NMR community.
 Refinement against these data should be carried out with care, and the
 optimal values for the force constant, penalty function, and initial guesses
 for the alignment tensor components are still under investigation.
 Here are some suggestions from the experiences so far:
\end_layout

\begin_layout Enumerate
Beware of overfitting the dipolar coupling data in the expense of Amber
 force field energy.
 These dipolar coupling data are very sensitive to tiny changes in the structure.
 It is often possible to drastically improve the fitting by making small
 distortions in the backbone angles.
 We recommend inclusion of explicit angle restraints to enforce ideal backbone
 geometry, especially for those residues that have corresponding residual
 dipolar coupling data.
\end_layout

\begin_layout Enumerate
The initial values for the Cartesian components of the alignment tensor
 can influence the final structure and alignment if the structure is not
 fixed (ibelly = 0).
 For a fixed structure (ibelly = 1), these values do not matter.
 Therefore, the current "best" strategy is to fit the experimental data
 to the fixed starting structure, and use the alignment tensor[s] obtained
 from this fitting as the initial guesses for further refinement.
\end_layout

\begin_layout Enumerate
Amber is capable of simultaneously fitting more than one set of alignment
 data.
 This allows the use of individually obtained datasets with different alignment
 tensors.
 However, if the different sets of data have equal directions of alignment
 but different magnitudes, using an overall scaling factor for these data
 with a single alignment tensor could greatly reduce the number of fitting
 parameters.
\end_layout

\begin_layout Enumerate
Because the dipolar coupling splittings depend on the square root of the
 order parameters (0 
\begin_inset Formula $\le$
\end_inset

 S2 
\begin_inset Formula $\le$
\end_inset

1), these order parameters describing internal motion of individual residues
 are often neglected (N.
 Tjandra and A.
 Bax, 
\shape italic
Science
\shape default
 
\series bold
278
\series default
, 1111-1113, 1997).
 However, the square root of a small number can still be noticeably smaller
 than 1, so this may introduce undesirable errors in the calculations.
\end_layout

\begin_layout Subsection
Using NMR exchange format (NEF) files
\end_layout

\begin_layout Standard
The NMR community, in collaboration with the worldwide PDB, is developing
 a common format for encoding of NMR restraints, including all of the kinds
 discussed above.
 This format is not yet finalized, but we are including here a conversion
 script, 
\emph on
nef_to_RST
\emph default
, that would convert these files to 
\emph on
sander
\emph default
 format.
 Because this format is so new, and is still subject to revisions, care
 should be taken in using this script: make sure that the output files do
 what they should be doing.
 Here are the usage instructions (which you can also get by typing 
\begin_inset Quotes eld
\end_inset

nef_to_RST -help
\begin_inset Quotes erd
\end_inset

 at the command line:
\end_layout

\begin_layout LyX-Code
# nef_to_RST
\end_layout

\begin_layout LyX-Code
convert NEF restraints to Amber format
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
input:
\end_layout

\begin_layout LyX-Code
   -nef <filename>: NEF file
\end_layout

\begin_layout LyX-Code
   -pdb <filename>: PDBFILE using AMBER nomenclature and numbering
\end_layout

\begin_layout LyX-Code
   -map <filename>: MAP file  (default:map.NEF-AMBER)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
output:
\end_layout

\begin_layout LyX-Code
   -rst <filename>:  SANDER restraint format
\end_layout

\begin_layout LyX-Code
   -rdc <filename>:  SANDER DIP format
\end_layout

\begin_layout LyX-Code
   
\end_layout

\begin_layout LyX-Code
other options:
\end_layout

\begin_layout LyX-Code
   -nocorr (do not correct upper bound for r**-6 averaging)
\end_layout

\begin_layout LyX-Code
   -altdis (use alternative form for the distance restraints)
\end_layout

\begin_layout LyX-Code
   -help   (gives you this explanation, overrides other parameters)
\end_layout

\begin_layout LyX-Code
   -report (gives you short runtime diagnostic output)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
errors come to stderr.
\end_layout

\begin_layout Section

\series bold
Getting summaries of NMR violations
\end_layout

\begin_layout Standard
If you specify LISTOUT=POUT when running 
\shape italic
sander
\shape default
, the output file will contain a lot of detailed information about the remaining
 restraint violations at the end of the run.
 When running a family of structures, it can be useful to process these
 output files with 
\shape italic
sviol
\shape default
, which takes a list of 
\shape italic
sander
\shape default
 output files on the command line, and sends a summary of energies and violation
s to STDOUT.
 If you have more than 20 or so structures to analyze, the output from 
\shape italic
sviol
\shape default
 becomes unwieldy.
 In this case you may also wish to use 
\shape italic
sviol2
\shape default
, which prints out somewhat less detailed information, but which can be
 used on larger families of structures.
 The 
\shape italic
senergy
\shape default
 script gives a more detailed view of force-field energies from a series
 of structures.
 (We thank the TSRI NMR community for helping to put these scripts together,
 and for providing many useful suggestions.)
\end_layout

\begin_layout Section

\series bold
Time-averaged restraints
\end_layout

\begin_layout Standard
The model of the previous sections involves the "single-average-structure"
 idea, and tries to fit all constraints to a single model, with minimal
 deviations.
 A generalization of this model treats distance constraints arising from
 from NOE crosspeaks (for example) as being the average distance determined
 from a trajectory, rather than as the single distance derived from an average
 structure.
\end_layout

\begin_layout Standard
Time-averaged bonds and angles are calculated as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\bar{r}=(1/C)\left\{ \int_{0}^{t}e^{(t'-t)/\tau}r(t')^{-i}dt'\right\} ^{-1/i}\label{eq:timeav}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\bar{r}$
\end_inset

 = time-averaged value of the internal coordinate (distance or angle)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $t$
\end_inset

 = the current time
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\tau$
\end_inset

 = the exponential decay constant
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $r(t')$
\end_inset

 = the value of the internal coordinate at time t'
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $i$
\end_inset

 = average is over internals to the inverse of 
\begin_inset Formula $i$
\end_inset

.
 Usually 
\begin_inset Formula $i$
\end_inset

 = 3 or 6 for NOE distances, and -1 (linear averaging) for angles and torsions.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $C$
\end_inset

 = a normalization integral.
\end_layout

\begin_layout Standard
Time-averaged torsions are calculated as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
<\varphi>=\tan^{-1}\left(<\sin(\phi)>/<\cos(\phi)>\right)
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\phi$
\end_inset

 is the torsion, and 
\begin_inset Formula $<\sin(\phi)>$
\end_inset

 and 
\begin_inset Formula $<\cos(\phi)>$
\end_inset

 are calculated using the equation above with 
\begin_inset Formula $\sin(\phi(t'))$
\end_inset

 or 
\begin_inset Formula $\cos(\phi(t'))$
\end_inset

 substituted for 
\begin_inset Formula $r(t')$
\end_inset

.
\end_layout

\begin_layout Standard
Forces for time-averaged restraints can be calculated either of two ways.
 This option is chosen with the DISAVI / ANGAVI / TORAVI commands.
 In the first (the default), 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\partial E/\partial x=(\partial E/\partial\bar{r})(\partial\bar{r}/\partial r(t))(\partial r(t)/\partial x)\label{eq:tavforce1}
\end{equation}

\end_inset

(and analogously for y and z).
 The forces then correspond to the standard flat-bottomed well functional
 form, with the instantaneous value of the internal replaced by the time-average
d value.
 For example, when 
\begin_inset Formula $r_{3}<\bar{r}<r_{4}$
\end_inset

,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
E=k_{3}(\bar{r}-r_{3})^{2}
\]

\end_inset

and similarly for other ranges of 
\begin_inset Formula $\bar{r}$
\end_inset

.
\end_layout

\begin_layout Standard
When the second option for calculating forces is chosen (IINC = 1 on a DISAVI,
 ANGAVI or TORAVI card), forces are calculated as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\partial E/\partial x=(\partial E/\partial\bar{r})(\partial r(t)/\partial x)\label{eq:tavforce2}
\end{equation}

\end_inset

For example, when 
\begin_inset Formula $r_{3}<\bar{r}<r_{4}$
\end_inset

, 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\partial E/\partial x=2k_{3}(\bar{r}-r_{3})(\partial r(t)/\partial x)
\]

\end_inset

Integration of this equation does not give Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:tavforce1"

\end_inset

, but rather a non-intuitive expression for the energy (although one that
 still forces the bond to the target range).
 The reason that it may sometimes be preferable to use this second option
 is that the term 
\begin_inset Formula $\partial\bar{r}/\partial r(t)$
\end_inset

, which occurs in the exact expression [Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:tavforce1"

\end_inset

], varies as 
\begin_inset Formula $(\bar{r}/r(t))^{1+i}$
\end_inset

.
 When 
\begin_inset Formula $i$
\end_inset

=3, this means the forces can be varying with the fourth power the distance,
 which can possibly lead to very large transient forces and instabilities
 in the molecular dynamics trajectory.
 [Note that this will not be the case when linear scaling is performed,
 i.e.
 when 
\begin_inset Formula $i=-$
\end_inset

1, as is generally the case for valence and torsion angles.
 Thus, for linear scaling, the default (exact) force calculation should
 be used].
\end_layout

\begin_layout Standard
It should be noted that forces calculated using Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:tavforce2"

\end_inset

 are not conservative forces, and would cause the system to gradually heat
 up, if no velocity rescaling were performed.
 The temperature coupling algorithm should act to maintain the average temperatu
re near the target value.
 At any rate, this heating tendency should not be a problem in simulations,
 such as fitting NMR data, where MD is being used to sample conformational
 space rather than to extract thermodynamic data.
\end_layout

\begin_layout Standard
This section has described the methods of time-averaged restraints.
 For more discussion, the interested user is urged to consult studies where
 this method has been used.
\begin_inset CommandInset citation
LatexCommand cite
key "Torda89,Pearlman91,Torda93,Pearlman94,Pearlman94a"
literal "true"

\end_inset


\end_layout

\begin_layout Section

\series bold
Multiple copies refinement using LES
\end_layout

\begin_layout Standard
NMR restraints can be made compatible with the multiple copies (LES) facility;
 see the following chapter for more information about LES.
 To use NMR constraints with LES, you need to do two things:
\end_layout

\begin_layout Standard
(1) Add a line like "file wnmr name=(lesnmr) wovr" to your input to 
\shape italic
addles.

\shape default
 The filename (lesnmr in this example) may be whatever you wish.
 This will cause 
\shape italic
addles
\shape default
 to output an additional file that is needed at the next step.
\end_layout

\begin_layout Standard
(2) Add "-les lesnmr" to the command line arguments to 
\shape italic
makeDIST_RST
\shape default
.
 This will read in the file created by 
\shape italic
addles
\shape default
 containing information about the copies.
 All NMR restraints will then be interpreted as "ambiguous" restraints,
 so that if any of the copies satisfies the restraint, the penalty goes
 to zero.
\end_layout

\begin_layout Standard
Note that although this scheme has worked well on small peptide test cases,
 we have yet not used it extensively for larger problems.
 This should be treated as an experimental option, and users should use
 caution in applying or interpreting the results.
\end_layout

\begin_layout Section

\series bold
Some sample input files
\end_layout

\begin_layout Standard
The next few pages contain excerpts from some sample NMR refinement files
 used at TSRI.
 The first example just sets up a simple (but often effective) simulated
 annealing run.
 You may have to adjust the length, temperature maximum, etc.
 somewhat to fit your problem, but these values work well for many "ordinary"
 NMR problems.

\series bold
 
\end_layout

\begin_layout Subsection

\series bold
1.
 Simulated annealing NMR refinement
\series default
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

15ps simulated annealing protocol 
\end_layout

\begin_layout Plain Layout

&cntrl 
\end_layout

\begin_layout Plain Layout

  nstlim=15000, ntt=1, !(time limit, temp.
 control) 
\end_layout

\begin_layout Plain Layout

  ntpr=500, pencut=0.1, !(control of printout) 
\end_layout

\begin_layout Plain Layout

  ipnlty=1, nmropt=1, !(NMR penalty function options)
\end_layout

\begin_layout Plain Layout

  vlimit=10, !(prevent bad temp.
 jumps)
\end_layout

\begin_layout Plain Layout

  ntb=0, !(non-periodic simulation)
\end_layout

\begin_layout Plain Layout

  igb=8, !(generalize Born solvent model)
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

# 
\end_layout

\begin_layout Plain Layout

# Simple simulated annealing algorithm: 
\end_layout

\begin_layout Plain Layout

# 
\end_layout

\begin_layout Plain Layout

# from steps 0 to 1000: raise target temperature 10-1200K 
\end_layout

\begin_layout Plain Layout

# from steps 1000 to 3000: leave at 1200K 
\end_layout

\begin_layout Plain Layout

# from steps 3000 to 15000: re-cool to low temperatures 
\end_layout

\begin_layout Plain Layout

# 
\end_layout

\begin_layout Plain Layout

&wt type='TEMP0', istep1=0,istep2=1000,value1=10., 
\end_layout

\begin_layout Plain Layout

  value2=1200., / 
\end_layout

\begin_layout Plain Layout

&wt type='TEMP0', istep1=1001, istep2=3000, value1=1200., 
\end_layout

\begin_layout Plain Layout

  value2=1200.0, / 
\end_layout

\begin_layout Plain Layout

&wt type='TEMP0', istep1=3001, istep2=15000, value1=0., 
\end_layout

\begin_layout Plain Layout

  value2=0.0, /  
\end_layout

\begin_layout Plain Layout

# 
\end_layout

\begin_layout Plain Layout

# Strength of temperature coupling:
\end_layout

\begin_layout Plain Layout

# steps 0 to 3000: tight coupling for heating and equilibration 
\end_layout

\begin_layout Plain Layout

# steps 3000 to 11000: slow cooling phase 
\end_layout

\begin_layout Plain Layout

# steps 11000 to 13000: somewhat faster cooling 
\end_layout

\begin_layout Plain Layout

# steps 13000 to 15000: fast cooling, like a minimization 
\end_layout

\begin_layout Plain Layout

# 
\end_layout

\begin_layout Plain Layout

&wt type='TAUTP', istep1=0,istep2=3000,value1=0.2,value2=0.2, / 
\end_layout

\begin_layout Plain Layout

&wt type='TAUTP', istep1=3001,istep2=11000,value1=4.0,value2=2.0, / 
\end_layout

\begin_layout Plain Layout

&wt type='TAUTP', istep1=11001,istep2=13000,value1=1.0,value2=1.0, /
\end_layout

\begin_layout Plain Layout

&wt type='TAUTP', istep1=13001,istep2=14000,value1=0.5,value2=0.5, /
\end_layout

\begin_layout Plain Layout

&wt type='TAUTP', istep1=14001,istep2=15000,value1=0.05,value2=0.05, /
\end_layout

\begin_layout Plain Layout

# 
\end_layout

\begin_layout Plain Layout

# "Ramp up" the restraints over the first 3000 steps:
\end_layout

\begin_layout Plain Layout

# 
\end_layout

\begin_layout Plain Layout

&wt type='REST', istep1=0,istep2=3000,value1=0.1,value2=1.0, /
\end_layout

\begin_layout Plain Layout

&wt type='REST', istep1=3001,istep2=15000,value1=1.0,value2=1.0, /
\end_layout

\begin_layout Plain Layout

&wt type='END' /
\end_layout

\begin_layout Plain Layout

LISTOUT=POUT (get restraint violation list)
\end_layout

\begin_layout Plain Layout

DISANG=RST.f (file containing NMR restraints) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next example just shows some parts of the actual RST file that 
\shape italic
sander
\shape default
 would read.
 This file would ordinarily 
\shape italic
not
\shape default
 be made or edited by hand; rather, run the programs 
\shape italic
makeDIST_RST
\shape default
, 
\shape italic
makeANG_RST
\shape default
 and 
\shape italic
makeCHIR_RST
\shape default
, combining the three outputs together to construct the RST file.

\series bold
 
\end_layout

\begin_layout Subsection

\series bold
Part of the RST.f file referred to above
\series default
\shape italic
 
\end_layout

\begin_layout LyX-Code

\shape italic
# first, some distance constraints prepared by makeDIST_RST: 
\begin_inset Newline newline
\end_inset

 # (comment line is input to makeRST, &rst namelist is output) 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 #( proton 1 proton 2 upper bound) 
\begin_inset Newline newline
\end_inset

 #--------------------------------------------- 
\begin_inset Newline newline
\end_inset

 #
\shape default
 
\begin_inset Newline newline
\end_inset

 # 2 ILE HA 3 ALA HN 4.00 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 &rst iat= 23, 40, r3= 4.00, r4= 4.50, 
\begin_inset Newline newline
\end_inset

 r1 = 1.3, r2 = 1.8, rk2=0.0, rk3=32.0, ir6=1, / 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 # 3 ALA HA 4 GLU HN 4.00 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 &rst iat= 42, 50, r3= 4.00, r4= 4.50, / 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 # 3 ALA HN 3 ALA MB 5.50 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 &rst iat= 40, -1, r3= 6.22, r4= 6.72, 
\begin_inset Newline newline
\end_inset

 igr1= 0, 0, 0, 0, igr2= 44, 45, 46, 0, / 
\begin_inset Newline newline
\end_inset

 # 
\shape italic
 
\begin_inset Newline newline
\end_inset

 # .......etc......
 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 # next, some dihedral angle constraints, from makeANG_RST: 
\begin_inset Newline newline
\end_inset

 #
\shape default
 
\begin_inset Newline newline
\end_inset

 &rst iat= 213, 215, 217, 233, r1=-190.0, 
\begin_inset Newline newline
\end_inset

 r2=-160.0, r3= -80.0, r4= -50.0, / 
\begin_inset Newline newline
\end_inset

 &rst iat= 233, 235, 237, 249, r1=-190.0, 
\begin_inset Newline newline
\end_inset

 r2=-160.0, r3= -80.0, r4= -50.0, / 
\shape italic
 
\begin_inset Newline newline
\end_inset

 # .......etc.......
 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 # next, chirality and omega constraints prepared by makeCHIR_RST: 
\begin_inset Newline newline
\end_inset

 #
\shape default
 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 # chirality for residue 1 atoms: CA CG HB2 HB3 
\begin_inset Newline newline
\end_inset

 &rst iat= 3 , 8 , 6 , 7 , 
\begin_inset Newline newline
\end_inset

 r1=10., r2=60., r3=80., r4=130., rk2 = 10., rk3=10., / 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 # chirality for residue 1 atoms: CB SD HG2 HG3 
\begin_inset Newline newline
\end_inset

 &rst iat= 5 , 11 , 9 , 10 , / 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 # chirality for residue 1 atoms: N C HA CB 
\begin_inset Newline newline
\end_inset

 &rst iat= 1 , 18 , 4 , 5 , / 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 # chirality for residue 2 atoms: CA CG2 CG1 HB 
\begin_inset Newline newline
\end_inset

 &rst iat= 22 , 26 , 30 , 25 , / 
\begin_inset Newline newline
\end_inset

 # 
\shape italic
 
\begin_inset Newline newline
\end_inset

 ......etc........
 
\begin_inset Newline newline
\end_inset

 # trans-omega constraint for residue 2
\shape default
 
\begin_inset Newline newline
\end_inset

 &rst iat= 22 , 20 , 18 , 3 , 
\begin_inset Newline newline
\end_inset

 r1=155., r2=175., r3=185., r4=205., rk2 = 80., rk3=80., / 
\shape italic
 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 # trans-omega constraint for residue 3
\shape default
 
\begin_inset Newline newline
\end_inset

 &rst iat= 41 , 39 , 37 , 22 , / 
\shape italic
 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 # trans-omega constraint for residue 4
\shape default
 
\begin_inset Newline newline
\end_inset

 &rst iat= 51 , 49 , 47 , 41 , / 
\shape italic
 
\begin_inset Newline newline
\end_inset

 # 
\begin_inset Newline newline
\end_inset

 # ......etc........
\end_layout

\begin_layout LyX-Code
 
\shape italic
#
\end_layout

\begin_layout LyX-Code
 The next example is an input file for volume-based NOE refinement.
 As with the distance/angle RST file shown above, the user would generally
 not construct this file, but create it from a "7-column" file using the
 makeDIST_RST program.
 Hand-editing might be used at the top of the file, to change the correlation
 times, etc.
 
\end_layout

\begin_layout Subsection

\series bold
3.
 Sample NOESY intensity input file
\end_layout

\begin_layout LyX-Code
# 
\shape italic
A part of a NOESY intensity file:
\shape default
 
\begin_inset Newline newline
\end_inset

 &noeexp 
\begin_inset Newline newline
\end_inset

 id2o=1, 
\shape italic
(exchangeable protons removed)
\shape default
 
\begin_inset Newline newline
\end_inset

 oscale=6.21e-4, 
\shape italic
(scale between exp.
 and calc.
 intensity units)
\shape default
 
\begin_inset Newline newline
\end_inset

 taumet=0.04, 
\shape italic
(correlation time for methyl rotation, in ns.)
\shape default
 
\begin_inset Newline newline
\end_inset

 taurot=4.2, 
\shape italic
(protein tumbling time, in ns.)
\shape default
 
\begin_inset Newline newline
\end_inset

 NPEAK = 13*3, 
\shape italic
(three peaks, each with 13 mixing times)
\shape default
 
\begin_inset Newline newline
\end_inset

 EMIX = 2.0E-02, 3.0E-02, 4.0E-02, 5.0E-02, 6.0E-02, 
\begin_inset Newline newline
\end_inset

 8.0E-02, 0.1, 0.126, 0.175, 0.2, 0.25, 0.3, 0.35, 
\shape italic
 
\begin_inset Newline newline
\end_inset

 (mixing times, in sec.)
\shape default
 
\begin_inset Newline newline
\end_inset

 IHP(1,1) = 13*423, IHP(1,2) = 13*1029, IHP(1,3) = 13*421, 
\shape italic
 
\begin_inset Newline newline
\end_inset

 (number of the first proton)
\shape default
 
\begin_inset Newline newline
\end_inset

 JHP(1,1) = 78*568, JHP(1,2) = 65*1057, JHP(1,3) = 13*421, 
\shape italic
 
\begin_inset Newline newline
\end_inset

 (number of the second proton)
\shape default
 
\begin_inset Newline newline
\end_inset

 AEXP(1,1) = 5.7244, 7.6276, 7.7677, 9.3519, 
\begin_inset Newline newline
\end_inset

 10.733, 15.348, 18.601, 
\begin_inset Newline newline
\end_inset

 21.314, 26.999, 30.579, 
\begin_inset Newline newline
\end_inset

 33.57, 37.23, 40.011, 
\shape italic
 
\begin_inset Newline newline
\end_inset

 (intensities for the first cross-peak)
\shape default
 
\begin_inset Newline newline
\end_inset

 AEXP(1,2) = 8.067, 11.095, 13.127, 18.316, 
\begin_inset Newline newline
\end_inset

 22.19, 26.514, 30.748, 
\begin_inset Newline newline
\end_inset

 39.438, 44.065, 47.336, 
\begin_inset Newline newline
\end_inset

 54.467, 56.06, 60.113, 
\begin_inset Newline newline
\end_inset

 AEXP(1,3) = 7.708, 13.019, 15.943, 19.374, 
\begin_inset Newline newline
\end_inset

 25.322, 28.118, 35.118, 
\begin_inset Newline newline
\end_inset

 40.581, 49.054, 53.083, 
\begin_inset Newline newline
\end_inset

 56.297, 59.326, 62.174, 
\begin_inset Newline newline
\end_inset

 / 
\begin_inset Newline newline
\end_inset

 SUBMOL1 
\begin_inset Newline newline
\end_inset

 RES 27 27 29 29 39 41 57 57 70 70 72 72 82 82 
\shape italic
(residues in this submol)
\end_layout

\begin_layout LyX-Code
END END
\end_layout

\begin_layout Standard
Next, we illustrate the form of the file that holds residual dipolar coupling
 restraints.
 Again, this would generally be created from a human-readable input using
 the program 
\shape italic
makeDIP_RST
\shape default
.
\end_layout

\begin_layout Subsection

\series bold
Residual dipolar restraints, prepared by makeDIP_RST:
\end_layout

\begin_layout LyX-Code
&align
\end_layout

\begin_layout LyX-Code
ndip=91, dcut=-1.0, gigj = 37*-3.1631, 54*7.8467,
\end_layout

\begin_layout LyX-Code
s11=3.883, s22=53.922, s12=33.855, s13=-4.508, s23=-0.559,
\end_layout

\begin_layout LyX-Code
id(1)=188, jd(1)=189, dobsu(1)= 6.24, dobsl(1)= 6.24,
\end_layout

\begin_layout LyX-Code
id(2)=208, jd(2)=209, dobsu(2)= -10.39, dobsl(1)= -10.39,
\end_layout

\begin_layout LyX-Code
id(3)=243, jd(3)=244, dobsu(3)= -8.12, dobsl(1)= -8.12,
\end_layout

\begin_layout LyX-Code
....
\end_layout

\begin_layout LyX-Code
id(91)=1393, jd(91)=1394, dobsu(91)= -19.64, dobsl(91) = -19.64,
\end_layout

\begin_layout LyX-Code
/
\end_layout

\begin_layout Standard
Finally, we show how the detailed input to 
\shape italic
sander
\shape default
 could be used to generate a more complicated restraint.
 Here is where the user would have to understand the details of the RST
 file, since there are no "canned" programs to create this sort of restraint.
 This illustrates, though, the potential power of the program.

\series bold
 
\end_layout

\begin_layout Subsection

\series bold
A more complicated constraint
\series default
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# 1) Define two centers of mass.
 COM1 is defined by 
\end_layout

\begin_layout Plain Layout

# {C1 in residue 2; C1 in residue 3; N2 in residue 4; C1 in residue 5}.
 
\end_layout

\begin_layout Plain Layout

# COM2 is defined by {C4 in residue 1; O4 in residue 1; N* in residue 1}.
 
\end_layout

\begin_layout Plain Layout

# (These definitions are effected by the igr1/igr2 and grnam1/grnam2 
\end_layout

\begin_layout Plain Layout

# variables; You can use up to 200 atoms to define a center-of-mass 
\end_layout

\begin_layout Plain Layout

# group) 
\end_layout

\begin_layout Plain Layout

# 
\end_layout

\begin_layout Plain Layout

# 2) Set up a distance restraint between COM1 and COM2 which goes from a
 
\end_layout

\begin_layout Plain Layout

# target value of 5.0A to 2.5A, with a force constant of 1.0, over steps 1-5000.
 
\end_layout

\begin_layout Plain Layout

# 
\end_layout

\begin_layout Plain Layout

# 3) Set up a distance restraint between COM1 and COM2 which remains fixed
 
\end_layout

\begin_layout Plain Layout

# at the value of 2.5A as the force slowly constant decreases from 
\end_layout

\begin_layout Plain Layout

# 1.0 to 0.01 over steps 5001-10000.
 
\end_layout

\begin_layout Plain Layout

# 
\end_layout

\begin_layout Plain Layout

# 4) Sets up no distance restraint past step 10000, so that free (unrestrained)
 
\end_layout

\begin_layout Plain Layout

# dynamics takes place past this step.
 
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

&rst iat=-1,-1, nstep1=1,nstep2=5000,
\end_layout

\begin_layout Plain Layout

  iresid=1,irstyp=0,ifvari=1,ninc=0,imult=0,ir6=0,ifntyp=0,
\end_layout

\begin_layout Plain Layout

  r1=0.00000E+00,r2=5.0000,r3=5.0000, r4=99.000,rk2=1.0000,rk3=1.0000,
\end_layout

\begin_layout Plain Layout

  r1a=0.00000E+00,r2a=2.5000,r3a=2.5000, r4a=99.000,rk2a=1.0000,rk3a=1.0000, 
\end_layout

\begin_layout Plain Layout

  igr1 = 2,3,4,5,0, grnam1(1)='C1',grnam1(2)='C1',grnam1(3)='N2',
\end_layout

\begin_layout Plain Layout

  grnam1(4)='C1', igr2 = 1,1,1,0, grnam2(1)='C4',grnam2(2)='O4',grnam2(3)='N*',
 
\end_layout

\begin_layout Plain Layout

/ 
\end_layout

\begin_layout Plain Layout

&rst iat=-1,-1, nstep1=5001,nstep2=10000,
\end_layout

\begin_layout Plain Layout

  iresid=1,irstyp=0,ifvari=1,ninc=0,imult=0,ir6=0,ifntyp=0,
\end_layout

\begin_layout Plain Layout

  r1=0.00000E+00,r2=2.5000,r3=2.5000, r4=99.000,rk2=1.0000,rk3=1.0000,
\end_layout

\begin_layout Plain Layout

  r1a=0.00000E+00,r2a=2.5000,r3a=2.5000, r4a=99.000,rk2a=1.0000,rk3a=0.0100,
\end_layout

\begin_layout Plain Layout

  igr1 = 2,3,4,5,0, grnam1(1)='C1',grnam1(2)='C1',grnam1(3)='N2',
\end_layout

\begin_layout Plain Layout

  grnam1(4)='C1', igr2 = 1,1,1,0, grnam2(1)='C4',grnam2(2)='O4',grnam2(3)='N*',
 
\end_layout

\begin_layout Plain Layout

/
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Xray and cryoEM refinement
\end_layout

\begin_layout Section
EMAP restraints for rigid and flexible fitting into EM maps
\begin_inset CommandInset label
LatexCommand label
name "sec:EMAPcons"

\end_inset


\end_layout

\begin_layout Standard
EMAP restrained simulation
\begin_inset CommandInset citation
LatexCommand citep
key "Wu03a,Wu13"
literal "true"

\end_inset

 was developed to incorporate electron microscopy (EM) image information
 into macromolecular structure determination.
 Different from NMR and X-ray data, EM images have low resolutions (5~50Å).
 However, EM images of large molecular assemblies up to millions of atoms
 and in various biologically relevant environments are available.
 These low resolution images provide precious structural information that
 can help to determine structures of many molecular assemblies and machineries
\begin_inset CommandInset citation
LatexCommand citep
key "Wu03a,Wu06a,Wu07,Wu08a,Wu08b,Wu08c,Wu11c,Wu11d,wu14b,wu16b,Wu15s"
literal "true"

\end_inset

.
 
\end_layout

\begin_layout Standard
With EMAP restraints, Sander and PMEMD can be used to perform both rigid
\begin_inset CommandInset citation
LatexCommand citep
key "Wu03a"
literal "true"

\end_inset

 and flexible
\begin_inset CommandInset citation
LatexCommand citep
key "Wu13"
literal "true"

\end_inset

 fitting of molecules into experimental maps of complexes to obtain both
 complex structures and conformations agreeing with experimental maps.
 In addition to experimental map information, homologous structural information
 can be used by EMAP to perform targeted conformational search (TCS) to
 induce simulation systems to form structures of interest.
\end_layout

\begin_layout Standard
If the restraint map or structure is very different from the starting conformati
on, SGLD is recommended to induce large conformational change by setting
 
\shape italic
isgld
\shape default
=1.
 This is often used to simulate conformational transition between different
 states.
 See the Sampling and free energy search section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Self-Guided-Langevin-dynamics"

\end_inset

 for details on running SGLD.
\end_layout

\begin_layout Standard
If domain motion is desired while domain structures need to be maintained,
 one can use an EMAP restraint generated from the initial coordinates for
 each domain and set 
\shape italic
move
\shape default
=1 to allow the restraint map to move with the domain, so that domains can
 search the conformational space without unfolding or changing shape.
\end_layout

\begin_layout Standard
Each EMAP restraint is defined by a map file and a selection of atoms, as
 well as related parameters.
 Multiple EMAP restraints can be defined.
 The map can be either input from an image file, or generated from a pdb
 structure or derived from the starting coordinates.
 The definition of EMAP restraints are read in from the input file as 
\begin_inset Quotes eld
\end_inset

&emap
\begin_inset Quotes erd
\end_inset

 namelists.
 The following are variables in each &emap namelist.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mapfile
\begin_inset Index idx
status open

\begin_layout Plain Layout
mapfile
\end_layout

\end_inset

 The filename of a restraint map or structure.
 The restraint maps must be in 
\begin_inset Quotes eld
\end_inset

map
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

ccp4
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

mrc
\begin_inset Quotes erd
\end_inset

 format.
 The structure must be in pdb format.
 The structure need not be the same as the simulation system.
 A resolution can be specified for the conversion to a density map.
 When a blank filename is specified, 
\shape italic
mapfile
\shape default
='', the input coordinates of the masked atoms will be used to generate
 a restraint map (default='').
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
atmask
\begin_inset Index idx
status open

\begin_layout Plain Layout
atmask
\end_layout

\end_inset

 The atom mask for selecting atoms to be restrained (default=':*').
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
fcons
\begin_inset Index idx
status open

\begin_layout Plain Layout
fcons
\end_layout

\end_inset

 The restraining constant (default=0.05 kcal/g).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
move
\begin_inset Index idx
status open

\begin_layout Plain Layout
move
\end_layout

\end_inset

 Allow the restraint map to move when 
\shape italic
move
\shape default
>0 (default=0).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
resolution
\begin_inset Index idx
status open

\begin_layout Plain Layout
resolution
\end_layout

\end_inset

 The resolution used to convert an atomic structure to a map (default=2
 Å).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ifit
\begin_inset Index idx
status open

\begin_layout Plain Layout
ifit
\end_layout

\end_inset

 Perform rigid fitting before simulation when 
\shape italic
ifit
\shape default
>0.
 One would do this when the initial coordinates don't match those of the
 map (default=0).
 When ifit=1, the map is transformed (by translation and rotation) to match
 the coordinates; the coordinates are not altered.
 EMAP allows output of the re-oriented map (
\emph on
mapfit
\emph default
=...) that matches the (final) simulation coordinates, 
\emph on
and/or
\emph default
 output of the coordinates (
\emph on
molfit
\emph default
=...) that would match the orientation of the original map.
 When ifit=2, the masked atoms will be transformed to fit the map and the
 transformed coordinates will be used for the following simulation.
 For periodic systems, ifit=2 may cause atoms to clash with periodic image
 atoms.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
grids
\begin_inset Index idx
status open

\begin_layout Plain Layout
grids
\end_layout

\end_inset

 Grid numbers in x,y,z,phi,psi,theta dimensions for grid-threading rigid
 fitting
\begin_inset CommandInset citation
LatexCommand citep
key "Wu03a"
literal "true"

\end_inset

.
 For example, grids=2,2,2,3,3,3 defines 2 grid points in each of x,y,z direction
s between the minimum and maximum coordinates, and 3 grid points in each
 of phi (0-360), psi(0-360), theta(0-180) angles.
 A search for local minimums starts from every grid point and the global
 minimum is identified from all the local minimums (default=1,1,1,1,1,1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
mapfit
\begin_inset Index idx
status open

\begin_layout Plain Layout
mapfit
\end_layout

\end_inset

 The filename for the final constraint map after rigid fitting and/or moving.
 The filename must has an extension of .map, .ccp4, or .mrc (default=
\family typewriter
''
\family default
, for no map output).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
molfit
\begin_inset Index idx
status open

\begin_layout Plain Layout
molfit
\end_layout

\end_inset

 The filename for the final restrained atom coordinates after rigid fitting
 and/or simulation.
 The filename must have an extension of .pdb (default=
\family typewriter
''
\family default
, for no structure output).
\end_layout

\begin_layout Standard
Here is an example input file for an EMAP constrained SGLD simulation:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Map Constraint Self-Guided Langevin dynamics
\end_layout

\begin_layout Plain Layout

&cntrl ntx=1, ntb=0,nstlim=100000, imin=0, maxcyc=1, ntc=2, ntf=2, cut=9.0,
\end_layout

\begin_layout Plain Layout

ntpr=1000, ntwr=100000,ntwx=10000, ntt=3, gamma_ln=10.0,nscm=100, dt=0.001,
\end_layout

\begin_layout Plain Layout

ntb=0,igb=0, isgld=1, tsgavg=1.0, sgft=0.5,tempsg=0,         (SGLD)
\end_layout

\begin_layout Plain Layout

iemap=1,                   (turn on EMAP )
\end_layout

\begin_layout Plain Layout

/
\end_layout

\begin_layout Plain Layout

&emap          (EMAP restraint 1 )
\end_layout

\begin_layout Plain Layout

mapfile='data/1gb1.ccp4',  (map is input from a map file)
\end_layout

\begin_layout Plain Layout

atmask=':1-20',            (residues 1-20 are restrained)
\end_layout

\begin_layout Plain Layout

fcons=0.1,
\end_layout

\begin_layout Plain Layout

move=1,                    (restraint map can move)
\end_layout

\begin_layout Plain Layout

ifit=1,                    (perform rigid fitting first)
\end_layout

\begin_layout Plain Layout

mapfit='scratch/gb1n_1.ccp4',  (final map)
\end_layout

\begin_layout Plain Layout

molfit='scratch/gb1n_1.pdb', / (final restrained atoms related to initial
 map)
\end_layout

\begin_layout Plain Layout

&emap          (EMAP restraint 2)
\end_layout

\begin_layout Plain Layout

mapfile='data/1gb1.pdb',  (map is generated from a pdb file)
\end_layout

\begin_layout Plain Layout

atmask=':22-37',          (residues 22-37 are restrained)
\end_layout

\begin_layout Plain Layout

fcons=0.1,move=0,         (restraint map is fixed)
\end_layout

\begin_layout Plain Layout

ifit=1,                   (perform rigid fitting first)
\end_layout

\begin_layout Plain Layout

mapfit='scratch/gb1h_1.ccp4',   (final map, same as initial)
\end_layout

\begin_layout Plain Layout

molfit='scratch/gb1h_1.pdb', / (final restrained atoms related to initial
 map)
\end_layout

\begin_layout Plain Layout

&emap          (EMAP restraint 3)
\end_layout

\begin_layout Plain Layout

mapfile='',    (map is generated from initial coordinates)
\end_layout

\begin_layout Plain Layout

atmask=':41-56',  (residues 41-56 are restrained)
\end_layout

\begin_layout Plain Layout

fcons=0.1,move=1, (restraint map can move)
\end_layout

\begin_layout Plain Layout

ifit=1,       (perform rigid fitting first)
\end_layout

\begin_layout Plain Layout

mapfit='scratch/gb1c_1.ccp4',  (final map)
\end_layout

\begin_layout Plain Layout

molfit='scratch/gb1c_1.pdb', / (final restrained atoms related to initial
 map)
\end_layout

\end_inset


\end_layout

\begin_layout Section
Setting up crystal simulations
\begin_inset CommandInset label
LatexCommand label
name "chap:crystals"

\end_inset


\end_layout

\begin_layout Standard
\align center

\emph on
David S.
 Cerutti
\end_layout

\begin_layout Standard
Simulations of biomolecular crystals are in principle no different than
 any of the simulations that AMBER does in periodic boundary conditions.
 However, the setup of these systems is not trivial and probably cannot
 be accomplished with the LEaP software.
 Of principal importance are the construction of the solvent conditions
 (packing precise amounts of multiple solvent species into the simulation
 cell), and tailoring the unit cell dimensions to accommodate the inherently
 periodic nature of the system.
 The LEaP software, designed to construct simulations of molecules in solution,
 will overlay a pre-equilibrated solvent mask over the (biomolecular) solute,
 tile that mask throughout the simulation cell, and then prune solvent residues
 which clash with the solute.
 The result of this procedure is a system which will likely contract under
 constant pressure dynamics as the pruning process has left vacuum bubbles
 at the solute:solvent interface.
 Simulations of biomolecular crystals require that the simulation cell begin
 at a size corresponding to the crystallographic unit cell, and deviate
 very little from that size over the course of equilibration and onset of
 constant pressure dynamics.
 This demands a different strategy for placing solvent in the simulation
 cell.
 Four programs in the 
\emph on
AmberTools
\emph default
 release are designed to accomplish this.
 An example of their use in given in a web-based tutorial at 
\emph on
https://ambermd.org/tutorials/advanced/tutorial13/XtalTutor1.html 
\emph default
.
 A recent (2018) review of crystal simulations is also worth consulting.
\begin_inset CommandInset citation
LatexCommand citep
key "Cerutti18"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
For brevity, only basic descriptions of the programs are given in this manual.
 All of the programs may be run with command line input; the input options
 to each program may be listed by running each program with no arguments.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:UnitCell"

\end_inset

UnitCell
\end_layout

\begin_layout Standard
A macromolecular crystal contains many repeating unit cells which stack
 like blocks in three dimensional space just as simulation cells do in periodic
 boundary conditions.
 Each unit cell, in turn, may contain multiple symmetry-related clusters
 of atoms.
 A PDB file contains one set of coordinates for the irreducible unit of
 the crystal, the 
\begin_inset Quotes eld
\end_inset

asymmetric unit,
\begin_inset Quotes erd
\end_inset

 and also information about the crystal space group and unit cell dimensions.
 The 
\emph on
UnitCell
\emph default
 program reads PDB files, seeking the SMTRY records within the REMARKs to
 enumerate the rotation and translation operations which may be applied
 to the coordinates given in the PDB file to reconstruct one complete unit
 cell.
\end_layout

\begin_layout Standard
Usage of the 
\shape italic
UnitCell
\shape default
 program is as follows.
 The simple command rests on a critical assumption, that the PDB file contains
 an accurate CRYST1 record and that the REMARK 290 SMTRY records provide
 its space group symmetry operations.
 
\end_layout

\begin_layout LyX-Code
UnitCell -p MyProtein.pdb -o UnitCell.pdb
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:PropPDB"

\end_inset

PropPDB
\end_layout

\begin_layout Standard
Simulations in periodic boundary conditions require a minimum unit cell
 size: the simulation cell must be able to enclose a sphere of at least
 the nonbonded direct space cutoff radius plus a small buffer region for
 nonbonded pairlist updates.
 Many biomolecular crystal unit cells come in 
\begin_inset Quotes eld
\end_inset

shoebox
\begin_inset Quotes erd
\end_inset

 dimensions that may have one very short side; many unit cells are also
 not rectangular but triclinic, meaning that the size of the largest sphere
 they can enclose is further reduced.
 The workhorse simulation engine, pmemd.cuda, even requires that the simulation
 cell be at least three times as thick as the cutoff plus some buffer margin
 in order to run safely: for typical sum conditions this thickness is about
 30Å.
 For these reasons, and perhaps to ensure that the rigid symmetry imposed
 by periodic boundary conditions does not create artifacts (crystallographic
 unit cells are equivalent when averaged over all time and space, but are
 not necessarily identical at any given moment), it may be necessary to
 include multiple unit cells within the simulation cell.
 This is the purpose of the 
\emph on
PropPDB
\emph default
 program: to propagate a unit cell in one or more directions so that the
 complete simulation cell meets minimum size requirements.
\end_layout

\begin_layout Standard
Drawing on the hypothetical example above, if the unit cell is too small
 we can extend it in the 
\shape italic
x
\shape default
 and 
\shape italic
z
\shape default
 dimensions:
\end_layout

\begin_layout LyX-Code
PropPDB -p UnitCell -o ExpandedCell.pdb -ix 2 -iy 1 -iz 2
\end_layout

\begin_layout Subsection
AddToBox
\begin_inset CommandInset label
LatexCommand label
name "subsec:AddToBox"

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
AddToBox
\emph default
 program handles placement of solvent within a crystal unit cell or supercell
 (as may be created by PropPDB).
 As described in the introduction, the basic strategy is to place solvent
 such that added solvent molecules do not clash with biomolecule solutes,
 but 
\shape italic
may
\shape default
 clash with one another initially.
 This compromise is necessary because enough solvent must be added to the
 system to ensure that the correct unit cell dimensions are maintained in
 the long run, but it is not acceptable to place solvent within the interior
 of a biomolecule where it might not belong and never escape.
\end_layout

\begin_layout Standard
The 
\emph on
AddToBox
\emph default
 program takes a PDB file providing the coordinates of a complete biomolecular
 unit cell or supercell (argument -c), the dimensions by which that supercell
 repeats in space (the unit cell dimensions are taken from the CRYST1 record
 of this file), a PDB file describing the solvent residue to add (argument
 -a), and the number of copies of that solvent molecule to add (argument
 -na).
 
\emph on
AddToBox
\emph default
 inherently assumes that the biomolecular unit cell it is initially presented
 may contain some amount of solvent already, and according to the AMBER
 convention of listing macromolecular solute atoms first and solvent last
 assumes that the first -P atoms in the file are the protein (or biomolecule).
 
\emph on
AddToBox
\emph default
 will then color a very fine grid 
\begin_inset Quotes eld
\end_inset

black
\begin_inset Quotes erd
\end_inset

 if the grid point is within a certain distance of a biomolecular atom (argument
 -RP, default 5.0Å) or other solvent atom (argument -RW, default 1.0Å); the
 grid is 
\begin_inset Quotes eld
\end_inset

white
\begin_inset Quotes erd
\end_inset

 otherwise (the grid is stored in binary for memory efficiency).
 
\emph on
AddToBox
\emph default
 will the make a copy of the solvent residue and randomly rotate and translate
 it somewhere within the unit cell.
 If all atoms of the solvent residue land on 
\begin_inset Quotes eld
\end_inset

white
\begin_inset Quotes erd
\end_inset

 grid voxels, the solvent molecule will become part of the system and the
 grid around the newly added solvent will be blacked out accordingly.
 If the solvent molecule cannot be placed, this process will be repeated
 until a million consecutive failures are encountered, at which point the
 program will terminate.
 If 
\emph on
AddToBox
\emph default
 has not placed the requested number of solvent molecules by the time it
 terminates, the -V option can be used to order the program to recursively
 call itself with progressively smaller solvent buffer distances until all
 the requested solvent can be placed.
 The output of the 
\emph on
AddToBox
\emph default
 program is another PDB named by the -o option.
\end_layout

\begin_layout Standard
Successful operation of 
\emph on
AddToBox
\emph default
 may take practice.
 If multiple solvent species are required, as is the case with heterogeneous
 crystallization solutions, 
\emph on
AddToBox
\emph default
 may be called repeatedly with each input molecular cell being the previous
 call's output.
 When considering crystal solvation, the order of addition is important!
 It is recommended that rare species, such as trace buffer reagents, be
 added first, with large -RW argument to ensure that they are dispersed
 throughout the available crystal void zones.
 Large solvent species such as MPD (an isohexane diol commonly used in crystalli
zation conditions) should be added second, and with a sufficiently large
 -RW argument that methyl groups and ring systems cannot become interlocked
 (which will likely lead to SHAKE / vlimit errors).
 Small and abundant species such as water should be added last, as they
 can go anywhere that space remains.
\end_layout

\begin_layout Standard
Below is an example of the usage for a hypothetical protein with 5431 atoms
 and a net charge of +6 that is to be neutralized with ammonium sulfate:
\end_layout

\begin_layout LyX-Code
AddToBox -c ExpandedCell.pdb -a Sulfate.pdb -na 18 -RP 3.0 -P 5431 -o System.pdb
\end_layout

\begin_layout LyX-Code
AddToBox -c System.pdb -a Ammonium.pdb -na 30 -RP 3.0 -P 5431 -o System.pdb
\end_layout

\begin_layout LyX-Code
AddToBox -c System.pdb -a Water.pdb -na 1089 -RP 3.0 -P 5431 -o System.pdb
\end_layout

\begin_layout Standard
The use of the -V flag ensures that the desired amounts of each species
 are included.
 The protein clipping radius of 3Å is lower than the default, but safe (remember
, this radius stipulates that no solvent atom, regardless of the size of
 the solvent molecule, come within 3Å of the protein).
 Note how the original protein PDB file serves as the base for system, but
 thereafter we work with the System.pdb to accumulate more solvent particles.
 Here, the ammonium sulfate serves both to neutralize the system and replicate
 a salty bath, perhaps from a crystallization mother liquor, hence the break
 from the usual 2:1 stoichiometry of ammonium sulfate ions.
\end_layout

\begin_layout Standard
It is likely that the unobservable 
\begin_inset Quotes eld
\end_inset

void
\begin_inset Quotes erd
\end_inset

 regions between biomolecules in most crystals 
\shape italic
do not
\shape default
 contain solvent species in proportion to their abundance in the crystallization
 solution–the vast majority of these regions are within a few Ångstroms
 of some biomolecular surface, and different biomolecular functional groups
 will preferentially interact with some types of solvent over others.
 Also, in many crystals some solvent molecules 
\shape italic
are
\shape default
 observed; in many of these, the amount of solvent observed is such that
 it would be impossible to pack other species into the unit cell in proportion
 to their abundances in the crystallization fluid.
 In these cases, we recommend estimating the amount of volume that must
 be filled with solvent 
\shape italic
apart from solvent which has already been observed in the crystal
\shape default
, and filling this void with solvent in proportion to the composition of
 the crystallization fluid.
 For example, if a crystal were grown in a 1:1 mole-to-mole water/ethanol
 mixture, and the crystal coordinates as deposited in the PDB contained
 500 water molecules and 3 ethanol molecules, we would use 
\emph on
AddToBox
\emph default
 to add water and ethanol in a 1:1 ratio until the system contained enough
 solvent to maintain the correct volume during equilibrium dynamics at constant
 pressure.
\end_layout

\begin_layout Standard
Finally, it is difficult to estimate exactly how much solvent will be needed
 to maintain the correct equilibrium volume; the advisable approach is simply
 to make an initial guess and script the setup so that, over multiple runs
 and reconstructions, the correct system composition can be found.
 We recommend matching the equilibrium unit cell volume to within 0.3% to
 keep this simulation parameter within the error of most crystallographic
 measurements.
 While errors of 0.5-1% will show up quickly after constant pressure dynamics
 begin, a 10 to 20ns simulation may be needed to ensure that the correct
 equilibrium volume has been achieved.
\end_layout

\begin_layout Subsection
ChBox
\begin_inset CommandInset label
LatexCommand label
name "subsec:ChBox"

\end_inset


\end_layout

\begin_layout Standard
After the complex process of adding solvent, the LEaP program may be used
 to produce a topology and initial set of coordinates based on the PDB file
 produced by 
\emph on
AddToBox
\emph default
.
 By using the 
\shape italic
SetBox
\shape default
 command, LEaP will create a periodic system without adding any more solvent
 on its own.
 The only problem with using LEaP at this point is that the program will
 fail to realize that the system 
\shape italic
does
\shape default
 tile in three dimensions if only the box dimensions are set properly.
 If visualized, the output of UnitCell / PropPDB will likely look jagged,
 but the output of 
\emph on
AddToBox
\emph default
, containing lots of added water, will make it obvious how parts of biomolecules
 jutting out one face of the box fit neatly into open spaces on an opposite
 face.
 The topology produced by LEaP needs no editing; only the last line of the
 coordinates does.
 This can be done manually, but the 
\emph on
ChBox
\emph default
 program automates the process, taking the same coordinates supplied to
 AddToBox and grafting them into the input coordinates file.
\end_layout

\begin_layout Standard
The program is even unnecessary in the case of orthorhombic (rectangular)
 unit cells, as this the tleap command will substitute:
\end_layout

\begin_layout LyX-Code
set [unit] box { <x> <y> <z> }
\end_layout

\begin_layout Standard
For cells that do not have only 90-degree box angles, 
\shape italic
ChBox
\shape default
 will do the trick.
\end_layout

\begin_layout Section
X-ray functionality and diffraction-based restraints
\end_layout

\begin_layout Standard
The 
\emph on
msander
\emph default
 program includes a new module dedicated to biomolecular crystallography.
 It is envisioned that in future Amber can be used as a platform to address
 various crystallography-related problems, e.g.
 to refine crystallographic structures of proteins and nucleic acids (similar
 to the existing capability in the area of biomolecular NMR).
 This module is intended for use with an MD simulation of the crystal unit
 cell or a “supercell”
\begin_inset CommandInset citation
LatexCommand citep
key "Janowski2013"
literal "true"

\end_inset

.
 For information on how to set up a crystal simulation, including periodic
 boundary conditions to emulate crystalline lattice, see Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:crystals"

\end_inset

.
 It is expected that the crystal is solvated using an explicit (or implicit)
 solvent.
 While a number of crystallographic concepts are implemented in the new
 Amber module, many others have not yet been implemented.
 For example, an MD model of a crystal unit cell can naturally accommodate
 different side-chain conformations; however, the concept of alternate side-chai
n conformations, as employed in protein crystallography, is currently unavailabl
e in Amber.
\end_layout

\begin_layout Standard
Although it is not a part of Amber, it is worth noting that the 
\emph on
phenix
\emph default
 crystallographic package now allows for X-ray refinement using Amber (or
 other) force fields
\begin_inset CommandInset citation
LatexCommand citep
key "Moriarty20"
literal "true"

\end_inset

.
 This was accomplished by using the python API to 
\emph on
sander
\emph default
, and uses locally-enhanced sampling to handle alternate conformations.
 It supports all of the X-ray related options in 
\emph on
phenix.refine
\emph default
, but has limited options for molecular dynamics, and no GPU acceleration.
\end_layout

\begin_layout Subsection
Structure factor calculations
\end_layout

\begin_layout Standard
For the crystal simulation, the program can calculate crystallographic structure
 factors (SFs) for individual MD frames.
 The calculations are conducted using direct summation formula
\begin_inset CommandInset citation
LatexCommand citep
key "Afonine04"
literal "true"

\end_inset

; a mask is available to define the subset of atoms included in these calculatio
ns (
\emph on
atom_selection_mask
\emph default
).
 For example, this mask could select the macromolecules, but not the solvent
 or the neutralizing ions present in the simulation.
 The B-factors used in the direct summation formula are supplied through
 a designated PDB file.
 The set of Miller indices for SF calculations is supplied as a part of
 the 
\emph on
reflection_infile
\emph default
.
\end_layout

\begin_layout Standard
In principle, explicit solvent and ions can also be accounted for via the
 direct summation formula.
 However, any single individual frame does not offer an adequate statistical
 sampling with regard to the positioning of water molecules (if desired,
 such statistical sampling can be obtained by modeling of a very large supercell
 or otherwise by means of time averaging).
 As a commonly accepted alternative, Amber 22 offers two mask-based models
 of bulk solvent.
 The first one (
\emph on
bulk_solvent_model
\emph default
 = ‘simple’) is a simple variant of flat mask bulk solvent model
\begin_inset CommandInset citation
LatexCommand citep
key "Jiang94a"
literal "false"

\end_inset

, which calculates the contribution from interstitial solvent into SFs using
 two generic parameters (
\emph on
k_sol
\emph default
 and 
\emph on
b_sol
\emph default
), as reported by Fokine and Urzhumtsev
\begin_inset CommandInset citation
LatexCommand citep
key "Fokine02"
literal "false"

\end_inset

.
 The implementation, including the scheme to build solvent mask, is analogous
 to the one in cctbx library
\begin_inset CommandInset citation
LatexCommand citep
key "Grosse-Kunstleve02"
literal "false"

\end_inset

.
 The more advanced version (
\emph on
bulk_solvent_model
\emph default
 = ‘afonine-2013’) employs the varaible 
\begin_inset Formula $k_{mask}$
\end_inset

, which replaces 
\emph on
k_sol
\emph default
 and 
\emph on
b_sol
\emph default
; this variable is automatically optimized over the individual resolution
 bins
\begin_inset CommandInset citation
LatexCommand citep
key "Afonine13"
literal "false"

\end_inset

.
 The iterative optimization procedure to determinate 
\begin_inset Formula $k_{mask}$
\end_inset

 also adjusts the overall scaling coefficient that is applied to calculated
 SFs.
 The implementation follows the one in cctbx library with several minor
 modifications.
\end_layout

\begin_layout Standard
It is worth noting that crystal MD simulations in Amber (as described in
 Chap.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:crystals"

\end_inset

) do not maintain a perfect space group symmetry.
 Therefore, strictly speaking, the calculated SFs correspond to P(1) space
 group with the unit cell that is identical to the simulation box.
 During the course of the simulation, the calculated SFs can be collected
 frame-by-frame at a specified interval (
\emph on
ntwsf
\emph default
) and stored in a form of special trajectory file (
\emph on
sf_outfile
\emph default
).
\end_layout

\begin_layout Subsection
Structure-factor-based potential
\end_layout

\begin_layout Standard
The X-ray energy term 
\begin_inset Formula $E_{xray}$
\end_inset

 is added to the total potential energy with the user-specified weight 
\begin_inset Formula $w_{xray}$
\end_inset

 (controlled by 
\emph on
xray_weight_initial
\emph default
 / 
\emph on
xray_weight_final 
\emph default
variables): 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
E_{total}=E_{force-field}+w_{xray}E_{xray}\label{eq:exray1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $E_{xray}$
\end_inset

 uses the set of target (i.e.
 experimentally observed) SFs, which are supplied via the input file 
\emph on
reflection_infile
\emph default
.
 This file must also contain flags to divide all reflections into a “working”
 set and a “free” (test) set.
 Currently 
\emph on
pmemd
\emph default
 offers two variants of the 
\begin_inset Formula $E_{xray}$
\end_inset

 term.
 The first one is a very simple least squares objective function (
\emph on
target
\emph default
 = ‘ls’) involving the aplitudes and of calculated and observed structure
 factors: 
\begin_inset Formula 
\begin{equation}
E_{xray}=\frac{\sum_{h,k,l}\left(F_{calc}(h,k,l)-F_{obs}(h,k,l)\right)^{2}}{\sum_{h,k,l}F_{obs}^{2}(h,k,l)}\label{eq:exray}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The sum in this expression is over the working set of reflections.
\end_layout

\begin_layout Standard
The second option for 
\begin_inset Formula $E_{xray}$
\end_inset

 is the Maximum Likelihood target function (
\emph on
target
\emph default
 = ‘ml’)
\begin_inset CommandInset citation
LatexCommand citep
key "Lunin95,Afonine2005"
literal "false"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
E_{xray}=\sum_{h,k,l}\left(-\ln\left(\frac{2F_{obs}(h,k,l)}{\varepsilon\beta}\right)+\frac{F_{obs}^{2}(h,k,l)}{\varepsilon\beta}+\frac{\alpha^{2}F_{calc}^{2}(h,k,l)}{\varepsilon\beta}-\ln I_{0}\left(\frac{2\alpha F_{obs}(h,k,l)F_{calc}(h,k,l)}{\varepsilon\beta}\right)\right)\label{eq:exray_ml}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 are (resolution-shell-dependent) ML likelihood distribution parameters,
 
\begin_inset Formula $\varepsilon$
\end_inset

 is the symmetry coefficient (
\begin_inset Formula $\varepsilon=1$
\end_inset

 for the space group P(1) at hand), 
\begin_inset Formula $I_{0}(x)$
\end_inset

 is the zeroth-order modified Bessel function of the first kind, and the
 summation is over the working set of reflections.
 For practical applications, we recommend using 
\emph on
target
\emph default
 = ‘ml’ along with the more advanced version of solvent, 
\emph on
bulk_solvent_model
\emph default
 = ‘afonine-2013’.
\end_layout

\begin_layout Standard
The expression for 
\begin_inset Formula $E_{xray}$
\end_inset

, along with the direct-summation formula for 
\begin_inset Formula $F_{calc}$
\end_inset

, provides a basis to evaluate forces.
 These 
\begin_inset Quotes eld
\end_inset

restraint
\begin_inset Quotes erd
\end_inset

 forces act like those used in NMR refinement, discussed in Chap.
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:NMR"

\end_inset

, and are generally used to drive minimization or MD simulations that minimize
 
\begin_inset Formula $E_{total}$
\end_inset

.
 The value of 
\begin_inset Formula $E_{xray}$
\end_inset

 is reported in the mdout file, together with 
\begin_inset Formula $R_{work}$
\end_inset

 and 
\begin_inset Formula $R_{free}$
\end_inset

.
\end_layout

\begin_layout Standard
We envisage that SF-based restraints can be used for a number of purposes.
 For example, they can be viewed as an empirical addition to the force fields,
 which can potentially remedy certain existing biases
\begin_inset CommandInset citation
LatexCommand citep
key "Xue14c,Raval12a"
literal "true"

\end_inset

.
 Another promising application is refinement of crystallographic structures.
 Such an Amber-based protocol has been reported by Mikhailovskii et al.
\begin_inset CommandInset citation
LatexCommand citep
key "Mikhailovskii22"
literal "false"

\end_inset

 (the web interface is available at 
\begin_inset CommandInset href
LatexCommand href
name "https://arx.bio-nmr.spbu.ru"
target "https://arx.bio-nmr.spbu.ru"
literal "false"

\end_inset

).
 Ultimately, the entire process of crystallographic structure determination
 can be incorporated into Amber.
 This approach may be particularly valuable for lower-quality diffraction
 data sets and incomplete structural models (e.g.
 in the case of weak or missing electron density for mobile side chains,
 loops or terminal regions in protein molecules).
 In this situation, the state-of-the-art force field provides a natural
 solution to model the poorly resolved or unresolved elements of the structure.
 This is accomplished in a highly realistic manner, by using the explicit
 representation of the crystal unit cell (supercell), taking into consideration
 the effect of solvent, crystal contacts, etc.
\end_layout

\begin_layout Subsection
Inputs and file formats
\end_layout

\begin_layout Standard
System setup follows the general procedures outlined in Chap.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:crystals"

\end_inset

.
 For users with access to the 
\emph on
phenix
\emph default
 package of crystallographic analysis tools, the XrayPrep tool can prepare
 the system: inputs are simply a PDB file (
\emph on
xxxx.pdb,
\emph default
 where xxxx is a PDB id) and the corresponding structure factor file (
\emph on
xxxx-sf.cif
\emph default
).
\end_layout

\begin_layout Standard
For those who will prepare their own inputs, one needs a PDB file, expanded
 to the unit cell (see Chap.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:crystals"

\end_inset

) that contains the B-factors.
 The structure factors have to be listed in the r
\emph on
eflection_infile
\emph default
, which is a human-readable ascii file containing the same information that
 can be normally found in .mtz files.
 The first line contains a total number of reflections followed by a zero.
 Subsequent lines list Miller indices 
\emph on
h, k
\emph default
 and 
\emph on
l
\emph default
, followed by the respective SF values and their standard deviations, followed
 by an R-free flag (we adopt the convention that 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

 indicates a member of the working set, and 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

 a member of the test set).
 An example file is given below.
 Note that column spacing or number formatting is not critical, but each
 entry should be separated by at least one space.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

41243 0
\end_layout

\begin_layout Plain Layout

-19        -6        1        13.86329        9.685285        0
\end_layout

\begin_layout Plain Layout

-19        -6        2        46.38137        3.528763        1
\end_layout

\begin_layout Plain Layout

-19        -5        1        9.675193        21.28529        1
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

 19         6        1        13.86329        9.685285        0
\end_layout

\begin_layout Plain Layout

 19         6        2        46.38137        3.528763        1
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Input variables in the &xray namelist
\end_layout

\begin_layout Standard
The X-ray functionalities are activated by adding the 
\emph on
&xray
\emph default
 namelist to the mdin file.
 User-assigned parameters that are not used by the algorithm are silently
 ignored(e.g.
\backslash
 
\emph on
k_sol
\emph default
 and 
\emph on
b_sol
\emph default
 in 'afonine-2013' bulk solvent model).
 The keywords in 
\emph on
&xray
\emph default
 namelist include the following:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
File handling:
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
pdb_infile
\begin_inset Index idx
status open

\begin_layout Plain Layout
pdb
\backslash
_infile
\end_layout

\end_inset

 name of the PDB input file containing B-factors
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
pdb_read_coordinates
\begin_inset Index idx
status open

\begin_layout Plain Layout
pdb
\backslash
_read
\backslash
_coordinates
\end_layout

\end_inset

 if true, use coordinates from the PDB file, not inpcrd, as starting coordinates
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
pdb_outfile
\begin_inset Index idx
status open

\begin_layout Plain Layout
pdb_outfile
\end_layout

\end_inset

 name of PDB file to write the final atomic coordinates from the simulation.
 Currently writes back the input B-factors and occupancies as read from
 
\emph on
pdb_infile
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
reflection_infile
\begin_inset Index idx
status open

\begin_layout Plain Layout
reflection
\backslash
_infile
\end_layout

\end_inset

 name of the input file containing experimental SFs and R-flags
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
fmtz_outfile
\begin_inset Index idx
status open

\begin_layout Plain Layout
sf
\backslash
_outfile
\end_layout

\end_inset

 name of the file with calculated SFs, in 
\begin_inset Quotes eld
\end_inset

formatted MTZ
\begin_inset Quotes erd
\end_inset

 format
\end_layout

\begin_layout Standard

\series bold
Bulk solvent parameters:
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
bulk_solvent_model
\begin_inset Index idx
status open

\begin_layout Plain Layout
bulk
\backslash
_solvent
\backslash
_model
\end_layout

\end_inset

 the type of bulk solvent to use.
 Possible values: ‘none’ for disabled bulk solvent contribution, ‘simple’
 or ‘afonine-2013’ (default)
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
k_sol
\begin_inset Index idx
status open

\begin_layout Plain Layout
k_sol
\end_layout

\end_inset

 solvent electron density (default 0.35 e 
\begin_inset Formula $\text{Å}^{-3}$
\end_inset

)
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
b_sol
\begin_inset Index idx
status open

\begin_layout Plain Layout
b_sol
\end_layout

\end_inset

 determines the blurring of the boundary between the solvent region and
 the macromolecule (default 46 Å
\begin_inset Formula $^{2}$
\end_inset

) 
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
solvent_mask_adjustment
\begin_inset Index idx
status open

\begin_layout Plain Layout
solvent
\backslash
_mask
\backslash
_adjustment
\end_layout

\end_inset

 increment to be added to atomic radii of the atoms selected by 
\emph on
atom_selection_mask
\emph default
 as a part of the algorithm to build bulk solvent mask (default 1.11 Å)
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
solvent_mask_probe_radius
\begin_inset Index idx
status open

\begin_layout Plain Layout
solvent
\backslash
_mask
\backslash
_probe
\backslash
_radius
\end_layout

\end_inset

 the radius of solvent probe to apply as a part of the algorithm to build
 bulk solvent mask (default 0.9 Å)
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
mask_update_period
\begin_inset Index idx
status open

\begin_layout Plain Layout
mask
\backslash
_update
\backslash
_period
\end_layout

\end_inset

 time interval for bulk solvent grid update (expressed as a multiple of
 integration step, default 100 steps)
\end_layout

\begin_layout Standard

\series bold
Structure-factor-based potential:
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
atom_selection_mask
\begin_inset Index idx
status open

\begin_layout Plain Layout
atom
\backslash
_selection
\backslash
_mask
\end_layout

\end_inset

 ambmask-format mask to specify the atoms that contribute to 
\begin_inset Formula $F_{calc}$
\end_inset

 via direct summation formula (default ‘!@H=’)
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
scale_update_period
\begin_inset Index idx
status open

\begin_layout Plain Layout
scale_update_period
\end_layout

\end_inset

 time interval to re-scale 
\begin_inset Formula $F_{calc}$
\end_inset

 to 
\begin_inset Formula $F_{obs}$
\end_inset

 (expressed as a multiple of integration step, default 100 steps)
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
target
\begin_inset Index idx
status open

\begin_layout Plain Layout
target
\end_layout

\end_inset

 the type of crystallographic target function.
 Possible values: ‘ls’ for Least Squares, ‘ml’ for Maximum Likelihood (default)
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
ml_update_period
\begin_inset Index idx
status open

\begin_layout Plain Layout
ml_update_period
\end_layout

\end_inset

 time interval to update ML parameters 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 (expressed as a multiple of integration step, default 100 steps)
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
xray_weight
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
xray
\backslash
_weight
\backslash
_initial
\end_layout

\end_inset

 Sets the value of 
\begin_inset Formula $w_{xray}$
\end_inset

 (default 1.0) This value can be variable: see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Varying-conditions"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for more information.
\end_layout

\begin_layout Labeling
\labelwidthstring solvent\_mask\_probe\_radius
xray_weight_final
\begin_inset Index idx
status open

\begin_layout Plain Layout
xray
\backslash
_weight
\backslash
_final
\end_layout

\end_inset

 final value that defines linear scaling of 
\begin_inset Formula $w_{xray}$
\end_inset

 weight along the trajectory (if unassigned, assumed to be equal to 
\emph on
xray_weight_initial
\emph default
)
\end_layout

\begin_layout Section
Auxiliary scripts for X-ray refinement
\end_layout

\begin_layout Standard
This section gives a bird's-eye view of capabilities of the some useful
 auxiliary scripts.
 The hope is to get more detailed examples and documentation as time permits.
 The organization is based on the compuational tools required, which almost
 certainly not the best approach.
\end_layout

\begin_layout Subsection
ccp4_scripts
\end_layout

\begin_layout Standard
These scripts are based on the 
\emph on
CCP4
\emph default
 and 
\emph on
refmac5
\emph default
 programs.
\end_layout

\begin_layout Description
conf_solvent.sh Takes an electron density for the solvent (say from MD simulation
s or from integral equation models), plus an atomic model for the 
\begin_inset Quotes eld
\end_inset

solute
\begin_inset Quotes erd
\end_inset

 (generally a macromolecule like a protein), and refines the model with
 
\emph on
refmac5
\emph default
.
 As a comparison, ignores the input solvent density and uses the standard
 
\emph on
refmac5 
\emph default
bulk solvent contribution, as would be done in a conventional simulation.
 This offers one way to see if the input density is any 
\begin_inset Quotes eld
\end_inset

better
\begin_inset Quotes erd
\end_inset

 than the standard solvent contribution.
\end_layout

\begin_layout Description
md2diffuse.sh Takes snapshots from an MD simulation, and works through the
 steps to compute both the Bragg intensities and diffuse intensities.
 The 
\emph on
sfall
\emph default
 program is the key engine to compute scattering amplitudes.
 Special attention is paid to reducing disk space requirements, so that
 scattering amplitudes from many snapshots can be stored and analyzed.
 The code optionally will constuct map coefficients and an electron density
 map arising from the simulation.
\end_layout

\begin_layout Description
md2map.sh
\end_layout

\begin_layout Description
mdv2map.sh The two scripts compute the average electron density, as a CCP4
 map and as map coefficients, from an input MD simulation.
 Unlike the 
\series bold
md2diffuse.sh
\series default
 script, which computes the average scattering amplitudes, then uses an
 FFT to obtain the final map, these two scripts directly add the maps together,
 then uses a Fourier transform to obtain the map coefficients.
 Since no diffuse scattering information is needed, there is much less need
 to optimize disk space; still the overall amount of computation is about
 the same, 
\emph on
i.e.

\emph default
 that required to run 
\emph on
sfall
\emph default
 on each frame of the input trajectory.
 The 
\series bold
mdv2map.sh
\series default
 script assumes that the unit cell dimensions don't change throughout the
 trajectory, whereas 
\series bold
md2map.sh
\series default
 does not make this assumption.
\end_layout

\begin_layout Subsection
phenix_scripts
\end_layout

\begin_layout Description
XrayPrep This script currently has two parts, which can be run together,
 or separately.
 The first part uses the 
\emph on
phenix.AmberPrep
\emph default
 script to prepare an input pdb-format file for use in refinement.
 It usually works well, but is limited in its ability to handle unusual
 situations, such as post-translational modifications, etc.
 See the 
\emph on
run_alt_tleap
\emph default
 script below for a more flexible alternative.
 The second part of the script takes an 
\emph on
xxx-sf-cif
\emph default
 file from the PDB, and converts the information into files needed for amber-bas
ed refinement.
 This uses 
\emph on
phenix.refine
\emph default
 to do conversions, reject outliers, possible convert intensities to structure
 factors, expand to P1 symmetry, and so on.
 (Going forward, I will probably remove the first part of this script.)
\end_layout

\begin_layout Description
CryoPrep These two scripts take an atomic model (in the form of a PDB-format
 file), and either an electron density (as a CCP4 map) or structure factors
 (as an sf-cif file), and prepare all the files needed to carry out refinements
 that employ a molecular force field (rather than Engh-Huber like distance
 and angle restraints) to constrain the molecular geometry.
\end_layout

\begin_layout Description
run_phenix.solvent This is a sample script to allow comparisons of the bulk-solve
nt model in 
\emph on
phenix
\emph default
 and a user-supplied solvent density.
 Unlike the 
\series bold
conf_solvent.sh
\series default
 script based on 
\emph on
refmac5
\emph default
, this only works for a single-point, and doesn't carry out refinements
 that include the user-supplied solvent density.
\end_layout

\begin_layout Description
run_phenix_refine This is just an alternative way to run 
\emph on
phenix.refine
\emph default
 from the command line, with flexible ways to choose the input paramters.
 It's probably not for everyone.
\end_layout

\begin_layout Description
run_fmodel This just runs 
\emph on
phenix.fmodel
\emph default
 and re-formats the output in a simple but occasionally useful way.
\end_layout

\begin_layout Subsection
rism_scripts
\end_layout

\begin_layout Description
run_rism A simple script to run 3D-rism calcualtions (using the 
\emph on
msander
\emph default
 program) on a single snapshot.
 Typical values for grid spacing, closure and solvent model are hard-wired
 here, but you should edit this if you wish to make changes.
\end_layout

\begin_layout Description
run_metatwist_rho Takes the output from 
\emph on
run_rism
\emph default
 and computes an electron density map for the solvent.
 This can be used to replace the 
\begin_inset Quotes eld
\end_inset

flat
\begin_inset Quotes erd
\end_inset

 bulk solvent density model in programs like 
\emph on
msander
\emph default
 or 
\emph on
refmac5
\emph default
.
\end_layout

\begin_layout Subsection
ensemble_scripts
\end_layout

\begin_layout Standard
These are scripts that are used to run ensemble refinements, where many
 complete copies of the macromolecule are present, generally arranged in
 a supercell.
 These are mainly useful as part of a bigger workflow, whose documentation
 is not yet ready.
\end_layout

\begin_layout Description
find_alts output a listing of alternate conformations found in an input
 pdb-file
\end_layout

\begin_layout Description
select_alts this is the main script, that takes an input pdb file with alternate
 conformations (for example, as found in the PDB).
 For each chain, it randomly selects an alternate conformer for each residue,
 based on its input occupation.
 The output file sets all occupations to 1.0.
 This is commonly used to create a starting model for ensemble refinement.
\end_layout

\begin_layout Description
modify_pdb is a utility perl script for making all manner of modifications
 to PDB files, at least that can be done on a line-by-line basis.
 The scripts reads an input PDB file, makes whatever changes are coded in
 an intermediate section, and writes out the result.
 
\end_layout

\begin_layout Description
modify_frac is a variant of modify_pdb that allows modification based on
 fractional coordinates, useful for repacking coordinates into a single
 unit cell, and so on.
\end_layout

\begin_layout Description
collapse_pdb takes an ensemble model and converts it into a more standard
 
\begin_inset Quotes eld
\end_inset

alternate conformer
\begin_inset Quotes erd
\end_inset

 model
\end_layout

\begin_layout Subsection
XtalAnalyze scripts
\end_layout

\begin_layout Standard
This is a set of scripts created by Pawel Janowski some years ago.
 The main current documentation is in the 
\emph on
README
\emph default
, 
\emph on
XtalAnalyze.sh
\emph default
 and 
\emph on
XtalPlot.sh
\emph default
 files.
 Read these for now to see how to run things.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:LEaP-and-sleap"

\end_inset


\family sans
\series bold
LEaP
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
LEaP is the generic name given to the programs teLeap and xaLeap, which
 are generally run 
\emph on
via
\emph default
 the 
\emph on
tleap
\emph default
 and 
\emph on
xleap
\emph default
 shell scripts.
 These two programs share a common command language but the 
\emph on
xleap
\emph default
 program has been enhanced through the addition of an X-windows graphical
 user interface.
 The name LEaP is an acronym constructed from the names of the older AMBER
 software modules it replaces: link, edit, and parm.
 Thus, LEaP can be used to prepare input for the AMBER molecular mechanics
 programs.
\end_layout

\begin_layout Standard
LEaP is the basic tool to construct force field files (see Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:infoflow"

\end_inset

).
 Using 
\shape italic
tleap
\shape default
, the user can:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Read AMBER PREP input files 
\end_layout

\begin_layout Plain Layout

Read Amber PARM format parameter sets 
\end_layout

\begin_layout Plain Layout

Read and write Object File Format files (OFF) 
\end_layout

\begin_layout Plain Layout

Read and write PDB files 
\end_layout

\begin_layout Plain Layout

Construct new residues and molecules using simple commands 
\end_layout

\begin_layout Plain Layout

Link together residues and create nonbonded complexes of molecules 
\end_layout

\begin_layout Plain Layout

Modify internal coordinates within a molecule 
\end_layout

\begin_layout Plain Layout

Generate files that contain topology and parameters for AMBER and NAB
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\series bold
usage
\series default
: tleap [ -I<dir> ] [ -f <file>|- ]
\end_layout

\begin_layout Standard
The command 
\shape italic
tleap 
\shape default
is a simple shell script that calls 
\shape italic
teLeap
\shape default
 with a number of standard arguments.
 Directories to be searched are indicated by one or more 
\begin_inset Quotes eld
\end_inset


\family typewriter
-I
\family default

\begin_inset Quotes erd
\end_inset

 flags; standard locations are provided in the 
\shape italic
tleap
\shape default
 script.
 The 
\begin_inset Quotes eld
\end_inset


\family typewriter
-f
\family default

\begin_inset Quotes erd
\end_inset

 flag is used to tell tleap to take its input from a file (or from 
\shape italic
stdin
\shape default
 if 
\begin_inset Quotes eld
\end_inset


\family typewriter
-f -
\family default

\begin_inset Quotes erd
\end_inset

 is specified).
 If there is no 
\begin_inset Quotes eld
\end_inset


\family typewriter
-f
\family default

\begin_inset Quotes erd
\end_inset

 flag, input is taken interactively from the terminal.
\end_layout

\begin_layout Standard
A key command for LEaP is loadPdb, which inputs sequence and structure informati
on from Protein Data Bank Files.
 
\emph on
Be sure to read Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:PDBFILES"

\end_inset

 for information on how to 
\begin_inset Quotes eld
\end_inset

clean up
\begin_inset Quotes erd
\end_inset

 PDB files before loading them.
\end_layout

\begin_layout Section
Concepts
\end_layout

\begin_layout Standard
In order to effectively use LEaP it is necessary to understand the philosophy
 behind the program, especially the concepts of LEaP commands, variables,
 and objects.
 In addition to exploring these concepts, this section also addresses the
 use of external files and libraries with the program.
\end_layout

\begin_layout Subsection
Commands
\end_layout

\begin_layout Standard
A researcher uses LEaP by entering commands that manipulate objects.
 An object is just a basic building block; some examples of objects are
 ATOMs, RESIDUEs, UNITs, and PARMSETs.
 The commands that are supported within LEaP are described throughout the
 manual and are defined in detail in the 
\begin_inset Quotes eld
\end_inset

Command Reference
\begin_inset Quotes erd
\end_inset

 section.
\end_layout

\begin_layout Standard
The heart of LEaP is a command-line interface that accepts text commands
 which direct the program to perform operations on objects.
 All LEaP commands have one of the following two forms:
\end_layout

\begin_layout LyX-Code
command argument1 argument2 argument3 ...
 
\end_layout

\begin_layout LyX-Code
variable = command argument1 argument2 ...
\end_layout

\begin_layout Standard
For example:
\end_layout

\begin_layout LyX-Code
edit ALA trypsin = loadPdb trypsin.pdb
\end_layout

\begin_layout Standard
Each command is followed by zero or more arguments that are separated by
 whitespace.
  (Whitespace is blanks, tabs, and commas; and as of Amber version 21 carriage
 returns are also treated as whitespace.) Some commands return objects which
 are then associated with a variable using an assignment (=) statement.
 Each command acts upon its arguments, and some of the commands modify their
 arguments' contents.
 The commands themselves are case-insensitive.
 That is, in the above example, 
\family typewriter
edit
\family default
 could have been entered as 
\family typewriter
Edit
\family default
, 
\family typewriter
eDiT
\family default
, or any combination of upper and lower case characters.
 Similarly, 
\family typewriter
loadPdb
\family default
 could have been entered a number of different ways, including 
\family typewriter
loadpdb
\family default
.
 In this manual, we frequently use a mixed case for commands.
 We do this to enhance the differences between commands and as a mnemonic
 device.
 Thus, while we write 
\family typewriter
createAtom
\family default
, 
\family typewriter
createResidue
\family default
, and 
\family typewriter
createUnit
\family default
 in the manual, the user can use any case when entering these commands into
 the program.
\end_layout

\begin_layout Standard
The arguments in the command text may be objects such as NUMBERs, STRINGs,
 or LISTs, or they may be variables.
 These two subjects are discussed next.
\end_layout

\begin_layout Subsection
Variables
\end_layout

\begin_layout Standard
A variable is a handle for accessing an object.
 A variable name can be any alphanumeric string whose first character is
 an alphabetic character.
 Alphanumeric means that the characters of the name may be letters, numbers,
 or special symbols such as 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

.
 The following special symbols should not be used in variable names: dollar
 sign, comma, period (full stop), pound sign (hash), equals sign, space,
 semicolon, double quote, or the curly braces { and }.
 LEaP commands should not be used as variable names.
 Unlike commands, variable names are case-sensitive: 
\begin_inset Quotes eld
\end_inset

ARG
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

arg
\begin_inset Quotes erd
\end_inset

 are different variables.
 Variables are associated with objects using an assignment statement not
 unlike that found in conventional programming languages such as Fortran
 or C.
\end_layout

\begin_layout LyX-Code
mole = 6.02E23
\end_layout

\begin_layout LyX-Code
MOLE = 6.02E23
\end_layout

\begin_layout LyX-Code
myName = "Joe Smith"
\end_layout

\begin_layout LyX-Code
listOf7Numbers = { 1.2 2.3 3.4 4.5 6 7 8 }
\end_layout

\begin_layout Standard
In the above examples, both mole and MOLE are variable names, whose contents
 are the same (6.02
\begin_inset space ~
\end_inset

×
\begin_inset space ~
\end_inset

10
\begin_inset Formula $^{\text{}}$
\end_inset


\begin_inset Formula $^{23}$
\end_inset

).
 Despite the fact that both mole and MOLE have the same contents, they are
 not the same variable.
 This is due to the fact that variable names are case-sensitive.
 LEaP maintains a list of variables that are currently defined.
 This list can be displayed using the 
\family typewriter
list
\family default
 command.
 The contents of a variable can be printed using the 
\family typewriter
desc
\family default
 command.
\end_layout

\begin_layout Subsection
Objects
\end_layout

\begin_layout Standard
The object is the fundamental entity in LEaP.
 Objects range from the simple, such as NUMBERs and STRINGs, to the complex,
 such as UNITs, RESIDUEs and ATOMs.
 Complex objects have properties that can be altered using the 
\family typewriter
set
\family default
 command, and some complex objects can contain other objects.
 For example, RESIDUEs are complex objects that can contain ATOMs and have
 the properties: residue name, connect atoms, and residue type.
\end_layout

\begin_layout Subsubsection*
NUMBERs
\end_layout

\begin_layout Standard
NUMBERs are simple objects holding double-precision floating point numbers.
 They serve the same function as 
\begin_inset Quotes eld
\end_inset

double precision
\begin_inset Quotes erd
\end_inset

 variables in Fortran and 
\begin_inset Quotes eld
\end_inset

double
\begin_inset Quotes erd
\end_inset

 variables in C.
\end_layout

\begin_layout Subsubsection*
STRINGs
\end_layout

\begin_layout Standard
STRINGs are simple objects that are identical to character arrays in C and
 similar to character strings in Fortran.
 STRINGs store sequences of characters which may be delimited by double
 quote characters.
 Example strings are:
\end_layout

\begin_layout LyX-Code
"Hello there"
\end_layout

\begin_layout LyX-Code
"String with a "" (quote) character"
\end_layout

\begin_layout LyX-Code
"Strings contain letters and numbers:1231232"
\end_layout

\begin_layout Subsubsection*
LISTs
\end_layout

\begin_layout Standard
LISTs are made up of sequences of other objects delimited by LIST open and
 close characters.
 The LIST open character is an open curly bracket ({) and the LIST close
 character is a close curly bracket (}).
 LISTs can contain other LISTs and be nested arbitrarily deep.
 Example LISTs are:
\end_layout

\begin_layout LyX-Code
{ 1 2 3 4 }
\end_layout

\begin_layout LyX-Code
{ 1.2 "string" }
\end_layout

\begin_layout LyX-Code
{ 1 2 3 { 1 2 } { 3 4 } }
\end_layout

\begin_layout Standard
LISTs are used by many commands to provide a more flexible way of passing
 data to the commands.
 The 
\family typewriter
zMatrix
\family default
 command has two arguments, one of which is a LIST of LISTs where each subLIST
 contains between three and eight objects.
\end_layout

\begin_layout Subsubsection*
PARMSETs (Parameter Sets)
\end_layout

\begin_layout Standard
PARMSETs are objects that contain bond, angle, torsion, and non-bonding
 parameters for AMBER force field calculations.
 They are normally loaded from force field data files, such as 
\shape italic
parm94.dat
\shape default
, and frcmod files.
\end_layout

\begin_layout Subsubsection*
ATOMs
\end_layout

\begin_layout Standard
ATOMs are complex objects that do not contain any other objects.
 The ATOM object corresponds to the chemical concept of an atom.
 Thus, it is a single entity that may be bonded to other ATOMs and used
 as a building block for creating molecules.
 ATOMs have many properties that can be changed using the 
\family typewriter
set
\family default
 command.
 These properties are defined below.
\end_layout

\begin_layout Description
name This is a case-sensitive STRING property and it is the ATOM's name.
 The names for all ATOMs in a RESIDUE should be unique.
 The name has no relevance to molecular mechanics force field parameters;
 it is chosen arbitrarily as a means to identify ATOMs.
 Ideally, the name should correspond to the PDB standard, being 3 characters
 long except for hydrogens, which can have an extra digit as a 4
\begin_inset Formula $^{\text{th}}$
\end_inset

 character.
\end_layout

\begin_layout Description
type This is a STRING property.
 It defines the AMBER force field atom type.
 It is important that the character case match the canonical type definition
 used in the appropriate force field data (
\shape italic
*.dat
\shape default
) or frcmod file.
 For smooth operation, all atom types must have element and hybridization
 defined by the 
\family typewriter
addAtomTypes
\family default
 command.
 The standard AMBER force field atom types are added by the selected leaprc
 file.
\end_layout

\begin_layout Description
charge The charge property is a NUMBER that represents the ATOM's electrostatic
 point charge to be used in a molecular mechanics force field.
\end_layout

\begin_layout Description
element The atomic element provides a simpler description of the atom than
 the type, and is used only for LEaP's internal purposes (typically when
 force field information is not available).
 The element names correspond to standard nomenclature; the character 
\begin_inset Quotes eld
\end_inset

?
\begin_inset Quotes erd
\end_inset

 is used for special cases.
\end_layout

\begin_layout Description
position This property is a LIST of NUMBERs.
 The LIST must contain three values: the (X, Y, Z) Cartesian coordinates
 of the ATOM.
\end_layout

\begin_layout Subsubsection*
RESIDUEs
\end_layout

\begin_layout Standard
RESIDUEs are complex objects that contain ATOMs.
 RESIDUEs are collections of ATOMs, and are either molecules (e.g., formaldehyde)
 or are linked together to form molecules (e.g., amino acid monomers).
 RESIDUEs have several properties that can be changed using the 
\family typewriter
set
\family default
 command.
 (Note that database RESIDUEs are each contained within a UNIT having the
 same name; the residue GLY is referred to as GLY.1 when setting properties.
 When two of these single-UNIT residues are joined, the result is a single
 UNIT containing the two RESIDUEs.)
\end_layout

\begin_layout Standard
One property of RESIDUEs is connection ATOMs.
 Connection ATOMs are ATOMs that are used to make linkages between RESIDUEs.
 For example, in order to create a protein, the N-terminus of one amino
 acid residue must be linked to the C-terminus of the next residue.
 This linkage can be made within LEaP by setting the N ATOM to be a connection
 ATOM at the N-terminus and the C ATOM to be a connection ATOM at the C-terminus.
 As another example, two CYX amino acid residues may form a disulfide bridge
 by crosslinking a connection atom on each residue.
\end_layout

\begin_layout Standard
There are several properties of RESIDUEs that can be modified using the
 
\family typewriter
set
\family default
 command.
 The properties are described below:
\end_layout

\begin_layout Description
connect0 This defines the first of up to three ATOMs that are used to make
 links to other RESIDUEs.
 In UNITs containing single RESIDUEs, the RESIDUE's connect0 ATOM is usually
 defined as the UNIT's head ATOM.
 (This is how the standard library UNITs are defined.) For amino acids, the
 convention is to make the N-terminal nitrogen the connect0 ATOM.
\end_layout

\begin_layout Description
connect1 This defines the second of up to three ATOMs that are used to make
 links to other RESIDUEs.
 In UNITs containing single RESIDUEs, the RESIDUE's connect1 ATOM is usually
 defined as the UNIT's tail ATOM.
 (This is done in the standard library UNITs.) For amino acids, the convention
 is to make the C-terminal oxygen the connect1 ATOM.
\end_layout

\begin_layout Description
connect2 This defines the third of up to three ATOMs that are used to make
 links to other RESIDUEs.
 In amino acids, the convention is that this is the ATOM to which disulfide
 bridges are made.
\end_layout

\begin_layout Description
restype This property is a STRING that represents the type of the RESIDUE.
 Currently, it can have one of the following values: 
\begin_inset Quotes eld
\end_inset

undefined
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

solvent
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

protein
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

nucleic
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

saccharide
\begin_inset Quotes erd
\end_inset

.
 Some of the LEaP commands behave in different ways depending on the type
 of a residue.
 For example, the solvate commands require that the solvent residues be
 of type 
\begin_inset Quotes eld
\end_inset

solvent
\begin_inset Quotes erd
\end_inset

.
 It is important that the proper character case be used when defining this
 property.
\end_layout

\begin_layout Description
name The RESIDUE name is a STRING property.
 It is important that the proper character case be used when defining this
 property.
\end_layout

\begin_layout Subsubsection*
UNITs
\end_layout

\begin_layout Standard
UNITs are the most complex objects within LEaP, and the most important.
 They may contain RESIDUEs and ATOMs.
 UNITs, when paired with one or more PARMSETs, contain all of the information
 required to perform a calculation using AMBER.
 UNITs can be created using the 
\family typewriter
createUnit
\family default
 command.
 RESIDUEs and ATOMs can be added or deleted from a UNIT using the 
\family typewriter
add
\family default
 and 
\family typewriter
remove
\family default
 commands.
 UNITs have the following properties, which can be changed using the 
\family typewriter
set
\family default
 command:
\end_layout

\begin_layout Description
head
\end_layout

\begin_layout Description
tail These define the ATOMs within the UNIT that are connected when UNITs
 are joined together using the sequence command or when UNITs are joined
 together with the PDB or PREP file reading commands.
 The tail ATOM of one UNIT is connected to the head ATOM of the next UNIT
 in any sequence.
 (Note: a TER card in a PDB file causes a new UNIT to be started.)
\end_layout

\begin_layout Description
box This property can either be null, a NUMBER, or a LIST.
 The property defines the bounding box of the UNIT.
 If it is defined as null then no bounding box is defined.
 If the value is a single NUMBER, the bounding box will be defined to be
 a cube with each side being 
\shape italic
box
\shape default

\begin_inset space ~
\end_inset

Å across.
 If the value is a LIST, it must contain three NUMBERs, the lengths of the
 three sides of the bounding box.
 
\end_layout

\begin_layout Description
cap This property can either be null or a LIST.
 The property defines the solvent cap of the UNIT.
 If it is defined as null, no solvent cap is defined.
 If it is a LIST, it must contain four NUMBERs.
 The first three define the Cartesian coordinates (X, Y, Z) of the origin
 of the solvent cap in Å, while the fourth defines the radius of the solvent
 cap, also in Å.
\end_layout

\begin_layout Standard
Examples of setting the above properties are
\end_layout

\begin_layout LyX-Code
set dipeptide head dipeptide.1.N 
\end_layout

\begin_layout LyX-Code
set dipeptide box { 5.0 10.0 15.0 } 
\end_layout

\begin_layout LyX-Code
set dipeptide cap { 15.0 10.0 5.0 8.0 }
\end_layout

\begin_layout Standard
The first example makes the amide nitrogen in the first RESIDUE within 
\begin_inset Quotes eld
\end_inset

dipeptide
\begin_inset Quotes erd
\end_inset

 the head ATOM.
 The second example places a rectangular bounding box around the origin
 with the (X, Y, Z) dimensions of ( 5.0, 10.0, 15.0 ) in Å.
 The third example defines a solvent cap centered at ( 15.0, 10.0, 5.0 ) Å
 with a radius of 8.0
\begin_inset space ~
\end_inset

Å.
 Note: the 
\family typewriter
set cap
\family default
 command does not actually solvate, it just sets an attribute.
 See the 
\family typewriter
solvateCap
\family default
 command for a more practical case.
\end_layout

\begin_layout Subsubsection*
Complex objects and accessing subobjects
\end_layout

\begin_layout Standard
UNITs and RESIDUEs are complex objects.
 Among other things, this means that they can contain other objects.
 There is a loose hierarchy of complex objects and what they are allowed
 to contain.
 The hierarchy is as follows:
\end_layout

\begin_layout Itemize
UNITs can contain RESIDUEs and ATOMs.
\end_layout

\begin_layout Itemize
RESIDUEs can contain ATOMs.
\end_layout

\begin_layout Standard
The hierarchy is loose because it does not forbid UNITs from containing
 ATOMs directly.
 However, the convention that has evolved within LEaP is to have UNITs directly
 contain RESIDUEs which directly contain ATOMs.
\end_layout

\begin_layout Standard
Objects that are contained within other objects can be accessed using dot
 
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset

 notation.
 An example would be a UNIT which describes a dipeptide ALA-PHE.
 The UNIT contains two RESIDUEs each of which contain several ATOMs.
 If the UNIT is referenced (named) by the variable dipeptide, then the RESIDUE
 named ALA can be accessed in two ways.
 The user may type one of the following commands to display the contents
 of the RESIDUE:
\end_layout

\begin_layout LyX-Code
desc dipeptide.ALA
\end_layout

\begin_layout LyX-Code
desc dipeptide.1
\end_layout

\begin_layout Standard
The first command translates to 
\begin_inset Quotes eld
\end_inset

describe some RESIDUE named ALA within the UNIT named dipeptide
\begin_inset Quotes erd
\end_inset

.
 The second form translates as 
\begin_inset Quotes eld
\end_inset

describe the RESIDUE with sequence number 1 within the UNIT named dipeptide
\begin_inset Quotes erd
\end_inset

.
 The second form is more useful because every subobject within an object
 is guaranteed to have a unique sequence number.
 If the first form is used and there is more than one RESIDUE with the name
 ALA, then an arbitrary residue with the name ALA is returned.
 To access ATOMs within RESIDUEs, either of the following forms of command
 may be used:
\end_layout

\begin_layout LyX-Code
desc dipeptide.1.CA
\end_layout

\begin_layout LyX-Code
desc dipeptide.1.3
\end_layout

\begin_layout Standard
Assuming that the ATOM with the name CA has a sequence number 3 within RESIDUE
 1, then both of the above commands will print a description of the alpha-carbon
 of RESIDUE dipeptide.ALA or dipeptide.1.
 The reader should keep in mind that dipeptide.1.CA is the ATOM, an object,
 contained within the RESIDUE named ALA within the variable dipeptide.
 This means that dipeptide.1.CA can be used as an argument to any command
 that requires an ATOM as an argument.
 However dipeptide.1.CA is not a variable and cannot be used on the left hand
 side of an assignment statement.
\end_layout

\begin_layout Section
Running LEaP
\end_layout

\begin_layout LyX-Code
tleap -h
\end_layout

\begin_layout Standard
will give a list of command-line arguments (which are very simple).
 Once you have started either program, typing 
\begin_inset Quotes eld
\end_inset

help
\begin_inset Quotes erd
\end_inset

 will display useful information about possible actions.
\end_layout

\begin_layout Standard
A file called 
\emph on
leaprc
\emph default
 is executed as a script file at the start of the LEaP session unless the
 user suppresses it with the 
\emph on
-s
\emph default
 command line option.
 Sample script files are in 
\emph on
dat/leap/cmd
\emph default
, and you may wish to copy one of these to become "your" default file.
 LEaP will look first for a 
\emph on
leaprc
\emph default
 file in the user's current directory, then in any directories included
 with 
\emph on
-I
\emph default
 flags.
\end_layout

\begin_layout Standard
The command line interface allows the user to specify a log file that is
 used to log all input and output within the command line environment.
 The log file is named using the 
\emph on
logFile
\emph default
 command.
 The file has two purposes: to allow the user to see a complete record of
 operations performed by LEaP, and to help recover from (and recreate) program
 crashes.
 Output from LEaP commands is written to the log file at a verbosity level
 of 2 regardless of the verbosity level set by the user using the 
\emph on
verbosity
\emph default
 command.
 Each line in the log file that was typed in by the user begins with the
 two characters "> " (a greater-than sign followed by a space).
 This allows the user to extract the commands typed into LEaP from the log
 file to create a script file that can be executed using the 
\emph on
source
\emph default
 command.
 This provides a type of insurance against program crashes by allowing the
 user to regenerate their interactive sessions.
 An example of a command that will create a script to reenact a LEaP session
 is:
\end_layout

\begin_layout LyX-Code
cat LOGFILE | grep "^> " | sed "s/^> //" > SOURCEFILE.x 
\end_layout

\begin_layout Section
Basic instructions for using LEaP to build molecules
\end_layout

\begin_layout Standard
This section gives an overview of how LEaP is most commonly used.
 Detailed descriptions of all the commands are given in the next section.
\end_layout

\begin_layout Subsection
Building a Molecule For Molecular Mechanics
\end_layout

\begin_layout Standard
In order to prepare a molecule within LEaP for AMBER, three basic tasks
 need to be completed.
\end_layout

\begin_layout Enumerate
Any needed UNIT or PARMSET objects must be loaded;
\end_layout

\begin_layout Enumerate
The molecule must be constructed within LEaP;
\end_layout

\begin_layout Enumerate
The user must output topology and coordinate files from LEaP to use in AMBER.
\end_layout

\begin_layout Standard
The most typical command sequence is the following:
\end_layout

\begin_layout LyX-Code
source leaprc.protein.ff14SB 
\emph on
(load a force field) 
\end_layout

\begin_layout LyX-Code
x = loadPdb trypsin.pdb 
\emph on
(load in a structure)
\emph default
 
\end_layout

\begin_layout LyX-Code
....
 
\emph on
add in cross-links, solvate, etc.
 
\end_layout

\begin_layout LyX-Code
saveAmberParm x prmtop prmcrd 
\emph on
(save files) 
\end_layout

\begin_layout Standard
There are a number of variants of this:
\end_layout

\begin_layout Enumerate
Although 
\family typewriter
loadPdb
\family default
 is by far the most common way to enter a structure, one might use 
\family typewriter
loadOff
\family default
, or 
\family typewriter
loadAmberPrep
\family default
, or use the 
\family typewriter
zMatrix
\family default
 command to build a molecule from a Z-matrix.
 For small molecules, e.g., ligand like, 
\family typewriter
loadMol2
\family default
 or 
\family typewriter
loadMol3
\family default
 are available.
 See the Commands section below for descriptions of these options.
 If you do not have a starting structure (in the form of a PDB file), LEaP
 can be used to build the molecule; you will find, however, that this is
 not always a straightforward process.
 Many experienced Amber users turn to other (commercial and non-commercial)
 programs to create their initial structures.
\end_layout

\begin_layout Enumerate
Be very attentive to any errors produced in the 
\family typewriter
loadPdb
\family default
 step; these generally mean that LEaP has misread the file.
 A general rule of thumb is to keep editing your input PDB file until LEaP
 stops complaining.
 It is often convenient to use the 
\family typewriter
addPdbAtomMap
\family default
 or 
\family typewriter
addPdbResMap
\family default
 commands to make systematic changes from the names in your PDB files to
 those in the Amber topology files; see the leaprc files in 
\shape italic
dat/leap/cmd
\shape default
 for examples of this.
 
\emph on
Be sure to read Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:PDBFILES"

\end_inset

 for information on how to 
\begin_inset Quotes eld
\end_inset

clean up
\begin_inset Quotes erd
\end_inset

 PDB files before loading them.
\end_layout

\begin_layout Enumerate
The 
\family typewriter
saveAmberParm
\family default
 command cited above is appropriate for most force fields; for polarizable
 calculations you will need to use 
\family typewriter
saveAmberParmPol
\family default
.
\end_layout

\begin_layout Subsection
Amino Acid Residues
\end_layout

\begin_layout Standard
For each of the amino acids found in the LEaP libraries, there has been
 created an N-terminal and a C-terminal analog.
 The N-terminal amino acid UNIT/RESIDUE names and aliases are prefaced by
 the letter N (e.g., NALA) and the C-terminal amino acids by the letter C
 (e.g., CALA).
 If the user models a peptide or protein within LEaP, they may choose one
 of three ways to represent the terminal amino acids.
 The user may use (1) standard amino acids, (2) protecting groups (ACE/NME),
 or (3) the charged C- and N-terminal amino acid UNITs/RESIDUEs.
 If the standard amino acids are used for the terminal residues, then these
 residues will have incomplete valences.
 These three options are illustrated below:
\end_layout

\begin_layout LyX-Code
{ ALA VAL SER PHE } 
\end_layout

\begin_layout LyX-Code
{ ACE ALA VAL SER PHE NME } 
\end_layout

\begin_layout LyX-Code
{ NALA VAL SER CPHE }
\end_layout

\begin_layout Standard
The default for loading from PDB files is to use N- and C-terminal residues;
 this is established by the 
\family typewriter
addPdbResMap
\family default
 command in the standard leaprc files.
 To force incomplete valences with the standard residues, one would have
 to define a sequence (
\begin_inset Quotes eld
\end_inset

 x = { ALA VAL SER PHE }
\begin_inset Quotes erd
\end_inset

) and use 
\family typewriter
loadPdbUsingSeq
\family default
, or use 
\family typewriter
clearPdbResMap
\family default
 to completely remove the mapping feature.
\end_layout

\begin_layout Standard
Histidine can exist either as the protonated species or as a neutral species
 with a hydrogen at the 
\begin_inset Formula $\delta$
\end_inset

 or 
\begin_inset Formula $\epsilon$
\end_inset

 position.
 For this reason, the histidine UNIT/RESIDUE name is either HIP, HID, or
 HIE (but not HIS).
  The standard leaprc files assign the name HIS to HIE.
 Thus, if a PDB file is read that contains the residue HIS, the residue
 will be assigned to the HIE UNIT object.
 This feature can be changed within one's own leaprc file.
\end_layout

\begin_layout Standard
The AMBER force fields also differentiate between the residue cysteine (CYS)
 and the similar residue which participates in disulfide bridges, cystine
 (CYX).
 The user will have to explicitly define, using the 
\family typewriter
bond
\family default
 command, the disulfide bond for a pair of cystines, as this information
 is not read from the PDB file.
 In addition, the user will need to load the PDB file using the 
\family typewriter
loadPdbUsingSeq
\family default
 command, substituting CYX for CYS in the sequence wherever a disulfide
 bond will be created.
\end_layout

\begin_layout Subsection
Nucleic Acid Residues
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

D
\begin_inset Quotes erd
\end_inset

 prefix can be used to distinguish between deoxyribose and ribose units.
 Residue names like 
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

DA
\begin_inset Quotes erd
\end_inset

 can be followed by a 
\begin_inset Quotes eld
\end_inset

5
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

3
\begin_inset Quotes erd
\end_inset

 (
\begin_inset Quotes eld
\end_inset

DA5
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

DA3
\begin_inset Quotes erd
\end_inset

) for residues at the ends of chains; this is also the default established
 by 
\family typewriter
addPdbResMap
\family default
, even if the 
\begin_inset Quotes eld
\end_inset

5
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

3
\begin_inset Quotes erd
\end_inset

 are not added in the PDB file.
 The 
\begin_inset Quotes eld
\end_inset

5
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

3
\begin_inset Quotes erd
\end_inset

 residues are 
\begin_inset Quotes eld
\end_inset

capped
\begin_inset Quotes erd
\end_inset

 by a hydrogen; the plain and 
\begin_inset Quotes eld
\end_inset

3
\begin_inset Quotes erd
\end_inset

 residues include a 
\begin_inset Quotes eld
\end_inset

leading
\begin_inset Quotes erd
\end_inset

 phosphate group.
 Neutral residues (nucleosides) capped by hydrogens end their names with
 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

, as in 
\begin_inset Quotes eld
\end_inset

DAN
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section
Error Handling and Reporting
\end_layout

\begin_layout Standard
In Amber version 18 changes were made to LEaP's error processing.
 The first set of changes involve error handling.
 For input from a file (i.e., 
\family typewriter
tleap invoked with -f
\family default
 ) execution is now terminated at the first occurrence of these errors:
 file input/output errors, illegal command syntax, illegal command arguments,
 and some command parsing errors.
 The intent is to simplify error detection and to ease troubleshooting.
 For interactive input there is no change in handling: LEaP continues to
 be forgiving of these errors in the hope that the user can recover in real
 time.
\end_layout

\begin_layout Standard
 The final set of changes involve error reporting.
 LEaP produces four kinds of messages: errors, warnings, notes, and processing
 messages.
 Messages beginning with "Fatal Error!" or "Error!" or "Error:" indicate
 a serious problem.
 Messages beginning with "Warning!" or "Warning:" indicate a potential problem
 that should be investigated.
 Messages beginning with "Note." or "Note:" provide information worth noting.
 Messages that are not designated by one of the above tags report processing
 status.
 Total counts of errors, warnings, and notes are outputted at the end of
 LEaP.
 The intent is to simplify error detection by emitting clear and consistent
 messages.
\end_layout

\begin_layout Standard
 As with all computational software, LEaP's output should be carefully examined.
 Some error and warning  messages mention likely causes or contain suggested
 workarounds, but all such messages provide clues.
 Apply common sense and the scientific method to troubleshoot.
 Typical first steps are to verify input files and to search the AMBER Mail
 Reflector for similar reported problems.
 Note that LEaP normally produces a log file that contains all messages
 and more detailed output that can be inspected.
\end_layout

\begin_layout Subsection
Known Issues
\end_layout

\begin_layout Standard
 This is an incomplete list, started with Amber version 24, focussing on
 incompatibilities with standards, significant bugs, and gotchas in 
\shape italic
LEaP
\shape default
:
\end_layout

\begin_layout Itemize
LEaP does not write Mol2 files that are compliant with Sybyl bond types
 in the  @<TRIPOS>BOND record.
  As of Amber version 24, single, double, and triple bond types are correctly
 emitted; the number 4 is used to denote aromatic bonds.
 In previous versions, the number 1 was always emitted.
\end_layout

\begin_layout Itemize
A workaround exists for the num lock issue in xLEaP; contact the Amber mailing
 list for details.
\end_layout

\begin_layout Standard
Of course other issues should be reported via the Amber mailing list.
\end_layout

\begin_layout Section
Commands
\end_layout

\begin_layout Standard
The following is a description of the commands that can be accessed using
 the command line interface in 
\shape italic
tleap
\shape default
, or through the command line editor in 
\shape italic
xleap
\shape default
.
 Whenever an argument in a command line definition is enclosed in square
 brackets (e.g., 
\family typewriter
[arg]
\family default
), then that argument is optional.
 When examples are shown, the command line is prefaced by 
\begin_inset Quotes eld
\end_inset

> 
\begin_inset Quotes erd
\end_inset

, and the program output is shown without this character preface.
\end_layout

\begin_layout Standard
Some commands that are almost never used have been removed from this description
 to save space.
 You can use the 
\begin_inset Quotes eld
\end_inset

help
\begin_inset Quotes erd
\end_inset

 facility to obtain information about these commands; most only make sense
 if you understand what the program is doing behind the scenes.
\end_layout

\begin_layout Subsection
add
\end_layout

\begin_layout LyX-Code
add
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
add
\end_layout

\end_inset

 a b
\end_layout

\begin_layout Standard
UNIT/RESIDUE/ATOM a,b
\end_layout

\begin_layout Standard
Add the object b to the object a.
 This command is used to place ATOMs within RESIDUEs, and RESIDUEs within
 UNITs.
 This command will work only if b is not contained by any other object.
\end_layout

\begin_layout Standard
The following example illustrates both the 
\family typewriter
add
\family default
 command and the way the TIP3P water molecule is created for the LEaP distributi
on.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> h1 = createAtom H1 HW 0.417 
\end_layout

\begin_layout Plain Layout

> h2 = createAtom H2 HW 0.417 
\end_layout

\begin_layout Plain Layout

> o = createAtom O OW -0.834 
\end_layout

\begin_layout Plain Layout

> 
\end_layout

\begin_layout Plain Layout

> set h1 element H 
\end_layout

\begin_layout Plain Layout

> set h2 element H 
\end_layout

\begin_layout Plain Layout

> set o element O 
\end_layout

\begin_layout Plain Layout

> 
\end_layout

\begin_layout Plain Layout

> r = createResidue TIP3 
\end_layout

\begin_layout Plain Layout

> add r h1 
\end_layout

\begin_layout Plain Layout

> add r h2 
\end_layout

\begin_layout Plain Layout

> add r o 
\end_layout

\begin_layout Plain Layout

> 
\end_layout

\begin_layout Plain Layout

> bond h1 o 
\end_layout

\begin_layout Plain Layout

> bond h2 o 
\end_layout

\begin_layout Plain Layout

> bond h1 h2 
\end_layout

\begin_layout Plain Layout

> 
\end_layout

\begin_layout Plain Layout

> TIP3 = createUnit TIP3 
\end_layout

\begin_layout Plain Layout

> 
\end_layout

\begin_layout Plain Layout

> add TIP3 r 
\end_layout

\begin_layout Plain Layout

> set TIP3.1 restype solvent 
\end_layout

\begin_layout Plain Layout

> set TIP3.1 imagingAtom TIP3.1.O 
\end_layout

\begin_layout Plain Layout

> 
\end_layout

\begin_layout Plain Layout

> zMatrix TIP3 { 
\end_layout

\begin_layout Plain Layout

> { H1 O 0.9572 } 
\end_layout

\begin_layout Plain Layout

> { H2 O H1 0.9572 104.52 } 
\end_layout

\begin_layout Plain Layout

> } 
\end_layout

\begin_layout Plain Layout

> 
\end_layout

\begin_layout Plain Layout

> saveOff TIP3 water.lib 
\end_layout

\begin_layout Plain Layout

Saving TIP3.
 
\end_layout

\begin_layout Plain Layout

Building topology.
 
\end_layout

\begin_layout Plain Layout

Building atom parameters.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
addAtomTypes
\end_layout

\begin_layout LyX-Code
addAtomTypes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addAtomTypes
\end_layout

\end_inset

 { { type element hybrid } { ...
 } ...
 }
\end_layout

\begin_layout Standard
Define element and hybridization for force field atom types.
 This command for the standard force fields can be seen in the standard
 leaprc files.
 The STRINGs are most safely rendered using quotation marks.
 If atom types are not defined, confusing messages about hybridization can
 result when loading PDB files.
\end_layout

\begin_layout Subsection
addC4Pairwise
\end_layout

\begin_layout LyX-Code
addC4Pairwise 
\begin_inset Index idx
status open

\begin_layout Plain Layout
addC4Pairwise
\end_layout

\end_inset

 unit atom1 atom2 C4Value(kcal/mol*A^4)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Adds pairwise C4 interaction between two specific atoms.
 C4 interaction means the non-bonded force between 
\family typewriter
atom1
\family default
 and 
\family typewriter
atom2
\family default
 will follow 12-6-4 pattern.
 Note here this 12-6-4 pattern is atom-specific, not atom-type-specific.
 This is achieved by generating 
\family typewriter
LENNARD_JONES_DCOEF
\family default
 and 
\family typewriter
LENNARD_JONES_DVALUE
\family default
 flags in the prmtop file.
 Under 
\family typewriter
LENNARD_JONES_DCOEF
\family default
 flag, each row will contain the ID of 
\family typewriter
atom1
\family default
, the ID of 
\family typewriter
atom2
\family default
, and a numeric index for debugging purpose.
 Under 
\family typewriter
LENNARD_JONES_DVALUE
\family default
 flag, each row will contain the 
\family typewriter
C4Value
\family default
.
 Multiple 
\family typewriter
addC4Pairwise
\family default
 commands are supported in a single tleap file.
 
\end_layout

\begin_layout Subsection
addC4Type
\end_layout

\begin_layout LyX-Code
addC4Type 
\begin_inset Index idx
status open

\begin_layout Plain Layout
addC4Type
\end_layout

\end_inset

 unit type1 type2 C4Value(kcal/mol*A^4)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Similar to 
\family typewriter
add12_6_4
\family default
 in 
\family typewriter
ParmEd
\family default
, this function will generate a 
\family typewriter
LENNARD_JONES_CCOEF 
\family default
flag in the prmtop file.
 Under that flag, a C4 matrix will be presented with mostly zero values,
 except for the entries that represent non-zero 
\family typewriter
C4Value
\family default
s between 
\family typewriter
type1
\family default
 and 
\family typewriter
type2
\family default
.
 Multiple 
\family typewriter
addC4Type
\family default
 commands are supported in a single tleap file.
 
\end_layout

\begin_layout Subsection
addIons and addIons2
\end_layout

\begin_layout LyX-Code
addIons
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addIons
\end_layout

\end_inset

 unit ion1 numIon1 [ion2 numIon2]
\end_layout

\begin_layout LyX-Code
addIons2
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addIons2
\end_layout

\end_inset

 unit ion1 numIon1 [ion2 numIon2]
\end_layout

\begin_layout Standard
Adds counterions in a shell around 
\shape italic
unit
\shape default
 using a Coulombic potential on a grid.
 If 
\shape italic
numIon1
\shape default
 is 0 then the unit is neutralized.
 In this case, 
\shape italic
ion1
\shape default
 must be opposite in charge to 
\shape italic
unit
\shape default
 and 
\shape italic
ion2
\shape default
 must not be specified.
 Otherwise, the specified numbers of 
\shape italic
ion1
\shape default
 [
\shape italic
ion2
\shape default
 ] are added [in alternating order].
 If solvent is present, it is ignored in the charge and steric calculations,
 and if an ion has a steric conflict with a solvent molecule, the ion is
 moved to the center of that solvent molecule, and the latter is deleted.
 (To avoid this behavior, either solvate _after_ 
\family typewriter
addions
\family default
, or use 
\family typewriter
addIons2
\family default
.) Ions must be monatomic.
 This procedure is not guaranteed to globally minimize the electrostatic
 energy.
 When neutralizing regular-backbone nucleic acids, the first cations will
 generally be placed between phosphates, leaving the final two ions to be
 placed somewhere around the middle of the molecule.
 The default grid resolution is 1
\begin_inset space ~
\end_inset

Å, extending from an inner radius of (
\shape italic
maxIonVdwRadius
\shape default
 + 
\shape italic
maxSoluteAtomVdwRadius
\shape default
) to an outer radius 4
\begin_inset space ~
\end_inset

Å beyond.
 A distance-dependent dielectric is used for speed.
 
\family typewriter
addIons2
\family default
 is the same as 
\family typewriter
addIons
\family default
, except solvent and solute are treated the same.
\end_layout

\begin_layout Standard
Algorithms for determining the number of ions to add, based on a desired
 salt concentration, are given in Refs.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Schmit18,Machado20"
literal "true"

\end_inset

.
\end_layout

\begin_layout Subsection
addIonsRand
\end_layout

\begin_layout LyX-Code
addIonsRand
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addIonsRand
\end_layout

\end_inset

 unit ion1 #ion1 [ion2 #ion2] [separation]
\end_layout

\begin_layout Standard
Adds counterions in a shell around 
\emph on
unit
\emph default
 by replacing random solvent molecules.
 If 
\emph on
#ion1
\emph default
 is 0, the unit is neutralized (
\emph on
ion1
\emph default
 must be opposite in charge to 
\emph on
unit
\emph default
, and 
\emph on
ion2
\emph default
 cannot be specified).
 Otherwise, the specified numbers of 
\emph on
ion1
\emph default
 [
\emph on
ion2
\emph default
] are added [in alternating order].
 If 
\emph on
separation
\emph default
 is specified, ions will be guaranteed to be more than that distance apart
 in Angstroms.
\end_layout

\begin_layout Standard
Ions must be monoatomic.
 This procedure is much faster than 
\family typewriter
addIons
\family default
, as it does not calculate charges.
 Solvent must be present.
 It must be possible to position the requested number of ions with the given
 separation in the solvent.
 Algorithms for determining the number of ions to add, based on a desired
 salt concentration, are given in Refs.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Schmit18,Machado20"
literal "true"

\end_inset

.
\end_layout

\begin_layout Subsection
addPath
\end_layout

\begin_layout LyX-Code
addPath
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addPath
\end_layout

\end_inset

 path
\end_layout

\begin_layout Standard
Add the directory in 
\shape italic
path
\shape default
 to the list of directories that are searched for files specified by other
 commands.
 The following example illustrates this command.
\end_layout

\begin_layout LyX-Code
> addPath /disk/howard
\end_layout

\begin_layout LyX-Code
/disk/howard added to file search path.
\end_layout

\begin_layout Standard
After the above command is entered, the program will search for a file in
 this directory if a file is specified in a command.
 Thus, if a user has a library named 
\begin_inset Quotes eld
\end_inset

/disk/howard/rings.lib
\begin_inset Quotes erd
\end_inset

 and the user wants to load that library, one only needs to enter load rings.lib
 and not load /disk/howard/rings.lib.
\end_layout

\begin_layout Subsection
addPdbAtomMap
\end_layout

\begin_layout LyX-Code
addPdbAtomMap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addPdbAtomMap
\end_layout

\end_inset

 list
\end_layout

\begin_layout Standard
The atom Name Map is used to try to map atom names read from PDB files to
 atoms within residue UNITs when the atom name in the PDB file does not
 match an atom in the residue.
 This enables PDB files to be read in without extensive editing of atom
 names.
 Typically, this command is placed in the LEaP startup file, 
\begin_inset Quotes eld
\end_inset

leaprc
\begin_inset Quotes erd
\end_inset

, so that assignments are made at the beginning of the session.
 
\shape italic
list
\shape default
 should be a LIST of LISTs.
 Each sublist should contain two entries to add to the Name Map.
 Each entry has the form:
\end_layout

\begin_layout LyX-Code
{ string string }
\end_layout

\begin_layout Standard
where the first string is the name within the PDB file, and the second string
 is the name in the residue UNIT.
\end_layout

\begin_layout Subsection
addPdbResMap
\end_layout

\begin_layout LyX-Code
addPdbResMap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addPdbResMap
\end_layout

\end_inset

 list
\end_layout

\begin_layout Standard
The Name Map is used to map RESIDUE names read from PDB files to variable
 names within LEaP.
 Typically, this command is placed in the LEaP startup file, 
\begin_inset Quotes eld
\end_inset

leaprc
\begin_inset Quotes erd
\end_inset

, so that assignments are made at the beginning of the session.
 The LIST is a LIST of LISTs.
 Each sublist contains two or three entries to add to the Name Map.
 Each entry has the form:
\end_layout

\begin_layout LyX-Code
{ double string1 string2 }
\end_layout

\begin_layout Standard
where 
\shape italic
double
\shape default
 can be 0 or 1, 
\shape italic
string1
\shape default
 is the name within the PDB file, and 
\shape italic
string2
\shape default
 is the variable name to which 
\shape italic
string1
\shape default
 will be mapped.
 To illustrate, the following is part of the Name Map that exists when LEaP
 is started with a standard leaprc file:
\end_layout

\begin_layout LyX-Code
ADE --> DADE
\end_layout

\begin_layout LyX-Code
: : 
\end_layout

\begin_layout LyX-Code
0 ALA --> NALA 
\end_layout

\begin_layout LyX-Code
0 ARG --> NARG
\end_layout

\begin_layout LyX-Code
: : 
\end_layout

\begin_layout LyX-Code
1 ALA --> CALA 
\end_layout

\begin_layout LyX-Code
1 ARG --> CARG
\end_layout

\begin_layout LyX-Code
: : 
\end_layout

\begin_layout LyX-Code
1 VAL --> CVAL
\end_layout

\begin_layout Standard
Thus, the residue ALA will be mapped to NALA if it is the N-terminal residue
 and CALA if it is found at the C-terminus.
 The above Name Map was produced using the following (edited) command line:
\end_layout

\begin_layout LyX-Code
> addPdbResMap { 
\end_layout

\begin_layout LyX-Code
> { 0 ALA NALA } { 1 ALA CALA } 
\end_layout

\begin_layout LyX-Code
> { 0 ARG NARG } { 1 ARG CARG } : : 
\end_layout

\begin_layout LyX-Code
> { 0 VAL NVAL } { 1 VAL CVAL } 
\end_layout

\begin_layout LyX-Code
> : : 
\end_layout

\begin_layout LyX-Code
> { ADE DADE } : : 
\end_layout

\begin_layout LyX-Code
> }
\end_layout

\begin_layout Subsection
alias
\end_layout

\begin_layout LyX-Code
alias
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
alias
\end_layout

\end_inset

 [ string1 [ string2 ] ]
\end_layout

\begin_layout Standard
This command will add or remove an entry to the Alias Table or list entries
 in the Alias Table.
 If both strings are present, then 
\shape italic
string1
\shape default
 becomes the alias to 
\shape italic
string2
\shape default
, the original command.
 If only one string is used as an argument, then that string will be removed
 from the Alias Table.
 If no arguments are given to the command, the current aliases stored in
 the Alias Table will be listed.
\end_layout

\begin_layout Standard
The proposed alias is first checked for conflict with the LEaP commands
 and rejected if a conflict is found.
 A proposed alias will replace an existing alias with a warning being issued.
 The alias can stand for more than a single word, but also as an entire
 string so the user can quickly repeat entire lines of input.
\end_layout

\begin_layout Subsection
bond
\end_layout

\begin_layout LyX-Code
bond
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bond
\end_layout

\end_inset

 atom1 atom2 [ order ]
\end_layout

\begin_layout Standard
Create a bond between 
\shape italic
atom1
\shape default
 and 
\shape italic
atom2
\shape default
.
 Both of these ATOMs must be contained by the same UNIT.
 By default, the bond will be a single bond.
 By specifying 
\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

#
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

 as the optional argument, order, the user can specify a single, double,
 triple, or aromatic bond, respectively.
 Example:
\end_layout

\begin_layout LyX-Code
bond trx.32.SG trx.35.SG
\end_layout

\begin_layout Subsection
bondByDistance
\end_layout

\begin_layout LyX-Code
bondByDistance
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bondByDistance
\end_layout

\end_inset

 container [ maxBond ]
\end_layout

\begin_layout Standard
Create single bonds between all ATOMs in the UNIT 
\shape italic
container
\shape default
 that are within 
\shape italic
maxBond
\shape default

\begin_inset space ~
\end_inset

Å of each other.
 If 
\shape italic
maxBond
\shape default
 is not specified, a default distance will be used.
 This command is especially useful in building molecules.
 Example:
\end_layout

\begin_layout LyX-Code
bondByDistance alkylChain
\end_layout

\begin_layout Subsection
check
\end_layout

\begin_layout LyX-Code
check
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
check
\end_layout

\end_inset

 unit [ parms ]
\end_layout

\begin_layout Standard
This command can be used to check 
\shape italic
unit
\shape default
 for internal inconsistencies that could cause problems when performing
 calculations.
 This is a very useful command that should be used before a UNIT is saved
 with 
\family typewriter
saveAmberParm
\family default
 or its variants.
 Currently it checks for the following possible problems:
\end_layout

\begin_layout Itemize
long bonds
\end_layout

\begin_layout Itemize
short bonds
\end_layout

\begin_layout Itemize
non-integral total charge of the UNIT
\end_layout

\begin_layout Itemize
missing force field atom types
\end_layout

\begin_layout Itemize
close contacts (< 1.5
\begin_inset space ~
\end_inset

Å) between nonbonded ATOMs
\end_layout

\begin_layout Standard
The user may collect any missing molecular mechanics parameters in a PARMSET
 for subsequent editing.
 In the following example, the alanine UNIT found in the amino acid library
 has been examined by the check command:
\end_layout

\begin_layout LyX-Code
> check ALA 
\end_layout

\begin_layout LyX-Code
Checking 'ALA'....
 
\end_layout

\begin_layout LyX-Code
Checking parameters for unit 'ALA'.
 
\end_layout

\begin_layout LyX-Code
Checking for bond parameters.
 
\end_layout

\begin_layout LyX-Code
Checking for angle parameters.
 
\end_layout

\begin_layout LyX-Code
Unit is OK.
\end_layout

\begin_layout Subsection
combine
\end_layout

\begin_layout LyX-Code
variable = combine
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
combine
\end_layout

\end_inset

 list
\end_layout

\begin_layout Standard
Combine the contents of the UNITs within 
\shape italic
list
\shape default
 into a single UNIT.
 The new UNIT is placed in variable.
 This command is similar to the sequence command except it does not link
 the ATOMs of the UNITs together.
 In the following example, the input and output should be compared with
 the example given for the sequence command.
\end_layout

\begin_layout LyX-Code
> tripeptide = combine { ALA GLY PRO } 
\end_layout

\begin_layout LyX-Code
Sequence: ALA 
\end_layout

\begin_layout LyX-Code
Sequence: GLY 
\end_layout

\begin_layout LyX-Code
Sequence: PRO 
\end_layout

\begin_layout LyX-Code
> desc tripeptide 
\end_layout

\begin_layout LyX-Code
UNIT name: ALA
\end_layout

\begin_layout LyX-Code
Head atom: .R<ALA 1>.A<N 1> 
\end_layout

\begin_layout LyX-Code
Tail atom: .R<PRO 3>.A<C 13> 
\end_layout

\begin_layout LyX-Code
Contents: 
\end_layout

\begin_layout LyX-Code
R<ALA 1> 
\end_layout

\begin_layout LyX-Code
R<GLY 2> 
\end_layout

\begin_layout LyX-Code
R<PRO 3>
\end_layout

\begin_layout Subsection
copy
\end_layout

\begin_layout LyX-Code
newvariable = copy
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
copy
\end_layout

\end_inset

 variable
\end_layout

\begin_layout Standard
In most cases, creates an exact duplicate of the object 
\shape italic
variable
\shape default
.
 Since 
\shape italic
newvariable
\shape default
 is not pointing to the same object as 
\shape italic
variable
\shape default
, changing the contents of one object will not alter the other object.
 Example:
\end_layout

\begin_layout LyX-Code
> tripeptide = sequence { ALA GLY PRO } 
\end_layout

\begin_layout LyX-Code
> tripeptideSol = copy tripeptide 
\end_layout

\begin_layout LyX-Code
> solvateBox tripeptideSol TIP3PBOX 8 2
\end_layout

\begin_layout Standard
In the above example, 
\shape italic
tripeptide
\shape default
 is a separate object from 
\shape italic
tripeptideSol
\shape default
 and is not solvated.
 Had the user instead entered
\end_layout

\begin_layout LyX-Code
> tripeptide = sequence { ALA GLY PRO } 
\end_layout

\begin_layout LyX-Code
> tripeptideSol = tripeptide 
\end_layout

\begin_layout LyX-Code
> solvateBox tripeptideSol TIP3PBOX 8 2
\end_layout

\begin_layout Standard
then both 
\shape italic
tripeptide
\shape default
 and 
\shape italic
tripeptideSol
\shape default
 would be solvated since they would both refer to the same object.
\end_layout

\begin_layout Standard
Note that in a few instances, the copy command does not produce an exact
 copy.
 This is particularly relevant when making copies of oligosaccharide residues.
 In these, the copy command invariably inverts chirality at the anomeric
 carbon.
 The workaround for this is to use the copy command twice, where the second
 call inverts the chirality back.
\end_layout

\begin_layout Subsection
createAtom
\end_layout

\begin_layout LyX-Code
variable = createAtom
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
createAtom
\end_layout

\end_inset

 name type charge
\end_layout

\begin_layout Standard
Return a new and empty ATOM with 
\shape italic
name
\shape default
, 
\shape italic
type
\shape default
, and 
\shape italic
charge
\shape default
 as its atom name, atom type, and electrostatic point charge.
 (See the 
\family typewriter
add
\family default
 command for an example of the 
\family typewriter
createAtom
\family default
 command.)
\end_layout

\begin_layout Subsection
createResidue
\end_layout

\begin_layout LyX-Code
variable = createResidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
createResidue
\end_layout

\end_inset

 name
\end_layout

\begin_layout Standard
Return a new and empty RESIDUE with the name 
\shape italic
name
\shape default
.
 (See the 
\family typewriter
add
\family default
 command for an example of the 
\family typewriter
createResidue
\family default
 command.)
\end_layout

\begin_layout Subsection
createUnit
\end_layout

\begin_layout LyX-Code
variable = createUnit
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
createUnit
\end_layout

\end_inset

 name
\end_layout

\begin_layout Standard
Return a new and empty UNIT with the name 
\shape italic
name
\shape default
.
 (See the 
\family typewriter
add
\family default
 command for an example of the 
\family typewriter
createUnit
\family default
 command.)
\end_layout

\begin_layout Subsection
deleteBond
\end_layout

\begin_layout LyX-Code
deleteBond
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
deleteBond
\end_layout

\end_inset

 atom1 atom2
\end_layout

\begin_layout Standard
Delete the bond between the ATOMs 
\shape italic
atom1
\shape default
 and 
\shape italic
atom2
\shape default
.
 If no bond exists, an error will be displayed.
\end_layout

\begin_layout Subsection
desc
\end_layout

\begin_layout LyX-Code
desc
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
desc
\end_layout

\end_inset

 variable
\end_layout

\begin_layout Standard
Print a description of the object 
\shape italic
variable
\shape default
.
 In the following example, the alanine UNIT found in the amino acid library
 has been examined by the 
\family typewriter
desc
\family default
 command:
\end_layout

\begin_layout LyX-Code
> desc ALA 
\end_layout

\begin_layout LyX-Code
UNIT name: ALA 
\end_layout

\begin_layout LyX-Code
Head atom: .R<ALA 1>.A<N 1> 
\end_layout

\begin_layout LyX-Code
Tail atom: .R<ALA 1>.A<C 9> 
\end_layout

\begin_layout LyX-Code
Contents: R<ALA 1>
\end_layout

\begin_layout Standard
Now, the 
\family typewriter
desc
\family default
 command is used to examine the first residue (1) of the alanine UNIT:
\end_layout

\begin_layout LyX-Code
> desc ALA.1 
\end_layout

\begin_layout LyX-Code
RESIDUE name: ALA 
\end_layout

\begin_layout LyX-Code
RESIDUE sequence number: 1 
\end_layout

\begin_layout LyX-Code
Type: protein 
\end_layout

\begin_layout LyX-Code
Connection atoms: 
\end_layout

\begin_layout LyX-Code
Connect atom 0: A<N 1> 
\end_layout

\begin_layout LyX-Code
Connect atom 1: A<C 9> 
\end_layout

\begin_layout LyX-Code
Contents: 
\end_layout

\begin_layout LyX-Code
A<N 1> 
\end_layout

\begin_layout LyX-Code
A<HN 2> 
\end_layout

\begin_layout LyX-Code
A<CA 3> 
\end_layout

\begin_layout LyX-Code
A<HA 4> 
\end_layout

\begin_layout LyX-Code
A<CB 5> 
\end_layout

\begin_layout LyX-Code
A<HB1 6> 
\end_layout

\begin_layout LyX-Code
A<HB2 7> 
\end_layout

\begin_layout LyX-Code
A<HB3 8> 
\end_layout

\begin_layout LyX-Code
A<C 9> 
\end_layout

\begin_layout LyX-Code
A<O 10>
\end_layout

\begin_layout Standard
Next, we illustrate the 
\family typewriter
desc
\family default
 command by examining the ATOM N of the first residue (1) of the alanine
 UNIT:
\end_layout

\begin_layout LyX-Code
> desc ALA.1.N 
\end_layout

\begin_layout LyX-Code
ATOM Name: N 
\end_layout

\begin_layout LyX-Code
Type: N 
\end_layout

\begin_layout LyX-Code
Charge: -0.463 
\end_layout

\begin_layout LyX-Code
Element: N 
\end_layout

\begin_layout LyX-Code
Atom flags: 20000|posfxd- posblt- posdrn- sel- pert- notdisp- tchd- 
\end_layout

\begin_layout LyX-Code
      posknwn+ int - nmin- nbld- 
\end_layout

\begin_layout LyX-Code
Atom position: 3.325770, 1.547909, -0.000002 
\end_layout

\begin_layout LyX-Code
Atom velocity: 0.000000, 0.000000, 0.000000 
\end_layout

\begin_layout LyX-Code
Bonded to .R<ALA 1>.A<HN 2> by a single bond.
 
\end_layout

\begin_layout LyX-Code
Bonded to .R<ALA 1>.A<CA 3> by a single bond.
\end_layout

\begin_layout Standard
Since the N ATOM is also the first atom of the ALA residue, the following
 command will give the same output as the previous example:
\end_layout

\begin_layout LyX-Code
> desc ALA.1.1
\end_layout

\begin_layout Subsection
groupSelectedAtoms
\end_layout

\begin_layout LyX-Code
groupSelectedAtoms
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
groupSelectedAtoms
\end_layout

\end_inset

 unit name
\end_layout

\begin_layout Standard
Create a group within 
\shape italic
unit
\shape default
 with the name 
\shape italic
name
\shape default
, using all of the ATOMs within 
\shape italic
unit
\shape default
 that are selected.
 If the group has already been defined then overwrite the old group.
 The 
\family typewriter
desc
\family default
 command can be used to list groups.
 Example:
\end_layout

\begin_layout LyX-Code
groupSelectedAtoms TRP sideChain
\end_layout

\begin_layout Standard
An expression like 
\begin_inset Quotes eld
\end_inset

TRP@sideChain
\begin_inset Quotes erd
\end_inset

 returns a LIST, so any commands that require LISTs can take advantage of
 this notation.
 After assignment, one can access groups using the 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

 notation.
 Examples:
\end_layout

\begin_layout LyX-Code
select TRP@sideChain
\end_layout

\begin_layout LyX-Code
center TRP@sideChain
\end_layout

\begin_layout Standard
The latter example will calculate the center of the atoms in the 
\begin_inset Quotes eld
\end_inset


\shape italic
sideChain
\shape default

\begin_inset Quotes erd
\end_inset

 group.
 (See the 
\family typewriter
select
\family default
 command for a more detailed example.)
\end_layout

\begin_layout Subsection
help
\end_layout

\begin_layout LyX-Code
help
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transform
\end_layout

\end_inset

 [string]
\end_layout

\begin_layout Standard
This command prints a description of the command in 
\shape italic
string
\shape default
.
 If no argument is given, a list of help topics is provided.
\end_layout

\begin_layout Subsection
impose
\end_layout

\begin_layout LyX-Code
impose
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
impose
\end_layout

\end_inset

 unit seqlist internals
\end_layout

\begin_layout Standard
The 
\family typewriter
impose
\family default
 command allows the user to impose internal coordinates on 
\shape italic
unit
\shape default
.
 The list of RESIDUEs to impose the internal coordinates upon is in 
\shape italic
seqlist
\shape default
.
 The internal coordinates to impose are in 
\shape italic
internals
\shape default
, which is an object of type LIST.
\end_layout

\begin_layout Standard
The command works by looking into each RESIDUE within 
\shape italic
unit
\shape default
 that is listed in 
\shape italic
seqlist
\shape default
 and attempts to apply each of the internal coordinates within 
\shape italic
internals
\shape default
.
 The 
\shape italic
seqlist
\shape default
 argument is a LIST of NUMBERS that represent sequence numbers or ranges
 of sequence numbers.
 A range of sequence numbers is represented by two element LISTs that contain
 the first and last sequence number in the range.
 The user can specify sequence number ranges that are larger than what is
 found in 
\shape italic
unit
\shape default
, in which case the range will stop at the beginning or end of 
\shape italic
unit
\shape default
 as appropriate.
 For example, the range { 1 999 } will include all RESIDUEs in a 200 RESIDUE
 UNIT.
\end_layout

\begin_layout Standard
The internals argument is a LIST of LISTs.
 Each sublist contains a sequence of ATOM names which are of type STRING
 followed by the value of the internal coordinate.
 An example of the impose command would be:
\end_layout

\begin_layout LyX-Code
impose peptide { 1 2 3 } { { 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

CA
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 -40.0 } { 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

CA
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

 -60.0 } }
\end_layout

\begin_layout Standard
This would cause the RESIDUE with sequence numbers 1, 2, and 3 within the
 UNIT 
\shape italic
peptide
\shape default
 to assume an 
\begin_inset Formula $\alpha$
\end_inset

-helical conformation.
 The command
\end_layout

\begin_layout LyX-Code
impose peptide { 1 2 { 5 10 } 12 } { { 
\begin_inset Quotes eld
\end_inset

CA
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

CB
\begin_inset Quotes erd
\end_inset

 5.0 } }
\end_layout

\begin_layout Standard
will impose on the residues with sequence numbers 1, 2, 5, 6, 7, 8, 9, 10,
 and 12 within the UNIT 
\shape italic
peptide
\shape default
 a bond length of 5.0
\begin_inset space ~
\end_inset

Å between the 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

 carbon atoms.
 RESIDUEs without an ATOM named CB, such as glycine, will be unaffected.
\end_layout

\begin_layout Standard
It is important to understand that the impose command attempts to perform
 the intended action on all residues in the
\shape italic
 seqlist
\shape default
, but does not necessarily limit itself to acting only upon
\shape italic
 internals
\shape default
 contained within those residues.
 That is, the list does not limit the residues to consider.
 Rather, it is a list of all starting points to consider.
 In other words, to specify a
\shape italic
 seqlist
\shape default
 of { 3 4 } tells
\shape italic
 impose
\shape default
 to attempt to set two torsions, one starting in residue 3 and the other
 starting in residue 4.
 It does not specify that the torsion should only be set if the atoms are
 found within residues 3 and/or 4.
\end_layout

\begin_layout Standard
Because of this, one must be careful when setting torsions between two residues.
 It is necessary to know which atoms are contained in which residues.
 Consider the following trisaccharide:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $\alpha$
\end_inset

-
\shape smallcaps
d
\shape default
-Glc
\begin_inset Formula $p$
\end_inset

-(1-6)-
\begin_inset Formula $\beta$
\end_inset

-
\shape smallcaps
d
\shape default
-Man
\begin_inset Formula $p$
\end_inset

-(1-6)-
\begin_inset Formula $\beta$
\end_inset

-
\shape smallcaps
d
\shape default
-Gal
\begin_inset Formula $p$
\end_inset

-OH
\end_layout

\begin_layout Standard
To build it most simply in LEaP requires the following directive.
 Note that the build order in LEaP is the reverse of the standard order
 in which the residues are written above.
 
\end_layout

\begin_layout LyX-Code
glycan = sequence { ROH 6LB 6MB 0GA } 
\end_layout

\begin_layout Standard
A proper build of a 1-6 oligosaccharide linkage often requires setting three
 torsions.
 In the manner that residues are defined in the Glycam force fields, the
 atoms describing two of those torsions, 
\begin_inset Formula $\phi$
\end_inset

 and 
\begin_inset Formula $\psi$
\end_inset

, span two residues.
 However, the atoms in the third, 
\begin_inset Formula $\omega$
\end_inset

, exist entirely within one residue.
 In fact, they exist within all three glycan residues in the example above.
 The following commands will set only the three torsions in the glycosidic
 linkage between residues 4 (0GA) and 3 (6MB).
 
\end_layout

\begin_layout LyX-Code
impose glycan { 4 } { { 
\begin_inset Quotes eld
\end_inset

H1
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C1
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

O6
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C6
\begin_inset Quotes erd
\end_inset

 -60.0 } } # O6 & C6 are in residue 3
\end_layout

\begin_layout LyX-Code
impose glycan { 4 } { { 
\begin_inset Quotes eld
\end_inset

C1
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

O6
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C6
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C5
\begin_inset Quotes erd
\end_inset

 180.0 } } # only C1 is in residue 4
\end_layout

\begin_layout LyX-Code
impose glycan { 3 } { { 
\begin_inset Quotes eld
\end_inset

O6
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C6
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C5
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

O5
\begin_inset Quotes erd
\end_inset

 60.0 } } # all are in residue 3
\end_layout

\begin_layout Standard
The common misconception that the
\shape italic
 seqlist
\shape default
 sets a limit on the residues affected can cause trouble in this case.
 For example, this command
\end_layout

\begin_layout LyX-Code
impose glycan { 4 3 } { { 
\begin_inset Quotes eld
\end_inset

H1
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C1
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

O6
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C6
\begin_inset Quotes erd
\end_inset

 -60.0 } } 
\end_layout

\begin_layout Standard
will find all sequences beginning in residue 4 and in residue 3 that contain
 the serially bonded atoms H1 C1 O6 and C6.
 Therefore, in this case, it will set the specified torsions between residues
 4 and 3 as well as between 3 and 2.
 Similarly, this command
\end_layout

\begin_layout LyX-Code
impose peptide { 4 } { { 
\begin_inset Quotes eld
\end_inset

O6
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C6
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C5
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

O5
\begin_inset Quotes erd
\end_inset

 60.0 } } 
\end_layout

\begin_layout Standard
will not affect any inter-residue linkage, but instead will set the C5-C6
 torsion in the glucopyranoside (0GA) at the non-reducing end of the oligosaccha
ride.
\end_layout

\begin_layout Standard
The ordering and content within the
\shape italic
 internals
\shape default
 list is important as well.
 For these examples, consider the simple peptide sequence:
\end_layout

\begin_layout LyX-Code
peptide = sequence { ALA ALA ALA ALA } 
\end_layout

\begin_layout Standard
The ordering of the
\shape italic
 internals
\shape default
 specifies the atoms to which the torsion set is applied.
 The
\shape italic
 impose
\shape default
 command will find the first atom in the 
\shape italic
internals
\shape default
 list, check for the presence of a bonded second atom, and so forth.
 It will then apply the action, here a torsion, to those four atoms.
 For example, this command:
\end_layout

\begin_layout LyX-Code
impose peptide { 3 } { { 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

CA
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 -40.0 } }  # between 3 and 4
\end_layout

\begin_layout Standard
will set the torsion between residues 3 and 4.
 However, this one:
\end_layout

\begin_layout LyX-Code
impose peptide { 3 } { { 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

CA
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 -40.0 } }  # between 3 and 2 
\end_layout

\begin_layout Standard
will set the torsion between residues 3 and 2.
 
\end_layout

\begin_layout Standard
If at any point, the
\shape italic
 impose
\shape default
 command does not find an atom bonded to a previous atom in an
\shape italic
 internals
\shape default
 list, it will silently ignore the command.
 This is likely to occur in two instances.
 One, the atom simply might not exist in the residue:
\end_layout

\begin_layout LyX-Code
impose peptide { 3 } { { 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

CA
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

CB
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

HB4
\begin_inset Quotes erd
\end_inset

 10.0 } }  # no effect, silent 
\end_layout

\begin_layout Standard
Here, of course, there is no atom named HB4 in alanine.
 Similarly, improper torsions are ignored.
 For example, this command also has no effect:
\end_layout

\begin_layout LyX-Code
impose peptide { 3 } { { 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

HB1
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

CA
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

CB
\begin_inset Quotes erd
\end_inset

 10.0 } }  # no effect, silent 
\end_layout

\begin_layout Standard
because HB1 is not bonded to N.
\end_layout

\begin_layout Standard
Three types of conformational change are supported: Bond length changes,
 bond angle changes, and torsion angle changes.
 If the conformational change involves a torsion angle, then all dihedrals
 around the central pair of atoms are rotated.
 The entire list of internals is applied to each RESIDUE.
\end_layout

\begin_layout Standard
It is also important to note that the impose command performs its actions
 entirely using internal coordinates.
 Because of this, it is difficult to predict the resulting behavior when
 the coordinates are translated back to cartesian, for example when writing
 a PDB file.
\end_layout

\begin_layout Subsection
list
\end_layout

\begin_layout Standard
List all of the variables currently defined.
 To illustrate, the following (edited) output shows the variables defined
 when LEaP is started with a standard leaprc file:
\end_layout

\begin_layout LyX-Code
> list
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
list
\end_layout

\end_inset

 A ACE ALA ARG ASN : : VAL W WAT Y
\end_layout

\begin_layout Subsection
loadAmberParams
\end_layout

\begin_layout LyX-Code
variable = loadAmberParams
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
loadAmberParams
\end_layout

\end_inset

 filename
\end_layout

\begin_layout Standard
Load an AMBER format parameter set file and place it in 
\shape italic
variable
\shape default
.
 All interactions defined in the parameter set will be contained within
 
\shape italic
variable
\shape default
.
 This command causes the loaded parameter set to be included in LEaP's list
 of parameter sets that are searched when parameters are required.
 General proper and improper torsion parameters are modified during the
 command execution with the LEaP general type 
\begin_inset Quotes eld
\end_inset

?
\begin_inset Quotes erd
\end_inset

 replacing the AMBER general type 
\begin_inset Quotes eld
\end_inset

X
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
> parm91 = loadAmberParams parm91X.dat 
\end_layout

\begin_layout LyX-Code
> saveOff parm91 parm91.lib 
\end_layout

\begin_layout Subsection
loadAmberPrep
\end_layout

\begin_layout LyX-Code
loadAmberPrep
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
loadAmberPrep
\end_layout

\end_inset

 filename [ prefix ]
\end_layout

\begin_layout Standard
This command loads an AMBER PREP input file.
 For each residue that is loaded, a new UNIT is constructed that contains
 a single RESIDUE and a variable is created with the same name as the name
 of the residue within the PREP file.
 If the optional argument 
\shape italic
prefix
\shape default
 (a STRING) is provided, its contents will be prefixed to each variable
 name; this feature is used to prefix UATOM residues, which have the same
 names as AATOM residues with the string 
\begin_inset Quotes eld
\end_inset

U
\begin_inset Quotes erd
\end_inset

 to distinguish them.
 
\end_layout

\begin_layout LyX-Code
> loadAmberPrep cra.in 
\end_layout

\begin_layout LyX-Code
Loaded UNIT: CRA
\end_layout

\begin_layout Subsection
loadOff
\end_layout

\begin_layout LyX-Code
loadOff
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
loadOff
\end_layout

\end_inset

 filename
\end_layout

\begin_layout Standard
This command loads the OFF library within the file named 
\shape italic
filename
\shape default
.
 All UNITs and PARMSETs within the library will be loaded.
 The objects are loaded into LEaP under the variable names the objects had
 when they were saved.
 Variables already in existence that have the same names as the objects
 being loaded will be overwritten.
 Any PARMSETs loaded using this command are included in LEaP's library of
 PARMSETs that is searched whenever parameters are required (the old AMBER
 format is used for PARMSETs rather than the OFF format in the default configura
tion).
 Example command line:
\end_layout

\begin_layout LyX-Code
> loadOff parm91.lib 
\end_layout

\begin_layout LyX-Code
Loading library: parm91.lib 
\end_layout

\begin_layout LyX-Code
Loading: PARAMETERS
\end_layout

\begin_layout Subsection
loadMol2
\end_layout

\begin_layout LyX-Code
variable = loadMol2
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
loadMol2
\end_layout

\end_inset

 filename
\end_layout

\begin_layout Standard
Load a Sybyl MOL2 format file into 
\shape italic
variable
\shape default
, a UNIT.
 This command is very much like 
\family typewriter
loadOff
\family default
, except that it only creates a single UNIT.
\end_layout

\begin_layout Subsection
loadPdb
\end_layout

\begin_layout LyX-Code
variable = loadPdb
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
loadPdb
\end_layout

\end_inset

 filename
\end_layout

\begin_layout Standard
Load a Protein Data Bank (PDB) format file with the file name 
\shape italic
filename
\shape default
 into 
\shape italic
variable
\shape default
, a UNIT.
 The sequence numbers of the RESIDUEs will be determined from the order
 of residues within the PDB file ATOM records.
 This function will search the variables currently defined within LEaP for
 variable names that map to residue names within the ATOM records of the
 PDB file.
 If a matching variable name is found then the contents of the variable
 are added to the UNIT that will contain the structure being loaded from
 the PDB file.
 Adding the contents of the matching UNIT into the UNIT being constructed
 means that the contents of the matching UNIT are copied into the UNIT being
 built and that a bond is created between the connect0 ATOM of the matching
 UNIT and the connect1 ATOM of the UNIT being built.
 (This bond creation does not occur if a PDB `TER' card separates the  
 atoms.
  As of AmberTools21 a PDB TER record is also used to detect a new residue
 in the case of contiguous residues with identical residue sequence numbers.)
 The UNITs are combined in the same way UNITs are combined using the sequence
 command.
 As atoms are read from the ATOM records their coordinates are written into
 the correspondingly named ATOMs within the UNIT being built.
 If the entire residue is read and it is found that ATOM coordinates are
 missing, then external coordinates are built from the internal coordinates
 that were defined in the matching UNIT.
 This allows LEaP to build coordinates for hydrogens and lone-pairs which
 are not specified in PDB files.
  Note that the standard leaprc files include  commands to establish automatic
 N- and C-termination of amino acid  sequences and 5' and 3' termination
 of nucleic acid sequences.
\end_layout

\begin_layout LyX-Code
> crambin = loadPdb 1crn 
\end_layout

\begin_layout Subsection
loadPdbUsingSeq
\end_layout

\begin_layout LyX-Code
loadPdbUsingSeq
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
loadPdbUsingSeq
\end_layout

\end_inset

 filename unitlist
\end_layout

\begin_layout Standard
This command reads a PDB format file named 
\shape italic
filename
\shape default
.
 This command is identical to 
\family typewriter
loadPdb
\family default
 except it does not use the residue names within the PDB file.
 Instead, the sequence is defined by the user in 
\shape italic
unitlist
\shape default
.
 For more details see 
\family typewriter
loadPdb
\family default
.
\end_layout

\begin_layout LyX-Code
> peptSeq = { UALA UASN UILE UVAL UGLY } 
\end_layout

\begin_layout LyX-Code
> pept = loadPdbUsingSeq pept.pdb peptSeq
\end_layout

\begin_layout Standard
In the above example, a variable is first defined as a LIST of united atom
 RESIDUEs.
 A PDB file is then loaded, in this sequence order, from the file 
\begin_inset Quotes eld
\end_inset

pept.pdb
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
logFile
\end_layout

\begin_layout LyX-Code
logFile
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
logFile
\end_layout

\end_inset

 filename
\end_layout

\begin_layout Standard
This command opens the file with the file name 
\shape italic
filename
\shape default
 as a log file.
 User input and all output is written to the log file.
 Output is written to the log file as if the verbosity level were set to
 2.
 An example of this command is
\end_layout

\begin_layout LyX-Code
> logfile /disk/howard/leapTrpSolvate.log
\end_layout

\begin_layout Subsection
measureGeom
\end_layout

\begin_layout LyX-Code
measureGeom
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
measureGeom
\end_layout

\end_inset

 atom1 atom2 [ atom3 [ atom4 ] ]
\end_layout

\begin_layout Standard
Measure the distance, angle, or torsion between two, three, or four ATOMs,
 respectively.
\end_layout

\begin_layout Standard
In the following example, we first describe the RESIDUE ALA of the ALA UNIT
 in order to find the identity of the ATOMs.
 Next, the 
\family typewriter
measureGeom
\family default
 command is used to determine a distance (determining simple angles and
 dihedral angles are straightforward extensions).
 As shown in the example, the ATOMs may be identified using atom names or
 numbers.
\end_layout

\begin_layout LyX-Code
> desc ALA.ALA 
\end_layout

\begin_layout LyX-Code
RESIDUE name: ALA 
\end_layout

\begin_layout LyX-Code
RESIDUE sequence number: 1 
\end_layout

\begin_layout LyX-Code
Type: protein ....
\end_layout

\begin_layout LyX-Code
> measureGeom ALA.ALA.3 ALA.ALA.CB
\end_layout

\begin_layout LyX-Code
Distance: 1.52 angstroms
\end_layout

\begin_layout Subsection
quit
\end_layout

\begin_layout Standard
Quit the LEaP program.
\end_layout

\begin_layout Subsection
remove
\end_layout

\begin_layout LyX-Code
remove
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
remove
\end_layout

\end_inset

 container item
\end_layout

\begin_layout Standard
Remove the object 
\shape italic
item
\shape default
 from the object 
\shape italic
container
\shape default
.
 If 
\shape italic
container
\shape default
 does not contain 
\shape italic
item
\shape default
, an error message will be displayed.
 This command is used to remove ATOMs from RESIDUEs, and RESIDUEs from UNITs.
 If the object represented by 
\shape italic
item
\shape default
 is not referenced by any other variable name, it will be destroyed.
\end_layout

\begin_layout LyX-Code
> dipeptide = combine { ALA GLY } 
\end_layout

\begin_layout LyX-Code
Sequence: ALA 
\end_layout

\begin_layout LyX-Code
Sequence: GLY 
\end_layout

\begin_layout LyX-Code
> desc dipeptide 
\end_layout

\begin_layout LyX-Code
UNIT name: ALA 
\end_layout

\begin_layout LyX-Code
Head atom: .R<ALA 1>.A<N 1> 
\end_layout

\begin_layout LyX-Code
Tail atom: .R<GLY 2>.A<C 6> 
\end_layout

\begin_layout LyX-Code
Contents: R<ALA 1> R<GLY 2> 
\end_layout

\begin_layout LyX-Code
> remove dipeptide dipeptide.2 
\end_layout

\begin_layout LyX-Code
> desc dipeptide UNIT name: ALA 
\end_layout

\begin_layout LyX-Code
Head atom: .R<ALA 1>.A<N 1> 
\end_layout

\begin_layout LyX-Code
Tail atom: null 
\end_layout

\begin_layout LyX-Code
Contents: R<ALA 1>
\end_layout

\begin_layout Subsection
saveAmberParm
\end_layout

\begin_layout LyX-Code
saveAmberParm
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
saveAmberParm
\end_layout

\end_inset

 unit topologyfilename coordinatefilename
\end_layout

\begin_layout Standard
Save the Amber/NAB topology and coordinate files for 
\shape italic
unit
\shape default
 into the files named 
\shape italic
topologyfilename
\shape default
 and 
\shape italic
coordinatefilename
\shape default
 respectively.
 This command will cause LEaP to search its list of PARMSETs for parameters
 defining all of the interactions between the ATOMs within 
\shape italic
unit
\shape default
.
 It produces topology files and coordinate files that are identical in format
 to those produced by Amber PARM and can be read into Amber and NAB for
 calculations.
 The output of this operation can be used for minimizations, dynamics, and
 thermodynamic perturbation calculations.
\end_layout

\begin_layout Standard
In the following example, the topology and coordinates from the all_amino94.lib
 UNIT ALA are generated:
\end_layout

\begin_layout LyX-Code
> saveamberparm ALA ala.top ala.crd 
\end_layout

\begin_layout Subsection
saveMol2
\end_layout

\begin_layout LyX-Code
saveMol2
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
saveMol2
\end_layout

\end_inset

 unit filename type-flag
\end_layout

\begin_layout Standard
Write 
\shape italic
unit
\shape default
 to the file 
\shape italic
filename
\shape default
 as a Tripos mol2 format file.
 If 
\shape italic
type-flag
\shape default
 is 0, the Tripos (Sybyl) atom types will be used; if 
\shape italic
type-flag
\shape default
 is 1, the Amber atom types present in 
\shape italic
unit
\shape default
 will be used.
 Generally, you would want to set 
\shape italic
type-flag
\shape default
 to 1, unless you need the Sybyl atom types for use in some program outside
 Amber; Amber itself has no force fields that use Sybyl atom types.
\end_layout

\begin_layout Subsection
saveOff
\end_layout

\begin_layout LyX-Code
saveOff
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
saveOff
\end_layout

\end_inset

 object filename
\end_layout

\begin_layout Standard
The 
\family typewriter
saveOff
\family default
 command allows the user to save UNITs and PARMSETs to a file named 
\shape italic
filename
\shape default
.
 The file is written using the Object File Format (off) and can accommodate
 an unlimited number of uniquely named objects.
 The names by which the objects are stored are the variable names specified
 within the 
\shape italic
object
\shape default
 argument.
 If the file 
\shape italic
filename
\shape default
 already exists, the new objects will be added to it.
 If there are objects within the file with the same names as objects being
 saved then the old objects will be overwritten.
 The argument 
\shape italic
object
\shape default
 can be a single UNIT, a single PARMSET, or a LIST of mixed UNITs and PARMSETs.
 (See the 
\family typewriter
add
\family default
 command for an example of the 
\family typewriter
saveOff
\family default
 command.)
\end_layout

\begin_layout Subsection
savePdb
\end_layout

\begin_layout LyX-Code
savePdb
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
savePdb
\end_layout

\end_inset

 unit filename
\end_layout

\begin_layout Standard
Write 
\shape italic
unit
\shape default
 to the file 
\shape italic
filename
\shape default
 as a PDB format file.
 In the following example, the PDB file from the ALA unit is generated:
\end_layout

\begin_layout LyX-Code
> savepdb ALA ala.pdb
\end_layout

\begin_layout Standard

\series bold
Warning:
\series default
 The PDB-like file created with this command is primarily useful for reading
 back into 
\emph on
tleap
\emph default
, or for other Amber-related uses.
 It is consistent with Amber, but not with other aspects of the PDB standard
 (e.g.
 in atom and residue names, etc.) Use the 
\emph on
ambpdb 
\emph default
program (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:ambpdb"

\end_inset

) if you need a file that more fully complies with the PDB standard.
\end_layout

\begin_layout Subsection
sequence
\end_layout

\begin_layout LyX-Code
variable = sequence
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sequence
\end_layout

\end_inset

 list
\end_layout

\begin_layout Standard
The 
\family typewriter
sequence
\family default
 command is used to combine the contents of 
\shape italic
list
\shape default
, which should be a LIST of UNITs, into a new, single UNIT.
 This new UNIT is constructed by taking each UNIT in 
\shape italic
list
\shape default
 in turn and copying its contents into the UNIT being constructed.
 As each new UNIT is copied, a bond is created between the tail ATOM of
 the UNIT being constructed and the head ATOM of the UNIT being copied,
 if both connect ATOMs are defined.
 If only one is defined, a warning is generated and no bond is created.
 If neither connection ATOM is defined then no bond is created.
 As each RESIDUE is copied into the UNIT being constructed it is assigned
 a sequence number which represents the order the RESIDUEs are added.
 Sequence numbers are assigned to the RESIDUEs so as to maintain the same
 order as was in the UNIT before it was copied into the UNIT being constructed.
 This command builds reasonable starting coordinates for all ATOMs within
 the UNIT; it does this by assigning internal coordinates to the linkages
 between the RESIDUEs and building the external coordinates from the internal
 coordinates from the linkages and the internal coordinates that were defined
 for the individual UNITs in the sequence.
\end_layout

\begin_layout LyX-Code
> tripeptide = sequence { ALA GLY PRO } 
\end_layout

\begin_layout Subsection
set
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
set
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This command operates in two modes.
 In the first, it sets default values for some parameters.
 In the second, it sets specific properties to containers (for example,
 UNITs).
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Defaults can be set in LEaP for the global parameters below with this usage:
\end_layout

\begin_layout LyX-Code
set default
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
set default
\end_layout

\end_inset

 parameter value
\end_layout

\begin_layout Standard
For example:
\end_layout

\begin_layout LyX-Code
set default PBRadii mbondi
\end_layout

\begin_layout Description
OldPrmtopFormat If set to 
\begin_inset Quotes eld
\end_inset

on
\begin_inset Quotes erd
\end_inset

, the 
\family typewriter
saveAmberParm
\family default
 command will write a prmtop file in the format used in Amber 6 and earlier
 versions; if set to 
\begin_inset Quotes eld
\end_inset

off
\begin_inset Quotes erd
\end_inset

 (the default), it will use the new format.
 This is discouraged for general use and is available mainly for backwards
 compatibility with programs that expect old-style topology files or for
 testing.
\end_layout

\begin_layout Description
Dielectric If set to 
\begin_inset Quotes eld
\end_inset

distance
\begin_inset Quotes erd
\end_inset

 (the default), electrostatic calculations in LEaP will use a distance-dependent
 dielectric; if set to 
\begin_inset Quotes eld
\end_inset

constant
\begin_inset Quotes erd
\end_inset

, a constant dielectric will be used.
\end_layout

\begin_layout Description
PdbWriteCharges If set to 
\begin_inset Quotes eld
\end_inset

on
\begin_inset Quotes erd
\end_inset

, atomic charges will be placed in the 
\begin_inset Quotes eld
\end_inset

B-factor
\begin_inset Quotes erd
\end_inset

 field of PDB files saved with the 
\family typewriter
savePdb
\family default
 command; if set to 
\begin_inset Quotes eld
\end_inset

off
\begin_inset Quotes erd
\end_inset

 (the default), no such charges will be written.
\end_layout

\begin_layout Description
PBRadii
\begin_inset Index idx
status open

\begin_layout Plain Layout
PBRadii
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tleap_pbradii"

\end_inset

 Used to choose various sets of atomic radii for generalized Born or Poisson-Bol
tzmann calculations.
 Options are: 
\begin_inset Quotes eld
\end_inset

bondi
\begin_inset Quotes erd
\end_inset

, which gives values from Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Bondi64"
literal "true"

\end_inset

, which should be used with 
\shape italic
igb
\shape default

\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

7; 
\begin_inset Quotes eld
\end_inset

mbondi
\begin_inset Quotes erd
\end_inset

, which is the default, and the recommended parameter set for 
\shape italic
igb
\shape default

\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

1 
\begin_inset CommandInset citation
LatexCommand cite
key "Tsui01"
literal "true"

\end_inset

; 
\begin_inset Quotes eld
\end_inset

mbondi2
\begin_inset Quotes erd
\end_inset

, which is a second modification of the Bondi radii set 
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev04"
literal "true"

\end_inset

, and should be used with 
\shape italic
igb
\shape default

\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

2 or 5; 
\begin_inset Quotes eld
\end_inset

mbondi3
\begin_inset Quotes erd
\end_inset

, which is a third modification of the Bondi radii set 
\begin_inset CommandInset citation
LatexCommand citep
key "Nguyen2013"
literal "true"

\end_inset

 recommended for use with igb
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

8; and 
\begin_inset Quotes eld
\end_inset

amber6
\begin_inset Quotes erd
\end_inset

, which is only to be used for reproducing very early calculations that
 used 
\shape italic
igb
\shape default

\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

1 
\begin_inset CommandInset citation
LatexCommand cite
key "Tsui00"
literal "true"

\end_inset

.
\end_layout

\begin_layout Description
nocenter If set to 
\begin_inset Quotes eld
\end_inset

on
\begin_inset Quotes erd
\end_inset

, LEaP will not center the coordinates inside the box for a periodic simulation;
 it will leave them unchanged as it does for a non-periodic simulation (note
 that the various solvate commands can still rigidly translate a solute).
 If set to 
\begin_inset Quotes eld
\end_inset

off
\begin_inset Quotes erd
\end_inset

 (the default), centering of coordinates will occur (as it always has, in
 previous versions of LEaP).
 Avoiding coordinate translations can be useful to avoid changing reference
 (perhaps experimental) coordinates.
 This option may be especially helpful for crystal simulations.
\end_layout

\begin_layout Description
reorder_residues If set to 
\begin_inset Quotes eld
\end_inset

off
\begin_inset Quotes erd
\end_inset

, residues in the output will be left in the same order they were found
 in the input file.
 The default behavior (
\begin_inset Quotes eld
\end_inset

on
\begin_inset Quotes erd
\end_inset

) is to place non-solvent residues first, followed by solvent residues,
 followed by solvent cap residues (if cap exists).
 
\begin_inset Quotes eld
\end_inset

off
\begin_inset Quotes erd
\end_inset

 can, for example, be useful in crystal simulations (keep residues belonging
 to each asymmetric unit separate), but note that turning residue ordering
 off is untested and may lead to unforeseen behavior.
 Only set to 
\begin_inset Quotes eld
\end_inset

off
\begin_inset Quotes erd
\end_inset

 if you know what you are doing! 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
The parameters listed below can be set for the specified
\shape italic
 containers
\shape default
 within LEaP using the following syntax:
\end_layout

\begin_layout LyX-Code
set container
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
set container
\end_layout

\end_inset

 parameter object
\end_layout

\begin_layout Standard
Some examples:
\end_layout

\begin_layout LyX-Code
set ATOM name "name"
\end_layout

\begin_layout LyX-Code
set RESIDUE connect0 ATOM
\end_layout

\begin_layout LyX-Code
my_system = loadPDB file.pdb
\end_layout

\begin_layout LyX-Code
set my_system box {25 30 32}
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
For ATOMs:
\end_layout

\begin_layout Description
name A unique STRING descriptor used to identify ATOMs.
\end_layout

\begin_layout Description
type This is a STRING property that defines the AMBER force field atom type.
\end_layout

\begin_layout Description
charge The charge property is a NUMBER that represents the ATOM's electrostatic
 point charge to be used in a molecular mechanics force field.
\end_layout

\begin_layout Description
position This property is a LIST of NUMBERs containing three values: the
 (X, Y, Z) Cartesian coordinates of the ATOM.
\end_layout

\begin_layout Description
pertName This STRING is a unique identifier for an ATOM in its final state
 during a Free Energy Perturbation calculation.
 This functionality is no longer implemented in Amber.
\end_layout

\begin_layout Description
pertType This STRING is the AMBER force field atom type of a perturbed ATOM.
 This functionality is no longer implemented in Amber.
\end_layout

\begin_layout Description
pertCharge This NUMBER represents the final electrostatic point charge on
 an ATOM during a Free Energy Perturbation.
 This function is no longer implemented in Amber.
\end_layout

\begin_layout Standard
For RESIDUEs:
\end_layout

\begin_layout Description
connect0 This identifies the first of up to three ATOMs that will be used
 to make links to other RESIDUEs.
 In a UNIT containing a single RESIDUE, the RESIDUE's connect0 ATOM is usually
 defined as the UNIT's head ATOM.
\end_layout

\begin_layout Description
connect1 This identifies the second of up to three ATOMs that will be used
 to make links to other RESIDUEs.
 In a UNIT containing a single RESIDUE, the RESIDUE's connect1 ATOM is usually
 defined as the UNIT's tail ATOM.
\end_layout

\begin_layout Description
connect2 This identifies the third of up to three ATOMs that will be used
 to make links to other RESIDUEs.
 In amino acids, the convention is that this is the ATOM to which disulfide
 bridges are made.
\end_layout

\begin_layout Description
restype This property is a STRING that represents the type of the RESIDUE.
 Currently, it can have one of the following values: 
\begin_inset Quotes eld
\end_inset

undefined
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

solvent
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

protein
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

nucleic
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

saccharide
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Description
name This STRING property is the RESIDUE name.
\end_layout

\begin_layout Standard
For UNITs:
\end_layout

\begin_layout Description
head Defines the ATOM within the UNIT that is connected when UNITs are joined
 together: the tail ATOM of one UNIT is connected to the head ATOM of the
 subsequent UNIT in any sequence.
\end_layout

\begin_layout Description
tail Defines the ATOM within the UNIT that is connected when UNITs are joined
 together: the tail ATOM of one UNIT is connected to the head ATOM of the
 subsequent UNIT in any sequence.
\end_layout

\begin_layout Description
box This property defines the bounding box of the UNIT (
\shape italic
container
\shape default
).
 If
\shape italic
 object
\shape default
 is set to null then no bounding box is defined.
 If it is a single NUMBER, the bounding box will be defined to be a cube
 with each side being NUMBER
\begin_inset space ~
\end_inset

Å across.
 If it is a LIST, it must contain three NUMBERs, the lengths (in Å) of the
 three sides of the bounding box.
 Note that this command does not allow one to set the angles for the periodic
 system.
  See the
\family typewriter
 ChBox
\family default
 command to do that.
\end_layout

\begin_layout Description
cap This property defines the solvent cap of the UNIT.
 If it is set to null then no solvent cap is defined.
 Otherwise, it should be a LIST of four NUMBERs; the first three NUMBERs
 define the Cartesian coordinates (X, Y, Z) of the origin of the solvent
 cap in Å, while the fourth defines the radius of the solvent cap, also
 in Å.
\end_layout

\begin_layout Subsection
setBox
\end_layout

\begin_layout LyX-Code
setBox
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setBox
\end_layout

\end_inset

 solute enclosure [ distance ]
\end_layout

\begin_layout Standard
This command creates a periodic box around 
\shape italic
solute
\shape default
, which should be a UNIT.
 It does not add any solvent to the system.
 
\family typewriter
setBox
\family default
 creates a cuboid box.
 The 
\shape italic
enclosure
\shape default
 parameter determines whether the box encloses entire atoms or just atom
 centers.
 The former case is specified by the STRING value "vdw" for 
\shape italic
enclosure
\shape default
 and the latter case by the STRING "centers".
 Use "centers" if the system has been previously equilibrated as a periodic
 box.
 The minimum distance between any atom in 
\shape italic
solute
\shape default
 and the edge of the periodic box is given by the 
\shape italic
distance
\shape default
 parameter; see the solvateBox command for more details.
\end_layout

\begin_layout LyX-Code
> mol = loadpdb my.pdb
\end_layout

\begin_layout LyX-Code
> setBox mol "vdw" 
\end_layout

\begin_layout Subsection
solvateBox and solvateOct
\end_layout

\begin_layout LyX-Code
solvateBox
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solvateBox
\end_layout

\end_inset

 solute solvent distance [ "iso" ] [ closeness ]
\end_layout

\begin_layout LyX-Code
solvateOct
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solvateOct
\end_layout

\end_inset

 solute solvent distance [ "iso" ] [ closeness ]
\end_layout

\begin_layout Standard
These two commands create periodic solvent boxes around 
\shape italic
solute
\shape default
, which should be a UNIT.
 
\family typewriter
solvateBox
\family default
 creates a cuboid box, while 
\family typewriter
solvateOct
\family default
 creates a truncated octahedron.
 
\shape italic
solute
\shape default
 is modified by the addition of copies of the RESIDUEs found within 
\shape italic
solvent
\shape default
, which should also be a UNIT, such that the minimum distance between any
 atom originally present in 
\shape italic
solute
\shape default
 and the edge of the periodic box is given by the 
\shape italic
distance
\shape default
 parameter.
 The resulting solvent box will be repeated in all three spatial directions.
\end_layout

\begin_layout Standard
If the distance parameter is a single NUMBER then the minimum distance is
 the same for the x, y, and z directions, unless the STRING "iso" parameter
 is specified to make the box or truncated octahedron isometric.
 For solvateBox if "iso" is used, the solute is rotated to orient the principal
 axes, otherwise it is just centered on the origin.
 For solvateOct if the "iso" option is used, the isometric truncated octahedron
 is rotated to an orientation used by the PME code, and the box and angle
 dimensions output by the saveAmberParm* commands are adjusted for PME code
 imaging.In solvateBox, if the distance parameter is a LIST of three NUMBERS
 then the NUMBERs are applied to the x, y, and z axes respectively.
 As the larger box is created and superimposed on the solute, solvent molecules
 overlapping the solute are removed.In solvateOct, when a LIST is given for
 the distance parameter, four numbers are given instead of three, where
 the fourth is the diagonal clearance.
 If 0.0 is given as the fourth number, the diagonal clearance resulting from
 the application of the x,y,z clearances is reported.
 If a non-0 value is given, this may require scaling up the other clearances,
 which is also reported.
 Similarly, if a single NUMBER is given, any scaleup of the x,y,z buffer
 to accommodate the diagonal clip is reported.
\end_layout

\begin_layout Standard
The optional 
\shape italic
closeness
\shape default
 parameter can be used to control how close, in Å, solvent ATOMs may come
 to solute ATOMs.
 The default value of 
\shape italic
closeness
\shape default
 is 1.0.
 Smaller values allow solvent ATOMs to come closer to solute ATOMs.
 The criterion for rejection of overlapping solvent RESIDUEs is if the distance
 between any solvent ATOM and its nearest solute ATOM is less than the sum
 of the two ATOMs' van der Waals radii multiplied by 
\shape italic
closeness
\shape default
.
\end_layout

\begin_layout LyX-Code
> mol = loadpdb my.pdb
\end_layout

\begin_layout LyX-Code
> solvateOct mol TIP3PBOX 12.0 0.75
\end_layout

\begin_layout Subsection
solvateCap
\end_layout

\begin_layout LyX-Code
solvateCap
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solvateCap
\end_layout

\end_inset

 solute solvent position radius [ closeness ]
\end_layout

\begin_layout Standard
The 
\family typewriter
solvateCap
\family default
 command creates a solvent cap around 
\shape italic
solute
\shape default
, which is a UNIT.
 
\shape italic
solute
\shape default
 is modified by the addition of copies of the RESIDUEs found within 
\shape italic
solvent
\shape default
, which should also be a UNIT.
 The solvent box will be repeated in all three spatial directions to create
 a large solvent sphere with a radius of 
\shape italic
radius
\shape default

\begin_inset space ~
\end_inset

Å.
\end_layout

\begin_layout Standard
The 
\shape italic
position
\shape default
 argument defines where the center of the solvent cap is to be placed.
 If 
\shape italic
position
\shape default
 is a UNIT, a RESIDUE, an ATOM, or a LIST of UNITs, RESIDUEs, or ATOMs,
 then the geometric center of the ATOM or ATOMs within the object will be
 used as the center of the solvent cap sphere.
 If 
\shape italic
position
\shape default
 is a LIST containing three NUMBERs, then it will be treated as a vector
 describing the position of the solvent cap sphere center.
\end_layout

\begin_layout Standard
The optional 
\shape italic
closeness
\shape default
 parameter can be used to control how close, in Å, solvent ATOMs may come
 to solute ATOMs.
 The default value of 
\shape italic
closeness
\shape default
 is 1.0.
 Smaller values allow solvent ATOMs to come closer to solute ATOMs.
 The criterion for rejection of overlapping solvent RESIDUEs is if the distance
 between any solvent ATOM and its nearest solute ATOM is less than the sum
 of the two ATOMs' van der Waals radii multiplied by 
\shape italic
closeness
\shape default
.
\end_layout

\begin_layout Standard
This command modifies 
\shape italic
solute
\shape default
 in several ways.
 First, the UNIT is modified by the addition of solvent RESIDUEs copied
 from 
\shape italic
solvent
\shape default
.
 Secondly, the 
\begin_inset Quotes eld
\end_inset

cap
\begin_inset Quotes erd
\end_inset

 parameter of 
\shape italic
solute
\shape default
 is modified to reflect the fact that a solvent cap has been created around
 the solute.
\end_layout

\begin_layout LyX-Code
> mol = loadpdb my.pdb
\end_layout

\begin_layout LyX-Code
> solvateCap mol TIP3PBOX mol.2.CA 12.0 0.75
\end_layout

\begin_layout Subsection
solvateShell
\end_layout

\begin_layout LyX-Code
solvateShell
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
solvateShell
\end_layout

\end_inset

 solute solvent thickness [ closeness ]
\end_layout

\begin_layout Standard
The 
\family typewriter
solvateShell
\family default
 command adds a solvent shell to 
\shape italic
solute
\shape default
, which should be a UNIT.
 
\shape italic
solute
\shape default
 is modified by the addition of copies of the RESIDUEs found within 
\shape italic
solvent
\shape default
, which should also be a UNIT.
 The resulting solute/solvent UNIT will be irregular in shape since it will
 reflect the contours of the original solute molecule.
 The solvent box will be repeated in three directions to create a large
 solvent box that can contain the entire solute and a shell 
\shape italic
thickness
\shape default

\begin_inset space ~
\end_inset

Å thick.
 Solvent RESIDUEs are then added to 
\shape italic
solute
\shape default
 if they lie within the shell defined by 
\shape italic
thickness
\shape default
 and do not overlap with any ATOM originally present in 
\shape italic
solute
\shape default
.
 The optional 
\shape italic
closeness
\shape default
 parameter can be used to control how close solvent ATOMs can come to solute
 ATOMs.
 The default value of the 
\shape italic
closeness
\shape default
 argument is 1.0.
 Please see the 
\family typewriter
solvateBox
\family default
 command for more details on the closeness parameter.
\end_layout

\begin_layout LyX-Code
> mol = loadpdb my.pdb 
\end_layout

\begin_layout LyX-Code
> solvateShell mol TIP3PBOX 12.0 0.8
\end_layout

\begin_layout Subsection
source
\end_layout

\begin_layout LyX-Code
source
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transform
\end_layout

\end_inset

 filename
\end_layout

\begin_layout Standard
This command executes the contents of the file given by 
\shape italic
filename
\shape default
, treating them as LEaP commands.
 To display the commands as they are read, see the 
\family typewriter
verbosity
\family default
 command.
\end_layout

\begin_layout Subsection
transform
\end_layout

\begin_layout LyX-Code
transform
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transform
\end_layout

\end_inset

 atoms, matrix
\end_layout

\begin_layout Standard
Transform all of the ATOMs within 
\shape italic
atoms
\shape default
 by a symmetry operation.
 The symmetry operation is represented as a (3 × 3) or (4 × 4) matrix, and
 given as nine or sixteen NUMBERs in 
\shape italic
matrix
\shape default
, a LIST of LISTs.
 The general matrix looks like:
\end_layout

\begin_layout Standard
r11 r12 r13 -tx r21 r22 r23 -ty r31 r32 r33 -tz 0 0 0 1
\end_layout

\begin_layout Standard
The matrix elements represent the intended symmetry operation.
 For example, a reflection in the (x,y) plane would be produced by the matrix:
\end_layout

\begin_layout LyX-Code
1 0 0 0 1 0 0 0 -1
\end_layout

\begin_layout Standard
This reflection could be combined with a 6
\begin_inset space ~
\end_inset

Å translation along the x-axis by using the following matrix:
\end_layout

\begin_layout LyX-Code
1 0 0 6 0 1 0 0 0 0 -1 0 0 0 0 1
\end_layout

\begin_layout Standard
In the following example, wrB is transformed by an inversion operation:
\end_layout

\begin_layout LyX-Code
transform wrpB { { -1 0 0 } { 0 -1 0 } { 0 0 -1 } }
\end_layout

\begin_layout Subsection
translate
\end_layout

\begin_layout LyX-Code
translate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
translate
\end_layout

\end_inset

 atoms direction
\end_layout

\begin_layout Standard
Translate all of the ATOMs within 
\shape italic
atoms
\shape default
 by the vector given by 
\shape italic
direction
\shape default
, a LIST of three NUMBERs.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout LyX-Code
translate wrpB { 0 0 -24.53333 }
\end_layout

\begin_layout Subsection
verbosity
\end_layout

\begin_layout LyX-Code
verbosity
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
verbosity
\end_layout

\end_inset

 level
\end_layout

\begin_layout Standard
This command sets the level of output that LEaP provides the user.
 A value of 0 is the default, providing the minimum of messages.
 A value of 1 will produce more output, and a value of 2 will produce all
 of the output of level 1 and display the text of the script lines executed
 with the source command.
 The following line is an example of this command:
\end_layout

\begin_layout LyX-Code
> verbosity 2
\end_layout

\begin_layout LyX-Code
Verbosity level: 2
\end_layout

\begin_layout Subsection
zMatrix
\end_layout

\begin_layout LyX-Code
zMatrix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
zMatrix
\end_layout

\end_inset

 object zmatrix
\end_layout

\begin_layout Standard
The 
\family typewriter
zMatrix
\family default
 command is quite complicated.
 It is used to define the external coordinates of ATOMs within 
\shape italic
object
\shape default
 using internal coordinates.
 The second parameter of the 
\family typewriter
zMatrix
\family default
 command is a LIST of LISTs; each sub-list has several arguments:
\end_layout

\begin_layout LyX-Code
{ a1 a2 bond12 }
\end_layout

\begin_layout Standard
This entry defines the coordinate of 
\shape italic
a1
\shape default
, an ATOM, by placing it 
\shape italic
bond12
\shape default

\begin_inset space ~
\end_inset

Å along the x-axis from ATOM 
\shape italic
a2
\shape default
.
 
\shape italic
a2
\shape default
 is placed at the origin if its coordinates are not defined.
\end_layout

\begin_layout LyX-Code
{ a1 a2 a3 bond12 angle123 }
\end_layout

\begin_layout Standard
This entry defines the coordinate of 
\shape italic
a1
\shape default
 by placing it 
\shape italic
bond12
\shape default

\begin_inset space ~
\end_inset

Å away from 
\shape italic
a2
\shape default
 making an angle of 
\shape italic
angle123
\shape default
 degrees between 
\shape italic
a1
\shape default
, 
\shape italic
a2
\shape default
 and 
\shape italic
a3
\shape default
.
 The angle is measured in a right-hand sense and in the xy plane.
 ATOMs 
\shape italic
a2
\shape default
 and 
\shape italic
a3
\shape default
 must have coordinates defined.
\end_layout

\begin_layout LyX-Code
{ a1 a2 a3 a4 bond12 angle123 torsion1234 }
\end_layout

\begin_layout Standard
This entry defines the coordinate of 
\shape italic
a1
\shape default
 by placing it 
\shape italic
bond12
\shape default

\begin_inset space ~
\end_inset

Å away from 
\shape italic
a2
\shape default
, creating an angle of 
\shape italic
angle123
\shape default
 degrees between 
\shape italic
a1
\shape default
, 
\shape italic
a2
\shape default
, and 
\shape italic
a3
\shape default
, and making a torsion angle of 
\shape italic
torsion1234
\shape default
 degrees between 
\shape italic
a1
\shape default
, 
\shape italic
a2
\shape default
, 
\shape italic
a3
\shape default
, and 
\shape italic
a4
\shape default
.
\end_layout

\begin_layout LyX-Code
{ a1 a2 a3 a4 bond12 angle123 angle124 orientation }
\end_layout

\begin_layout Standard
This entry defines the coordinate of 
\shape italic
a1
\shape default
 by placing it 
\shape italic
bond12
\shape default

\begin_inset space ~
\end_inset

Å away from 
\shape italic
a2
\shape default
, and making angles 
\shape italic
angle123
\shape default
 degrees between 
\shape italic
a1
\shape default
, 
\shape italic
a2
\shape default
, and 
\shape italic
a3
\shape default
, and 
\shape italic
angle124
\shape default
 degrees between 
\shape italic
a1
\shape default
, 
\shape italic
a2
\shape default
, and 
\shape italic
a4
\shape default
.
 The argument orientation defines whether 
\shape italic
a1
\shape default
 is above or below a plane defined by 
\shape italic
a2
\shape default
, 
\shape italic
a3
\shape default
 and 
\shape italic
a4
\shape default
.
 If 
\shape italic
orientation
\shape default
 is positive, 
\shape italic
a1
\shape default
 will be placed so that the triple product ((
\shape italic
a3
\shape default
−
\shape italic
a2
\shape default
)
\begin_inset space ~
\end_inset

×
\begin_inset space ~
\end_inset

(
\shape italic
a4
\shape default
−
\shape italic
a2
\shape default
))
\begin_inset space ~
\end_inset

·
\begin_inset space ~
\end_inset

(
\shape italic
a1
\shape default
−
\shape italic
a2
\shape default
) is positive.
 Otherwise, 
\shape italic
a1
\shape default
 will be placed on the other side of the plane.
 This allows the coordinates of a molecule like fluoro-chloro-bromo-methane
 to be defined without having to resort to dummy atoms.
\end_layout

\begin_layout Standard
The first arguments within the zMatrix entries (
\shape italic
a1
\shape default
, 
\shape italic
a2
\shape default
, 
\shape italic
a3
\shape default
 and 
\shape italic
a4
\shape default
) are either ATOMs, or STRINGs containing names of ATOMs that already exist
 within 
\shape italic
object
\shape default
.
 The subsequent arguments (
\shape italic
bond12
\shape default
, 
\shape italic
angle123
\shape default
, 
\shape italic
torsion1234
\shape default
 or 
\shape italic
angle124
\shape default
, and 
\shape italic
orientation
\shape default
) are all NUMBERs.
 Any ATOM can be placed at the 
\shape italic
a1
\shape default
 position, even one that has coordinates defined.
 This feature can be used to provide an endless supply of dummy atoms, if
 they are required.
 A predefined dummy atom with the name 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

 (a single asterisk, no quotes) can also be used.
\end_layout

\begin_layout Standard
There is no order imposed in the sub-lists.
 The user can place sub-lists in arbitrary order, as long as they maintain
 the requirement that all ATOMs 
\shape italic
a2
\shape default
, 
\shape italic
a3
\shape default
, and 
\shape italic
a4
\shape default
 must have external coordinates defined, except for entries that define
 the coordinate of an ATOM using only a bond length.
 (See the 
\family typewriter
add
\family default
 command for an example of the 
\family typewriter
zMatrix
\family default
 command.) 
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Antechamber"

\end_inset

Antechamber and GAFF
\end_layout

\begin_layout Standard
These are a set of tools to generate files for organic molecules and for
 some metal centers in proteins, which can then be read into LEaP.
 The Antechamber suite was written by Junmei Wang, and is designed to be
 used in conjunction with the general AMBER force field (GAFF) (gaff.dat).
\begin_inset CommandInset citation
LatexCommand cite
key "Wang04"
literal "true"

\end_inset

 See Ref.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Wang06b"
literal "true"

\end_inset

 for an explanation of the algorithms used to classify atom and bond types,
 to assign charges, and to estimate force field parameters that may be missing
 in gaff.dat.
 The python Metal Site Modeling Toolbox (pyMSMT) software package was developed
 by Pengfei Li, and is described in Section
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:pyMSMT"

\end_inset

.
\end_layout

\begin_layout Standard
Like the traditional AMBER force fields, GAFF uses a simple harmonic function
 form for bonds and angles.
 Unlike the traditional AMBER force fields, atom types in GAFF are more
 general and cover most of the organic chemical space.
 In total there are 33 basic atom types and 22 special atom types.
 The charge methods used can be HF/6-31G* RESP, AM1-BCC,
\begin_inset CommandInset citation
LatexCommand cite
key "Jakalian00,Jakalian02"
literal "true"

\end_inset

 or ABCG2.
\begin_inset CommandInset citation
LatexCommand citep
key "He20,Sun23a"
literal "false"

\end_inset

 The force field parametrization was performed entirely with HF/6-31G* RESP
 charges.
 (Note that in AM1-BCC, the QM electrostatic potentials that were used as
 fitting targets were created in a very slightly different manner and then
 compared to RESP charges, using different scaling factors (i.e.
 0.001/0.01 
\begin_inset CommandInset citation
LatexCommand citep
key "Jakalian02"
literal "true"

\end_inset

 versus 0.0005/0.001 
\begin_inset CommandInset citation
LatexCommand citep
key "Bayly93"
literal "true"

\end_inset

.)
\end_layout

\begin_layout Standard
To maintain force field integrity and to achieve the best performance, the
 following is the overall guidance on choosing force fields and charge models.
 Both gaff and gaff2 were developed using HF/6-31G* RESP charge, therefore,
 RESP charge is compatible with both general AMBER force fields.
 It was found that gaff/bcc combination achieves good performance in many
 scenarios including solvation free energy calculations.
 For the efficient charge models, bcc or abcg2, gaff/bcc and gaff2/abcg2
 combinations are recommended, while gaff2/bcc or gaff/abcg2 are not.
 
\end_layout

\begin_layout Standard
The van der Waals parameters are the same as those used by the traditional
 AMBER force fields.
 The equilibrium bond lengths and bond angles came from 
\shape italic
ab initio
\shape default
 calculations at the MP2/6-31G* level and statistics derived from the Cambridge
 Structural Database.
 The force constants for bonds and angles were estimated using empirical
 models, and the parameters in these models were trained using the force
 field parameters in the traditional AMBER force fields.
 General torsional angle parameters were extensively applied in order to
 reduce the huge number of torsional angle parameters to be derived.
 The force constants and phase angles in the torsional angle parameters
 were optimized using our PARMSCAN package,
\begin_inset CommandInset citation
LatexCommand cite
key "Wang01a"
literal "true"

\end_inset

 with an aim to reproduce the rotational profiles depicted by high-level
 
\shape italic
ab initio
\shape default
 calculations (geometry optimizations at the MP2/6-31G* level, followed
 by single point calculations at MP4/6-311G(d,p)).
\end_layout

\begin_layout Standard
By design, GAFF is a complete force field (so that missing parameters rarely
 occur); it covers almost all the organic chemical space that is made up
 of C, N, O, S, P, H, F, Cl, Br and I.
 Moreover, GAFF is totally compatible with the AMBER macromolecular force
 fields.
 It should be noted that GAFF atom types, except metal types, are in lower
 case, while AMBER atom types are always in upper case.
 This feature makes it possible to load both AMBER protein/nucleic acid
 force fields and GAFF without any conflict.
 One can even merge the two kinds of force fields into one file.
 The combined force fields are capable of studying complicated systems that
 include both proteins/nucleic acids and organic molecules.
 We believe that the combination of GAFF with AMBER macromolecular force
 fields will provide a useful molecular mechanical tool for rational drug
 design, especially in binding free energy calculations and molecular docking
 studies.
 Since its introduction, GAFF has been used for a wide range of applications,
 including ligand docking,
\begin_inset CommandInset citation
LatexCommand cite
key "Graves08"
literal "true"

\end_inset

 bilayer simulations,
\begin_inset CommandInset citation
LatexCommand cite
key "Jojart07,Rosso08"
literal "true"

\end_inset

 and the study of pure organic liquids 
\begin_inset CommandInset citation
LatexCommand citep
key "Wang11e"
literal "true"

\end_inset

; see also a recent overview of general force fields for small molecules.
\begin_inset CommandInset citation
LatexCommand citep
key "He22"
literal "false"

\end_inset


\end_layout

\begin_layout Section
Principal programs
\end_layout

\begin_layout Standard
The 
\shape italic
antechamber
\shape default
 program itself is the main program of Antechamber.
 If your molecule falls into any of several fairly broad categories, 
\shape italic
antechamber
\shape default
 should be able to process your PDB file directly, generating output files
 suitable for LEaP.
 Otherwise, you may provide an input file with connectivity information,
 i.e., in a format such as Mol2 or SDF.
 If there are missing parameters after 
\shape italic
antechamber
\shape default
 is finished, you may want to run 
\shape italic
parmchk2
\shape default
 to generate a frcmod template that will assist you in generating the needed
 parameters.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:antechamber"

\end_inset

antechamber
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
antechamber
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the most important program in the package.
 It can perform many file conversions, and can also assign atomic charges
 and atom types.
 As required by the input, antechamber executes the following programs:
 
\shape italic
sqm
\shape default
 (or, alternatively, 
\shape italic
mopac
\shape default
 or 
\shape italic
divcon
\shape default
), 
\shape italic
atomtype
\shape default
, 
\shape italic
am1bcc
\shape default
, 
\shape italic
bondtype
\shape default
, 
\shape italic
espgen
\shape default
, 
\shape italic
respgen
\shape default
 and 
\shape italic
prepgen
\shape default
.
 It typically produces many intermediate files; these may be recognized
 by their names, in which all letters are upper-case.
 If you experience problems while running 
\shape italic
antechamber
\shape default
, you may want to run the individual programs that are described below (to
 facilitate this run antechamber with the option '-s 2').
\end_layout

\begin_layout Subsubsection*
Antechamber options:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

-help print these instructions
\end_layout

\begin_layout Plain Layout

-i     input file name
\end_layout

\begin_layout Plain Layout

-fi    input file format
\end_layout

\begin_layout Plain Layout

-o     output file name
\end_layout

\begin_layout Plain Layout

-fo    output file format
\end_layout

\begin_layout Plain Layout

-c     charge method
\end_layout

\begin_layout Plain Layout

-cf    charge file name
\end_layout

\begin_layout Plain Layout

-nc    net molecular charge (int)
\end_layout

\begin_layout Plain Layout

-a     additional file name
\end_layout

\begin_layout Plain Layout

-fa    additional file format
\end_layout

\begin_layout Plain Layout

-ao    additional file operation
\end_layout

\begin_layout Plain Layout

       crd   : only read in coordinate
\end_layout

\begin_layout Plain Layout

       crg   : only read in charge
\end_layout

\begin_layout Plain Layout

       radius: only read in radius
\end_layout

\begin_layout Plain Layout

       name  : only read in atom name
\end_layout

\begin_layout Plain Layout

       type  : only read in atom type
\end_layout

\begin_layout Plain Layout

       bond  : only read in bond type 
\end_layout

\begin_layout Plain Layout

-m     multiplicity (2S+1), default is 1
\end_layout

\begin_layout Plain Layout

-rn    residue name, overrides input file, default is MOL
\end_layout

\begin_layout Plain Layout

-rf    residue toplogy file name in prep input file,
\end_layout

\begin_layout Plain Layout

       default is molecule.res
\end_layout

\begin_layout Plain Layout

-ch    check file name for gaussian, default is 'molecule'
\end_layout

\begin_layout Plain Layout

-ek    mopac or sqm keyword, inside quotes; overwrites previous ones
\end_layout

\begin_layout Plain Layout

-gk    gaussian job keyword, inside quotes, is ignored when both -gopt and
 -gsp are used
\end_layout

\begin_layout Plain Layout

-gopt  gaussian job keyword for optimization, inside quotes
\end_layout

\begin_layout Plain Layout

-gsp   gaussian job keyword for single point calculation, inside quotes
\end_layout

\begin_layout Plain Layout

-gm    gaussian memory keyword, inside quotes, such as "%mem=1000MB"
\end_layout

\begin_layout Plain Layout

-gn    gaussian number of processors keyword, inside quotes, such as "%nproc=8"
\end_layout

\begin_layout Plain Layout

-gdsk  gaussian maximum disk usage keyword, inside quotes, such as "%maxdisk=50G
B"
\end_layout

\begin_layout Plain Layout

-gv    add keyword to generate gesp file (for Gaussian 09 only)
\end_layout

\begin_layout Plain Layout

       1    : yes
\end_layout

\begin_layout Plain Layout

       0    : no, the default
\end_layout

\begin_layout Plain Layout

-ge    gaussian esp file generated by iop(6/50=1), default is g09.gesp
\end_layout

\begin_layout Plain Layout

-tor   torsional angle list, inside a pair of quotes, such as "1-2-3-4:0,5-6-7-8
"
\end_layout

\begin_layout Plain Layout

       ':1' or ':0' indicates the torsional angle is frozen or not
\end_layout

\begin_layout Plain Layout

-df    am1-bcc precharge flag, 2 - use sqm(default); 0 - use mopac
\end_layout

\begin_layout Plain Layout

-at    atom type
\end_layout

\begin_layout Plain Layout

       gaff : the default
\end_layout

\begin_layout Plain Layout

       gaff2: for gaff2 (beta-version)
\end_layout

\begin_layout Plain Layout

       amber: for PARM94/99/99SB
\end_layout

\begin_layout Plain Layout

       bcc  : bcc 
\end_layout

\begin_layout Plain Layout

       abcg2: abcg2
\end_layout

\begin_layout Plain Layout

       sybyl: sybyl 
\end_layout

\begin_layout Plain Layout

-du    fix duplicate atom names: yes(y)[default] or no(n)
\end_layout

\begin_layout Plain Layout

-bk    component/block Id, for ccif
\end_layout

\begin_layout Plain Layout

-an    adjust atom names: yes(y) or no(n)
\end_layout

\begin_layout Plain Layout

       the default is 'y' for 'mol2' and 'ac' and 'n' for the other formats
 
\end_layout

\begin_layout Plain Layout

-j     atom type and bond type prediction index, default is 4 
\end_layout

\begin_layout Plain Layout

       0    : no assignment
\end_layout

\begin_layout Plain Layout

       1    : atom type 
\end_layout

\begin_layout Plain Layout

       2    : full  bond types 
\end_layout

\begin_layout Plain Layout

       3    : part  bond types 
\end_layout

\begin_layout Plain Layout

       4    : atom and full bond type 
\end_layout

\begin_layout Plain Layout

       5    : atom and part bond type 
\end_layout

\begin_layout Plain Layout

-s     status information: 0(brief), 1(default) or 2(verbose)
\end_layout

\begin_layout Plain Layout

-eq    equalizing atomic charge, default is 1 for '-c resp' and '-c bcc'
 and 0 for the other charge methods 
\end_layout

\begin_layout Plain Layout

       0    : no use
\end_layout

\begin_layout Plain Layout

       1    : by atomic paths 
\end_layout

\begin_layout Plain Layout

       2    : by atomic paths and structural information, i.e.
 E/Z configurations 
\end_layout

\begin_layout Plain Layout

-pf    remove intermediate files: yes(y) or no(n)[default]
\end_layout

\begin_layout Plain Layout

-pl    maximum path length to determin equivalence of atomic charges for
 resp and bcc,
\end_layout

\begin_layout Plain Layout

       the smaller the value, the faster the algorithm, default is -1 (use
 full length),
\end_layout

\begin_layout Plain Layout

       set this parameter to 10 to 30 if your molecule is big (# atoms >=
 100)
\end_layout

\begin_layout Plain Layout

-seq   atomic sequence order changable: yes(y)[default] or no(n)
\end_layout

\begin_layout Plain Layout

-dr    acdoctor mode: yes(y)[default] or no(n)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

-i -o -fi and -fo must appear in command lines and the others are optional
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Use 'antechamber -L' to list the supported file formats and charge methods
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
List of the File Formats:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

file format type  abbre.
 index | file format type abbre.
 index
\end_layout

\begin_layout Plain Layout

---------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

Antechamber        ac       1  | Sybyl Mol2         mol2    2 
\end_layout

\begin_layout Plain Layout

PDB                pdb      3  | Modified PDB       mpdb    4 
\end_layout

\begin_layout Plain Layout

AMBER PREP (int)   prepi    5  | AMBER PREP (car)   prepc   6 
\end_layout

\begin_layout Plain Layout

Gaussian Z-Matrix  gzmat    7  | Gaussian Cartesian gcrt    8 
\end_layout

\begin_layout Plain Layout

Mopac Internal     mopint   9  | Mopac Cartesian    mopcrt 10 
\end_layout

\begin_layout Plain Layout

Gaussian Output    gout    11  | Mopac Output       mopout 12 
\end_layout

\begin_layout Plain Layout

Alchemy            alc     13  | CSD                csd    14 
\end_layout

\begin_layout Plain Layout

MDL                mdl     15  | Hyper              hin    16 
\end_layout

\begin_layout Plain Layout

AMBER Restart      rst     17  | Jaguar Cartesian   jcrt   18 
\end_layout

\begin_layout Plain Layout

Jaguar Z-Matrix    jzmat   19  | Jaguar Output      jout   20 
\end_layout

\begin_layout Plain Layout

Divcon Input       divcrt  21  | Divcon Output      divout 22 
\end_layout

\begin_layout Plain Layout

SQM Input          sqmcrt  23  | SQM Output         sqmout 24 
\end_layout

\begin_layout Plain Layout

Charmm             charmm  25  | Gaussian ESP       gesp   26 
\end_layout

\begin_layout Plain Layout

Component cif      ccif    27  | GAMESS dat         gamess 28 
\end_layout

\begin_layout Plain Layout

Orca input         orcinp  29  | Orca output        orcout 30 
\end_layout

\begin_layout Plain Layout

pdbqt              pdbqt   31  | 
\end_layout

\begin_layout Plain Layout

--------------------------------------------------------------
\end_layout

\end_inset


\end_layout

\begin_layout Standard
AMBER restart file can only be read in as additional file
\end_layout

\begin_layout Subsubsection*
List of the Charge Methods: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

charge method     abbre.
  index | charge method      abbre.
\end_layout

\begin_layout Plain Layout

----------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

RESP               resp     1  |  AM1-BCC           bcc     2
\end_layout

\begin_layout Plain Layout

CM1                cm1      3  |  CM2               cm2     4
\end_layout

\begin_layout Plain Layout

ESP (Kollman)      esp      5  |  Mulliken          mul     6
\end_layout

\begin_layout Plain Layout

Gasteiger          gas      7  |  ABCG2             abcg2   8
\end_layout

\begin_layout Plain Layout

Read in charge     rc       9  |  Write out charge  wc     10  
\end_layout

\begin_layout Plain Layout

Delete Charge      dc      11  |
\end_layout

\begin_layout Plain Layout

----------------------------------------------------------------
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Examples:
\end_layout

\begin_layout Standard
The basic use of 
\emph on
antechamber
\emph default
 is to pick input and output files and formats (via the 
\family typewriter
-i, -fi, -o, -fo 
\family default
flags) , and choose various options for charge models, atom types, etc.
 A typical use would be:
\end_layout

\begin_layout LyX-Code
antechamber -i my.pdb -fi pdb -o my.mol2 -fo mol2 -c bcc -nc 1
\end_layout

\begin_layout Standard
The only 
\begin_inset Quotes eld
\end_inset

tricky
\begin_inset Quotes erd
\end_inset

 part is in generating resp charges, which requires interacting with the
 Gaussian program, and which varies depending on the version:
\end_layout

\begin_layout LyX-Code

\emph on
Using Gaussian 98 files as input:
\end_layout

\begin_layout LyX-Code
(1) antechamber -i g98.out -fi gout -o sustiva_resp.mol2 -fo mol2 -c resp
 -eq 2
\end_layout

\begin_layout LyX-Code
(2) antechamber -i g98.out -fi gout -o sustiva_cm2.mol2 -fo mol2 -c cm2
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code

\emph on
Using Gaussian03 files as input:
\end_layout

\begin_layout LyX-Code
(11)antechamber -i g03.out -fi gout -o mtx.mol2 -fo mol2 -c resp 
\end_layout

\begin_layout LyX-Code
      -a mtx.pdb -fa pdb -ao name
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code

\emph on
Using Gaussian09 (version b1 and beyond):
\end_layout

\begin_layout LyX-Code
(12)antechamber -i ch3I.mol2 -fi mol2 -o gcrt.com -fo gcrt -gv 1 -ge ch3I.gesp
\end_layout

\begin_layout LyX-Code
    
\emph on
run Gaussian09 with gcrt.com as input
\end_layout

\begin_layout LyX-Code
    antechamber -i ch3I.gesp -fi gesp -o ch3I_resp.mol2 -fo mol2 -c resp -eq
 2
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
The following is the detailed explanations of some flags
\end_layout

\begin_layout Description
-nc This flag specifies the net charge of the input molecule, otherwise,
 the net charge is read in from the input directly (such as gout, mopout,
 sqmout, sqmcrt, gcrt, etc.) or calculated by summing the partial charges
 (such as mol2, prepi, etc).
 
\end_layout

\begin_layout Description
-a,-fa,-ao Sometimes, one wants to read additional information from another
 file other than the input, the '-ao' flag informs the program to read in
 which information from the additional file specified with '-a' flag.
 In Example (11), a mol2 file is generated from a Gaussian output file with
 atom names read in from a pdb file.
\end_layout

\begin_layout Description
-ch,-gk,-gm,-gn Those flags specify the keywords and resource usage in Gaussian
 calculations
\end_layout

\begin_layout Description
-ge,-gv The '-ge' flag specifies the file name of gesp file generated using
 iop(6/50=1) with Gaussian 09; the -gv flag specifies the Gaussian version
 and the default is '1' for Gaussian 09.
 If one wants to generate Gaussian input files (gcrt and gzmat) for older
 Gaussian versions, '-gv' must be set to '0'.
 
\end_layout

\begin_layout Description
-rn The '-rn' line specifies the residue name to be used; thus, it must
 be one to three characters long.
 
\end_layout

\begin_layout Description
-at This flag is used to specify whether atom types are to be created for
 the GAFF force field or for atom types consistent with parm94.dat and parm99.dat
 (i.e., the AMBER force fields).
 If you are using 
\shape italic
antechamber
\shape default
 to create a modified residue for use with the standard AMBER parm94/parm99
 force fields, you should set this flag to 
\begin_inset Quotes eld
\end_inset

amber
\begin_inset Quotes erd
\end_inset

; if you are looking at a more arbitrary molecule, set it to 
\begin_inset Quotes eld
\end_inset

gaff
\begin_inset Quotes erd
\end_inset

, even if the molecule is intended for use as a ligand bound to a macromolecule
 described by the AMBER force fields.
 
\end_layout

\begin_layout Description
-j This flag instructs the program how to run 'bondtype' and 'atom type'.
 '-j 1' assumes the bond types already exists; '-j 4' first predicts the
 connectivity table, then assigns bond and atom types sequentially; '-j
 5' reads in connectivity table from the input and then run 'bondtype' and
 'atomtype' sequentially.
 In most situations, '-j 4', the default option, is recommended.
 However, '-j 5' should be used if the input structure is not good enough
 and it includes the bond connectivity information (such as mol2, mdl, gzmat,
 etc.) 
\end_layout

\begin_layout Description
-eq This flag specifies how to do charge equilibration.
 With '-eq 1', atomic charge equilibration is predicted only by atom paths,
 in another word, if two or more atoms have exactly same sets of atom paths,
 they are equivalent and their charges are forced to be same.
 While '-eq 2' predicts charge equilibration using both atom paths and some
 geometrical information (E/Z configuration).
 With the '-eq 2' option, the charges of two hydrogen atoms bonded to the
 No 2 carbon of chloroethene are different as they adopt different configuration
s to chlorine (one is cis and the other is trans).
 Similarly, the two amide hydrogen atoms of acetamide do not share the same
 partial charge as the amide bond cannot rotate freely.
 To back-compatible to the older versions, the default is set to '1'
\end_layout

\begin_layout Standard
In Example (12), a gcrt file of iodine methane is generated and a gesp file
 named ch3I.gesp is produced when running Gaussian 09 with the default keyword.
 In Examples (13-15), RESP charges are generated for acetamide using different
 charge equilibration options.
 In the following table, the charges are listed for comparison purposes.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

atom names        |      eq  =  0        |    eq  =  1        eq = 2 
\end_layout

\begin_layout Plain Layout

                  |no equalization       |atomic paths   | + geometry
\end_layout

\begin_layout Plain Layout

--------------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

methyl carbon     |-0.5190               | -0.5516        | -0.5193
\end_layout

\begin_layout Plain Layout

methyl hydrogen   | 0.1412/0.1380/0.1396 |  0.1470        |  0.1397
\end_layout

\begin_layout Plain Layout

carbonyl carbon   | 0.9673               |  0.9786        |  0.9673
\end_layout

\begin_layout Plain Layout

oxygen            |-0.6468               | -0.6463        | -0.6468
\end_layout

\begin_layout Plain Layout

nitrogen          |-1.1189               | -1.1219        | -1.1189
\end_layout

\begin_layout Plain Layout

amide hydrogen    | 0.4556/0.4429        |  0.4501        | 0.4556/0.4429 
\end_layout

\begin_layout Plain Layout

--------------------------------------------------------------------------
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:parmchk2"

\end_inset

parmchk2
\begin_inset Index idx
status open

\begin_layout Plain Layout
parmchk2
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\shape italic
parmchk2
\shape default
 reads in an ac/mol2/prepi/prepc file, an atomtype similarity index file
 (the default is 
\emph on
$AMBERCLASSICHOME/dat/antechamber/PARMCHK.DAT
\emph default
) as well as a force field file (the default is 
\shape italic
$AMBERCLASSCHOME/dat/leap/parm/gaff.dat
\shape default
).
 It writes out a force field modification (frcmod) file containing any force
 field parameters that are needed for the molecule but not supplied by the
 force field (*.dat) file.
 Problematic parameters, if any, are indicated in the frcmod file with the
 note, 
\begin_inset Quotes eld
\end_inset

ATTN, need revision
\begin_inset Quotes erd
\end_inset

, and are typically given values of zero.
 This can cause fatal terminations of programs that later use a resulting
 prmtop file; for example, a zero value for the periodicity of the torsional
 barrier of a dihedral parameter will be fatal in many cases.
 For each atom type, an atom type corresponding file (ATCOR.DAT) lists its
 replaceable general atom types.
 By default, only the missing parameters are written to the frcmod file.
 When the 
\begin_inset Quotes eld
\end_inset

-a
\begin_inset Quotes erd
\end_inset

 switch is given the value 
\begin_inset Quotes eld
\end_inset

Y
\begin_inset Quotes erd
\end_inset

, 
\shape italic
parmchk2
\shape default
 prints out all force field parameters used by the input molecule, whether
 they are already in the parm file or not.
 This file can be used to prepare the frcmod file used by thermodynamic
 integration calculations using sander.
 
\end_layout

\begin_layout Standard
Unlike 
\emph on
parmchk
\emph default
 which only checks several substitutions for a missing force field parameter,
 
\emph on
parmchk2
\emph default
 enumerates all the possible substitutions and select the one with the best
 similarity score as the final substitute.
 Moreover, a penalty score, which measures the similarity between the missing
 force field parameter and the substitute is provided.
 The similarity socres are calculated using the similarity indexes defined
 in the atom type similarity index file (PARMCHK.DAT).
 A similarity index of a pair of atom types ('A/B') for a specific force
 field parameter type was generated by calculating the average percent absolute
 error of two set of force field parameters in gaff.
 The two set of force field parameters are identical except that one set
 has atom type 'A' and the other has 'B'.
 Each atom type pair ('A/B') has nine similarity indexes for nine different
 types of force field parameters, which are bond equilibrium length, bond
 stretching force constant, bond equilibrium angle ('A' and 'B' are central
 atoms), bond angle bending force constant ('A' and 'B' are central atoms),
 bond equilibrium angle ('A' and 'B' are non-central atoms), bond angle
 bending force constant ('A' and 'B' are non-central atoms), torsional angle
 twisting force constant ('A' and 'B' are inner side atoms), torsional angle
 twisting force constant ('A' and 'B' are outter side atoms), and improper
 dihedral angle.
\end_layout

\begin_layout LyX-Code
parmchk2 -i    input file name
\end_layout

\begin_layout LyX-Code
         -o    frcmod file name
\end_layout

\begin_layout LyX-Code
         -f    input file format (prepi, prepc, ac, mol2, frcmod, leaplog)
 
\end_layout

\begin_layout LyX-Code
         -s    ff parm set, it is suppressed by "-p" option
\end_layout

\begin_layout LyX-Code
               1 or gaff:    gaff (the default)
\end_layout

\begin_layout LyX-Code
               2 or gaff2:   gaff2 
\end_layout

\begin_layout LyX-Code
               3 or parm99:  parm99
\end_layout

\begin_layout LyX-Code
               4 or parm10:  parm10
\end_layout

\begin_layout LyX-Code
               5 or lipid14: lipid14
\end_layout

\begin_layout LyX-Code
         -frc  frcmod files to be loaded, the supported frcmods include
\end_layout

\begin_layout LyX-Code
               ff99SB, ff14SB, ff03 for proteins , bsc1, ol15, ol3 for DNA
 and yil for RNA
\end_layout

\begin_layout LyX-Code
               eg.
 ff14SB+bsc1+yil, ff99SB+bsc1
\end_layout

\begin_layout LyX-Code
         -p    parmfile, suppress '-s' flag, optional
\end_layout

\begin_layout LyX-Code
         -pf   parmfile format 
\end_layout

\begin_layout LyX-Code
               1: for amber FF data file (the default)
\end_layout

\begin_layout LyX-Code
               2: for additional force field parameter file
\end_layout

\begin_layout LyX-Code
         -afrc additional frcmod file, no matter using -p or not, optional
\end_layout

\begin_layout LyX-Code
         -c    atom type corresponding score file, default is PARMCHK.DAT
\end_layout

\begin_layout LyX-Code
         -atc  additional atom type corresponding score file, optional
\end_layout

\begin_layout LyX-Code
               type 'parmchk2 -l' to learn details
\end_layout

\begin_layout LyX-Code
         -a    print out all force field parameters including those in the
 parmfile
\end_layout

\begin_layout LyX-Code
               can be 'Y' (yes) or 'N' (no) default is 'N' 
\end_layout

\begin_layout LyX-Code
         -w    print out parameters that matching improper dihedral parameters
\end_layout

\begin_layout LyX-Code
               that contain 'X' in the force field parameter file, can be
 'Y' (yes)
\end_layout

\begin_layout LyX-Code
               or 'N' (no), default is 'Y'
\end_layout

\begin_layout LyX-Code
         -fc   option of force constant calculation for '-f frcmod' or '-f
 leaplog'
\end_layout

\begin_layout LyX-Code
               1: default behavior (the default option)
\end_layout

\begin_layout LyX-Code
               2: do empirical calculation before using corresponding atom
 types
\end_layout

\begin_layout LyX-Code
         -att  for the frcmod input format, option of performing parmchk
\end_layout

\begin_layout LyX-Code
               1: for all parameters (the default)
\end_layout

\begin_layout LyX-Code
               2: only for those with ATTN 
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout LyX-Code
parmchk2 -i sustiva.prep -f prepi -o frcmod
\end_layout

\begin_layout Standard
This command reads in 
\shape italic
sustiva.prep
\shape default
 and finds the missing force field parameters listed in 
\shape italic
frcmod
\shape default
.
 
\end_layout

\begin_layout Section
A simple example for antechamber
\end_layout

\begin_layout Standard
The most common use of the antechamber program suite is to prepare input
 files for LEaP, starting from a three-dimensional structure, as found in
 a PDB file.
 The antechamber suite automates the process of developing a charge model
 and assigning atom types, and partially automates the process of developing
 parameters for the various combinations of atom types found in the molecule.
\end_layout

\begin_layout Standard
As with any automated procedure, the output should be carefully examined,
 and users should be on the lookout for any unusual or incorrect program
 behavior.
\end_layout

\begin_layout Standard
Suppose you have a PDB-format file for your ligand, say thiophenol, which
 looks like this:
\end_layout

\begin_layout LyX-Code
ATOM      1  CG  TP      1      -1.959   0.102   0.795
\end_layout

\begin_layout LyX-Code
ATOM      2  CD1 TP      1      -1.249   0.602  -0.303
\end_layout

\begin_layout LyX-Code
ATOM      3  CD2 TP      1      -2.071   0.865   1.963
\end_layout

\begin_layout LyX-Code
ATOM      4  CE1 TP      1      -0.646   1.863  -0.234
\end_layout

\begin_layout LyX-Code
ATOM      5  C6  TP      1      -1.472   2.129   2.031
\end_layout

\begin_layout LyX-Code
ATOM      6  CZ  TP      1      -0.759   2.627   0.934
\end_layout

\begin_layout LyX-Code
ATOM      7  HE2 TP      1      -1.558   2.719   2.931
\end_layout

\begin_layout LyX-Code
ATOM      8  S15 TP      1      -2.782   0.365   3.060
\end_layout

\begin_layout LyX-Code
ATOM      9  H19 TP      1      -3.541   0.979   3.274
\end_layout

\begin_layout LyX-Code
ATOM     10  H29 TP      1      -0.787  -0.043  -0.938
\end_layout

\begin_layout LyX-Code
ATOM     11  H30 TP      1       0.373   2.045  -0.784
\end_layout

\begin_layout LyX-Code
ATOM     12  H31 TP      1      -0.092   3.578   0.781
\end_layout

\begin_layout LyX-Code
ATOM     13  H32 TP      1      -2.379  -0.916   0.901
\end_layout

\begin_layout Standard
(This file may be found at 
\shape italic
$AMBERCLASSCHOME/test/antechamber/tp/tp.pdb
\shape default
).
 The basic command to create a mol2 file for LEaP is just:
\end_layout

\begin_layout LyX-Code
antechamber -i tp.pdb -fi pdb -o tp.mol2 -fo mol2 -c bcc
\end_layout

\begin_layout Standard
The output file will look like this:
\end_layout

\begin_layout LyX-Code
@<TRIPOS>MOLECULE
\end_layout

\begin_layout LyX-Code
TP
\end_layout

\begin_layout LyX-Code
   13    13     1     0     0
\end_layout

\begin_layout LyX-Code
SMALL
\end_layout

\begin_layout LyX-Code
bcc
\end_layout

\begin_layout LyX-Code
@<TRIPOS>ATOM
\end_layout

\begin_layout LyX-Code
      1 CG         -1.9590    0.1020    0.7950 ca     1 TP   -0.132000
\end_layout

\begin_layout LyX-Code
      2 CD1        -1.2490    0.6020   -0.3030 ca     1 TP   -0.113000
\end_layout

\begin_layout LyX-Code
      3 CD2        -2.0710    0.8650    1.9630 ca     1 TP    0.015900
\end_layout

\begin_layout LyX-Code
      4 CE1        -0.6460    1.8630   -0.2340 ca     1 TP   -0.137000
\end_layout

\begin_layout LyX-Code
      5 C6         -1.4720    2.1290    2.0310 ca     1 TP   -0.132000
\end_layout

\begin_layout LyX-Code
      6 CZ         -0.7590    2.6270    0.9340 ca     1 TP   -0.113000
\end_layout

\begin_layout LyX-Code
      7 HE2        -1.5580    2.7190    2.9310 ha     1 TP    0.136500
\end_layout

\begin_layout LyX-Code
      8 S15        -2.7820    0.3650    3.0600 sh     1 TP   -0.254700
\end_layout

\begin_layout LyX-Code
      9 H19        -3.5410    0.9790    3.2740 hs     1 TP    0.190800
\end_layout

\begin_layout LyX-Code
     10 H29        -0.7870   -0.0430   -0.9380 ha     1 TP    0.133500
\end_layout

\begin_layout LyX-Code
     11 H30         0.3730    2.0450   -0.7840 ha     1 TP    0.134000
\end_layout

\begin_layout LyX-Code
     12 H31        -0.0920    3.5780    0.7810 ha     1 TP    0.133500
\end_layout

\begin_layout LyX-Code
     13 H32        -2.3790   -0.9160    0.9010 ha     1 TP    0.136500
\end_layout

\begin_layout LyX-Code
   
\end_layout

\begin_layout LyX-Code
@<TRIPOS>BOND
\end_layout

\begin_layout LyX-Code
     1    1    2 ar
\end_layout

\begin_layout LyX-Code
     2    1    3 ar
\end_layout

\begin_layout LyX-Code
     3    1   13 1
\end_layout

\begin_layout LyX-Code
     4    2    4 ar
\end_layout

\begin_layout LyX-Code
     5    2   10 1
\end_layout

\begin_layout LyX-Code
     6    3    5 ar
\end_layout

\begin_layout LyX-Code
     7    3    8 1
\end_layout

\begin_layout LyX-Code
     8    4    6 ar
\end_layout

\begin_layout LyX-Code
     9    4   11 1
\end_layout

\begin_layout LyX-Code
    10    5    6 ar
\end_layout

\begin_layout LyX-Code
    11    5    7 1
\end_layout

\begin_layout LyX-Code
    12    6   12 1
\end_layout

\begin_layout LyX-Code
    13    8    9 1
\end_layout

\begin_layout LyX-Code
@<TRIPOS>SUBSTRUCTURE
\end_layout

\begin_layout LyX-Code
     1 TP          1 TEMP              0 ****  ****    0 ROOT
\end_layout

\begin_layout Standard
This command says that the input format is pdb, output format is Sybyl mol2,
 and the BCC charge model is to be used.
 The output file is shown in the box titled .mol2.
 The format of this file is a common one understood by many programs.
 However, to display molecules properly in software packages other than
 LEaP and gleap, one needs to assign atom types using the '-at sybyl' flag
 rather than using the default gaff atom types.
\end_layout

\begin_layout Standard
You can now run parmchk2 to see if all of the needed force field parameters
 are available:
\end_layout

\begin_layout LyX-Code
parmchk2 -i tp.mol2 -f mol2 -o frcmod 
\end_layout

\begin_layout Standard
This yields the frcmod file:
\end_layout

\begin_layout LyX-Code
remark goes here
\end_layout

\begin_layout LyX-Code
MASS
\end_layout

\begin_layout LyX-Code
BOND
\end_layout

\begin_layout LyX-Code
ANGLE
\end_layout

\begin_layout LyX-Code
DIHE
\end_layout

\begin_layout LyX-Code
IMPROPER
\end_layout

\begin_layout LyX-Code
ca-ca-ca-ha         1.1          180.0         2.0          General improper
 
\backslash

\backslash

\end_layout

\begin_layout LyX-Code
                                        torsional angle (2 general atom
 types)
\end_layout

\begin_layout LyX-Code
ca-ca-ca-sh         1.1          180.0         2.0          Using default value
\end_layout

\begin_layout LyX-Code
NONBON
\end_layout

\begin_layout Standard
In this case, there were two missing dihedral parameters from the gaff.dat
 file, which were assigned a default value.
 (As gaff.dat continues to be developed, there should be fewer and fewer
 missing parameters to be estimated by parmchk2.) In rare cases, parmchk2
 may be unable to make a good estimate; it will then insert a placeholder
 (with zeros everywhere) into the frcmod file, with the comment "ATTN: needs
 revision".
 After manually editing this to take care of the elements that "need revision",
 you are ready to read this residue into LEaP, either as a residue on its
 own, or as part of a larger system.
 The following LEaP input file (leap.in) will just create a system with thiopheno
l in it:
\end_layout

\begin_layout LyX-Code
source leaprc.gaff
\end_layout

\begin_layout LyX-Code
mods = loadAmberParams frcmod
\end_layout

\begin_layout LyX-Code
TP = loadMol2 tp.mol2
\end_layout

\begin_layout LyX-Code
saveAmberParm TP prmtop inpcrd
\end_layout

\begin_layout LyX-Code
quit
\end_layout

\begin_layout Standard
You can read this into LEaP as follows:
\end_layout

\begin_layout LyX-Code
tleap -s -f leap.in 
\end_layout

\begin_layout Standard
This will yield a prmtop and inpcrd file.
 If you want to use this residue in the context of a larger system, you
 can insert commands after the loadAmberPrep step to construct the system
 you want, using standard LEaP commands.
\end_layout

\begin_layout Standard
In this respect, it is worth noting that the atom types in gaff.dat are all
 lower-case, whereas the atom types in the standard AMBER force fields are
 all upper-case.
 This means that you can load both gaff.dat and (say) parm99.dat into LEaP
 at the same time, and there won't be any conflicts.
 Hence, it is generally expected that you will use one of the AMBER force
 fields to describe your protein or nucleic acid, and the gaff.dat parameters
 to describe your ligand; as mentioned above, gaff.dat has been designed
 with this in mind, i.e., to produce molecular mechanics descriptions that
 are generally compatible with the AMBER macromolecular force fields.
\end_layout

\begin_layout Standard
The procedure above only works as it stands for neutral molecules.
 If your molecule is charged, you need to set the -nc flag in the initial
 antechamber run.
 Also note that this procedure depends heavily upon the initial 3D structure:
 it must have all hydrogens present, and the charges computed are those
 for the conformation you provide, after minimization in the AM1 Hamiltonian.
 In fact, this means that you must have an reasonable all-atom initial model
 of your molecule (so that it can be minimized with the AM1 Hamiltonian),
 and you may need to specify what its net charge is, especially for those
 molecular formats that have no net charge information, and no partial charges
 or the partial charges in the input are not correct.
 The system should really be a closed-shell molecule, since all of the atom-typi
ng rules assume this implicitly.
 
\end_layout

\begin_layout Standard
Further examples of using antechamber to create force field parameters can
 be found in the 
\shape italic
$AMBERCLASSICHOME/test/antechamber
\shape default
 directory.
 Here are some practical tips from Junmei Wang:
\end_layout

\begin_layout Enumerate
For the input molecules, make sure there are no open valences and the structures
 are reasonable.
 All hydrogen atoms must be present.
 Antechamber doesn't know what to do with metal ions (see the MCPB.py program
 for that), or for other non-organic elements such as Boron.
 Look at the 
\emph on
$AMBERCLASSICHOME/dat/leap/parm/gaff.dat
\emph default
 file to see what sorts of atomic environments are supported.
\end_layout

\begin_layout Enumerate
The Antechamber package produces two kinds of messages: error messages and
 informative messages.
 Informative messages begin with "Info:" and may be safely ignored, but
 they may be helpful for understanding and troubleshooting antechamber.
 For example: "Info: Bond types are assigned for valence state 1 with penalty
 of 1".
 Messages beginning with "Fatal Error!" or "Error:" indicate a problem.
 Some such messages may mention likely causes or contain suggested workarounds,
 but all such messages provide clues.
  Apply common sense and the scientific method to troubleshoot.
  Typical first steps are to verify input files and to search the AMBER
 Mail Reflector for similar reported problems.
 Additional steps are described below.
\end_layout

\begin_layout Enumerate
Failures are most often produced when antechamber infers an incorrect connectivi
ty.
 In such cases, you can revise by hand the connectivity information in "ac"
 or "mol2" files.
 Systematic errors could be corrected by revising the parameters in $
\emph on
AMBERCLASSICHOME/dat/antechamber/CONNECT.TPL
\emph default
.
\end_layout

\begin_layout Enumerate
It is a good idea to check the intermediate files in case of a program failure,
 and you can run separate programs one by one.
 Use the "-s 2" flag to antechamber to see details of what it is doing.
\end_layout

\begin_layout Enumerate

\emph on
acdoctor
\emph default
 can diagnose many possible problems with input molecules.
 If you encounter failures when running antechamber programs, it is highly
 recommended to let 
\emph on
acdoctor
\emph default
 perform a diagnosis.
 Run the acdoctor program or use the acdoctor mode in program antechamber;
 the latter is controlled by option '-dr' and is on by default.
\end_layout

\begin_layout Enumerate
By default, the AM1 Mulliken charges that are required for the AM1-BCC procedure
 are computed using the 
\emph on
sqm
\emph default
 program, with the following keyword (which is placed inside the 
\emph on
&qmmm
\emph default
 namelist):
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
qm_theory="AM1", grms_tol=0.0005, scfconv=1.d-10,
\end_layout

\begin_layout Standard
For some molecules, especially if they have bad starting geometries, convergence
 to these tight criteria may not be obtained.
 If you have trouble, examine the 
\emph on
sqm.out
\emph default
 file, and try changing 
\emph on
scfconv
\emph default
 to 1.d-8 and/or increase the value of 
\emph on
grms_tol
\emph default
.
 If you see failures in scf convergence that are not fixed by changing scfconv,
 try adding setting 
\emph on
ndiis_attempts
\emph default
=700.
 You can use the 
\family typewriter
-ek
\family default
 flag to antechamber to change these: for example
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

antechamber ....
  -ek "qm_theory='AM1', grms_tol=0.0005, scfconv=1.d-8, ndiis_attempts=700,"
  .....
\end_layout

\end_inset


\end_layout

\begin_layout Standard
But be aware that there may be something 
\begin_inset Quotes eld
\end_inset

wrong
\begin_inset Quotes erd
\end_inset

 with your molecule if these problems arise; 
\emph on
acdoctor
\emph default
 may help (see the previous tip).
\end_layout

\end_deeper
\begin_layout Enumerate
The standard procedure for obtaining AM1-BCC charges calls for a geometry
 optimization first.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Jakalian00,Jakalian02"
literal "true"

\end_inset

 For some molecules (especially anions like phosphates) such a vacuum minimizati
on may be inappropriate, since it can lead to formation of intramolecular
 hydrogen bonds that are not representative of the expected conformations
 in solution.
 If you trust your initial geometries, you can add 
\emph on
maxcyc
\emph default
=0 to the 
\family typewriter
-ek
\family default
 flag to skip the geometry minimization.
 You might also want to turn off geometry optimization in order try out
 several conformations in order to assess the sensitivity of the AM1-BCC
 charges to input geometry.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:antechamber_calls"

\end_inset

Programs called by antechamber
\end_layout

\begin_layout Standard
The following programs are automatically called by antechamber when needed.
 Generally, you should not need to run them yourself, unless problems arise
 and/or you want to fine-tune what antechamber does.
\end_layout

\begin_layout Subsection
atomtype
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
atomtype
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Atomtype reads in an ac file and assigns the atom types.
 You may find the default definition files in 
\family typewriter
$AMBERCLASSICHOME/dat/antechamber
\family default
: ATOMTYPE_AMBER.DEF (AMBER), ATOMTYPE_GFF.DEF (general AMBER force field).
 ATOMTYPE_GFF.DEF is the default definition file.
 It is pointed out that the usage of atomtype is not limited to assign force
 field atom types, it can also be used to assign atom types in other application
s, such as QSAR and QSPR studies.
 The users can define their own atom type definition files according to
 certain rules described in the above mentioned files.
 
\end_layout

\begin_layout LyX-Code
atomtype -i input file name                 
\end_layout

\begin_layout LyX-Code
         -o output file name (ac)
\end_layout

\begin_layout LyX-Code
         -f input file format(ac (the default) or mol2)
\end_layout

\begin_layout LyX-Code
         -p atom type set, suppressed by "-d" option
\end_layout

\begin_layout LyX-Code
            gaff  : the default
\end_layout

\begin_layout LyX-Code
            amber : for PARM94/99/99SB 
\end_layout

\begin_layout LyX-Code
            bcc   : for AM1-BCC   
\end_layout

\begin_layout LyX-Code
            abcg2 : for ABCG2 
\end_layout

\begin_layout LyX-Code
            gas   : for Gasteiger charge 
\end_layout

\begin_layout LyX-Code
            sybyl : for atom types used in sybyl    
\end_layout

\begin_layout LyX-Code
         -d atom type definition file, optional  
\end_layout

\begin_layout LyX-Code
         -a do post atom type adjustment (it is applied with "-d" option)
 
\end_layout

\begin_layout LyX-Code
            1: yes, 0: no (the default) 
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout LyX-Code
atomtype -i sustiva_resp.ac -o sustiva_resp_at.ac -f ac -p amber
\end_layout

\begin_layout Standard
This command assigns atom types for sustiva_resp.ac with amber atom type
 definitions.
 The output file name is sustiva_resp_at.ac
\end_layout

\begin_layout Subsection
am1bcc
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
am1bcc
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Am1bcc first reads in an ac or mol2 file with or without assigned AM1-BCC
 atom types and bond types.
 Then the bcc parameter file (the default, BCCPARM.DAT is in 
\family typewriter
$AMBERCLASSICHOME/dat/antechamber
\family default
) is read in.
 An ac file with AM1-BCC charges 
\begin_inset CommandInset citation
LatexCommand cite
key "Jakalian00,Jakalian02"
literal "true"

\end_inset

 is written out.
 Be sure the charges in the input ac file are AM1-Mulliken charges.
\end_layout

\begin_layout LyX-Code
am1bcc -i input file name in ac format
\end_layout

\begin_layout LyX-Code
       -o output file name
\end_layout

\begin_layout LyX-Code
       -f output file format(pdb or ac, optional, default is ac)
\end_layout

\begin_layout LyX-Code
       -t am1bcc type, default is 'bcc', can also be 'abcg2'
\end_layout

\begin_layout LyX-Code
       -p bcc parm file name (optional))
\end_layout

\begin_layout LyX-Code
       -j atom and bond type judge option, default is 0)
\end_layout

\begin_layout LyX-Code
          0: No judgement
\end_layout

\begin_layout LyX-Code
          1: Atom type
\end_layout

\begin_layout LyX-Code
          2: Full bond type
\end_layout

\begin_layout LyX-Code
          3: Partial bond type
\end_layout

\begin_layout LyX-Code
          4: Atom and full bond type
\end_layout

\begin_layout LyX-Code
          5: Atom and partial bond type
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout LyX-Code
am1bcc -i comp1.ac -o comp1_bcc.ac -f ac -j 4
\end_layout

\begin_layout Standard
This command reads in comp1.ac, assigns both atom types and bond types and
 finally performs bond charge correction to get AM1-BCC charges.
 The '-j' option of 4, which is the default, means that both the atom and
 bond type information in the input file is ignored and a full atom and
 bond type assignments are performed.
 The '-j' option of 3 and 5 implies that bond type information (single bond,
 double bond, triple bond and aromatic bond) is read in and only a bond
 type adjustment is performed.
 If the input file is in mol2 format that contains the basic bond type informati
on, option of 5 is highly recommended.
 comp1_bcc.ac is an ac file with the final AM1-BCC charges.
 
\end_layout

\begin_layout Subsection
bondtype
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bondtype
\end_layout

\end_inset


\end_layout

\begin_layout Standard
bondtype is a program to assign six bond types based upon the read in simple
 bond types from an ac or mol2 format with a flag of 
\begin_inset Quotes eld
\end_inset

-j part
\begin_inset Quotes erd
\end_inset

 or purely connectivity table using a flag of 
\begin_inset Quotes eld
\end_inset

-j full
\begin_inset Quotes erd
\end_inset

.
 The six bond types as defined in AM1-BCC 
\begin_inset CommandInset citation
LatexCommand cite
key "Jakalian00,Jakalian02"
literal "true"

\end_inset

 are single bond, double bond, triple bond, aromatic single, aromatic double
 bonds and delocalized bond.
 This program takes an ac file or mol2 file as input and write out an ac
 file with the predicted bond types.
 After the continually improved algorithm and code, the current version
 of bondtype can correctly assign bond types for most organic molecules
 (>99% overall and >95% for charged molecules) in our tests.
\end_layout

\begin_layout Standard
Starting with Amber 10, bond type assignment is proceeded based upon residues.
 The bonds that link two residues are assumed to be single bonded.
 This feature allows antechamber to handle residue-based molecules, even
 proteins are possible.
 It also provides a remedy for some molecules that would otherwise fail:
 it can be helpful to dissect the whole molecule into residues.
 Some molecules have more than one way to assign bond types; for example,
 there are two ways to alternate single and double bonds for benzene.
 The assignment adopted by bondtype is purely affected by the atom sequence
 order.
 To get assignments for other resonant structures, one may freeze some bond
 types in an 
\emph on
ac
\emph default
 or 
\emph on
mol2
\emph default
 input file (appending 'F' or 'f' to the corresponding bond types).
 Those frozen bond types are ignored in the bond type assignment procedure.
 If the input molecules contain some unusual elements, such as metals, the
 involved bonds are automatically frozen.
 This frozen bond feature enables bondtype to handle unusual molecules in
 a practical way without simply producing an error message.
\end_layout

\begin_layout LyX-Code
bondtype -i input file name
\end_layout

\begin_layout LyX-Code
         -o output file name
\end_layout

\begin_layout LyX-Code
         -f input file format (ac or mol2)
\end_layout

\begin_layout LyX-Code
         -j judge bond type level option, default is part
\end_layout

\begin_layout LyX-Code
            full  full judgment
\end_layout

\begin_layout LyX-Code
            part  partial judgment, only do reassignment according
\end_layout

\begin_layout LyX-Code
                  to known bond type information in the input file
\end_layout

\begin_layout Standard
Examples can be found in 
\emph on
$AMBERCLASSICHOME/test/antechamber/bondtype
\emph default
 and 
\emph on
$AMBERCLASSICHOME/test/antechamber/chemokine
\emph default
.
\end_layout

\begin_layout Subsection
prepgen
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prepgen
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Prepgen generates the prep input file from an ac file.
 By default, the program generates a mainchain itself.
 However, you may also specify the main-chain atoms in the main chain file.
 From this file, you can also specify which atoms will be deleted, and whether
 to do charge correction or not.
 In order to generate the amino-acid-like residue (this kind of residue
 has one head atom and one tail atom to be connected to other residues),
 you need a main chain file.
 Sample main chain files are in 
\emph on
$AMBERCLASSICHOME/dat/antechamber
\emph default
.
\end_layout

\begin_layout LyX-Code
prepgen -i  input file name(ac)
\end_layout

\begin_layout LyX-Code
        -o  output file name
\end_layout

\begin_layout LyX-Code
        -f  output file format (car or int, default: int)
\end_layout

\begin_layout LyX-Code
        -m  mainchain file name
\end_layout

\begin_layout LyX-Code
        -rn residue name (default: MOL)
\end_layout

\begin_layout LyX-Code
        -rf residue file name (default: molecule.res)
\end_layout

\begin_layout LyX-Code
            -f -m -rn -rf are optional
\end_layout

\begin_layout Standard
Examples:
\end_layout

\begin_layout LyX-Code
prepgen -i sustiva.ac -o sustiva_int.prep -f int -rn SUS -rf SUS.res
\end_layout

\begin_layout LyX-Code
prepgen -i sustiva.ac -o sustiva_car.prep -f car -rn SUS -rf SUS.res
\end_layout

\begin_layout LyX-Code
prepgen -i sustiva.ac -o sustiva_int_main.prep -f int -rn SUS 
\end_layout

\begin_layout LyX-Code
        -rf SUS.res -m mainchain_sus.dat
\end_layout

\begin_layout LyX-Code
prepgen -i ala_cm2_at.ac -o ala_cm2_int_main.prep -f int -rn ALA 
\end_layout

\begin_layout LyX-Code
        -rf ala.res -m mainchain_ala.dat 
\end_layout

\begin_layout Standard
The above commands generate different kinds of prep input files with and
 without specifying a main chain file.
\end_layout

\begin_layout Subsection
espgen
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
espgen
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Espgen reads in a gaussian (92,94,98,03) output file and extracts the ESP
 information.
 An esp file for the resp program is generated.
\end_layout

\begin_layout LyX-Code
espgen -i   input file name 
\end_layout

\begin_layout LyX-Code
       -o   output file name 
\end_layout

\begin_layout LyX-Code
       -f   input format:
\end_layout

\begin_layout LyX-Code
            1  Gaussian log file(default)
\end_layout

\begin_layout LyX-Code
            2  Gaussian ESP file
\end_layout

\begin_layout LyX-Code
            3  Gamess ESP file
\end_layout

\begin_layout LyX-Code
       -p   generate esp for pGM:
\end_layout

\begin_layout LyX-Code
            0  no, the default)
\end_layout

\begin_layout LyX-Code
            1  yes 
\end_layout

\begin_layout LyX-Code
       -dq  print out dipole and quadrupole moments:
\end_layout

\begin_layout LyX-Code
            0  no, the default)
\end_layout

\begin_layout LyX-Code
            1  yes 
\end_layout

\begin_layout LyX-Code
       -re  print out remark line
\end_layout

\begin_layout LyX-Code
            0  no, the default)
\end_layout

\begin_layout LyX-Code
            1  yes 
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout LyX-Code
(1) espgen -i sustiva_g98.out -o sustiva.esp
\end_layout

\begin_layout LyX-Code
(2) espgen -i ch3I.gesp -o ch3I.esp
\end_layout

\begin_layout Standard
Command (1) reads in sustiva_g98.out and writes out sustiva.esp, which can
 be used by the resp program.
 Command (2) reads in a gesp file generated by Gaussian 09 and outputs the
 esp file.
 Note that this program replaces shell scripts formerly found on the AMBER
 web site that perform equivalent tasks.
 
\end_layout

\begin_layout Subsection
respgen
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
respgen
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Respgen generates the input files for two-stage resp fitting.
 Starting with Amber 10, the program supports a single molecule with one
 or multiple conformations RESP fittings.
 Atom equivalence is recognized automatically.
 Frozen charges and charge groups are read in with '-a' flag.
 If there are some frozen charges in the additional input data file, a RESP
 charge file, QIN is generated as well.
 Here are flags to 
\emph on
respgen
\emph default
:
\end_layout

\begin_layout LyX-Code
-i input file name(ac)
\end_layout

\begin_layout LyX-Code
-o output file name
\end_layout

\begin_layout LyX-Code
-l maximum path length (default is -1, i.e.
 the path can be any long)
\end_layout

\begin_layout LyX-Code
-f output file format
\end_layout

\begin_layout LyX-Code
   resp1 - first stage resp fitting
\end_layout

\begin_layout LyX-Code
   resp2 - second stage resp fitting
\end_layout

\begin_layout LyX-Code
   iresp1 - first stage i_resp fitting 
\end_layout

\begin_layout LyX-Code
   iresp2 - second stage i_resp fitting
\end_layout

\begin_layout LyX-Code
   resp3 - one-stage resp fitting
\end_layout

\begin_layout LyX-Code
   resp4 - calculating ESP from point charges 
\end_layout

\begin_layout LyX-Code
   resp5 - no-equalization 
\end_layout

\begin_layout LyX-Code
-e equalizing atomic charge (default is 1)
\end_layout

\begin_layout LyX-Code
   0 not use
\end_layout

\begin_layout LyX-Code
   1 by atomic paths 
\end_layout

\begin_layout LyX-Code
   2 by atomic paths and geometry (such as E/Z configuration)
\end_layout

\begin_layout LyX-Code
-a additional input data (predefined charges, atom groups etc)
\end_layout

\begin_layout LyX-Code
-n number of conformations (default is 1)
\end_layout

\begin_layout LyX-Code
-w weight of charge constraint
\end_layout

\begin_layout LyX-Code
   the default values are 0.0005 for resp1/iresp1 and 0.001 for
\end_layout

\begin_layout LyX-Code
   resp2/iresp2
\end_layout

\begin_layout Standard
The following is a sample of additional respgen input file
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//predefined charges in a format of (CHARGE partial_charge atom_ID atom_name)
 
\end_layout

\begin_layout Plain Layout

CHARGE -0.417500 7 N1 
\end_layout

\begin_layout Plain Layout

CHARGE 0.271900 8 H4 
\end_layout

\begin_layout Plain Layout

CHARGE 0.597300 15 C5 
\end_layout

\begin_layout Plain Layout

CHARGE -0.567900 16 O2 
\end_layout

\begin_layout Plain Layout

//charge groups in a format of (GROUP num_atom net_charge), 
\end_layout

\begin_layout Plain Layout

//more than one group may be defined.
 
\end_layout

\begin_layout Plain Layout

GROUP 10 0.00000 
\end_layout

\begin_layout Plain Layout

//atoms in the group in a format of (ATOM atom_ID atom_name) 
\end_layout

\begin_layout Plain Layout

ATOM 7 N1 
\end_layout

\begin_layout Plain Layout

ATOM 8 H4 
\end_layout

\begin_layout Plain Layout

ATOM 9 C3 
\end_layout

\begin_layout Plain Layout

ATOM 10 H5 
\end_layout

\begin_layout Plain Layout

ATOM 11 C4 
\end_layout

\begin_layout Plain Layout

ATOM 12 H6 
\end_layout

\begin_layout Plain Layout

ATOM 13 H7 
\end_layout

\begin_layout Plain Layout

ATOM 14 H8 
\end_layout

\begin_layout Plain Layout

ATOM 15 C5 
\end_layout

\begin_layout Plain Layout

ATOM 16 O2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout LyX-Code
respgen -i sustiva.ac -o sustiva.respin1 -f resp1
\end_layout

\begin_layout LyX-Code
respgen -i sustiva.ac -o sustiva.respin2 -f resp2
\end_layout

\begin_layout LyX-Code
resp -O -i sustiva.respin1 -o sustiva.respout1 -e sustiva.esp -t qout_stage1
\end_layout

\begin_layout LyX-Code
resp -O -i sustiva.respin2 -o sustiva.respout2 -e sustiva.esp 
\end_layout

\begin_layout LyX-Code
        -q qout_stage1 -t qout_stage2
\end_layout

\begin_layout LyX-Code
antechamber -i sustiva.ac -fi ac -o sustiva_resp.ac -fo ac -c rc -cf qout_stage2
\end_layout

\begin_layout LyX-Code
respgen -i acetamide.ac -o acetamide.respin1 -f resp1 -e 2
\end_layout

\begin_layout LyX-Code
respgen -i acetamide.ac -o acetamide.respin2 -f resp2 -e 2
\end_layout

\begin_layout Standard
The above commands first generate the input files (sustiva.respin1 and sustiva.res
pin2) for resp fitting, then do two-stage resp fitting and finally use antechamb
er to read in the resp charges and write out an ac file, 
\emph on
sustiva_resp.ac
\emph default
.
 A more complicated example has been provided in 
\emph on
$AMBERCLASSICHOME/test/antechamber/residuegen
\emph default
.
 The last two 'respgen' commands generate resp input files for acetamide
 discriminating the two amide hydrogen atoms.
 
\end_layout

\begin_layout Section
Miscellaneous programs
\end_layout

\begin_layout Standard
The Antechamber suite also contains some utility programs that perform various
 tasks in molecular mechanical calculations.
 They are listed in alphabetical order.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:acdoctor"

\end_inset

acdoctor
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
acdoctor
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
acdoctor
\emph default
 reads the same input file formats used by the
\emph on
antechamber
\emph default
 program and 'diagnoses' potential issues that can cause antechamber to
 fail.
 In AmberTools version 17 the acdoctor functionality was added to program
 antechamber; it is controlled by option '-dr' and is on by default.
 The first step is to validate some commonly-used molecular formats, such
 as pdb, mol2, mdl (sdf), etc.
 Then the presence of any unusual elements (elements other than C, O, N,
 S, P, H, F, Cl, Br and I) is reported; in AmberTools version 19 the unusual
 elements check was changed from a warning to a fatal error; please contact
 the Amber Mail Reflector specifying the unusual element(s) to register
 your interest in using antechamber on those element(s).
 Unfilled valences are reported and additional checks are performed when
 atom types and/or bond types are read for file formats ac, mol2, sdf, prepi,
 prepc, mdl, alc and hin.
 The geometry is quantified by a distance matrix and atomic clashes are
 reported.
 
\emph on
acdoctor
\emph default
 also applies a more stringent criterion than that utilized by 
\emph on
antechamber
\emph default
 to determine whether a bond is formed or not.
 A warning message is printed for those bonds that fail to meet the standard
 as well as for weird bonds.
  Next
\emph on
acdoctor
\emph default
 determines whether all atoms are linked together through atomic paths.
 If not, an error message is printed.
 This kind of error typically implies that the input molecule has one or
 several bonds missing.
 Finally, 
\emph on
acdoctor
\emph default
 tries to assign bond types and atom types for the input molecule.
 If no error occurs during running 
\emph on
bondtype
\emph default
 and 
\emph on
atomtype
\emph default
, presumably the input molecule should be free from problems when running
 the other Antechamber programs.
 It is recommended to diagnose your molecules with 
\emph on
acdoctor
\emph default
 when you encounter Antechamber program suite failures.
 
\end_layout

\begin_layout LyX-Code
Usage: acdoctor -i  input file name
\end_layout

\begin_layout LyX-Code
                -f  input file format
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout LyX-Code
acdoctor -i test.mol2 -f mol2
\end_layout

\begin_layout Standard
The program reads test.mol2 and checks for potential problems when running
 the Antechamber programs.
 Errors and warning messages are printed.
 (Possible file formats are listed above in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:antechamber"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:parmcal"

\end_inset

parmcal
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
parmcal
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\shape italic
parmcal
\shape default
 is an interactive program to calculate the bond length and bond angle parameter
s, according to the rules outlined in Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Wang04"
literal "true"

\end_inset

.
\end_layout

\begin_layout LyX-Code
Please select:
\end_layout

\begin_layout LyX-Code
1.
 calculate the bond length parameter: A-B
\end_layout

\begin_layout LyX-Code
2.
 calculate the bond angle parameter: A-B-C
\end_layout

\begin_layout LyX-Code
3.
 exit
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:residuegen"

\end_inset

residuegen
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
residuegen
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It can be painful to prepare a modified amino acid or nucleotide; the complicati
on is that a residue is not a free standing molecule, and needs to be capped
 with extra atoms, usually at both termini.
 For 
\begin_inset Quotes eld
\end_inset

simple
\begin_inset Quotes erd
\end_inset

 systems, where a single conformation can be used to estimate partial charges,
 the 
\emph on
prepgen
\emph default
 program described above with the 
\begin_inset Quotes eld
\end_inset

-m
\begin_inset Quotes erd
\end_inset

 flag to specify which atoms to keep in the final residue.
 For more complex circumstances, the 
\shape italic
residuegen
\shape default
 facilitates residue topology generation.
 
\shape italic
residuegen
\shape default
 reads in an input file and applies a set of antechamber programs to generate
 residue topologies in prepi format.
 The program can be applied to generate amino-acid-like topologies for amino
 acids, nucleic acids and other polymers as well.
 An example is provided below and the file format of the input file is also
 explained.
\end_layout

\begin_layout LyX-Code
Usage: residuegen input_file
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout LyX-Code
residuegen ala.input
\end_layout

\begin_layout Standard
This command reads in ala.input and generate residue topology for alanine.
 The file format of ala.input is explained below.
\end_layout

\begin_layout Standard

\size small
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#INPUT_FILE:    structure file in ac format, generated from a Gaussian output
\end_layout

\begin_layout Plain Layout

INPUT_FILE      ala.ac
\end_layout

\begin_layout Plain Layout

#CONF_NUM:      Number of conformations utilized
\end_layout

\begin_layout Plain Layout

CONF_NUM        2
\end_layout

\begin_layout Plain Layout

#ESP_FILE:      esp file generated from gaussian output with 'espgen'
\end_layout

\begin_layout Plain Layout

#               for multiple conformations, cat all CONF_NUM esp files onto
 ESP_FILE
\end_layout

\begin_layout Plain Layout

ESP_FILE        ala.esp
\end_layout

\begin_layout Plain Layout

#SEP_BOND:      bonds that separate residue and caps, input in a format
 of
\end_layout

\begin_layout Plain Layout

#               (Atom_Name1 Atom_Name2), where Atom_Name1 belongs to residue
 and 
\end_layout

\begin_layout Plain Layout

#               Atom_Name2 belongs to a cap; must show up no more than two
 times
\end_layout

\begin_layout Plain Layout

SEP_BOND        N1 C2
\end_layout

\begin_layout Plain Layout

SEP_BOND        C5 N2
\end_layout

\begin_layout Plain Layout

#NET_CHARGE:    net charge of the residue
\end_layout

\begin_layout Plain Layout

NET_CHARGE      0
\end_layout

\begin_layout Plain Layout

#ATOM_CHARGE:   predefined atom charge, input in a format of  
\end_layout

\begin_layout Plain Layout

#             (Atom_Name Partial_Charge); can show up multiple times.
\end_layout

\begin_layout Plain Layout

ATOM_CHARGE     N1 -0.4175
\end_layout

\begin_layout Plain Layout

ATOM_CHARGE     H4 0.2719
\end_layout

\begin_layout Plain Layout

ATOM_CHARGE     C5 0.5973
\end_layout

\begin_layout Plain Layout

ATOM_CHARGE     O2 -0.5679
\end_layout

\begin_layout Plain Layout

#PREP_FILE:     prep file name
\end_layout

\begin_layout Plain Layout

PREP_FILE:      ala.prep
\end_layout

\begin_layout Plain Layout

#RESIDUE_FILE_NAME:     residue file name in PREP_FILE
\end_layout

\begin_layout Plain Layout

RESIDUE_FILE_NAME:      ala.res
\end_layout

\begin_layout Plain Layout

#RESIDUE_SYMBOL:        residue symbol in PREP_FILE
\end_layout

\begin_layout Plain Layout

RESIDUE_SYMBOL:         ALA
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:match"

\end_inset

match
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
match
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The match program was developed to conduct least-square fittings for two
 molecules (one input and one reference) which are not necessarily the same
 in structure.
 Users can specify which atom or residue in the input corresponds to which
 in the reference in the definition file (-df).
 The users can also specify which atoms participating the fitting (-ds).
 The match matrix can be saved for translating and roating those atoms not
 participating the fitting procedure in separate step using '-j 2'.
 
\end_layout

\begin_layout LyX-Code
Usage: match  -i  input file name                
\end_layout

\begin_layout LyX-Code
              -r  reference file name                
\end_layout

\begin_layout LyX-Code
              -f  format: 1-pdb (the default), 2-ac, 3-mol2, 4-sdf, 5-crd/rst
 
\end_layout

\begin_layout LyX-Code
              -o  output file name               
\end_layout

\begin_layout LyX-Code
              -l  run log file name, default is "match.log"             
  
\end_layout

\begin_layout LyX-Code
              -s  selection mode                   
\end_layout

\begin_layout LyX-Code
                  0: use all atoms (the default)                   
\end_layout

\begin_layout LyX-Code
                  1: specify atom names                   
\end_layout

\begin_layout LyX-Code
                  2: use atom definition file                   
\end_layout

\begin_layout LyX-Code
                  3: use residue definition file - original residue IDs
                   
\end_layout

\begin_layout LyX-Code
                  4: use residue definition file - renumbered residue IDs
               
\end_layout

\begin_layout LyX-Code
              -ds definition string if selection modes of '1' or '3' or
 '4'                   
\end_layout

\begin_layout LyX-Code
                  e.g.
 'C,N,O,CA', or 'HET' which stands for heavy atoms for '-ds 1')        
       
\end_layout

\begin_layout LyX-Code
              -df definition file if selection mode of '2' or '3' or '4'
\end_layout

\begin_layout LyX-Code
                  records take a form of 'ATOM atom_id_input atom_id_reference'
\end_layout

\begin_layout LyX-Code
                  or 'RES res_id_input res_id_reference'
\end_layout

\begin_layout LyX-Code
              -n  number of atoms participating ls-fitting,
\end_layout

\begin_layout LyX-Code
                  default is -1, which implies to use all the selected atoms
\end_layout

\begin_layout LyX-Code
              -m  matrix file, default is "match.matrix"
\end_layout

\begin_layout LyX-Code
              -t  job type:
\end_layout

\begin_layout LyX-Code
                  0: calculate rms only, need -i and -r
\end_layout

\begin_layout LyX-Code
                  1: lsfit, need -i, -r and -o the default
\end_layout

\begin_layout LyX-Code
                  2: translation/rotation, need -i, -o and -m 
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout LyX-Code
match -f pdb -r 1be9.pdb -i 3pdz.pdb -o 3pdz_aligned.pdb -s 4 -ds "CA,C,N,O"
 -df 3pdz_1be9.corr
\end_layout

\begin_layout Standard
The program runs least-square fitting for the non-hydrogen main chain atoms
 of residues defined in the 3pdz_1be9.corr.
 A part of the 3pdz_1be9.corr is shown below:
\end_layout

\begin_layout Standard
RES 34 35 G G 
\end_layout

\begin_layout Standard
RES 35 36 I I 
\end_layout

\begin_layout Standard
RES 36 37 Y F 
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
RES 87 88 L I 
\end_layout

\begin_layout Standard
RES 88 89 L I 
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:match_atomname"

\end_inset

match_atomname
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
match_atomname
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One limitation of the Antechamber package is that the atom name information
 is lost after running Gaussian calculations.
 And a residue topology file in prepi or prepc or a mol2 file generated
 from the Gaussian output has atom names not matching those from the original
 file (usually a pdb file).
 Because of this glitch, one can not simply load the residue topology file
 to tleap, read in the pdb file and then to save the topolgoy.
 We developed match_atomname to address this problem.
 The match_atomname program takes an input file and a reference file in
 pdb, ac, prepi, prepc and mol2 format, automatically detects the corresponding
 atom name in the reference for each atom name in the input.
 An output file in the same format as that of the input is generated using
 the matched atom names.
 
\end_layout

\begin_layout LyX-Code
Usage: match_atomname -i  input file name
\end_layout

\begin_layout LyX-Code
                      -fi input format (pdb, ac, prepi, prepc, mol2
\end_layout

\begin_layout LyX-Code
                      -r  ref file name
\end_layout

\begin_layout LyX-Code
                      -fr ref format (pdb, ac, prepi, prepc, mol2)
\end_layout

\begin_layout LyX-Code
                      -o  output file name
\end_layout

\begin_layout LyX-Code
                      -h  include hydrogen atoms or not
\end_layout

\begin_layout LyX-Code
                          0 not, the default
\end_layout

\begin_layout LyX-Code
                          1 yes
\end_layout

\begin_layout LyX-Code
                      -g  geometric info (such as E/Z configuration) is
 considered to describe chemical environment
\end_layout

\begin_layout LyX-Code
                          0 no, the default
\end_layout

\begin_layout LyX-Code
                          1 yes
\end_layout

\begin_layout LyX-Code
                      -l  maximum path length, default is -1 (full length)
\end_layout

\begin_layout LyX-Code
                          if it takes very long time and/or core dump occur,
 a value between 8 to 10 is recommended 
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout LyX-Code
match_atomname -i SAH.prepi -fi prepi -o SAH_matched.prepi -r SAH_XRAY.pdb
 -fr pdb
\end_layout

\begin_layout Standard
The output, SAH_matched.prepi and SAH_XRAY.pdb can be loaded to tleap directly
 to generate a topology for minimization or MD simulations.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:paramfit"

\end_inset

paramfit
\begin_inset Index idx
status open

\begin_layout Plain Layout
paramfit
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center

\emph on
Robin Betz
\end_layout

\begin_layout Standard
The 
\emph on
paramfit 
\emph default
program allows specific forcefield parameters to be optimized or created
 by fitting to quantum energy data.
 
\emph on
Paramfit
\emph default
 can be used when parameters are missing in the default force fields and
 
\emph on
antechamber
\emph default
 cannot find a replacement, or when existing parameters do not describe
 the system to the desired level of accuracy, such as for dihedral constants
 on protein backbones.
\end_layout

\begin_layout Standard

\emph on
Paramfit 
\emph default
attempts to make the following statement true: 
\series bold
With the correct AMBER parameters, calculations performed at a quantum level
 over many conformations of a structures should match those calculated by
 AMBER.
\end_layout

\begin_layout Standard

\emph on
Paramfit
\emph default
 can calculate the energy of each conformation and/or the force on each
 atom, and adjust the force field parameters so that these values correspond
 to input quantum data.
\end_layout

\begin_layout Standard
For energies, 
\emph on
Paramfit
\emph default
 attempts to fit the AMBER energy to the quantum energy for a variety of
 conformations of the input structure, minimizing the equation 
\begin_inset Formula 
\[
\sum_{n=1}^{N}w_{i}\Big[\big(E_{MM}(n)-E{}_{QM}(n)\big)^{2}+K\Big]=0
\]

\end_inset

 where K is a constant that adjusts for different origins in the QM and
 MM calculations so that minimization may be done to zero and N is the number
 of molecular conformations that are considered.
\end_layout

\begin_layout Standard
For forces, the equation that is optimized is 
\begin_inset Formula 
\[
\sum_{n=1}^{N}\sum_{atom=1}^{N_{atoms}}w_{i}\big|F(n,atom)_{MM}-F(n,atom)_{QM}\big|^{2}=0
\]

\end_inset

 where the sum of the differences in the forces on each atom should match
 given the correct set of parameters.
 Individual structures can be assigned weights 
\begin_inset Formula $w_{i}$
\end_inset

to give them more or less relative importance in the fit.
 By default, all weights are set to 1.
\end_layout

\begin_layout Standard
The program works by altering the parameters that AMBER uses to describe
 the molecule, which alter the elements in the AMBER sum that is used to
 calculate the energy or forces.
 It is necessary to evaluate over many conformations of the molecule because
 the parameters should predict how the molecule will behave dynamically
 rather than statically.
 To get a good idea of the forces on a dihedral, for example, the energy
 needs to be evaluated for multiple conformations of the dihedral to see
 how it changes each time.
 
\emph on
Paramfit 
\emph default
will fit so that the energy changes that AMBER predicts will happen when
 the dihedral twists match the changes predicted with quantum methods.
\end_layout

\begin_layout Standard
In order to facilitate force field development, 
\emph on
Paramfit
\emph default
 supports fitting parameters across multiple molecules (for example, fitting
 a single dihedral backbone term across a variety of input amino acids).
 Single molecule fits can also be done to generate parameters that are missing
 or inadequate to describe small molecules or ligands.
\end_layout

\begin_layout Standard

\emph on
Paramfit 
\emph default
provides functionality for the majority of steps in the fitting process,
 including writing input files for quantum packages, specifying which parameters
 are to be fit, determining the value of K for the system, and finally conductin
g the fit and saving it in a force field modification file that can be used
 by other programs.
 An external quantum program is needed to generate the energies needed for
 
\emph on
paramfit
\emph default
 to conduct a fitting.
 Currently, the program is capable of writing input files for ADF, GAMESS,
 and Gaussian, although if you write your own input files instead of using
 
\emph on
paramfit's 
\emph default
functionality, any quantum package will work.
\end_layout

\begin_layout Standard
Paramfit has OpenMP support for parallelization of the AMBER function evaluation
 over the input conformations, where each core will evaluate the energy
 for a subset of the conformations.
 Enable this by adding the 
\emph on
-openmp
\emph default
 option to configure and rebuilding 
\emph on
paramfit.
 
\emph default
By default all available cores will be used.
 To change this, set the 
\family typewriter
OMP_NUM_THREADS
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
OMP
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

NUM
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

THREADS
\end_layout

\end_inset

 environment variable to the number of threads to be executed.
 You will see a speedup directly proportional to the number of cores you
 are running.
\end_layout

\begin_layout Standard

\emph on
Paramfit
\emph default
 now includes several ways fitting functions to aid in parameter generation.
 It can fit such that the energy of each input structure matches the single-poin
t quantum energies inputted, or can now do the same fitting only with the
 forces on each atom, which may produce a more accurate fit that is less
 sensitive to problems with the input structure, and can also fit all dihedral
 force constants and phases simultaneously to a small set of quantum energies
 using a method developed by Chad Hopkins and Adrian Roitberg.
 This method fits every term and requires fewer function evaluations than
 running the full minimization algorithm, but requires especially good sampling
 of each torsion angle of interest.
\end_layout

\begin_layout Standard
Fitting forces requires several additional options to specify the location
 of the output forces files in the job control file.
 The easiest way to create a job control file for any of these options is
 to use the wizard, which runs automatically when no job control file is
 specified.
 This will walk you through the creation of a job control file and write
 it for you while prompting for all necessary options for the selected fitting
 function.
\end_layout

\begin_layout Standard
It is highly recommended that you fit to single-point quantum energies,
 as fitting to forces is considerably more expensive in terms of required
 calculation and still somewhat experimental.
 The implementation of the dihedral fitting method is requires a varied
 set of input structures, and does not allow specifying individual dihedrals
 to be fit.
 No matter which method is used, please take care to carefully validate
 all parameters for reasonableness– 
\emph on
paramfit's
\emph default
 fit is dependent on the variation and quality of the input structures and
 the resulting parameters are not guaranteed in ill-defined areas of the
 input conformation set.
 For example, if you fit a dihedral torsion term with input structures sampling
 the 0-30 degree range of that dihedral, the resulting parameters cannot
 be expected to give a valid energy of a structure with the dihedral at
 90 degrees, as the algorithm merely fits to the available data and cannot
 make other predictions.
\end_layout

\begin_layout Section
Usage
\end_layout

\begin_layout Standard
Paramfit is called from the command line as follows for a single molecule
 fit:
\end_layout

\begin_layout LyX-Code
paramfit -i Job_Control.in -p prmtop -c mdcrd -q QM_data.dat 
\backslash

\end_layout

\begin_layout LyX-Code
-v MEDIUM --random-seed seed
\end_layout

\begin_layout Standard
Running 
\emph on
paramfit 
\emph default
without any options will run a wizard that assists in the creation of a
 job control file.
 It is highly recommended that you use the wizard to assist you in setting
 run options.
\end_layout

\begin_layout Standard
The following switches apply to single molecule fits only:
\end_layout

\begin_layout Description
-p prmtop The molecular topology file for the structure.
\end_layout

\begin_layout Description
-c mdcrd A coordinate file containing many conformations of the input structure.
 These may be generated by running a short simulation in solution, or by
 manually specifying coordinates for each atom.
 It is important that there be a good representation of the solution space
 for any parameters that are to be optimized– for example, if you want a
 bond force constant it would be a good idea to have input structures with
 a good range of values for the length of the that bond type.
 See 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:paramfit_bounds"

\end_inset


\end_layout

\begin_layout Description
-q QM_data.dat A file containing the quantum energies of the structures in
 the coordinate file, in order, one per line.
 You will have to extract the energies from the output files that the quantum
 package produces.
 An example script to do this for Gaussian formatted output files can be
 found in 
\family typewriter
$AMBERCLASSICHOME/AmberTools/src/paramfit/scripts
\family default
.
\end_layout

\begin_layout Standard
To fit multiple molecules, the following switches are used:
\end_layout

\begin_layout LyX-Code
paramfit -i Job_Control.in -pf prmtop_list -cf mdcrd_list -v MEDIUM --random-seed
 seed
\end_layout

\begin_layout Standard
Here is a very brief description of the command-line arguments for a multiple
 molecule fit.
 For more information on conducting these, fits, please see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:paramfit_multifit"

\end_inset

.
\end_layout

\begin_layout Description
-pf prmtop_list A file containing a plain-text list of input topology files
 and the adjustment constant K for each file separated by a space, one per
 line.
\end_layout

\begin_layout Description
-cf mdcrd_list A file containing a plain text list of input coordinate files,
 number of structures to read from each file, and directory containing quantum
 output from each file, separated by a space.
 These should be specified in the same order as the topologies in the prmtop_lis
t.
\end_layout

\begin_layout Standard
The following switches apply to either type of fit:
\end_layout

\begin_layout Description
-i Job_Control.in The job control file for the program.
 See 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:paramfit_jobcontrol"

\end_inset

 for a description of the options and format for this file.
 If no job control file is specified, a wizard will be initiated that will
 prompt you for options and help create the file.
 Use of the wizard is highly recommended when running 
\emph on
Paramfit
\emph default
 for the first time.
\end_layout

\begin_layout Description
-v MEDIUM The verbosity level to run the program at, either LOW, MEDIUM,
 or HIGH.
\end_layout

\begin_layout Description
–random-seed seed The integer seed for the random number generator.
 Only specify this parameter when exactly reproducible results are needed
 for debugging.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:paramfit_jobcontrol"

\end_inset

The Job Control File
\end_layout

\begin_layout Standard
Similarly to 
\emph on
sander
\emph default
 and other programs, 
\emph on
paramfit
\emph default
 requires a job control file that specifies individual options for each
 run.
 The options that apply to your run vary depending on the runtype and the
 other settings, and they are quite numerous.
 To aid you in creating a job control file, a wizard has been included that
 will prompt you about applicable settings and create the job control file
 for you.
 Using the wizard is highly recommended, especially when running a fit for
 the first time.
 To use the wizard, simply run 
\emph on
paramfit
\emph default
 without any options.
 
\series bold
It is highly recommended that you use the wizard to create job control files,
 
\series default
as it prompts for all options relevant to your run and the resulting file
 can then be easily edited by hand.
\end_layout

\begin_layout Standard
The format consists of variable assignments, in the format variable=value,
 with one assignment per line.
 Pound signs (#) will comment out lines.
 See the following sections for a description of what to put in the job
 control file for various tasks:
\end_layout

\begin_layout Subsection

\shape italic
\emph on
General options
\end_layout

\begin_layout Standard

\emph on
paramfit 
\emph default
requires several options be set for every run.
 These variables should usually appear in your job control file.
\end_layout

\begin_layout Description
RUNTYPE Specifies whether this run will be creating quantum input files,
 setting parameters, or conducting a fit.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

CREATE_INPUT The structures in the coordinate file will be written out as
 individual input files for a quantum package.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:paramfit_input"

\end_inset

.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

SET_PARAMS Provides an interactive prompt allowing you to specify which
 parameters will be fit for this molecule.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:paramfit_params"

\end_inset

.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

FIT Conducts a fitting using one of the two minimization algorithms.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:paramfit_fit"

\end_inset

for other options that need to be specified.
\end_layout

\end_deeper
\begin_layout Description
NSTRUCTURES Specifies how many structures are in the input coordinate file.
 If this value is less than the total number of structures in the file,
 only the first 
\series bold
n
\series default
 will be read.
 Only applies to single molecule fits! If you are fitting multiple molecules
 at once, the number of structures for each molecule should be specified
 in the mdcrd_list file as described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:paramfit_multifit"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:paramfit_input"

\end_inset

Creating quantum input files
\end_layout

\begin_layout Standard
Given a trajectory, 
\emph on
Paramfit
\emph default
 can write input files for a variety of quantum packages.
 This is necessary to generate the energy values for each input conformation
 that 
\emph on
Paramfit 
\emph default
will fit to.
 You do not necessarily need to do this step and can write your own input
 files if desired.
 Currently Gaussian, ADF, and GAMESS formats are supported.
 
\end_layout

\begin_layout Standard
Job files will be named sequentially with filename prefix and suffix specified
 in the job control file.
 Once all the input files are written, you must run the quantum package
 yourself
\emph on
.
 Paramfit
\emph default
 can read Gaussian output files directly, but for other packages you must
 extract the energies yourself into a file with one energy per line in the
 same order as the input structures.
\end_layout

\begin_layout Standard
Currently 
\emph on
Paramfit
\emph default
 only supports Gaussian if you are fitting forces, and will read the output
 files and extract the force information for you.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:paramfit_forces"

\end_inset

 for more information on fitting these.
\end_layout

\begin_layout Standard
To enter this mode, set RUNTYPE=CREATE_INPUT and specify the following options
 in your job control file:
\end_layout

\begin_layout Description
QMHEADER File that will be prepended to all created input files for the
 quantum program.
 This specifies things on a per-system basis, such as choice of basis set,
 amount of memory to use, etc.
 These parameters will vary depending on which quantum package you are using.
 Sample header files for all supported quantum packages are included in
 example_config_files in 
\emph on
paramfit's
\emph default
 source directory.
\end_layout

\begin_layout Description
QMFILEFORMAT Specifies which quantum package the created input files should
 be formatted for.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

ADF Use the Amsterdam Density Functional Theory package.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

GAMESS Use the General Atomic and Molecular Electronic Structure System
 (GAMESS).
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

GAUSSIAN Use Gaussian.
\end_layout

\end_deeper
\begin_layout Description
QM_SYSTEM_CHARGE The integral charge of the system.
 Defaults to 0.
 Note that some quantum packages may require this to also be specified in
 your header file.
\end_layout

\begin_layout Description
QM_SYSTEM_MULTIPLICITY The integral multiplicity of the system.
 Defaults to 1 (singlet).
\end_layout

\begin_layout Description
QMFILEOUTSTART The prefix for each of the created input files.
 Defaults to 'Job.' The structure number and then the suffix will be appended
 to this value.
\end_layout

\begin_layout Description
QMFILEOUTEND The suffix for each of the created input files.
 Defaults to '.in'.
 With both default options, the file will be named Job.
\series bold
n
\series default
.in.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:paramfit_params"

\end_inset

Specifying parameters
\end_layout

\begin_layout Standard
In order to facilitate batch runs as well as simplify the process of running
 
\emph on
paramfit
\emph default
 on larger systems, the parameters to be fit are saved and then loaded in
 during actual fitting so that they do not have to be specified every time.
 The parameter setting runtype accomplishes this by prompting whether you
 would like to fit bond, angle and/or dihedral parameters and then displaying
 a list of the specific atom types for each so that you can pick exactly
 what 
\emph on
paramfit
\emph default
 should optimize.
 This saved file does not specify a value for any of the parameters, but
 simply indicates which ones are to be changed during fitting.
\end_layout

\begin_layout Standard
If you do not wish to save a parameter file, you may instead fit a default
 set of parameters or be prompted every time.
 See 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:paramfit_fit"

\end_inset

.
\end_layout

\begin_layout Standard
To enter this mode, set 
\family typewriter
RUNTYPE=SET_PARAMS
\family default
 and the following options:
\end_layout

\begin_layout Description
PARAMETER_FILE_NAME Specifies the name of a file in which to store the parameter
s.
 When loading these parameters in during a fitting, this line will stay
 the same.
 Do not modify this file by hand: 
\emph on
paramfit
\emph default
 numbers each bond, angle, and dihedral in a manner that is consistent but
 not human-readable.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:paramfit_fit"

\end_inset

Fitting options
\end_layout

\begin_layout Standard
The fitting function accomplishes the actual parameter modification.
 It does this by minimizing the least squares difference between the quantum
 energy and the energy calculated with the AMBER equation over all of the
 input conformations.
 For a perfect fit, this means that over all structures, 
\begin_inset Formula $E_{MD}-E{}_{QM}+K=0$
\end_inset

.
\end_layout

\begin_layout Standard
K is the intrinsic difference between the quantum and the classical energies,
 which is represented as a parameter that is also fit.
 The value of K depends on the system, and should be fit once as the only
 parameter before fitting any other parameters.
\end_layout

\begin_layout Standard
To enter this mode, set 
\family typewriter
RUNTYPE=FIT
\family default
 and set the following additional variables:
\end_layout

\begin_layout Description
ALGORITHM The minimization algorithm to use.
 
\emph on
paramfit
\emph default
 currently implements a genetic algorithm and a simplex algorithm for conduction
 minimization.
 Each algorithm requires several parameters and is suited to different problems.
 Please see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:paramfit_algorithms"

\end_inset

 for descriptions of these options and a guide on choosing the appropriate
 algorithm.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

GENETIC 
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

SIMPLEX
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

BOTH Runs the hybrid genetic algorithm followed by the simplex algorithm
 to fine tune results
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

NONE No fit is performed- useful for calculating energy of each structure
 with the initial parameters to see their quality
\end_layout

\end_deeper
\begin_layout Description
FUNC_TO_FIT The fitting function to use in the calculation.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

SUM_SQUARES_AMBER_STANDARD Standard fit to single-point energies.
 Recommended selection.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

AMBER_FORCES Fit to the forces on atoms involved in fitted parameters.
 Currently only supports Gaussian output.
 See 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:paramfit_forces"

\end_inset

 for details.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

DIHEDRAL_LEAST_SQUARES Use Chad Hopkins and Adrian Roitberg's method to
 fit all dihedral terms at once.
 This method will fit all dihedral torsion terms simultaneously with a minimal
 number of function evaluations, but requires very good sampling of the
 relevant torsion angles.
\end_layout

\end_deeper
\begin_layout Description
K The intrinsic difference between the quantum and classical energies.
 This value needs to be determined once for each system so that the algorithm
 can minimize to zero instead of to a constant.
 See 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:paramfit_K"

\end_inset

 for an example.
\end_layout

\begin_layout Description
PARAMETERS_TO_FIT Sets how 
\emph on
paramfit 
\emph default
determines which parameters are to be fit.
 
\emph on
paramfit
\emph default
 does not fit electrostatics, but is capable of fitting every other element
 of the AMBER sum, which include bond harmonic force constant and equilibrium
 length, angle harmonic force constant and equilibrium angle, and proper
 and improper dihedral barrier height, phase shift, and periodicity.
 As a general rule, the fewer parameters there are to fit, the faster and
 more accurate the results will be.
 Avoid fitting more parameters than necessary.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

DEFAULT Fit all bond force constants and lengths, angle force constants
 and sizes, and dihedral force constants.
 This option will usually fit a very large number of parameters, and is
 rarely necessary.
 For most cases, only a few parameters are desired, and they should be fit
 individually.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

K_ONLY Do not fit any force field parameters.
 Only fit the value of K (the difference between quantum and classical energies
 for the system).
 This needs to be done once per system in order to determine K before any
 other parameters are fit, as attempting to fit it at the same time results
 in inaccurate results.
 Since small changes in K produce a great change in the overall least squares
 sum, the algorithm will tend to focus on changing the value of K and will
 neglect the parameters.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

LOAD The list of parameters to be fit is contained in a file that was previously
 created with the parameter setting runtype.
 Set PARAMETER_FILE_NAME to the location of this file.
 To create this file, run 
\emph on
paramfit
\emph default
 with 
\family typewriter
RUNTYPE=SET_PARAMS
\family default
.
\end_layout

\end_deeper
\begin_layout Description
SCEE The value by which to scale 1-4 electrostatics for the AMBER sum.
 Defaults to 1.2
\end_layout

\begin_layout Description
SCNB The value by which to scale 1-4 van der Waals for the AMBER sum.
 Defaults to 2.0.
\end_layout

\begin_layout Description
QM_ENERGY_UNITS The unit of energy in the quantum data file if you are fitting
 to energies.
 This will depend on your quantum package and settings used for the single
 point calculations.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

HARTREE Default
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

KCALMOL
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

KJMOL
\end_layout

\end_deeper
\begin_layout Description
QM_FORCE_UNITS The unit of force in the quantum data files if you are fitting
 to forces.
 This will depend on your quantum package and settings used for the force
 calculations.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

HARTREE_BOHR Default
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

KCALMOL_ANGSTROM
\end_layout

\end_deeper
\begin_layout Description
WRITE_ENERGY Saves the final AMBER energy and the quantum data for each
 structure to the specified file.
 Plotting these data is useful in verifying the results of the fitting and
 identifying any problem structures.
 See 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:paramfit_eval"

\end_inset

 for more on how to verify the accuracy of results.
\end_layout

\begin_layout Description
WRITE_FRCMOD When the fitting is complete, the parameters will be saved
 in a force field modification file at this location in addition to displaying
 them in standard output.
 This file may be used with LEaP to create a new 
\emph on
prmtop.

\emph default
 If no value is specified the file will not be created.
\end_layout

\begin_layout Description
SCATTERPLOTS Creates graphs of the bond, angles, and dihedrals found in
 the input files for each parameter that is being fit.
 These plots can be visualized using 
\emph on
scripts/scatterplots.sh 
\emph default
found in 
\emph on
paramfit's
\emph default
 source directory.
 This can be helpful in assessing the quality of the input conformations.
 No need to specify anything after the = sign for this parameter.
\end_layout

\begin_layout Description
SORT_MDCRDS
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

YES Sorts the input structures in order of increasing energy before conducting
 the fit.
 This can aid in identification of problem regions for the initial or fitted
 parameters, as they may be generally worse on structures in certain energy
 ranges.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

NO Default
\end_layout

\end_deeper
\begin_layout Description
COORDINATE_FORMAT The format of the input coordinate set.
 
\emph on
Paramfit 
\emph default
will return an error if the file is in an unexpected format.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

TRAJECTORY Default
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

RESTART
\end_layout

\end_deeper
\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:paramfit_algorithms"

\end_inset

Algorithm options
\end_layout

\begin_layout Standard

\emph on
Paramfit
\emph default
 implements two minimization algorithms: a simplex and a hybrid simplex-genetic
 algorithm (GA).
 The current version of 
\emph on
paramfit
\emph default
 incorporates numerous refinements to the genetic algorithm that require
 much less input from the user– it is no longer necessary to choose between
 the simplex or GA.
 This improved algorithm means that iterative fits are no longer necessary,
 and the algorithm will converge very close to or at the global minimum
 on a single run.
\end_layout

\begin_layout Standard
The genetic algorithm starts with a randomly generated solution set, which
 it recombines and alters in ways similar to evolution.
 The GA will start with many initial randomly generated sets of parameters.
 It will then determine which are the best by evaluating the AMBER sum,
 select them for recombination to produce a new set of parameters, randomly
 alter a few parameters slightly to prevent premature convergence, and iterate.
 Once several 
\begin_inset Quotes eld
\end_inset

generations
\begin_inset Quotes erd
\end_inset

 have passed without improvement, a loosely converging simplex algorithm
 is run on a random subset of the population, which is then allowed to recover
 for several generations before further simplex iterations are conducted.
 This hybrid approach dramatically speeds convergence to the global minimum,
 while maintaining the strengths of the genetic algorithm in searching a
 large, complex solution space with low sampling.
\end_layout

\begin_layout Standard
The following options in the job control file will control the behavior
 of the genetic algorithm.
 In general the default values for these options is sufficient to produce
 good results, and alterations to them will speed convergence.
 Options marked 
\emph on
internal algorithm parameter 
\emph default
should not need to be altered by the vast majority of users, as they are
 already set to their optimum.
 The algorithm's results should be independent of these values if they are
 within reasonable ranges (run the wizard for suggestions).
\end_layout

\begin_layout Description
OPTIMIZATIONS The integer number of possible optimizations the algorithm
 will use.
 Analogous to the population size in evolution; larger values require more
 function evaluations and are slower but produce better initial sampling,
 and smaller ones will delay convergence.
 Defaults to 50.
\end_layout

\begin_layout Description
SEARCH_SPACE If positive, the algorithm will search for new parameters for
 everything except dihedral phases within this percentage of the original
 value, where 1.0 will search within 
\begin_inset Formula $\pm100\%$
\end_inset

 of the value found in the input 
\emph on
prmtop
\emph default
.
 Defaults to searching over the entire range of valid values and ignoring
 the original value in the topology file.
 You may wish to alter this value if you know that the original parameters
 are good and you wish to search in their neighborhood.
\end_layout

\begin_layout Description
MAX_GENERATIONS The maximum number of iterations the algorithm is allowed
 to run before it returns the best non-converged optimization.
 Defaults to 50,000.
 If you find that you repeatedly need to increase this value compared to
 the default, there are likely significant problems with your system or
 insufficient input structures.
\end_layout

\begin_layout Description
GENERATIONS_TO_SIMPLEX The number of iterations in a row that must pass
 without improvement in the best parameter set for simplex refinements to
 be run on a random 5% of the populations.
 Set to 0 for a pure genetic algorithm.
 Smaller values will speed convergence but may result in retrieval of local
 minima.
 Defaults to 10.
\end_layout

\begin_layout Description
GENERATIONS_WITHOUT_SIMPLEX The number of generations that must pass between
 runs of simplex refinement, regardless of improvement in the best parameter
 set.
 These iterations serve as a recovery period for the population of the genetic
 algorithm, and allows time for the simplex results to be incorporated.
 If set to small or zero values, simplex refinement may run too often, resulting
 in convergence to a local minima and eliminating the global search properties
 of the genetic algorithm.
 Defaults to 10.
\end_layout

\begin_layout Description
GENERATIONS_TO_CONV The number of iterations in a row that must pass without
 improvement in the best parameter set for the algorithm to be considered
 converged.
 Set to a larger value for a longer but potentially more accurate run.
 Defaults to 50, which is too large for most systems.
 This counter increments along with the counter to trigger simplex refinement,
 and at the global minimum simplex refinement will produce no improvement
 on the population, allowing convergence.
\end_layout

\begin_layout Description
MUTATION_RATE 
\emph on
Internal algorithm parameter 
\emph default
The chance an allele (potential parameter) in the genetic algorithm population
 has to be randomly set to a new value each generation.
 Defaults to 0.05.
\end_layout

\begin_layout Description
PARENT_PERCENT 
\emph on
Internal algorithm parameter
\emph default
 The percentage of each generation that is allowed to pass on alleles to
 the next generation.
 Defaults to 0.25.
\end_layout

\begin_layout Standard
The simplex algorithm is excellent at refining a good set of input parameters,
 but can converge on physically unreasonable values (such as negative bond
 force constants) if given a naive guess.
 For this reason, the genetic algorithm is recommended for finding the global
 minimum or a close approximation thereof, and the simplex algorithm may
 be run on the resulting parameters to confirm the results, if desired.
 The simplex algorithm starts at an initial set of parameters and moves
 
\begin_inset Quotes eld
\end_inset

downhill
\begin_inset Quotes erd
\end_inset

 iteratively while sampling neighboring areas (much like an amoeba crawling
 along the function landscape), and converges when the improvement from
 one step to another becomes negligible.
 The simplex algorithm is generally faster than the GA, and excels at well-defin
ed systems with a small number of dimensions.
 This algorithm requires a very well-defined sample space, and the input
 structures should contain a good range over all the bonds, angles, and
 dihedrals that are to be optimized.
 Otherwise, the algorithm tends to wander and will converge in badly defined
 areas of the sample set.
 In smaller, well-defined systems with only a few parameters, this algorithm
 will outperform the genetic algorithm.
\end_layout

\begin_layout Standard
Choose the simplex algorithm if you wish to fit only a few parameters and
 have a large number of input conformations.
 You may specify the following options to fine-tune the step sizes taken,
 but for the vast majority of cases the defaults should suffice:
\end_layout

\begin_layout Description
BONDFC_dx Intrinsic length of parameter space for minimization.
 Used to determine the size of the steps to construct the initial simplex.
 Should be large enough that the steps sample a sufficiently large area
 but small enough to not move outside of normal parameter range.
 Bond force constant step size defaults to 5.0.
\end_layout

\begin_layout Description
BONDEQ_dx Bond equilibrium length step size.
 Defaults to 0.02.
\end_layout

\begin_layout Description
ANGLEFC_dx Angle force constant step size.
 Defaults to 1.0.
\end_layout

\begin_layout Description
ANGLEEQ_dx Angle equilibrium step size.
 Defaults to 0.05.
\end_layout

\begin_layout Description
DIHEDRALBH_dx Dihedral force constant step size.
 Defaults to 0.2.
\end_layout

\begin_layout Description
DIHEDRALN_dx Dihedral periodicity step size.
 Defaults to 0.01.
\end_layout

\begin_layout Description
DIHEDRALG_dx Dihedral phase step size.
 Defaults to 0.05.
\end_layout

\begin_layout Description
K_dx Step size for intrinsic difference constant.
 Defaults to 10.0.
\end_layout

\begin_layout Description
CONV_LIMIT Floating point number that details the convergence limit for
 the minimization.
 The smaller the number, the longer the algorithm will take to converge
 but the results may be more accurate.
 Defaults to 1.0E-15, which is very strict.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:paramfit_bounds"

\end_inset

Bounds Checking
\end_layout

\begin_layout Standard
In order to ensure that the algorithms can return meaningful results, bounds
 checking routines are included in 
\emph on
paramfit.
 
\emph default
The bounds checking functionality ensures that the algorithm's results are
 reasonable given the initial sample set, and also makes sure that the sample
 set is well-defined.
\end_layout

\begin_layout Standard
Since bonds and angles are approximately harmonic, the algorithm's result
 is reasonable if it lies within a well-defined area of the sample set.
 Bonds and angle values are therefore checked after the algorithm has finished
 running.
 In order to properly fit dihedrals, sample structures should span the entire
 range of phases for each dihedral that is to be fit.
 Dihedral checking is therefore accomplished before the algorithm begins
 to conduct the fit.
\end_layout

\begin_layout Standard
Bounds checking defaults to halting execution of the program upon reaching
 a failing condition.
 It is not recommended that this behavior be disabled, since the results
 of the fit are most likely inaccurate.
 Using the fitted parameters anyway will probably result in an inaccurate
 depiction of the molecule.
 Properly represented parameters in the input structures are crucial for
 a valid fit.
 Instead of using the parameters, fix the input structures so that data
 are provided in the missing ranges, which will be stated in the error message,
 and rerun the program twice: first in CREATE_INPUT mode to obtain quantum
 energies for the added structures and then in FIT mode to redo the fit.
\end_layout

\begin_layout Standard
If you 
\series bold
know
\series default
 that your input structures describe the parameters to be fit quite well,
 the selectivity of the bounds checking can be altered by the specifying
 the following options in the job control file.
 Use these options with caution, and verify the generated parameters carefully.
\end_layout

\begin_layout Description
CHECK_BOUNDS
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
=
\begin_inset space ~
\end_inset

ON The recommended and default option.
 This will halt execution when the bounds check fails.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

WARN Continue upon reaching a bounds failure condition, but output a warning.
 Do not use the parameters generated by this fit without careful verification!
 Use the error message and other results to determine if they are reasonable.
\end_layout

\end_deeper
\begin_layout Description
BOND_LIMIT Fitting results for bond lengths that are this many Angstroms
 away from the closest approximation in the input structures will result
 in a failing condition.
 Defaults to 0.1.
\end_layout

\begin_layout Description
ANGLE_LIMIT Fitting results for angles that are more than this many radians
 away from the closes approximation in the input structures will result
 in a failing condition.
 Defaults to 
\begin_inset Formula $0.05\pi$
\end_inset

.
\end_layout

\begin_layout Description
DIHEDRAL_SPAN The entire range of valid dihedral angles, 0 to 
\begin_inset Formula $\pi$
\end_inset

, for each dihedral that is to be fit should be spanned by this many input
 structure values, otherwise a failing condition will result.
 Defaults to 12, meaning that there needs to be a dihedral in every 
\begin_inset Formula $\frac{\pi}{12}$
\end_inset

 radian interval of the valid range.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:paramfit_multifit"

\end_inset

Multiple molecule fits
\end_layout

\begin_layout Standard

\emph on
Paramfit
\emph default
 supports fitting one or more parameters across multiple molecules, and
 contains several features to aid in force field development.
 The program is invoked differently, using a prmtop list and mdcrd list
 that specify topology and structures for each molecule to fit.
 Since the value of K is also system-dependent, you will need to fit K for
 each molecule individually.
\end_layout

\begin_layout Standard
Input topologies are specified in a 
\emph on
prmtop list, 
\emph default
which contains the filename of each topology and the value of K for that
 system, separated by a space.
 There are no comments permitted in this file.
 For example:
\end_layout

\begin_layout LyX-Code
molecule1.prmtop 50.0
\end_layout

\begin_layout LyX-Code
molecule2.prmtop 100.0
\end_layout

\begin_layout Standard
To obtain the value of K for each topology file, conduct a single-molecule
 fit using all the structures corresponding to that topology and put the
 resulting value in this file.
 This enables fitting to zero over multiple molecules.
\end_layout

\begin_layout Standard
Input coordinate files are stated in the 
\emph on
coordinate list, 
\emph default
which contains the filename of each coordinate set, the number of structures
 contained in it, and the filename containing the energy of each structure,
 separated by a space.
 Each energy file is exactly the same as single-molecule fits, containing
 the energy of each structure, one per line, in the same order as the correspond
ing coordinate file.
 If there are more structures available in the coordinate file than the
 number N specified, the first N structures will be used in the fit.
 An example coordinate list would be:
\end_layout

\begin_layout LyX-Code
molecule1.mdcrd 200 energy1.dat
\end_layout

\begin_layout LyX-Code
molecule2.mdcrd 100 energy2.dat
\end_layout

\begin_layout Standard
Parameters to fit must be present in all of the available topologies, and
 the parameter specification file (PARAMETER_FILE_NAME) should be created
 using a single-molecule invocation of 
\emph on
paramfit.
 
\emph default
Saved output files such as energy profile will be named according to the
 input file name, and a single frcmod will be written if specified.
 A multiple molecule invocation of 
\emph on
paramfit 
\emph default
uses the following command line options:
\end_layout

\begin_layout LyX-Code
paramfit -i Job_Control.in -pf prmtop_list -cf mdcrd_list [-v MEDIUM] [--random-s
eed seed]
\end_layout

\begin_layout Standard
The only alteration to the job control file necessary for multiple molecule
 fits is the deletion of the NSTRUCTURES parameter.
 NSTRUCTURES should not be specified as it is now ambiguous and will result
 in a program error.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:paramfit_forces"

\end_inset

Fitting Forces
\end_layout

\begin_layout Standard

\emph on
Paramfit 
\emph default
can fit to the forces on each atom within an input structure rather than
 to single point energies.
 In theory, this provides more data to the fitting algorithm and reduces
 noise by considering only the forces on atoms involved in a fitted parameter
 in the function evaluation.
 This section will walk you through the process of fitting forces using
 
\emph on
paramfit.
\end_layout

\begin_layout Standard
Currently, force fitting can only read in Gaussian output files, so input
 files will be created in the format accepted by that program.
 Specify in the QMHEADER file the 
\begin_inset Quotes eld
\end_inset

force
\begin_inset Quotes erd
\end_inset

 keyword, so Gaussian will print out the forces on each atom, and run 
\emph on
paramfit
\emph default
 in the CREATE_INPUT mode as normal.
 Then run Gaussian on those input files, keeping the resulting output with
 the same naming scheme, for example appending 
\begin_inset Quotes eld
\end_inset

.out
\begin_inset Quotes erd
\end_inset

 to the name of an input file to indicate its input.
 For example, in bash:
\end_layout

\begin_layout LyX-Code
for i in `ls output/Job.*.gjf`; do g09 < $i > $i.out; done
\end_layout

\begin_layout Standard
To run a fit with forces, you must specify the following options in the
 job control file, or use the wizard.
 
\emph on
Paramfit 
\emph default
will read in the output files from the Gaussian job using the same order
 and naming scheme, so alter the QM filename parameters so that they match
 the suffix you appended to Gaussian output files.
\end_layout

\begin_layout LyX-Code
# Enable force fitting function
\end_layout

\begin_layout LyX-Code
FUNC_TO_FIT=AMBER_FORCES
\end_layout

\begin_layout LyX-Code
# K irrelevant for force fitting
\end_layout

\begin_layout LyX-Code
K=0.0
\end_layout

\begin_layout LyX-Code
# Force units used by Gaussian
\end_layout

\begin_layout LyX-Code
QM_FORCE_UNITS=HARTREE_BOHR
\end_layout

\begin_layout LyX-Code
# Naming scheme of gaussian output files
\end_layout

\begin_layout LyX-Code
QMFILEOUTSTART=output/Job.
\end_layout

\begin_layout LyX-Code
QMFILEOUTEND=.gjf.out
\end_layout

\begin_layout Standard
Specify parameters to fit, algorithm and output options as described previously
 for fits to energy.
\end_layout

\begin_layout Standard
As forces fitting is still experimental, take care to evaluate the resulting
 parameters.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:paramfit_process"

\end_inset

Examples
\end_layout

\begin_layout Subsection
Setting up to fit
\end_layout

\begin_layout Standard
The fitting process with 
\emph on
paramfit 
\emph default
follows a specific order.
 Example job control files for each step and a description of the step follow.
\end_layout

\begin_layout Standard
First, write a job control file to create the input structures and run 
\emph on
paramfit:
\end_layout

\begin_layout LyX-Code
RUNTYPE=CREATE_INPUT
\end_layout

\begin_layout LyX-Code
# Trajectory has 50 structures
\end_layout

\begin_layout LyX-Code
NSTRUCTURES=50
\end_layout

\begin_layout LyX-Code
# Write in Gaussian format
\end_layout

\begin_layout LyX-Code
QMFILEFORMAT=GAUSSIAN
\end_layout

\begin_layout LyX-Code
# Prepend this file to QM inputs
\end_layout

\begin_layout LyX-Code
QMHEADER=Gaussian.header
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
paramfit -i Job_Control.in -p prmtop -c mdcrd
\end_layout

\begin_layout Standard
After all 50 input files have been created, run the quantum program on them.
 Once it's finished, extract the quantum energies from the output files
 using the provided script, or write your own.
 Since the example used Gaussian:
\end_layout

\begin_layout LyX-Code
$AMBERCLASSICHOME/src/paramfit/scripts/process_gaussian.x 
\backslash

\end_layout

\begin_layout LyX-Code
output_directory energies.dat
\end_layout

\begin_layout Standard
Now, or while the quantum jobs are running, since neither the energies nor
 the structures are needed yet, determine which parameters are to be fit
 and save them.
\end_layout

\begin_layout LyX-Code
RUNTYPE=SET_PARAMS
\end_layout

\begin_layout LyX-Code
# File to be created
\end_layout

\begin_layout LyX-Code
PARAMETER_FILE_NAME=saved_params
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
paramfit -i Job_Control.in -p prmtop
\end_layout

\begin_layout Standard
Now the quantum energies to fit have been obtained and the parameters to
 fit have been set, and the fitting process may begin.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:paramfit_K"

\end_inset

Fitting K
\end_layout

\begin_layout Standard
The first step in fitting is determining the value of K for a system.
 A job control file that will only fit K follows:
\end_layout

\begin_layout LyX-Code
RUNTYPE=FIT
\end_layout

\begin_layout LyX-Code
PARAMETERS_TO_FIT=K_ONLY
\end_layout

\begin_layout LyX-Code
# Use the simplex function
\end_layout

\begin_layout LyX-Code
FITTING_FUNCTION=SIMPLEX
\end_layout

\begin_layout Standard
Then,
\end_layout

\begin_layout LyX-Code
paramfit -i Job_Control.in -p prmtop -c mdcrd -q energies.dat
\end_layout

\begin_layout Standard
Take this value of K and put it back in the job control file when conducting
 the actual fit.
\end_layout

\begin_layout LyX-Code
RUNTYPE=FIT
\end_layout

\begin_layout LyX-Code
# Use the parameters specified earlier
\end_layout

\begin_layout LyX-Code
PARAMETERS_TO_FIT=LOAD
\end_layout

\begin_layout LyX-Code
PARAMETER_FILE_NAME=saved_params
\end_layout

\begin_layout LyX-Code
# Genetic algorithm options
\end_layout

\begin_layout LyX-Code
FITTING_FUNCTION=GENETIC
\end_layout

\begin_layout LyX-Code
OPTIMIZATIONS=500
\end_layout

\begin_layout LyX-Code
GENERATIONS_TO_CONV=10
\end_layout

\begin_layout LyX-Code
GENERATIONS_TO_SIMPLEX=2
\end_layout

\begin_layout LyX-Code
GENERATIONS_WITHOUT_SIMPLEX=5
\end_layout

\begin_layout LyX-Code
# Save parameters so they can be read into leap
\end_layout

\begin_layout LyX-Code
WRITE_FRCMOD=fitted_params.frcmod
\end_layout

\begin_layout Standard
And call 
\emph on
paramfit
\emph default
 just as before.
 This example fit will create a force field modification file that can later
 be read into 
\emph on
LEaP
\emph default
 to create a new 
\emph on
prmtop 
\emph default
with the modified parameters for the molecule.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:paramfit_eval"

\end_inset

Evaluating Results
\end_layout

\begin_layout Standard
When using 
\emph on
paramfit
\emph default
, it is important to verify the accuracy of the fitted parameters for your
 input structures.
 The WRITE_ENERGY option in the Job Control file is useful for this.
 Set it to a filename and 
\emph on
paramfit 
\emph default
will write the final AMBER energy of each structure next to the quantum
 energy for the same structure in a file that can be easily graphed.
\end_layout

\begin_layout Standard
If you have gnuplot, a script has been provided to quickly show each structure's
 energies.
 Assuming your energy file is named energy.dat:
\end_layout

\begin_layout LyX-Code
$AMBERCLASSICHOME/src/paramfit/scripts/plot_energy.x energy.dat
\end_layout

\begin_layout Standard
The resulting graph makes the identification of problem structures much
 easier, and gives a good visualization of the fit.
 In general, carefully validate parameters generated by 
\emph on
paramfit
\emph default
 against other data before conducting large simulations.
\end_layout

\begin_layout Standard
The SCATTERPLOT option in the job control file can also be useful in assessing
 the quality of the input structures.
 If this option is set, 
\emph on
paramfit
\emph default
 will dump a variety of data files indicating the value for all fitted bonds,
 angles, and dihedrals in the input conformations.
 These data may be visualized if you have the program gnuplot by running
 the following command in the directory where 
\emph on
paramfit
\emph default
 was run:
\end_layout

\begin_layout LyX-Code
$AMBERCLASSICHOME/src/paramfit/scripts/scatterplots.sh
\end_layout

\begin_layout Standard
The resulting graphs feature different colored points for each bond, angle,
 and dihedral type that is being fit for each of the input structures.
 This is useful in evaluating if the results of the fit are reasonable–
 for example, if the algorithm converges with an equilibrium bond length
 that is not similar to any of the structures, that parameter may not be
 accurate.
\end_layout

\begin_layout Chapter
nabc and libsff
\end_layout

\begin_layout Section

\series bold
Introduction
\end_layout

\begin_layout Standard
The NAB language compiler 
\emph on
nab2c
\emph default
 (which converts NAB source code to C, for subsequent compilation) was written
 in the 1990's by Tom Macke.
 The original design idea was to create a 
\begin_inset Quotes eld
\end_inset

molecular awk
\begin_inset Quotes erd
\end_inset

: a scripting language for manipulation of (macro-)molecules that would
 be primarily used to create short scripts to carry out molecular manipulations.
 It was quickly realized that manipulations like force field minimization
 would be useful, and the Amber-compatible molecular mechanics routines
 were added by David Case as 
\emph on
sff
\emph default
, a 
\begin_inset Quotes eld
\end_inset

simple force field
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Over the years, 
\emph on
sff
\emph default
 evolved to keep pace with (and in many cases drive) Amber developments
 involving implicit force fields, including generalized Born, Poisson-Boltzmann
 and RISM approaches.
 In keeping with its original motivation, 
\emph on
sff
\emph default
 concentrated on implicit solvation, leaving explicit solvent and periodic
 simulations to the main Amber programs 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
.
 The 
\emph on
sff
\emph default
 routines were parallelized using both openmp and MPI, and second derivatives
 of the generalized Born model were added by Russ Brown.
\begin_inset CommandInset citation
LatexCommand citep
key "Brown06"
literal "true"

\end_inset

 Apart from the lack of a GPU implementation, the routines in 
\emph on
sff
\emph default
 are the most general and efficient ones in the Amber package.
 In particular, 
\emph on
sff
\emph default
 excels at generalized Born simulations on large systems, benefitting from
 an advanced nonbonded list builder, and from the hierarchical charge partition
 model described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:hcp"

\end_inset

.
\end_layout

\begin_layout Standard
As a first step, we have prepared sample files in 
\family typewriter
$AMBERCLASSICHOME/AmberTools/test/nabc
\family default
, which illustrate how to use most of the 
\emph on
sff
\emph default
 functionality directly from a stand-alone C driver.
 The 
\emph on
Makefile
\emph default
 in this directory can guide you through running several sample calculations.
 Looking at the code, and its comments, along with the header file (
\family typewriter
$AMBERCLASSICHOME/include/sff.h
\family default
) should go a long way towards allowing direct integration into C codes,
 without any reference to the NAB compiler.
 The rest of this chapter has documentation for 
\emph on
libsff
\emph default
.
\end_layout

\begin_layout Section

\series bold
Basic molecular mechanics routines
\begin_inset CommandInset label
LatexCommand label
name "sec:NAB-Basic-molecular-mechanics"

\end_inset


\end_layout

\begin_layout LyX-Code

\family sans
int readparm
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
readparm
\end_layout

\end_inset

( molecule m, string parmfile );
\end_layout

\begin_layout LyX-Code

\family sans
int mme_init
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mme
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

init
\end_layout

\end_inset

( molecule mol, string aexp, string aexp2, point xyz_ref[], string filename
 );
\end_layout

\begin_layout LyX-Code

\family sans
int mm_options
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mm
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

options
\end_layout

\end_inset

( string opts );
\end_layout

\begin_layout LyX-Code

\family sans
float mme
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mme
\end_layout

\end_inset

( point xyz[], point grad[], int iter );
\end_layout

\begin_layout LyX-Code

\family sans
float mme_rattle
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mme
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

rattle
\end_layout

\end_inset

( point xyz[], point grad[], int iter );
\end_layout

\begin_layout LyX-Code

\family sans
int conjgrad
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
conjgrad
\end_layout

\end_inset

( float x[], int n, float fret, float func(), float rmsgrad, 
\begin_inset Newline newline
\end_inset

           float dfpred, int maxiter );
\end_layout

\begin_layout LyX-Code

\family sans
int md
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
md
\end_layout

\end_inset

( int n, int maxstep, point xyz[], point f[], float v[], float func );
\end_layout

\begin_layout LyX-Code

\family sans
int getxv
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getxv
\end_layout

\end_inset

( string filename, int natom, float start_time, float x[], float v[] );
\end_layout

\begin_layout LyX-Code

\family sans
int putxv
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
putxv
\end_layout

\end_inset

( string filename, string title, int natom, float start_time, 
\begin_inset Newline newline
\end_inset

           float x[], float v[] );
\end_layout

\begin_layout LyX-Code

\family sans
void mm_set_checkpoint
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mm
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

set
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

checkpoint
\end_layout

\end_inset

( string filename );
\end_layout

\begin_layout Standard

\family sans
readparm
\family default
 reads an AMBER parameter-topology file, created by 
\family sans
tleap
\family default
 or with other AMBER programs, and sets up a data structure which we call
 a "parmstruct".
 This is part of the molecule, but is not directly accessible (yet) to 
\family sans
nab
\family default
 programs.
 You would use this command as an alternative to
\family sans
 getpdb_prm()
\family default
.
 You need to be sure that the molecule used in the 
\family sans
readparm()
\family default
 call has been created by calling 
\family sans
getpdb()
\family default
 with a PDB file that has been created by tleap itself (i.e., that has exactly
 the Amber atoms in the correct order).
 As noted above, the 
\family sans
readparm()
\family default
 routine is primarily intended for cases where 
\family sans
getpdb_prm()
\family default
 fails (i.e., when you need to run 
\shape italic
tleap
\shape default
 by hand).
\end_layout

\begin_layout Standard

\family sans
setxyz_from_mol()
\family default
 copies the atomic coordinates of 
\family sans
mol
\family default
 to the array 
\family sans
xyz
\family default
.
 
\family sans
setmol_from_xyz()
\family default
 replaces the atomic coordinates of 
\family sans
mol
\family default
 with the contents of 
\family sans
xyz
\family default
.
 Both return the number of atoms copied with a 
\family sans
0
\family default
 indicating an error occurred.
\end_layout

\begin_layout Standard
The 
\family sans
getxv()
\family default
 and 
\family sans
putxv()
\family default
 routines read and write non-periodic Amber-style restart files.
 Velocities are read if present.
 
\end_layout

\begin_layout Standard
The 
\family sans
getxyz()
\family default
 and 
\family sans
putxyz()
\family default
 routines are used in conjunction with the 
\family sans
mm_set_checkpoint()
\family default
 routine to write checkpoint or restart files.
 The coordinates are written at higher precision than to an AMBER restart
 file, i.e., with sufficiently high precision to restart even a Newton-Raphson
 minimization where the error in coordinates may be on the order of
\begin_inset Formula $10^{-12}$
\end_inset

 .
 The checkpoint files are written at iteration intervals that are specified
 by the 
\shape italic
nchk
\shape default
 or 
\shape italic
nchk2
\shape default
 parameters to the 
\family sans
mm_options()
\family default
 routine (see below).
 The checkpoint file names are determined by the filename string that is
 passed to 
\family sans
mm_set_checkpoint()
\family default
.
 If filename contains one or more %d format specifiers, then the file name
 will be a modification of filename wherein the leftmost %d of filename
 is replaced by the iteration count.
 If filename contains no %d format specifier, then the file name will be
 filename with the iteration count appended on the right.
\end_layout

\begin_layout Standard
The 
\family sans
mme_init()
\family default
 function must be called after 
\family sans
mm_options()
\family default
 and before calls to 
\family sans
mme().

\family default
 It sets up parameters for future force field evaluations, and takes as
 input an 
\family sans
nab
\family default
 molecule.
 The string 
\family sans
aexp
\family default
 is an atom expression that indicates which atoms are to be allowed to move
 in minimization or dynamics: atoms that do not match 
\family sans
aexp
\family default
 will have their positions in the gradient vector set to zero.
 A 
\family sans
NULL
\family default
 atom expression will allow all atoms to move.
 The second string, 
\family sans
aexp2
\family default
 identifies atoms whose positions are to be restrained to the positions
 in the array 
\family sans
xyz_ref
\family default
.
 The strength of this restraint will be given by the 
\family sans
wcons
\family default
 variable set in 
\family sans
mm_options()
\family default
.
 A 
\family sans
NULL
\family default
 value for 
\family sans
aexp2
\family default
 will cause all atoms to be constrained.
 The last parameter to 
\family sans
mme_init()
\family default
 is a file name without extension for the output trajectory file.
 This should be NULL if no output file is desired.
 NAB writes trajectories in the 
\emph on
netCDF
\emph default
 format, which can be read by 
\emph on
cpptraj
\emph default
, and either analyzed, or converted to another format.
 The default netCDF extension of .nc is automatically added to the file name.
\end_layout

\begin_layout Standard

\family sans
mm_options()
\family default
 is used to set parameters
\family sans
, and
\family default
 must be called before 
\family sans
mme_init()
\family default
; if you change options through a call to 
\family sans
mm_options()
\family default
 without a subsequent call to 
\family sans
mme_init()
\family default
 you may get incorrect calculations with no error messages.
 Beware.
 The 
\family sans
opts
\family default
 string contains keyword/value pairs of the form 
\family sans
keyword=value
\family default
 separated by white space or commas.
 Allowed values are shown in the following table.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="40" columns="3">
<features islongtable="true" headBottomDL="true" longtabularalignment="center">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row endhead="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ntpr
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ntpr
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency of printing of the energy and its components.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
e_debug
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
e
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

debug
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If nonzero printout additional components of the energy.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gb_debug
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gb
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

debug
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If nonzero printout information about Born first derivatives.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gb2_debug
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gb2
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

debug
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If nonzero printout information about Born second derivatives.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nchk
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
nchk
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency of writing checkpoint file during first derivative calculation,
 i.e., in the mme() routine.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nchk2
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
nchk2
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency of writing checkpoint file during second derivative calculation,
 i.e., in the mme2() routine.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nsnb
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
nsnb
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency at which the non-bonded list is updated.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ns
\family default
cm
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
nscm
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If > 0, remove translational and rotational center-of-mass (COM) motion
 after every nscm steps.
 For Langevin dynamics (gamma_ln>0) without HCP (hcp=0), the position of
 the COM is reset to zero every nscm steps, but the velocities are not affected.
 With HCP (hcp>0) COM translation and rotation are also removed, with or
 without Langevin dynamics.
\end_layout

\begin_layout Plain Layout
It is strongly recommended that this option be used whenever HCP is used.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
cut
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cut
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Non-bonded cutoff, in angstroms.
 This parameter is ignored if hcp > 0.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
wcons
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wcons
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Restraint weight for keeping atoms close to their positions in 
\family sans
xyz_ref
\family default
 (see 
\shape italic
mme_init
\shape default
).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
dim
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dim
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of spatial dimensions; supported values are 3 and 4.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
k4d
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
k4d
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Force constant for squeezing out the fourth dimensional coordinate, if dim=4.
 If this is nonzero, a penalty function will be added to the bounds-violation
 energy, which is equal to 0.5 * 
\shape italic
k4d * w * w
\shape default
, where 
\begin_inset Formula $w$
\end_inset

 is the value of the fourth dimensional coordinate.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time step, ps.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
t
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
t
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial time, ps.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rattle
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rattle
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to 1, bond lengths will be constrained to their equilibrium values,
 for dynamics; if set to 2, bonds to hydrogens will be constrained; default
 is not to include such constraints.
 Note: if you want to use rattle (effectively "shake") for minimization,
 you do not need to set this parameter; rather, pass the 
\family sans
mme_rattle()
\family default
 function to 
\shape italic
conjgrad()
\shape default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
tautp
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tautp
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
999999.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Temperature coupling parameter, in ps.
 The time constant determines the strength of the weak-coupling ("Berendsen")
 temperature bath.
\begin_inset CommandInset citation
LatexCommand cite
key "Berendsen84"
literal "true"

\end_inset

 Set 
\shape italic
tautp
\shape default
 to a very large value (e.g.
 9999999.) in order to turn off coupling and revert to Newtonian dynamics.
 This variable only has an effect if 
\shape italic
gamma_ln
\shape default
 remains at its default value of zero; if 
\shape italic
gamma_ln
\shape default
 is not zero, Langevin dynamics is assumed, as discussed below.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gamma_ln
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gamma
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

ln
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Collision frequency for Langevin dynamics, in
\begin_inset Formula $ps^{-1}$
\end_inset

 .
 Values in the range 2-5
\begin_inset Formula $ps^{-1}$
\end_inset

 often give acceptable temperature control, while allowing transitions to
 take place.
\begin_inset CommandInset citation
LatexCommand cite
key "Loncharich92"
literal "true"

\end_inset

 Values near 50
\begin_inset Formula $ps^{-1}$
\end_inset

 correspond to the collision frequency for liquid water, and may be useful
 if rough physical time scales for motion are desired.
 The so-called BBK integrator is used here.
\begin_inset CommandInset citation
LatexCommand cite
key "Brooks85"
literal "true"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
temp0
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
temp0
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
300.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Target temperature, K.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
vlimit
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
vlimit
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum absolute value of any component of the velocity vector.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ntpr_md
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ntpr
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

md
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Printing frequency for dynamics information to stdout.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ntwx
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ntwx
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency for dumping coordinates to traj_file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
zerov
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
zerov
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If nonzero, then the initial velocities will be set to zero.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
tempi
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tempi
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If 
\shape italic
zerov
\shape default
=0 and 
\shape italic
tempi
\shape default

\begin_inset Formula $>$
\end_inset

0, then the initial velocities will be randomly chosen for this temperature.
 If both 
\shape italic
zerov
\shape default
 and 
\shape italic
tempi
\shape default
 are zero, the velocities passed into the md() function will be used as
 the initial velocities; this combination is useful to continue an existing
 trajectory.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
genmass
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
genmass
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The general mass to use for MD if individual masses are not read from a
 prmtop file; value in amu.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
diel
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
diel
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code for the dielectric model.
 "C" gives a dielectric constant of 1; "R" makes the dielectric constant
 equal to distance in angstroms; "RL" uses the sigmoidal function of Ramstein
 & Lavery, PNAS 
\series bold
85
\series default
, 7231 (1988); "RL94" is the same thing, but speeded up assuming one is
 using the Cornell 
\shape italic
et al
\shape default
 force field; "R94" is a distance-dependent dielectric, again with speedups
 that assume the Cornell 
\shape italic
et al.

\shape default
 force field.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
dielc
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dielc
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This is the dielectric constant used for 
\shape italic
non-GB
\shape default
 simulations.
 It is implemented in routine 
\family sans
mme_init()
\family default
 by scaling all of the charges by 
\family sans
sqrt(dielc)
\family default
.
 This means that you need to set this (if desired) in 
\family sans
mm_options()
\family default
 before calling 
\family sans
mme_init()
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gb
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gb
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "nab_gb"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to 0 then GB is off.
 Setting gb=1 turns on the Hawkins, Cramer, Truhlar (HCT) form of pairwise
 generalized Born model for solvation.
 See ref 
\begin_inset CommandInset citation
LatexCommand cite
key "Tsui01"
literal "true"

\end_inset

 for details of the implementation; this is equivalent to the 
\shape italic
igb=1
\shape default
 option in 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
.
 Set diel to "C" if you use this option.
 Setting gb=2 turns on the Onufriev, Bashford, Case (OBC) variant of GB,
\begin_inset CommandInset citation
LatexCommand cite
key "Onufriev00,Onufriev04"
literal "true"

\end_inset

 with 
\begin_inset Formula $\alpha$
\end_inset

=0.8, 
\begin_inset Formula $\beta$
\end_inset

=0.0 and 
\begin_inset Formula $\gamma$
\end_inset

=2.909.
 This is equivalent to the 
\shape italic
igb=2
\shape default
 option in 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
.
 Setting gb=5 just changes the values of 
\begin_inset Formula $\alpha$
\end_inset

, 
\begin_inset Formula $\beta$
\end_inset

 and 
\begin_inset Formula $\gamma$
\end_inset

 to 1.0, 0.8, and 4.85, respectively, corresponding to the 
\shape italic
igb=5
\shape default
 option in 
\emph on
sander
\emph default
.
 Setting gb=7 turns on the GB Neck variant of GB,
\begin_inset CommandInset citation
LatexCommand citep
key "Mongan07"
literal "true"

\end_inset

 corresponding to the 
\emph on
igb=7
\emph default
 option in 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
.
 Setting gb=8 turns on the updated GB Neck variant of GB, corresponding
 to the 
\emph on
igb=8
\emph default
 option in 
\emph on
sander
\emph default
 and 
\emph on
pmemd
\emph default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rgbmax
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rgbmax
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
999.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A maximum value for considering pairs of atoms to contribute to the calculation
 of the effective Born radii.
 The default value means that there is effectively no cutoff.
 Calculations will be sped up by using smaller values, say around 15.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 or so.
 This parameter is ignored if hcp > 0.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gbsa
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gbsa
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to 1, add a surface-area dependent energy equal to surfen*SASA, where
 surften is discussed below, and SASA is an approximate surface area term.
 NAB uses the "LCPO" approximation developed by Weiser, Shenkin, and Still.
\begin_inset CommandInset citation
LatexCommand cite
key "Weiser99"
literal "true"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
surften
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
surften
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.005
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Surface tension (see 
\shape italic
gbsa
\shape default
, above) in kcal/mol/
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset


\begin_inset Formula $^{2}$
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
epsext
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
epsext
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
78.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Exterior dielectric for generalized Born; interior dielectric is always
 1.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
kappa
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
kappa
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inverse of the Debye-Hueckel length, if gb is turned on, in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset


\begin_inset Formula $^{-1}$
\end_inset

.
 This parameter is related to the ionic strength as 
\begin_inset Formula $\kappa=[8\pi\beta I/\varepsilon]^{1/2}$
\end_inset

, where 
\begin_inset Formula $I$
\end_inset

 is the ionic strength (same as the salt concentration for a 1-1 salt).
 For 
\begin_inset Formula $T$
\end_inset

=298.15 and 
\begin_inset Formula $\varepsilon$
\end_inset

=78.5, 
\begin_inset Formula $\kappa=(0.10806\,I)^{1/2}$
\end_inset

, where 
\begin_inset Formula $I$
\end_inset

 is in [M].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
static_arrays
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
static_arrays
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to 1, do not allocate dynamic arrays for each call to the 
\family sans
mme()
\family default
 and 
\family sans
mme2()
\family default
 functions.
 The default value of 1 reduces computation time by avoiding array allocation.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
blocksize
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
blocksize
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The granularity with which loop iterations are assigned to OpenMP threads
 or MPI processes.
 For MPI, a 
\family sans
blocksize
\family default
 as small as 1 results in better load balancing during parallel execution.
 For OpenMP, 
\family sans
blocksize
\family default
 should not be smaller than the number of floating-point numbers that fit
 into one cache line in order to avoid performance degradation through 'false
 sharing'.
 For ScaLAPACK, the optimum 
\family sans
blocksize
\family default
 is not know, although a value of 1 is probably too small.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
hcp
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
hcp
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Use the GB-HCP model:
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

0 No GB-HCP.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

1 1-charge approximation.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

2 2-charge approximation.
\end_layout

\begin_layout Description
=
\begin_inset space ~
\end_inset

4 2-charge based on optimal point charge approximation (recommended for
 GB-HCP).
\end_layout

\begin_layout Plain Layout
See Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:hcp"

\end_inset

 for detailed instructions on using the GB-HCP.
 It is strongly recommended that the NSCM option above be used whenever
 GB-HCP is used.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dhcp
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Adjusts the separation between the charges used to approximate uncharged
 components for hcp=4.
 dhcp is empirically determined so that the RMS error in force, compared
 to GB without further approximation, is minimized.
 Our testing on various structures suggests that the optimal value for dhcp
 can be found within the range of 0.1 and 0.4.
 See Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:hcp"

\end_inset

 for details.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hcp_h1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GB-HCP level 1 threshold distance.
 The recommended level 1 threshold distance for amino acids is 15A.
 For structures with nucleic acids the recommended level 1 threshold distance
 is 21A.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hcp_h2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GB-HCP level 2 threshold distance.
 The recommended level 2 threshold distance for proteins is 50A.
 For structures with nucleic acids the recommended level 2 threshold distance
 is 90A.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hcp_h3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
150
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GB-HCP level 3 threshold distance.
 The recommended level 3 threshold distance for amino acids is 150A.
 For structures with nucleic acids the recommended level 1 threshold distance
 is 169A.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The 
\family sans
mme()
\family default
 function takes a coordinate set and returns the energy in the function
 value and the gradient of the energy in 
\family sans
grad
\family default
.
 The input parameter 
\shape italic
iter
\shape default
 is used to control printing (see the 
\shape italic
ntpr
\shape default
 variable) and non-bonded updates (see 
\shape italic
nsnb
\shape default
).
 The 
\family sans
mme_rattle()
\family default
 function has the same interface, but constrains the bond lengths and returns
 a corrected gradient.
 If you want to minimize with constrained bond lengths, pass 
\shape italic
mme_rattle
\shape default
 and not 
\shape italic
mme
\shape default
 to the 
\shape italic
conjgrad
\shape default
 routine.
\end_layout

\begin_layout Standard
The 
\family sans
conjgrad()
\family default
 function will carry out conjugate gradient minimization of the function
 
\family sans
func
\family default
 that depends upon 
\family sans
n
\family default
 parameters, whose initial values are in the 
\family sans
x
\family default
 array.
 The function 
\family sans
func
\family default
 must be of the form 
\family sans
func( x[], g[], iter )
\family default
, where 
\family sans
x
\family default
 contains the input values, and the function value is returned through the
 function call, and its gradient with respect to 
\family sans
x
\family default
 through the 
\family sans
g
\family default
 array.
 The iteration number is passed through 
\family sans
iter
\family default
, which 
\family sans
func
\family default
 can use for whatever purpose it wants; a typical use would just be to determine
 when to print results.
 The input parameter 
\family sans
dfpred
\family default
 is the expected drop in the function value on the first iteration; generally
 only a rough estimate is needed.
 The minimization will proceed until 
\family sans
maxiter
\family default
 steps have been performed, or until the root-mean-square of the components
 of the gradient is less than 
\family sans
rmsgrad.

\family default
 The value of the function at the end of the minimization is returned in
 the variable 
\family sans
fret
\family default
.
 
\family sans
conjgrad
\family default
 can return a variety of exit codes: 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3in">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
Return codes for conjgrad routine
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $>$
\end_inset

0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
minimization converged; gives number of final iteration
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bad line search; probably an error in the relation of the function to its
 gradient (perhaps from round-off if you push too hard on the minimization).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
search direction was uphill
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exceeded the maximum number of iterations
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
could not further reduce function value
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Finally, the 
\family sans
md
\family default
 function will run 
\family sans
maxstep
\family default
 steps of molecular dynamics, using 
\family sans
func
\family default
 as the force field (this would typically be set to a function like 
\family sans
mme
\family default
.) The number of dynamical variables is given as input parameter 
\family sans
n
\family default
: this would be 3 times the number of atoms for ordinary cases, but might
 be different for other force fields or functions.
 The arrays 
\family sans
x[], f[]
\family default
 and 
\family sans
v[]
\family default
 hold the coordinates, gradient of the potential, and velocities, respectively,
 and are updated as the simulation progresses.
 The method of temperature regulation (if any) is specified by the variables
 
\shape italic
tautp
\shape default
 and 
\shape italic
gamma_ln
\shape default
 that are set in 
\shape italic
mm_options()
\shape default
.
\end_layout

\begin_layout Standard

\series bold
Note:
\series default
 In versions of NAB up to 4.5.2, there was an additional input variable to
 
\family sans
md()
\family default
 called 
\shape italic
minv
\shape default
 that reserved space for the inverse of the masses of the particles; this
 has now been removed.
 This change is not backwards compatible: you must modify existing NAB scripts
 that call 
\family sans
md()
\family default
 to remove this variable.
\end_layout

\begin_layout Section
NetCDF read/write routines
\end_layout

\begin_layout Standard
NAB has several routines for reading/writing Amber NetCDF trajectory and
 restart files.
 All of the routines except netcdfGetNextFrame() return a 1 on error, 0
 on success.
 The netcdfGetNextFrame() routine returns 0 on error, 1 on success to make
 it easier to use in loops.
 For an example of how to use NetCDF files in NAB see the NAB script in
 
\emph on
$AMBERCLASSICHOME/test/nab/tnetcdf.nab
\emph default
.
\end_layout

\begin_layout Subsection
struct AmberNetcdf
\end_layout

\begin_layout Standard
An AmberNetcdf struct must be used to interface with the netcdf commands
 in NAB (except netcdfWriteRestart()).
 It contains many fields, but the following are the ones commonly needed
 by users:
\end_layout

\begin_layout Description
temp0 Temperature of current frame (if temperature is present).
\end_layout

\begin_layout Description
restartTime Simulation time if NetCDF restart.
\end_layout

\begin_layout Description
isNCrestart 0 if trajectory, 1 if restart.
\end_layout

\begin_layout Description
ncframe Number of frames in the file.
\end_layout

\begin_layout Description
currentFrame Current frame number.
\end_layout

\begin_layout Description
ncatom Number of atoms.
\end_layout

\begin_layout Description
ncatom3 Number of coordinates (ncatom * 3).
\end_layout

\begin_layout Description
velocityVID If not -1, velocity information is present.
\end_layout

\begin_layout Description
TempVID If not -1, temperature information is present.
\end_layout

\begin_layout Standard
In order to use it, you must include nab_netcdf.h and declare it as a struct,
 e.g.:
\end_layout

\begin_layout LyX-Code
#include 
\begin_inset Quotes eld
\end_inset

nab_netcdf.h
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
struct AmberNetcdf NC;
\end_layout

\begin_layout Subsection
netcdfClose
\end_layout

\begin_layout LyX-Code
int netcdfClose(struct AmberNetcdf NC)
\end_layout

\begin_layout Standard
Close NetCDF file associated with 
\series bold
NC
\series default
.
\end_layout

\begin_layout Subsection
netcdfCreate
\end_layout

\begin_layout LyX-Code
int netcdfCreate(struct AmberNetcdf NC, string filename, int natom, int
 isBox)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct to set up.
\end_layout

\begin_layout Description
filename Name of file to create.
\end_layout

\begin_layout Description
natom Number of atoms in file.
\end_layout

\begin_layout Description
isBox 0 = No box coordinates, 1 = Has box coordinates.
\end_layout

\end_deeper
\begin_layout Standard
Create NetCDF trajectory file and associate with struct 
\series bold
NC
\series default
.
 For writing NetCDF restarts, use netcdfWriteRestart().
\end_layout

\begin_layout Subsection
netcdfDebug
\end_layout

\begin_layout LyX-Code
int netcdfDebug(struct AmberNetcdf NC)
\end_layout

\begin_layout Standard
Print debug information for NetCDF file associated with 
\series bold
NC
\series default
.
\end_layout

\begin_layout Subsection
netcdfGetFrame
\end_layout

\begin_layout LyX-Code
int netcdfGetFrame(struct AmberNetcdf NC, int set, float X[], float box[])
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct, previously set up and opened.
\end_layout

\begin_layout Description
set Frame number to read.
\end_layout

\begin_layout Description
X Array to store coordinates (dimension NC.ncatom3).
\end_layout

\begin_layout Description
box Array of dimension 6 to store box coordinates if present (X Y Z ALPHA
 BETA GAMMA); can be NULL.
\end_layout

\end_deeper
\begin_layout Standard
Get coordinates at frame 
\series bold
set
\series default
 (starting from 0).
\end_layout

\begin_layout Subsection
netcdfGetNextFrame
\end_layout

\begin_layout LyX-Code
int netcdfGetNextFrame(struct AmberNetcdf NC, float X[], float box[])
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct, previously set up and opened.
\end_layout

\begin_layout Description
X Array to store coordinates (dimension NC.ncatom3).
\end_layout

\begin_layout Description
box Array of size 6 to store box coordinates if present (X Y Z ALPHA BETA
 GAMMA); can be NULL.
\end_layout

\end_deeper
\begin_layout Standard
Get the coordinates at frame 
\series bold
NC.currentFrame
\series default
 and increment 
\series bold
NC.currentFrame
\series default
 by one.
 Unlike the other netcdf routines, this returns 1 on success and 0 on error
 to make it easy to use in loops.
\end_layout

\begin_layout Subsection
netcdfGetVelocity
\end_layout

\begin_layout LyX-Code
int netcdfGetVelocity(struct AmberNetcdf NC, int set, float V[])
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct, previously set up and opened.
\end_layout

\begin_layout Description
set Frame number to read.
\end_layout

\begin_layout Description
V Array to store velocities (dimension NC.ncatom3).
\end_layout

\end_deeper
\begin_layout Standard
Get velocities at frame 
\series bold
set
\series default
 (starting from 0).
 
\end_layout

\begin_layout Subsection
netcdfInfo
\end_layout

\begin_layout LyX-Code
int netcdfInfo(struct AmberNetcdf NC)
\end_layout

\begin_layout Standard
Print information for 
\series bold
NC
\series default
, including file type, presence of velocity/box/temperature info, and number
 of atoms, coordinates, and frames present.
\end_layout

\begin_layout Subsection
netcdfLoad
\end_layout

\begin_layout LyX-Code
int netcdfLoad(struct AmberNetcdf NC, string filename)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct to set up.
\end_layout

\begin_layout Description
filename Name of NetCDF file to load.
\end_layout

\end_deeper
\begin_layout Standard
Load NetCDF file filename and set up the AmberNetcdf structure 
\series bold
NC
\series default
 for reading.
 The file type is automatically detected.
\end_layout

\begin_layout Subsection
netcdfWriteFrame
\end_layout

\begin_layout LyX-Code
int netcdfWriteFrame(struct AmberNetcdf NC, int set, float X[], float box[])
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct, previously set up and opened.
\end_layout

\begin_layout Description
set Frame number to write.
\end_layout

\begin_layout Description
X Array of coordinates to write (dimension NC.ncatom3).
\end_layout

\begin_layout Description
box Array of size 6 of box coordinates to write (X Y Z ALPHA BETA GAMMA);
 can be NULL.
\end_layout

\end_deeper
\begin_layout Standard
Write to NetCDF trajectory at frame 
\series bold
set
\series default
 (starting from 0).
 NOTE: This routine is for writing NetCDF trajectories only; to write NetCDF
 restarts use netcdfWriteRestart().
\end_layout

\begin_layout Subsection
netcdfWriteNextFrame
\end_layout

\begin_layout LyX-Code
int netcdfWriteNextFrame(struct AmberNetcdf NC, float X[], float box[])
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
NC AmberNetcdf struct, previously set up and opened.
\end_layout

\begin_layout Description
X Array of coordinates to write (dimension NC.ncatom3).
\end_layout

\begin_layout Description
box Array of size 6 of box coordinates to write (X Y Z ALPHA BETA GAMMA);
 can be NULL.
\end_layout

\end_deeper
\begin_layout Standard
Write coordinates to frame 
\series bold
NC.currentFrame
\series default
 and increment 
\series bold
NC.currentFrame
\series default
 by one.
 NOTE: This routine is for writing NetCDF trajectories only; to write NetCDF
 restarts use netcdfWriteRestart().
\end_layout

\begin_layout Subsection
netcdfWriteRestart
\end_layout

\begin_layout LyX-Code
int netcdfWriteRestart(string filename, int natom, float X[], float V[],
 
\end_layout

\begin_layout LyX-Code
                       float box[], float time, float temperature)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
filename Name of NetCDF restart file to create.
\end_layout

\begin_layout Description
natom Number of atoms in netcdf restart file.
\end_layout

\begin_layout Description
X Array of coordinates to write (dimension natom*3).
\end_layout

\begin_layout Description
V Array of velocities to write (dimension natom*3); can be NULL.
\end_layout

\begin_layout Description
box Array of size 6 of box coordinates to write (X Y Z ALPHA BETA GAMMA);
 can be NULL.
\end_layout

\begin_layout Description
time Restart time in ps.
\end_layout

\begin_layout Description
temperature Restart temperature; if < 0 no temperature will be written.
\end_layout

\end_deeper
\begin_layout Section

\series bold
Second derivatives and normal modes
\end_layout

\begin_layout Standard
Russ Brown has contributed codes that compute analytically the second derivative
s of the Amber functions, including the generalized Born terms.
\begin_inset CommandInset citation
LatexCommand citep
key "Brown06"
literal "true"

\end_inset

 This capability resides in the three functions described here.
\end_layout

\begin_layout LyX-Code

\family sans
int newton
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
newton
\end_layout

\end_inset

( float x[], int n, float fret, float func1(), float func2(), float rms,
 
\begin_inset Newline newline
\end_inset

                float nradd, int maxiter );
\end_layout

\begin_layout LyX-Code

\family sans
float nmode
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
nmode
\end_layout

\end_inset

( float x[], int n, float func(), int eigp, int ntrun, float eta, float
 hrmax, int ioseen );
\end_layout

\begin_layout Standard
These routines construct and manipulate a Hessian (second derivative matrix),
 allowing one (for now) to carry out Newton-Raphson minimization and normal
 mode calculations.
 The 
\family sans
mme2()
\family default
 routine takes as input a 
\shape italic
3*natom
\shape default
 vector of coordinates 
\family sans
x[]
\family default
, and returns a gradient vector 
\family sans
g[]
\family default
, a Hessian matrix, stored columnwise in a 
\shape italic
3*natom x 3*natom
\shape default
 vector 
\family sans
h[]
\family default
, and the masses of the system, in a vector 
\family sans
m[]
\family default
 of length 
\shape italic
natom
\shape default
.
 The iteration variable 
\family sans
iter
\family default
 is just used to control printing.
 At present, these routines only work for 
\shape italic
gb
\shape default
 = 0 or 1.
\end_layout

\begin_layout Standard
Users cannot call 
\family sans
mme2()
\family default
 directly, but will pass this as an argument to one of the next two routines.
\end_layout

\begin_layout Standard
The 
\family sans
newton()
\family default
 routine takes a input coordinates 
\family sans
x[]
\family default
 and a size parameter 
\family sans
n
\family default
 (must be set to 
\shape italic
3*natom
\shape default
).
 It performs Newton-Raphson optimization until the root-mean-square of the
 gradient vector is less than 
\family sans
rms
\family default
, or until 
\family sans
maxiter
\family default
 steps have been taken.
 For now, the input function 
\family sans
func1()
\family default
 must be 
\family sans
mme()
\family default
 and 
\family sans
func2()
\family default
 must be 
\family sans
mme2()
\family default
.
 The value 
\family sans
nradd
\family default
 will be added to the diagonal of the Hessian before the step equations
 are solved; this is generally set to zero, but can be set something else
 under particular circumstances, which we do not discuss here.
\begin_inset CommandInset citation
LatexCommand cite
key "Nguyen85"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
Generally, you only want to try Newton-Raphson minimization (which can be
 very expensive) after you have optimized structures with 
\family sans
conjgrad()
\family default
 to an rms gradient of 10 -3 or so.
 In most cases, it should only take a small number of iterations then to
 go down to an rms gradient of about 10 -12 or so, which is somewhere near
 the precision limit.
\end_layout

\begin_layout Standard
Once a good minimum has been found, you can use the nmode() function to
 compute normal/Langevin modes and thermochemical parameters.
 The first three arguments are the same as for newton(), the next two integers
 give the number of eigenvectors to compute and the type of run, respectively.
 The last three arguments (only used for Langevin modes) are the viscosity
 in centipoise, the value for the hydrodynamic radius, and the type of hydrodyna
mic interactions.
 Several techniques are available for diagonalizing the Hessian depending
 on the number of modes required and the amount of memory available.
\end_layout

\begin_layout Standard
In all cases the modes are written to an Amber-compatible "vecs" file for
 normal modes or "lmodevecs" file for Langevin modes.
 There are currently no nab routines that use this format.
 The Langevin modes will also generate an output file called "lmode" that
 can be read by the Amber module 
\emph on
lmanal
\emph default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ntrun
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
0: The dsyev routine is used to diagonalize the Hessian 
\end_layout

\begin_layout Description
1: The dsyevd routine is used to diagonalize the Hessian 
\end_layout

\begin_layout Description
2: The ARPACK package (shift invert technique) is used to obtain a small
 number of eigenvalues
\end_layout

\begin_layout Description
3: The Langevin modes are computed with the viscosity and hydrodynamic radius
 provided 
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
hrmax Hydrodynamic radius for the atom with largest area exposed to solvent.
 If a file named "expfile" is provided then the relative exposed areas are
 read from this file.
 If "expfile" is not present all atoms are assigned a hydrodynamic radius
 of hrmax or 0.2 for the hydrogen atoms.
 The "expfile" can be generated with the ms (molecular surface) program.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ioseen 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
0: Stokes Law is used for the hydrodynamic interaction 
\end_layout

\begin_layout Description
1: Oseen interaction included 
\end_layout

\begin_layout Description
2: Rotne-Prager correction included 
\end_layout

\end_deeper
\begin_layout Standard
Here is a typical calling sequence: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

molecule m;
\end_layout

\begin_layout Plain Layout

float x[4000], fret;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = getpdb_prm( "mymolecule.pdb", "leaprc.protein.ff14SB", "", 0 );
\end_layout

\begin_layout Plain Layout

mm_options( "cut=999., ntpr=50, nsnb=99999, diel=C, gb=1, dielc=1.0" );
\end_layout

\begin_layout Plain Layout

mme_init( m, NULL, "::Z", x, NULL);
\end_layout

\begin_layout Plain Layout

setxyz_from_mol( m, NULL, x );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  conjugate gradient minimization
\end_layout

\begin_layout Plain Layout

conjgrad(x, 3*m.natoms, fret, mme, 0.1, 0.001, 2000 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  Newton-Raphson minimization
\backslash
fP
\end_layout

\begin_layout Plain Layout

mm_options( "ntpr=1" );
\end_layout

\begin_layout Plain Layout

newton( x, 3*m.natoms, fret, mme, mme2, 0.00000001, 0.0, 6 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// get the normal modes:
\end_layout

\begin_layout Plain Layout

nmode( x, 3*m.natoms, mme2, 0, 0, 0.0, 0.0, 0); 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:lmod"

\end_inset


\series bold
Low-MODe (LMOD) optimization methods
\end_layout

\begin_layout Standard
Istv
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
'{a}
\end_layout

\end_inset

n Kolossv
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
'{a}
\end_layout

\end_inset

ry has contributed functions, which implement the LMOD methods for minimization,
 conformational searching, and flexible docking.
\begin_inset CommandInset citation
LatexCommand cite
key "Kolossvary96,Kolossvary99,Kolossvary01,Keseru01"
literal "true"

\end_inset

 The centerpiece of LMOD is a conformational search algorithm based on eigenvect
or following of low-frequency vibrational modes.
 It has been applied to a spectrum of computational chemistry domains including
 protein loop optimization and flexible active site docking.
 The search method is implemented without explicit computation of a Hessian
 matrix and utilizes the Arnoldi package (ARPACK, 
\shape italic
http://www.caam.rice.edu/software/ARPACK/
\shape default
) for computing the low-frequency modes.
 LMOD optimization can be thought of as an advanced minimization method.
 LMOD can not only energy minimize a molecular structure in the local sense,
 but can generate a series of very low energy conformations.
 The LMOD capability resides in a single, top-level calling function 
\shape italic
lmod()
\shape default
, which uses fast local minimization techniques, collectively termed XMIN
 that can also be accessed directly through the function 
\shape italic
xmin().
\end_layout

\begin_layout Standard
There are now 
\series bold
four 
\begin_inset Quotes eld
\end_inset

real-life
\begin_inset Quotes erd
\end_inset

 examples
\series default
 of carrying out LMOD searches: these can be downloaded at
\begin_inset CommandInset href
LatexCommand href
name "ambermd.org/Manuals.php"
target "https://ambermd.org/Manuals.php"
literal "false"

\end_inset

.
 Each directory has a README file that give more information.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:lmod1"

\end_inset

LMOD conformational searching
\end_layout

\begin_layout Standard
The LMOD conformational search procedure is based on gentle, but very effective
 structural perturbations applied to molecular systems in order to explore
 their conformational space.
 LMOD perturbations are derived from low-frequency vibrational modes representin
g large-amplitude, concerted atomic movements.
 Unlike essential dynamics where such low modes are derived from long molecular
 dynamics simulations, LMOD calculates the modes directly and utilizes them
 to improve Monte Carlo sampling.
\end_layout

\begin_layout Standard
LMOD has been developed primarily for macromolecules, with its main focus
 on protein loop optimization.
 However, it can be applied to any kind of molecular systems, including
 complexes and flexible docking where it has found widespread use.
 The LMOD procedure starts with an initial molecular model, which is energy
 minimized.
 The minimized structure is then subjected to an ARPACK calculation to find
 a user-specified number of low-mode eigenvectors of the Hessian matrix.
 The Hessian matrix is never computed; ARPACK makes only implicit reference
 to it through its product with a series of vectors.
 Hv, where v is an arbitrary unit vector, is calculated via a finite-difference
 formula as follows,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Hv=\left[\nabla(x_{min}+h)-\nabla(x_{min})\right]/h\label{eq:lmod1}
\end{equation}

\end_inset

where 
\begin_inset Formula $x_{min}$
\end_inset

 is the coordinate vector at the energy minimized conformation and 
\begin_inset Formula $h$
\end_inset

 denotes machine precision.
 The computational cost of Eq.
 1 requires a single gradient calculation at the energy minimum point and
 one additional gradient calculation for each new vector.
 Note that 
\begin_inset Formula $\bigtriangledown x$
\end_inset

 is never 0, because minimization is stopped at a finite gradient RMS, which
 is typically set to 0.1-1.0 kcal/mol-
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 in most calculations.
\end_layout

\begin_layout Standard
The low-mode eigenvectors of the Hessian matrix are stored and can be re-used
 throughout the LMOD search.
 Note that although ARPACK is very fast in relative terms, a single ARPACK
 calculation may take up to a few hours on an absolute CPU time scale with
 a large protein structure.
 Therefore, it would be impractical to recalculate the low-mode eigenvectors
 for each new structure.
 Visual inspection of the low-frequency vibrational modes of different,
 randomly generated conformations of protein molecules showed very similar,
 collective motions clearly suggesting that low-modes of one particular
 conformation were transferable to other conformations for LMOD use.
 This important finding implies that the time limiting factor in LMOD optimizati
on, even for relatively small molecules, is energy minimization, not the
 eigenvector calculation.
 This is the reason for employing XMIN for local minimization instead of
 NAB's standard minimization techniques.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:lmod2"

\end_inset

LMOD procedure
\end_layout

\begin_layout Standard
Given the energy-minimized structure of an initial protein model, protein-
 ligand complex, or any other molecular system and its low-mode Hessian
 eigenvectors, LMOD proceeds as follows.
 For each of the first n low-modes repeat steps 1-3 until convergence:
\end_layout

\begin_layout Enumerate
Perturb the energy-minimized starting structure by moving along the ith
 (i =1-n) Hessian eigenvector in either of the two opposite directions to
 a certain distance.
 The 3N-dimensional (N is equal to the number of atoms) travel distance
 along the eigenvector is scaled to move the fastest moving atom of the
 selected mode in 3-dimensional space to a randomly chosen distance between
 a user-specified minimum and maximum value.
\begin_inset Newline newline
\end_inset


\emph on
Note
\emph default
: A single LMOD move inherently involves excessive bond stretching and bond
 angle bending in Cartesian space.
 Therefore the primarily torsional trajectory drawn by the low-modes of
 vibration on the PES is severely contaminated by this naive, linear approximati
on and, therefore, the actual Cartesian LMOD trajectory often misses its
 target by climbing walls rather than crossing over into neighboring valleys
 at not too high altitudes.
 The current implementation of LMOD employs a so-called ZIG-ZAG algorithm,
 which consists of a series of alternating short LMOD moves along the low-mode
 eigenvector (ZIG) followed by a few steps of minimization (ZAG), which
 has been found to relax excessive stretches and bends more than reversing
 the torsional move.
 Therefore, it is expected that such a ZIG- ZAG trajectory will eventually
 be dominated by concerted torsional movements and will carry the molecule
 over the energy barrier in a way that is not too different from finding
 a saddle point and crossing over into the next valley like passing through
 a mountain pass.
\begin_inset Newline newline
\end_inset


\emph on
Barrier crossing check:
\emph default
 The LMOD algorithm checks barrier crossing by evaluating the following
 criterion: IF the current endpoint of the zigzag trajectory is lower than
 the energy of the starting structure, OR, the endpoint is at least lower
 than it was in the previous ZIG-ZAG iteration step AND the molecule has
 also moved farther away from the starting structure in terms of all-atom
 superposition RMS than at the previous position THEN it is assumed that
 the LMOD ZIG-ZAG trajectory has crossed an energy barrier.
\end_layout

\begin_layout Enumerate
Energy-minimize the perturbed structure at the endpoint of the ZIG- ZAG
 trajectory.
\end_layout

\begin_layout Enumerate
Save the new minimum-energy structure and return to step 1.
 Note that LMOD saves only low-energy structures within a user-specified
 energy window above the then current global minimum of the ongoing search.
\end_layout

\begin_layout Standard
After exploring the modes of a single structure, LMOD goes on to the next
 starting structure, which is selected from the set of previously found
 low- energy structures.
 The selection is based on either the Metropolis criterion, or simply the
 than lowest energy structure is used.
 LMOD terminates when the user-defined number of steps has been completed
 or when the user-defined number of low-energy conformations has been collected.
\end_layout

\begin_layout Standard
Note that for flexible docking calculations LMOD applies explicit translations
 and rotations of the ligand(s) on top of the low-mode perturbations.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:xmin"

\end_inset

XMIN
\end_layout

\begin_layout LyX-Code
float xmin
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
xmin
\end_layout

\end_inset

( float func(), int natm, float x[], float g[], 
\end_layout

\begin_layout LyX-Code
               float ene, float grms_out, struct xmod_opt xo);
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="4in">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
Parameter list for xmin()
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
func
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The name of the function that computes the function value and gradient of
 the objective function to be minimized.
 
\shape italic
func()
\shape default
 must have the following argument list: 
\family typewriter
float func( float x[], float g[], int i)
\family default
where 
\family typewriter
x[]
\family default
 is the vector of the iterate, 
\family typewriter
g[]
\family default
 is the gradient and 
\family typewriter
i
\family default
 is currently ignored except when 
\family typewriter
func
\family default
 =
\family typewriter
 mme
\family default
 where 
\family typewriter
i
\family default
 is handled internally.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
natm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of atoms.
 
\series bold
NOTE:
\series default
 if 
\family typewriter
func
\family default
 is other than 
\family typewriter
mme
\family default
, 
\family typewriter
natm
\family default
 is used to pass the total number of variables of the objective function
 to be minimized.
 However, 
\family typewriter
natm
\family default
 retains its original meaning in case 
\family typewriter
func
\family default
 is a user-defined energy function for 3-dimensional (molecular) structure
 optimization.
 Make sure that the meaning of 
\family typewriter
natm
\family default
 is compatible with the setting of 
\family typewriter
mol_struct_opt
\family default
 below.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
x[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Coordinate vector.
 User has to allocate memory in calling program and fill x[] with initial
 coordinates using, e.g., the setxyz_from_mol function (see sample program
 below).
 Array size = 3*natm.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
g[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gradient vector.
 User has to allocate memory in calling program.
 Array size = 3*natm.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ene
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
On output, ene stores the minimized energy.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
grms_out
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
On output, grms_out stores the gradient RMS achieved by XMIN.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:xmin"

\end_inset

Arguments for xmin().
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="21" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="4in">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
Parameter list for xmin_opt
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
mol_struct_opt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
1=
\shape default
 3-dimensional molecular structure optimization.
 Any other value means general function optimization.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
maxiter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum number of iteration steps allowed for XMIN.
 A value of zero means single point energy calculation, no minimization.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
grms_tol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0.05
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gradient RMS threshold below which XMIN should minimize the input structure.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minimization algorithm.
 See text for description.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
numdiff
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Finite difference method used in TNCG for approximating the product of the
 Hessian matrix and some vector in the conjugate gradient iteration (the
 same approximation is used in LMOD, see Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:lmod1"

\end_inset

 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod1"

\end_inset

).
 1= Forward difference.
 2=Central difference.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m_lbfgs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Size of the L-BFGS memory used in either L-BFGS minimization or L-BFGS precondit
ioning for TNCG.
 The value zero turns off preconditioning.
 It usually makes little sense to set the value 
\begin_inset Formula $>$
\end_inset

10.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
print_level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Amount of debugging printout.
 0= No output.
 1= Minimization details.
 2= Minimization (including conjugate gradient iteration in case of TNCG)
 and line search details.
 If 
\emph on
print_level 
\emph default
> 2, print minimization output every 
\emph on
print_level
\emph default
 steps
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
iter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output parameter.
 The total number of iteration steps completed by XMIN.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
xmin_time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output parameter.
 CPU time in seconds used by XMIN.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ls_method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
1=
\shape default
 modified Armijo 
\begin_inset CommandInset citation
LatexCommand cite
key "Shi05"
literal "true"

\end_inset

(not recommended, primarily used for testing).
\end_layout

\begin_layout Plain Layout

\shape italic
2=
\shape default
 Wolfe (after J.
 J.
 More' and D.
 J.
 Thuente).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ls_maxiter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum number of line search steps per single minimization step.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ls_maxatmov
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum (co-ordinate) movement per degree of freedom allowed in line search,
 range 
\shape italic
> 0
\shape default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
beta_armijo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Armijo beta parameter, range (0, 1).
 
\shape italic
Only change it if you know what you are doing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
c_armijo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Armijo c parameter, range (0, 0.5).

\shape italic
 Only change it if you know what you are doing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
mu_armijo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Armijo mu parameter, range [0, 2).
 
\shape italic
Only change it if you know what you are doing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ftol_wolfe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0.0001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wolfe ftol parameter, range (0, 0.5).
 
\shape italic
Only change it if you know what you are doing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gtol_wolfe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wolfe gtol parameter, range (ftol_wolfe, 1).
 
\shape italic
Only change it if you know what you are doing.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ls_iter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output parameter.
 The total number of line search steps completed by XMIN.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
error_flag
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output parameter.
 A nonzero value indicates an error.
 In case of an error XMIN will always print a descriptive error message.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:xmin-1"

\end_inset

Options for xmin_opt.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
At a glance: The 
\shape italic
xmin()
\shape default
 function minimizes the energy of a molecular structure with initial coordinates
 given in the x[] array.
 On output, 
\shape italic
xmin()
\shape default
 returns the minimized energy as the function value and the coordinates
 in x[] will be updated to the minimum-energy conformation.
 The arguments to xmin() are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:xmin"

\end_inset

; the parameters in the xmin_opt structure are described in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:xmin-1"

\end_inset

; these should be preceded by 
\family typewriter

\begin_inset Quotes eld
\end_inset

xo.
\begin_inset Quotes erd
\end_inset


\family default
, since they are members of an 
\emph on
xmod_opt
\emph default
 struct with that name; see the sample program below to see how this works.
 
\end_layout

\begin_layout Standard
There are three types of minimizers that can be used, specified by the 
\emph on
method
\emph default
 parameter:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
method
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description

\emph on
1: 
\emph default
PRCG Polak-Ribiere conjugate gradient method, similar to the 
\shape italic
conjgrad()
\shape default
 function 
\begin_inset CommandInset citation
LatexCommand cite
key "Press89"
literal "true"

\end_inset

.
\end_layout

\begin_layout Description

\emph on
2:
\emph default
 L-BFGS Limited-memory Broyden-Fletcher-Goldfarb-Shanno quasi-Newton algorithm
 
\begin_inset CommandInset citation
LatexCommand cite
key "Liu89"
literal "true"

\end_inset

.
 L-BFGS is 2-3 times faster than PRCG mainly, because it requires significantly
 fewer line search steps than PRCG.
\end_layout

\begin_layout Description

\emph on
3:
\emph default
 lbfgs-TNCG L-BFGS preconditioned truncated Newton conjugate gradient algorithm
 
\begin_inset CommandInset citation
LatexCommand cite
key "Press89,Nocedal00"
literal "true"

\end_inset

.
 Sophisticated technique that can minimize molecular structures to lower
 energy and gradient than PRCG and L-BFGS and requires an order of magnitude
 fewer minimization steps, but L-BFGS can sometimes be faster in terms of
 total CPU time.
\end_layout

\begin_layout Description
4: Debugging option; printing analytical and numerical derivatives for compariso
n.
 Almost all failures with 
\emph on
xmin
\emph default
 can be attributed to inaccurate analytical derivatives, e.g., when SCF hasn't
 converged with a quantum based Hamiltonian.
\end_layout

\end_deeper
\begin_layout Standard
NOTE: The xmin routine can be utilized for minimizing arbitrary, user-defined
 objective functions.
 The function must be defined in a user NAB program or in any other user
 library that is linked in.
 The name of the function is passed to 
\shape italic
xmin()
\shape default
 via the 
\shape italic
func 
\shape default
argument.
\end_layout

\begin_layout Subsection

\series bold
Sample XMIN program
\end_layout

\begin_layout Standard
The following sample program, which is based on the test program txmin.nab,
 reads a molecular structure from a PDB file, minimizes it, and saves the
 minimized structure in another PDB file.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

//   XMIN reverse communication external minimization package.
\end_layout

\begin_layout Plain Layout

//   Written by Istvan Kolossvary.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include "xmin_opt.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// M A I N  P R O G R A M  to carry out XMIN minimization on a molecule:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct xmin_opt xo;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

molecule mol;
\end_layout

\begin_layout Plain Layout

int natm;
\end_layout

\begin_layout Plain Layout

float xyz[ dynamic ], grad[ dynamic ];
\end_layout

\begin_layout Plain Layout

float energy, grms;
\end_layout

\begin_layout Plain Layout

point dummy;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    xmin_opt_init( xo );  //  set up defaults (shown here)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // xo.mol_struct_opt = 1;
\end_layout

\begin_layout Plain Layout

    // xo.maxiter        = 1000;
\end_layout

\begin_layout Plain Layout

    // xo.grms_tol       = 0.05;
\end_layout

\begin_layout Plain Layout

    // xo.method         = 3;
\end_layout

\begin_layout Plain Layout

    // xo.numdiff        = 1;
\end_layout

\begin_layout Plain Layout

    // xo.m_lbfgs        = 3;
\end_layout

\begin_layout Plain Layout

    //    xo.ls_method   = 2;
\end_layout

\begin_layout Plain Layout

    //    xo.ls_maxiter  = 20;
\end_layout

\begin_layout Plain Layout

    //    xo.maxatmov    = 0.5;
\end_layout

\begin_layout Plain Layout

    //    xo.beta_armijo = 0.5;
\end_layout

\begin_layout Plain Layout

    //    xo.c_armijo    = 0.4;
\end_layout

\begin_layout Plain Layout

    //    xo.mu_armijo   = 1.0;
\end_layout

\begin_layout Plain Layout

    //    xo.ftol_wolfe  = 0.0001;
\end_layout

\begin_layout Plain Layout

    //    xo.gtol_wolfe  = 0.9;
\end_layout

\begin_layout Plain Layout

    // xo.print_level    = 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    xo.maxiter     = 10;  //  non-defaults are here
\end_layout

\begin_layout Plain Layout

    xo.grms_tol    = 0.001;
\end_layout

\begin_layout Plain Layout

    xo.method      = 3;
\end_layout

\begin_layout Plain Layout

    xo.ls_maxatmov = 0.15;
\end_layout

\begin_layout Plain Layout

    xo.print_level = 2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mol = getpdb( "gbrna.pdb" );
\end_layout

\begin_layout Plain Layout

    readparm( mol, "gbrna.prmtop" );
\end_layout

\begin_layout Plain Layout

    natm = mol.natoms;
\end_layout

\begin_layout Plain Layout

    allocate xyz[ 3*natm ]; allocate grad[ 3*natm ];
\end_layout

\begin_layout Plain Layout

    setxyz_from_mol( mol, NULL, xyz );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mm_options( "ntpr=1, gb=1, kappa=0.10395, rgbmax=99., cut=99.0, diel=C
 ");
\end_layout

\begin_layout Plain Layout

    mme_init( mol, NULL, "::ZZZ", dummy, NULL );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    energy = mme( xyz, grad, 0 );
\end_layout

\begin_layout Plain Layout

    energy = xmin( mme, natm, xyz, grad, energy, grms, xo );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// E N D  M A I N
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The corresponding screen output should look similar to this.
 Note that this is fairly technical, debugging information; normally print_level
 is set to zero.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

Reading parm file (gbrna.prmtop)
\end_layout

\begin_layout Plain Layout

title:
\end_layout

\begin_layout Plain Layout

PDB 5DNB, Dickerson decamer
\end_layout

\begin_layout Plain Layout

old prmtop format => using old algorithm for GB parms
\end_layout

\begin_layout Plain Layout

      mm_options:  ntpr=99
\end_layout

\begin_layout Plain Layout

      mm_options:  gb=1
\end_layout

\begin_layout Plain Layout

      mm_options:  kappa=0.10395
\end_layout

\begin_layout Plain Layout

      mm_options:  rgbmax=99.
\end_layout

\begin_layout Plain Layout

      mm_options:  cut=99.0
\end_layout

\begin_layout Plain Layout

      mm_options:  diel=C
\end_layout

\begin_layout Plain Layout

    iter    Total    bad         vdW     elect.
     cons.
   genBorn   frms
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ff:   0  -4107.50    906.22   -192.79   -137.96      0.00  -4682.97 1.93e+01
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

________________________________________________________________
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 MIN:                          It=    0  E=   -4107.50 ( 19.289)
\end_layout

\begin_layout Plain Layout

  CG:   It=    3 (  0.310)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.94735  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    1  E=   -4423.34 (  5.719)
\end_layout

\begin_layout Plain Layout

  CG:   It=    4 (  0.499)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.91413  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    2  E=   -4499.43 (  2.674)
\end_layout

\begin_layout Plain Layout

  CG:   It=    9 (  0.498)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.86829  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    3  E=   -4531.20 (  1.543)
\end_layout

\begin_layout Plain Layout

  CG:   It=    8 (  0.499)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.95556  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    4  E=   -4547.59 (  1.111)
\end_layout

\begin_layout Plain Layout

  CG:   It=    9 (  0.491)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.77247  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    5  E=   -4556.35 (  1.068)
\end_layout

\begin_layout Plain Layout

  CG:   It=    8 (  0.361)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.75150  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    6  E=   -4562.95 (  1.042)
\end_layout

\begin_layout Plain Layout

  CG:   It=    8 (  0.273)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.79565  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    7  E=   -4568.59 (  0.997)
\end_layout

\begin_layout Plain Layout

  CG:   It=    5 (  0.401)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.86051  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    8  E=   -4572.93 (  0.786)
\end_layout

\begin_layout Plain Layout

  CG:   It=    4 (  0.335)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.88096  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=    9  E=   -4575.25 (  0.551)
\end_layout

\begin_layout Plain Layout

  CG:   It=   64 (  0.475)  :-)
\end_layout

\begin_layout Plain Layout

  LS: step= 0.95860  it= 1  info= 1
\end_layout

\begin_layout Plain Layout

 MIN:                          It=   10  E=   -4579.19 (  0.515)
\end_layout

\begin_layout Plain Layout

----------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 FIN:             :-)                    E=   -4579.19 (  0.515)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first few lines are typical NAB output from mm_init() and mme().
 The output below the horizontal line comes from XMIN.
 The MIN/CG/LS blocks contain the following pieces of information.
 The MIN: line shows the current iteration count, energy and gradient RMS
 (in parentheses).
 The CG: line shows the CG iteration count and the residual in parentheses.
 The happy face :-) means convergence whereas :-( indicates that CG iteration
 encountered negative curvature and had to abort.
 The latter situation is not a serious problem, minimization can continue.
 This is just a safeguard against uphill moves.
 The LS: line shows line search information.
 "step" is the relative step with respect to the initial guess of the line
 search step.
 "it" tells the number of line search steps taken and "info" is an error
 code.
 "info" = 1 means that line searching converged with respect to sufficient
 decrease and curvature criteria whereas a non- zero value indicates an
 error condition.
 Again, an error in line searching doesn't mean that minimization necessarily
 failed, it just cannot proceed any further because of some numerical dead
 end.
 The FIN: line shows the final result with a happy face :-) if either the
 grms_tol criterion has been met or when the number of iteration steps reached
 the maxiter value.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:lmod3"

\end_inset

LMOD
\end_layout

\begin_layout LyX-Code
float lmod
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
lmod
\end_layout

\end_inset

( int natm, float x[], float g[], float ene, float conflib[], 
\end_layout

\begin_layout LyX-Code
       float lmod_traj[], int lig_start[], int lig_end[], int lig_cent[],
 
\end_layout

\begin_layout LyX-Code
       float tr_min[], float tr_max[], float rot_min[], float rot_max[],
 
\end_layout

\begin_layout LyX-Code
       struct xmin_opt, struct xmin_opt, struct lmod_opt);
\end_layout

\begin_layout Standard
At a glance: The 
\shape italic
lmod()
\shape default
 function is similar to 
\shape italic
xmin()
\shape default
 in that it optimizes the energy of a molecular structure with initial coordinat
es given in the x[] array.
 However, the optimization goes beyond local minimization, it is a sophisticated
 conformational search procedure.
 On output, 
\shape italic
lmod()
\shape default
 returns the global minimum energy of the LMOD conformational search as
 the function value and the coordinates in x[] will be updated to the global
 minimum-energy conformation.
 Moreover, a set of the best low-energy conformations is also returned in
 the array conflib[].
 Coordinates, energy, and gradient are in NAB units.
 The parameters are given in the table below; items above the line are passed
 as parameters; the rest of the parameters are all preceded by 
\family typewriter

\begin_inset Quotes eld
\end_inset

lo.
\begin_inset Quotes erd
\end_inset


\family default
, because they are members of an 
\emph on
lmod_opt
\emph default
 struct with that name; see the sample program below to see how this works.
\end_layout

\begin_layout Standard
Also note that 
\shape italic
xmin()
\shape default
's 
\shape italic
xmin_opt
\shape default
 struct is passed to 
\shape italic
lmod()
\shape default
 as well.
 
\shape italic
lmod()
\shape default
 changes the default values of some of the 
\family typewriter

\begin_inset Quotes eld
\end_inset

xo.
\begin_inset Quotes erd
\end_inset


\family default
 parameters via the call to 
\shape italic
lmod_opt_int()
\shape default
 relative to a call to 
\shape italic
xmin_opt_init()
\shape default
, which means that in a more complex NAB program with multiple calls to
 
\shape italic
xmin()
\shape default
 and 
\shape italic
lmod()
\shape default
; make sure to always initialize and set user parameters for each and every
 XMIN and LMOD search via, respectively calling 
\shape italic
xmin_opt_init()
\shape default
 and 
\shape italic
lmod_opt_init()
\shape default
 just before the calls to 
\shape italic
xmin()
\shape default
 and 
\shape italic
lmod()
\shape default
.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="39" columns="3">
<features islongtable="true" headBottomDL="true" longtabularalignment="center">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row endhead="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
natm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of atoms.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
x[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Coordinate vector.
 User has to allocate memory in calling program and fill x[] with initial
 coordinates using, e.g., the setxyz_from_mol function (see sample program
 below).
 Array size = 3*natm.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
g[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gradient vector.
 User has to allocate memory in calling program.
 Array size = 3*natm.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ene
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
On output, ene stores the global minimum energy.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
conflib[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User allocated storage array where LMOD stores low-energy conformations.
 Array size = 3*natm*nconf.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lmod_traj[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User allocated storage array where LMOD stores snapshots of the pseudo trajector
y drawn by LMOD on the potential energy surface.
 Array size = 3*natom * (nconf + 1).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lig_start[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The serial number(s) of the first/last atom(s) of the ligand(s).
 The number(s) should correspond to the numbering in the NAB input files.
 Note that the ligand(s) can be anywhere in the atom list, however, a single
 ligand must have continuous numbering between the corresponding lig_start
 and lig_end values.
 The arrays should be allocated in the calling program.
 Array size = nlig, but in case nlig=0 there is no need for allocating memory.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lig_end[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
See above.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lig_cent[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Similar array in all respects to lig_start/end, but the serial number(s)
 define the center of rotation.
 The value zero means that the center of rotation will be the geometric
 center of gravity of the ligand.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
tr_min[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The range of random translation/rotation applied to individual ligand(s).
 Rotation is carried out about the origin defined by the corresponding lig_cent
 value(s).
 The angle is given in +/- degrees and the distance in angstroms.
 The particular angles and distances are randomly chosen from their respective
 ranges.
 The arrays should be allocated in the calling program.
 Array size = 
\shape italic
nlig
\shape default
, but in case 
\shape italic
nlig=0
\shape default
 there is no need to allocate memory.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
tr_max[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
See tr_min[], above.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rot_min[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
See tr_min[], above.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rot_max[]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
See tr_min[], above.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
niter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of LMOD iterations.
 Note that a single LMOD iteration involves a number of different computations
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

.).
 A value of zero results in a single local minimization; like a call to
 xmin.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nmod
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The total number of low-frequency modes computed by LMOD every time such
 computation is requested.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
minim_grms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The gradient RMS convergence criterion of structure minimization.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
kmod
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The definite number of randomly selected low-modes used to drive LMOD moves
 at each LMOD iteration step.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nrotran_dof
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of rotational and translational degrees of freedom.
 This is related to the number of frozen or tethered atoms in the system:
 0 atoms dof=6, 1 atom dof=3, 2 atoms dof=1, 
\begin_inset Formula $>$
\end_inset

=3 atoms dof=0.
 Default is 6, no frozen or tethered atoms.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod5"

\end_inset

, note (5).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nconf
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The maximum number of low-energy conformations stored in conflib[].
 Note that the calling program is responsible for allocating memory for
 conflib[].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
energy_window
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
50.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The energy window for conformation storage; the energy of a stored structure
 will be in the interval [global_min, global_min + energy_window].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
eig_recalc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The frequency, measured in LMOD iterations, of the recalculation of eigenvectors.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ndim_arnoldi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The dimension of the ARPACK Arnoldi factorization.
 The default, zero, specifies the whole space, that is, three times the
 number of atoms.
 See note below.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lmod_restart
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The frequency, in LMOD iterations, of updating the conflib storage, that
 is, discarding structures outside the energy window, and restarting LMOD
 with a randomly chosen structure from the low-energy pool defined by n_best_str
uct below.
 A value 
\begin_inset Formula $>$
\end_inset

maxiter will prevent LMOD from doing any restarts.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
n_best_struct
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of the lowest-energy structures found so far at a particular LMOD
 restart point.
 The structure to be used for the restart will be chosen randomly from this
 pool.
 n_best_struct = 1 allows the user to explore the neighborhood of the then
 current global minimum.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
mc_option
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The Monte Carlo method.
\begin_inset Newline newline
\end_inset

1= Metropolis Monte Carlo (see rtemp below).
\begin_inset Newline newline
\end_inset

2= "Total_Quench", which means that the LMOD trajectory always proceeds
 towards the lowest lying neighbor of a particular energy well found after
 exhaustive search along all of the randomly selected kmod low-modes.
\begin_inset Newline newline
\end_inset

3= "Quick_Quench", which means that the LMOD trajectory proceeds towards
 the first neighbor found, which is lower in energy than the current point
 on the path, without exploring the remaining modes.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rtemp
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The value of RT in NAB energy units.
 This is utilized in the Metropolis criterion.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lmod_step_size_min
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The minimum length of a single LMOD ZIG move in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lmod_step_size_max
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
5.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The maximum length of a single LMOD ZIG move in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nof_lmod_steps
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of LMOD ZIG-ZAG moves.
 The default, zero, means that the number of ZIG-ZAG moves is not pre-defined,
 instead LMOD will attempt to cross the barrier in as many ZIG-ZAG moves
 as it is necessary.
 The criterion of crossing an energy barrier is stated above in section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

.
 nof_lmod_steps 
\begin_inset Formula $>$
\end_inset

 0 means that multiple barriers may be crossed and LMOD can carry the molecule
 to a large distance on the potential energy surface without severely distorting
 the geometry.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lmod_relax_grms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The gradient RMS convergence criterion of structure relaxation, see ZAG
 move in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nlig
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of ligands considered for flexible docking.
 The default, zero, means no docking.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
apply_rigdock
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The frequency, measured in LMOD iterations, of the application of rigid-body
 rotational and translational motions to the ligand(s).
 At each apply_rigdock-th LMOD iteration nof_pose_to-try rotations and translati
ons are applied to the ligand(s).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
nof_poses_to_try
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of rigid-body rotational and translational motions applied to
 the ligand(s).
 Such applications occur at each apply_rigdock-th LMOD iteration.
 In case nof_pose_to_try 
\begin_inset Formula $>$
\end_inset

 1, it is always the lowest energy pose that is kept, all other poses are
 discarded.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
random_seed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
314159
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The seed of the random number generator.
 A value of zero requests hardware seeding based on the system clock.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
print_level
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Amount of debugging printout.
 0= No output.
 1= Basic output.
 2= Detailed output.
 3= Copious debugging output including ARPACK details.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lmod_time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CPU time in seconds used by LMOD itself.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
aux_time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CPU time in seconds used by auxiliary routines.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
error_flag
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
N/A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A nonzero value indicates an error.
 In case of an error LMOD will always print a descriptive error message.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Notes on the 
\emph on
ndim_arnoldi
\emph default
 parameter: Basically, the ARPACK package used for the eigenvector calculations
 solves multiple "small" eigenvalue problems instead of a single "large"
 problem, which is the diagonalization of the three times the number of
 atoms by three times the number of atoms Hessian matrix.
 This parameter is the user specified dimension of the "small" problem.
 The allowed range is nmod + 1 
\begin_inset Formula $<$
\end_inset

= ndim_arnoldi 
\begin_inset Formula $<$
\end_inset

= 3*natm.
 The default means that the "small" problem and the "large" problem are
 identical.
 This is the preferred, i.e., fastest, calculation for small to medium size
 systems, because ARPACK is guaranteed to converge in a single iteration.
 The ARPACK calculation scales with three times the number of atoms times
 the Arnoldi dimension squared and, therefore, for larger molecules there
 is an optimal ndim_arnoldi much less than three times the number of atoms
 that converges much faster in multiple iterations (possibly thousands or
 tens of thousands of iterations).
 The key to good performance is to select ndim_arnoldi such that all the
 ARPACK storage fits in memory.
 For proteins, ndim_arnoldi =1000 is generally a good value, but often a
 very small 
\begin_inset Formula $\sim$
\end_inset

50-100 Arnoldi dimension provides the fastest net computational cost with
 very many iterations.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:lmod4"

\end_inset

Sample LMOD program
\end_layout

\begin_layout Standard
The following sample program, which is based on the test program tlmod.nab,
 reads a molecular structure from a PDB file, runs a short LMOD search,
 and saves the low-energy conformations in PDB files.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

//   LMOD reverse communication external minimization package.
\end_layout

\begin_layout Plain Layout

//   Written by Istvan Kolossvary.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include "xmin_opt.h"
\end_layout

\begin_layout Plain Layout

#include "lmod_opt.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// M A I N  P R O G R A M  to carry out LMOD simulation on a molecule/complex:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct xmin_opt xo;
\end_layout

\begin_layout Plain Layout

struct lmod_opt lo;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

molecule mol;
\end_layout

\begin_layout Plain Layout

int   natm;
\end_layout

\begin_layout Plain Layout

float energy;
\end_layout

\begin_layout Plain Layout

int lig_start[ dynamic ], lig_end[ dynamic ], lig_cent[ dynamic ];
\end_layout

\begin_layout Plain Layout

float xyz[ dynamic ], grad[ dynamic ], conflib[ dynamic ], lmod_trajectory[
 dynamic ];
\end_layout

\begin_layout Plain Layout

float tr_min[ dynamic ], tr_max[ dynamic ], rot_min[ dynamic ], rot_max[
 dynamic ];
\end_layout

\begin_layout Plain Layout

float glob_min_energy;
\end_layout

\begin_layout Plain Layout

point dummy;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    lmod_opt_init( lo, xo );   //  set up defaults
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    lo.niter          = 3;     //  non-default options are here
\end_layout

\begin_layout Plain Layout

    lo.mc_option      = 2;
\end_layout

\begin_layout Plain Layout

    lo.nof_lmod_steps = 5;
\end_layout

\begin_layout Plain Layout

    lo.random_seed    = 99;
\end_layout

\begin_layout Plain Layout

    lo.print_level    = 2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    xo.ls_maxatmov    = 0.15;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mol = getpdb( "trpcage.pdb" );
\end_layout

\begin_layout Plain Layout

    readparm( mol, "trpcage.top" );
\end_layout

\begin_layout Plain Layout

    natm = mol.natoms;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    allocate xyz[ 3*natm ]; allocate grad[ 3*natm ];
\end_layout

\begin_layout Plain Layout

    allocate conflib[ lo.nconf * 3*natm ];
\end_layout

\begin_layout Plain Layout

    allocate lmod_trajectory[ (lo.niter+1) * 3*natm ];
\end_layout

\begin_layout Plain Layout

    setxyz_from_mol( mol, NULL, xyz );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mm_options( "ntpr=5000, gb=0, cut=999.0, nsnb=9999, diel=R ");
\end_layout

\begin_layout Plain Layout

    mme_init( mol, NULL, "::ZZZ", dummy, NULL );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mme( xyz, grad, 1 );
\end_layout

\begin_layout Plain Layout

    glob_min_energy = lmod( natm, xyz, grad, energy,
\end_layout

\begin_layout Plain Layout

          conflib, lmod_trajectory, lig_start, lig_end, lig_cent,
\end_layout

\begin_layout Plain Layout

          tr_min, tr_max, rot_min, rot_max, xo, lo );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    printf( "
\backslash
nGlob.
 min.
 E         = %12.3lf kcal/mol
\backslash
n", glob_min_energy );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// E N D  M A I N
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The corresponding screen output should look similar to this.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

Reading parm file (trpcage.top)
\end_layout

\begin_layout Plain Layout

title:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

      mm_options:  ntpr=5000
\end_layout

\begin_layout Plain Layout

      mm_options:  gb=0
\end_layout

\begin_layout Plain Layout

      mm_options:  cut=999.0
\end_layout

\begin_layout Plain Layout

      mm_options:  nsnb=9999
\end_layout

\begin_layout Plain Layout

      mm_options:  diel=R
\end_layout

\begin_layout Plain Layout

________________________________________________________________
\end_layout

\begin_layout Plain Layout

                  Low-Mode Simulation
\end_layout

\begin_layout Plain Layout

---------------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

     1    E =     -118.117 ( 0.054)  Rg =    5.440
\end_layout

\begin_layout Plain Layout

  1  / 6  E =     -89.2057 ( 0.090)  Rg =    2.625  rmsd=  8.240  p= 0.0000
\end_layout

\begin_layout Plain Layout

  1  / 8  E =      -51.682 ( 0.097)  Rg =    5.399  rmsd=  8.217  p= 0.0000
\end_layout

\begin_layout Plain Layout

  3  /12  E =     -120.978 ( 0.091)  Rg =    3.410  rmsd=  7.248  p= 1.0000
\end_layout

\begin_layout Plain Layout

  3  /10  E =     -106.292 ( 0.099)  Rg =    5.916  rmsd=  4.829  p= 0.0004
\end_layout

\begin_layout Plain Layout

  4  / 6  E =     -106.788 ( 0.095)  Rg =    4.802  rmsd=  3.391  p= 0.0005
\end_layout

\begin_layout Plain Layout

  4  / 3  E =     -111.501 ( 0.097)  Rg =    5.238  rmsd=  2.553  p= 0.0121
\end_layout

\begin_layout Plain Layout

---------------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

     2    E =     -120.978 ( 0.091)  Rg =    3.410
\end_layout

\begin_layout Plain Layout

  1  / 4  E =     -137.867 ( 0.097)  Rg =    2.842  rmsd=  5.581  p= 1.0000
\end_layout

\begin_layout Plain Layout

  1  / 9  E =     -130.025 ( 0.100)  Rg =    4.282  rmsd=  5.342  p= 1.0000
\end_layout

\begin_layout Plain Layout

  4  / 3  E =     -123.559 ( 0.089)  Rg =    3.451  rmsd=  1.285  p= 1.0000
\end_layout

\begin_layout Plain Layout

  4  / 4  E =     -107.253 ( 0.095)  Rg =    3.437  rmsd=  2.680  p= 0.0001
\end_layout

\begin_layout Plain Layout

  5  / 5  E =     -113.119 ( 0.096)  Rg =    3.136  rmsd=  2.074  p= 0.0053
\end_layout

\begin_layout Plain Layout

  5  / 4  E =       -134.1 ( 0.091)  Rg =    3.141  rmsd=  2.820  p= 1.0000
\end_layout

\begin_layout Plain Layout

---------------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

     3    E =     -130.025 ( 0.100)  Rg =    4.282
\end_layout

\begin_layout Plain Layout

  1  / 8  E =     -150.556 ( 0.093)  Rg =    3.347  rmsd=  5.287  p= 1.0000
\end_layout

\begin_layout Plain Layout

  1  / 4  E =     -123.738 ( 0.079)  Rg =    4.218  rmsd=  1.487  p= 0.0151
\end_layout

\begin_layout Plain Layout

  2  / 8  E =     -118.254 ( 0.095)  Rg =    3.093  rmsd=  5.296  p= 0.0004
\end_layout

\begin_layout Plain Layout

  2  / 7  E =     -115.027 ( 0.090)  Rg =    4.871  rmsd=  4.234  p= 0.0000
\end_layout

\begin_layout Plain Layout

  4  / 7  E =     -128.905 ( 0.099)  Rg =    4.171  rmsd=  2.113  p= 0.4739
\end_layout

\begin_layout Plain Layout

  4  /11  E =      -133.85 ( 0.099)  Rg =    3.290  rmsd=  4.464  p= 1.0000
\end_layout

\begin_layout Plain Layout

__________________________________________________
\end_layout

\begin_layout Plain Layout

 Full list:
\end_layout

\begin_layout Plain Layout

       1  E =     -150.556 / 1  Rg =    3.347
\end_layout

\begin_layout Plain Layout

       2  E =     -137.867 / 1  Rg =    2.842
\end_layout

\begin_layout Plain Layout

       3  E =       -134.1 / 1  Rg =    3.141
\end_layout

\begin_layout Plain Layout

       4  E =      -133.85 / 1  Rg =    3.290
\end_layout

\begin_layout Plain Layout

       5  E =     -130.025 / 1  Rg =    4.282
\end_layout

\begin_layout Plain Layout

       6  E =     -128.905 / 1  Rg =    4.171
\end_layout

\begin_layout Plain Layout

       7  E =     -123.738 / 1  Rg =    4.218
\end_layout

\begin_layout Plain Layout

       8  E =     -123.559 / 1  Rg =    3.451
\end_layout

\begin_layout Plain Layout

       9  E =     -120.978 / 1  Rg =    3.410
\end_layout

\begin_layout Plain Layout

      10  E =     -118.254 / 1  Rg =    3.093
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Glob.
 min.
 E         =     -150.556 kcal/mol
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first few lines come from 
\shape italic
mm_init()
\shape default
 and 
\shape italic
mme()
\shape default
.
 The screen output below the horizontal line originates from LMOD.
 Each LMOD-iteration is represented by a multi-line block of data numbered
 in the upper left corner by the iteration count.
 Within each block, the first line displays the energy and, in parentheses,
 the gradient RMS as well as the radius of gyration (assigning unit mass
 to each atom), of the current structure along the LMOD pseudo simulation-path.
 The successive lines within the block provide information about the LMOD
 ZIG-ZAG moves (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

).
 The number of lines is equal to 2 times kmod (2x3 in this example).
 Each selected mode is explored in both directions, shown in two separate
 lines.
 The leftmost number is the serial number of the mode (randomly selected
 from the set of nmod modes) and the number after the slash character gives
 the number of ZIG-ZAG moves taken.
 This is followed by, respectively, the minimized energy and gradient RMS,
 the radius of gyration, the RMSD distance from the base structure, and
 the Boltzmann probability with respect to the energy of the base structure
 and rtemp, of the minimized structure at the end of the ZIG-ZAG path.
 Note that exploring the same mode along both directions can result in two
 quite different structures.
 Also note that the number of ZIG-ZAG moves required to cross the energy
 barrier (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:lmod2"

\end_inset

) in different directions can vary quite a bit, too.
 Occasionally, an exclamation mark next to the energy (!E = ...) denotes a
 structure that could not be fully minimized.
\end_layout

\begin_layout Standard
After finishing all the computation within a block, the corresponding LMOD
 step is completed by selecting one of the ZIG-ZAG endpoint structures as
 the base structure of the next LMOD iteration.
 The selection is based on the 
\shape italic
mc_option
\shape default
 and the Boltzmann probability.
 The LMOD pseudo simulation-path is defined by the series of these 
\shape italic
mc_option
\shape default
-selected structures and it is stored in 
\shape italic
lmod_traj[]
\shape default
.
 Note that the sample program saves these structures in a multi- PDB disk
 file called 
\shape italic
lmod_trajectory.pdb
\shape default
.
 The final section of the screen output lists the nconf lowest energy structures
 found during the LMOD search.
 Note that some of the lowest energy structures are not necessarily included
 in the 
\shape italic
lmod_traj[]
\shape default
 list, as it depends on the 
\shape italic
mc_option
\shape default
 selection.
 The list displays the energy, the number of times a particular conformation
 was found (increasing numbers are somewhat indicative of a more complete
 search), and the radius of gyration.
 The glob.
 min.
 energy is printed from the sample NAB program, not from LMOD.
 The sample program in 
\emph on
$AMBERCLASSICHOME/examples/nab/lmod_dock
\emph default
 shows how one could write the top ten low-energy structures in separate,
 numbered PDB files.
 
\end_layout

\begin_layout Standard
As a final note, it is instructive to be aware of a simple safeguard that
 LMOD applies .
 A copy of the 
\shape italic
conflib[]
\shape default
 array is saved periodically in a binary disk file called 
\shape italic
conflib.dat
\shape default
.
 Since LMOD searches might run for a long time, in case of a crash low-energy
 structures can be recovered from this file.
 The format of 
\shape italic
conflib.dat
\shape default
 is as follows.
 Each conformation is represented by 3 numbers (double energy, double radius
 of gyration, and int number of times found), followed by the double (x,
 y, z) coordinates of the atoms.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:lmod5"

\end_inset

Tricks of the trade of running LMOD searches
\end_layout

\begin_layout Enumerate
The AMBER atom types HO, HW, and ho all have zero van der Waals parameters
 in all of the AMBER (and some other) force fields.
 Corresponding Aij and Bij coefficients in the PRMTOP file are set to zero.
 This means there is no repulsive wall to prevent two oppositely charged
 atoms, one being of type HO, HW or ho, to fuse as a result of the ever
 decreasing electrostatic energy as they come closer and closer to each
 other.
 This potential problem is rarely manifest in molecular dynamics simulations,
 but it presents a nuisance when running LMOD searches.
 The problem is local minimization, especially "aggressive" TNCG minimization
 (XMIN xo.method=3) that can easily result in atom fusion.
 Therefore, before running an LMOD simulation, the PRMTOP file (let's call
 it prmtop.in) must be processed by running the script "lmodprmtop prmtop.in
 prmtop.out".
 This script will replace all the repulsive Aij coefficients set to zero
 in prmtop.in with a high value of 1e03 in prmtop.out in order to re-create
 the van der Waals wall.
 It is understood that this procedure is parameter fudging; however, note
 that the primary goal of using LMOD is the quick generation of approximate,
 low-energy structures that can be further refined by high-accuracy MD.
\end_layout

\begin_layout Enumerate
LMOD requires that the potential energy surface is continuous everywhere
 to a great degree.
 Therefore, always use a distance dependent dielectric constant in mm_options
 when running searches in vacuo, or use GB solvation (note that GB calculations
 will be slow), and always apply a large cut-off.
 It does make sense to run quick and dirty LMOD searches in vacuo to generate
 low-energy starting structures for MD runs.
 Note that the most likely symptom of discontinuities causing a problem
 is when your NAB program utilizing LMOD is grabbing CPU time, but the LMOD
 search does not seem to progress.
 This is the result of NaN's that often can be seen when print_level is
 set to 
\begin_inset Formula $>$
\end_inset

 0.
\end_layout

\begin_layout Enumerate
LMOD is NOT INTENDED to be used with explicit water models and periodic
 boundary conditions.
 Although explicit-water solvation representation is not recommended, LMOD
 docking can be readily used with crystallographic water molecules as ligands.
\end_layout

\begin_layout Enumerate
Conformations in the conflib and lmod_trajectory files can have very different
 orientations.
 One trick to keep them in a common orientation is to restrain the position
 of, e.g., a single benzene ring.
 This will ensure that the molecule cannot be translated or rotated as a
 whole.
 However, when applying this trick you should set nrotran_dof = 0.
\end_layout

\begin_layout Enumerate
A subset of the atoms of a molecular system can be frozen or tethered/restrained
 in NAB by two different methods.
 Atoms can either be frozen by using the first atom expression argument
 in 
\emph on
mme_init()
\emph default
 or restrained by using the second atom expression argument and the reference
 coordinate array in 
\emph on
mme_init()
\emph default
 along with the 
\emph on
wcons
\emph default
 option in mm_options.
 LMOD searches, especially docking calculations can be run much faster if
 parts of the molecular system can be frozen, because the effective degrees
 of freedom is determined by the size of the flexible part of the system.
 Application of frozen atoms means that a much smaller number of moving
 atoms are moving in the fixed, external potential of the frozen atoms.
 The tethered atom model is expected to give similar results to the frozen
 atom model, but note that the number of degrees of freedom and, therefore,
 the computational cost of a tethered calculation is comparable to that
 of a fully unrestrained system.
 However, the eigenvector calculations are likely to converge faster with
 the tethered systems.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:hcp"

\end_inset

The Generalized Born with Hierarchical Charge Partitioning (GB-HCP)
\end_layout

\begin_layout Standard
GB-HCP (and its latest version, GB-HCPO
\begin_inset CommandInset citation
LatexCommand citep
key "IzadiHCPO"
literal "true"

\end_inset

 ) is a multi-scale, yet fully atomistic, approach to perform MD simulations
 based on the generalized Born model, mainly intended for large and very
 large structures.
 For example, it was used to refine a 1.1M atom structure of 30nm chromatin
 fiber
\begin_inset CommandInset citation
LatexCommand citep
key "IzadiHCPO"
literal "true"

\end_inset

.
 Compared to the reference GB model without further approximations, GB-HCP
 can deliver up to 3 orders of magnitude speedup, depending on structure
 size.
 In contrast to cutoff GB that completely ignores the effect of long range
 electrostatic interactions beyond a certain distance, which can lead to
 serious artifacts under many circumstances such as for highly charged systems,
 GB-HCP takes into account the long range electrostatic interactions by
 using N log N Hierarchical Charge Partitioning (HCP) approximation 
\begin_inset CommandInset citation
LatexCommand citep
key "Anandakrishnan2010Nlogn,Anandakrishnan2011Nlogn"
literal "true"

\end_inset

.
 Based on this method, structures are partitioned into multiple hierarchical
 levels of components using the natural organization of the biomolecular
 structures - atoms, groups, chains, and complexes.
 The charge distribution for each of these components is approximated by
 1 (hcp=1) or 2 (hcp=2 and hcp=4) charges.
 Setting hcp=4 (strongly recommended) uses GB-HCPO, which takes advantage
 of the Optimal Point Charge Approximation approach for placing the approximate
 point charges
\begin_inset CommandInset citation
LatexCommand citep
key "Anandakrishnan13"
literal "true"

\end_inset

: two point charges are placed so that the three lowest order multipole
 moments of the reference charge distribution are optimally reproduced.
 The approximate charges are then used for computing electrostatic interactions
 with distant components while the full set of atomic charges are used for
 nearby components (Figure 40.1).
 The HCP can be used for generalized Born (gb=1-8) simulations, for gas
 phase (dielec=C) and distant dependent dielectric (dielec=R/RL), with or
 without Langevin dynamics (gamma_ln>0).
\end_layout

\begin_layout Standard
The usage of the new feature (hcp=4) requires that the separation between
 the two charges used to approximate the uncharged components is specified
 by dhcp.
 The value of dhcp is empirically adjusted so that the RMS error in force,
 compared to the GB without further approximation, is minimized.
 Our testing on a various set of structures suggests that dhcp=0.25 is optimal
 for many systems.
 However, if further accuracy is desired for specific systems, the value
 for dhcp can be further optimized within the range of 0.1 and 0.4 following
 the steps below.
 To find the optimal value for hcp, one time step simulation for the starting
 configuration of the structure can be performed using the GB model without
 approximation (hcp=0), and with e_debug=1setting, that automatically prints
 out the forces on each atom into a text file called reference.frc.
 Rename reference.frc to exact.frc.
 Then, run one step of the starting configuration of the structure using
 the GB-HCP (hcp=4) by setting the dhcp parameter within the range of 0.1
 and 0.4 in increments of 0.05.
 The reference.frc file produced for each value of dhcp can be compared to
 the exact.frc to compute the RMS error in force.
 The following command line computes the RMS error:
\end_layout

\begin_layout LyX-Code

\size footnotesize
paste exact.frc reference.frc | awk '{x+=($9-$20)^2+($10-$21)^2+($11-$22)^2}END{pr
int sqrt(x/NR)}'
\end_layout

\begin_layout Standard
The optimal value for dhcp is the one that results in minimum RMS error
 in the force.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fighcp"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
The HCP threshold distance.
 For the level 1 approximation shown here, groups within the threshold distance
 are treated exactly using atomic charges, while groups beyond the threshold
 distance are approximated by a small number of charges, e.g.
 1 charge for hcp=1 shown here.
\end_layout

\end_inset


\begin_inset Graphics
	filename /home/case/nabc/doc/illust_hcp.eps
	width 12cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Level 1 HCP approximation
\end_layout

\begin_layout Standard
The HCP option can now be used with one level of approximation (groups)
 using NAB molecular dynamics scripts.
 No additional manipulation of the input structure files is required for
 one level of approximation.
 For an example see AmberTools/examples/hcp/2trx.nab.
 The level 1 approximation is recommended for single domain and small (<
 10,000 atoms) multi-domain structures.
 Speedups of 2x-10x can be realized using the level 1 approximation, depending
 on structure size.
 
\end_layout

\begin_layout Subsection
Level 2 and 3 HCP approximation
\end_layout

\begin_layout Standard
For larger multi-domain structures higher levels of approximations (chains
 and complexes) can be used to achieve up to 3 orders of magnitude speedups,
 depending on structure size.
 The following additional steps are required to include information about
 these higher level components in the prmtop file.
 For an example see AmberTools/examples/hcp/1kx5.nab.
 A fully working example (including the MD run scripts) of a 3 level partitionin
g of a giant structure, one million atom chromatin fiber, can be found at
 http://people.cs.vt.edu/onufriev/software.php.
 
\end_layout

\begin_layout Enumerate
Ensure the pdb file identifies the higher level structures: Chains (level
 2) separated by TER, and Complexes (level 3) separated by REMARK END-OF-COMPLEX
: 
\begin_inset Newline newline
\end_inset

...
 
\begin_inset Newline newline
\end_inset

ATOM ...
 
\begin_inset Newline newline
\end_inset

TER (end of chain) 
\begin_inset Newline newline
\end_inset

ATOM ...
\begin_inset Newline newline
\end_inset

...
\begin_inset Newline newline
\end_inset

ATOM ...
\begin_inset Newline newline
\end_inset

TER (end of chain) 
\begin_inset Newline newline
\end_inset

REMARK END-OF-COMPLEX 
\begin_inset Newline newline
\end_inset

ATOM ...
\end_layout

\begin_layout Enumerate
Execute hcp_getpdb to generate prmtop entries for HCP: hcp_getpdb pdb-filename
 hcp-prmtop
\end_layout

\begin_layout Enumerate
Concatenate the HCP prmtop entries to the end of the standard prmtop file
 generated by LEaP: cat prmtop-file hcp-prmtop > new-prmtop
\end_layout

\begin_layout Enumerate
Use this new prmtop file in the NAB molecular dynamics scripts instead of
 the prmtop file generated by LEaP
\end_layout

\begin_layout Chapter

\series bold
NAB: Introduction
\end_layout

\begin_layout Standard
Nucleic acid builder (
\family sans
nab
\family default
) is a high-level language that facilitates manipulations of macromolecules
 and their fragments.
 
\family sans
nab
\family default
 uses a C-like syntax for variables, expressions and control structures
 (
\family sans
if
\family default
, 
\family sans
for
\family default
, 
\family sans
while
\family default
) and has extensions for operating on molecules (new types and a large number
 of builtins for providing the necessary operations).
 We expect 
\family sans
nab
\family default
 to be useful in model building and coordinate manipulation of proteins
 and nucleic acids, ranging in size from fairly small systems to the largest
 systems for which an atomic level of description makes good computational
 sense.
 As a programming language, it is not a solution or program in itself, but
 rather provides an environment that eases many of the bookkeeping tasks
 involved in writing programs that manipulate three-dimensional structural
 models.
\end_layout

\begin_layout Standard
The current implementation incorporates the following main features:
\end_layout

\begin_layout Enumerate
Objects such as points, atoms, residues, strands and molecules can be referenced
 and manipulated as named objects.
 The internal manipulations involved in operations like merging several
 strands into a single molecule are carried out automatically; in most cases
 the programmer need not be concerned about the internal data structures
 involved.
\end_layout

\begin_layout Enumerate
Rigid body transformations of molecules or parts of molecules can be specified
 with a fairly high-level set of routines.
 This functionality includes rotations and translations about particular
 axis systems, least-squares atomic superposition, and manipulations of
 coordinate frames that can be attached to particular atomic fragments.
\end_layout

\begin_layout Enumerate
Additional coordinate manipulation is achieved by a tight interface to distance
 geometry methods.
 This allows allows relationships that can be defined in terms of internal
 distance constraints to be realized in three-dimensional structural models.
 
\family sans
nab
\family default
 includes subroutines to manipulate distance bounds in a convenient fashion,
 in order to carry out tasks such as working with fragments within a molecule
 or establishing bounds based on model structures.
\end_layout

\begin_layout Enumerate
Force field calculations (
\begin_inset Formula $e.g.$
\end_inset

 molecular dynamics and minimization) can be carried out with an implementation
 of the AMBER force field.
 This works in both three and four dimensions, but periodic simulations
 are not (yet) supported.
 However, the generalized Born models implemented in Amber are also implemented
 here, which allows many interesting simulations to be carried out without
 requiring periodic boundary conditions.
 The force field can be used to carry out minimization, molecular dynamics,
 or normal mode calculations.
 Conformational searching and docking can be carried out using a "low-mode"
 (LMOD) procedure that performs sampling exploring the potential energy
 surface along low-frequency vibrational directions.
\end_layout

\begin_layout Enumerate

\family sans
nab
\family default
 also implements a form of regular expressions that we call 
\shape italic
atom regular expressions
\shape default
, which provide a uniform and convenient method for working on parts of
 molecules.
\end_layout

\begin_layout Enumerate
Many of the general programming features of the 
\shape italic
awk
\shape default
 language have been incorporated in 
\family sans
nab
\family default
.
 These include regular expression pattern matching, 
\shape italic
hashedarrays
\shape default
 
\shape italic
\emph on
(i.e., arrays with strings as indices), the splitting of strings into fields,
 and simplified string manipulations.
\end_layout

\begin_layout Enumerate
There are built-in procedures for linking 
\family sans
nab
\family default
 routines to other routines written in C or Fortran, including access to
 most library routines normally available in system math libraries.
\end_layout

\begin_layout Standard
Our hope is that 
\family sans
nab
\family default
 will serve to formalize the step-by-step process that is used to build
 complex model structures, and will facilitate the management and use of
 higher level symbolic constraints.
 Writing a program to create a structure forces more of the model's assumptions
 to be explicit in the program itself.
 And an 
\family sans
nab
\family default
 description can serve as a way to show a model's salient features, much
 like helical parameters are used to characterize duplexes.
\end_layout

\begin_layout Standard
This chapters introduces the language through a series of sample programs,
 and illustrate the programming interfaces provided.
 The examples are chosen not only to show the syntax of the language, but
 also to illustrate potential approaches to the construction of some unusual
 nucleic acids, including DNA double- and triple-helices, RNA pseudoknots,
 four-arm junctions, and DNA-protein interactions.
 Subsequent chapters give a more formal and careful description of the requireme
nts of the language itself.
\end_layout

\begin_layout Standard
The basic literature reference for the code is T.
 Macke and D.A.
 Case.
 Modeling unusual nucleic acid structures.
 In 
\shape italic
Molecular Modeling of Nucleic Acids
\shape default
, N.B.
 Leontes and J.
 SantaLucia, Jr., eds.
 (Washington, DC: American Chemical Society, 1998), pp.
 379-393.
 Users are requested to include this citation in papers that make use of
 NAB.
\end_layout

\begin_layout Standard
The authors thank Jarrod Smith, Garry Gippert, Paul Beroza, Walter Chazin,
 Doree Sitkoff and Vickie Tsui for advice and encouragement.
 Special thanks to Neill White (who helped in updating documentation, in
 preparing the distance geometry database, and in testing and porting portions
 of the code), and to Will Briggs (who wrote the fiber-diffraction routines).
 Thanks also to Chris Putnam and M.L.
 Dodson for bug reports.
\end_layout

\begin_layout Section

\series bold
Background
\end_layout

\begin_layout Standard
Using a computer language to model polynucleotides follows logically from
 the fundamental nature of nucleic acids, which can be described as 
\begin_inset Quotes eld
\end_inset

conflicted
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

contradictory
\begin_inset Quotes erd
\end_inset

 molecules.
 Each repeating unit contains seven rotatable bonds (creating a very flexible
 backbone), but also contains a rigid, planar base which can participate
 in a limited number of regular interactions, such as base pairing and stacking.
 The result of these opposing tendencies is a family of molecules that have
 the potential to adopt a virtually unlimited number of conformations, yet
 have very strong preferences for regular helical structures and for certain
 types of loops.
\end_layout

\begin_layout Standard
The controlled flexibility of nucleic acids makes them difficult to model.
 On one hand, the limited range of regular interactions for the bases permits
 the use of simplified and more abstract geometric representations.
 The most common of these is the replacement of each base by a plane, reducing
 the representation of a molecule to the set of transformations that relate
 the planes to each other.
 On the other hand, the flexible backbone makes it likely that there are
 entire families of nucleic acid structures that satisfy the constraints
 of any particular modeling problem.
 Families of structures must be created and compared to the model's constraints.
 From this we can see that modeling nucleic acids involves not just chemical
 knowledge but also three processes-abstraction, iteration and testing-that
 are the basis of programming.
\end_layout

\begin_layout Standard
Molecular computation languages are not a new idea.
 Here we briefly describe some past approaches to nucleic acid modeling,
 to provide a context for 
\family sans
nab.
\end_layout

\begin_layout Subsection

\series bold
Conformation build-up procedures
\end_layout

\begin_layout Standard
MC-SYM
\begin_inset CommandInset citation
LatexCommand citep
key "Major91,Gautheret93,Turcotte95"
literal "true"

\end_inset

 is a high level molecular description language used to describe single
 stranded RNA molecules in terms of functional constraints.
 It then uses those constraints to generate structures that are consistent
 with that description.
 MC-SYM structures are created from a small library of conformers for each
 of the four nucleotides, along with transformation matrices for each base.
 Building up conformers from these starting blocks can quickly generate
 a very large tree of structures.
 The key to MC-SYM's success is its ability to prune this tree, and the
 user has considerable flexibility in designing this pruning process.
\end_layout

\begin_layout Standard
In a related approach, Erie 
\shape italic
et al.
\shape default

\begin_inset CommandInset citation
LatexCommand cite
key "Erie93"
literal "true"

\end_inset

 used a Monte-Carlo build-up procedure based on sets of low energy dinucleotide
 conformers to construct longer low energy single stranded sequences that
 would be suitable for incorporation into larger structures.
 Sets of low energy dinucleotide conformers were created by selecting one
 value from each of the sterically allowed ranges for the six backbone torsion
 angles and 
\begin_inset Formula $\chi$
\end_inset

.
 Instead of an exhaustive build- up search over a small set of conformers,
 this method samples a much larger region of conformational space by randomly
 combining members of a larger set of initial conformers.
 Unlike strict build-up procedures, any member of the initial set is allowed
 to follow any other member, even if their corresponding torsion angles
 do not exactly match, a concession to the extreme flexibility of the nucleic
 acid backbone.
 A key feature determined the probabilities of the initial conformers so
 that the probability of each created structure accurately reflected its
 energy.
\end_layout

\begin_layout Standard
Tung and Carter
\begin_inset CommandInset citation
LatexCommand citep
key "Tung94,Carter96"
literal "true"

\end_inset

 have used a reduced coordinate system in the 
\family sans
NAMOT
\family default
 (nucleic acid modeling tool) program to rotation matrices that build up
 nucleic acids from simplified descriptions.
 Special procedures allow base-pairs to be preserved during deformations.
 This procedure allows simple algorithmic descriptions to be constructed
 for non-regular structures like intercalation sites, hairpins, pseudoknots
 and bent helices.
\end_layout

\begin_layout Subsection

\series bold
Base-first strategies
\end_layout

\begin_layout Standard
An alternative approach that works well for some problems is the "base-first"
 strategy, which lays out the bases in desired locations, and attempts to
 find conformations of the sugar-phosphate backbone to connect them.
 Rigid-body transformations often provide a good way to place the bases.
 One solution to the backbone problem would be to determine the relationship
 between the helicoidal parameters of the bases and the associated backbone/suga
r torsions.
 Work along these lines suggests that the relationship is complicated and
 non-linear.
\begin_inset CommandInset citation
LatexCommand cite
key "Zhurkin78"
literal "true"

\end_inset

 However, considerable simplification can be achieved if instead of using
 the complete relationship between all the helicoidal parameters and the
 entire backbone, the problem is limited to describing the relationship
 between the helicoidal parameters and the backbone/sugar torsion angles
 of single nucleotides and then using this information to drive a constraint
 minimizer that tries to connect adjacent nucleotides.
 This is the approach used in JUMNA,
\begin_inset CommandInset citation
LatexCommand citep
key "Lavery95"
literal "true"

\end_inset

 which decomposes the problem of building a model nucleic acid structure
 into the constraint satisfaction problem of connecting adjacent flexible
 nucleotides.
 The sequence is decomposed into 3'-nucleotide monophosphates.
 Each nucleotide has as independent variables its six helicoidal parameters,
 its glycosidic torsion angle, three sugar angles, two sugar torsions and
 two backbone torsions.
 JUMNA seeks to adjust these independent variables to satisfy the constraints
 involving sugar ring and backbone closure.
\end_layout

\begin_layout Standard
Even constructing the base locations can be a non-trivial modeling task,
 especially for non-standard structures.
 Recognizing that coordinate frames should be chosen to provide a simple
 description of the transformations to be used, Gabarro-Arpa 
\shape italic
et al.
\shape default

\begin_inset CommandInset citation
LatexCommand citep
key "Gabarro-Arpa92"
literal "true"

\end_inset

 devised 
\begin_inset Quotes eld
\end_inset

Object Command Language
\begin_inset Quotes erd
\end_inset

 (OCL), a small computer language that is used to associate parts of molecules
 called objects, with arbitrary coordinate frames defined by sets of their
 atoms or numerical points.
 OCL can 
\begin_inset Quotes eld
\end_inset

link
\begin_inset Quotes erd
\end_inset

 objects, allowing other objects' positions and orientations to be described
 in the frame of some reference object.
 Information describing these frames and links is written out and used by
 the program MORCAD
\begin_inset CommandInset citation
LatexCommand citep
key "LeBret91"
literal "true"

\end_inset

 which does the actual object transformations.
\end_layout

\begin_layout Standard
OCL contains several elements of a molecular modeling language.
 Users can create and operate on sets of atoms called objects.
 Objects are built by naming their component atoms and to simplify creation
 of larger objects, expressions, 
\family sans
IF
\family default
 statements, an iterated 
\family sans
FOR
\family default
 loop and limited I/O are provided.
 Another nice feature is the equivalence between a literal 3-D point and
 the position represented by an atom's name.
 OCL includes numerous built-in functions on 3-vectors like the dot and
 cross products as well as specialized molecular modeling functions like
 creating a vector that is normal to an object.
 However, OCL is limited because these language elements can only be assembled
 into functions that define coordinate frames for molecules that will be
 operated on by MORCAD.
 Functions producing values of other data types and stand-alone OCL programs
 are not possible.
\end_layout

\begin_layout Section

\series bold
Methods for structure creation
\end_layout

\begin_layout Standard
As a structure-generating tool, 
\family sans
nab
\family default
 provides three methods for building models.
 They are rigid-body transformations, metric matrix distance geometry, and
 molecular mechanics.
 The first two methods are good initial methods, but almost always create
 structures with some distortion that must be removed.
 On the other hand, molecular mechanics is a poor initial method but very
 good at refinement.
 Thus the three methods work well together.
\end_layout

\begin_layout Subsection

\shape italic
\emph on
Rigid-body transformations
\end_layout

\begin_layout Standard
Rigid-body transformations create model structures by applying coordinate
 transformations to members of a set of standard residues to move them to
 new positions and orientations where they are incorporated into the growing
 model structure.
 The method is especially suited to helical nucleic acid molecules with
 their highly regular structures.
 It is less satisfactory for more irregular structures where internal rearrangem
ent is required to remove bad covalent or non-bonded geometry, or where
 it may not be obvious how to place the bases.
 Details are given in Chap.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:NABrigid"

\end_inset

.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 uses the 
\family sans
matrix
\family default
 type to hold a 4
\begin_inset Formula $\times$
\end_inset

4 transformation matrix.
 Transformations are applied to residues and molecules to move them into
 new orientations or positions.
 
\family sans
nab
\family default
 does 
\shape italic
not
\shape default
 require that transformations applied to parts of residues or molecules
 be chemically valid.
 It simply transforms the coordinates of the selected atoms leaving it to
 the user to correct (or ignore) any chemically incorrect geometry caused
 by the transformation.
\end_layout

\begin_layout Standard
Every 
\family sans
nab
\family default
 molecule includes a frame, or 
\begin_inset Quotes eld
\end_inset

handle
\begin_inset Quotes erd
\end_inset

 that can be used to position two molecules in a generalization of superimpositi
on.
 Traditionally, when a molecule is superimposed on a reference molecule,
 the user first forms a correspondence between a set of atoms in the first
 molecule and another set of atoms in the reference molecule.
 The superimposition algorithm then determines the transformation that will
 minimize the rmsd between corresponding atoms.
 Because superimposition is based on actual atom positions, it requires
 that the two molecules have a common substructure, and it can only place
 one molecule on top of another and not at an arbitrary point in space.
\end_layout

\begin_layout Standard
The 
\family sans
nab
\family default
 frame is a way around these limitations.
 A frame is composed of three orthonormal vectors originally aligned along
 the axes of a right handed coordinate frame centered on the origin.
 
\family sans
nab
\family default
 provides two builtin functions 
\family sans
setframe()
\family default
 and 
\family sans
setframep()
\family default
 that are used to reposition this frame based on vectors defined by atom
 expressions or arbitrary 3-D points, respectively.
 To position two molecules via their frames, the user moves the frames so
 that when they are superimposed via the 
\family sans
nab
\family default
 builtin 
\family sans
alignframe()
\family default
, the two molecules have the desired orientation.
 This is a generalization of the methods described above for OCL.
\end_layout

\begin_layout Subsection

\shape italic
\emph on
Distance geometry
\end_layout

\begin_layout Standard

\family sans
nab
\family default
's second initial structure-creation method is 
\shape italic
metric matrix distance geometry,
\begin_inset CommandInset citation
LatexCommand cite
key "Crippen88,Spellmeyer97"
literal "true"

\end_inset


\shape default
 which can be a very powerful method of creating initial structures.
 It has two main strengths.
 First, since it uses internal coordinates, the initial position of atoms
 about which nothing is known may be left unspecified.
 This has the effect that distance geometry models use only the information
 the modeler considers valid.
 No assumptions are required concerning the positions of unspecified atoms.
 The second advantage is that much structural information is in the form
 of distances.
 These include constraints from NMR or fluorescence energy transfer experiments,
 implied propinquities from chemical probing and footprinting, and tertiary
 interactions inferred from sequence analysis.
 Distance geometry provides a way to formally incorporate this information,
 or other assumptions, into the model-building process.
 Details are given in Chap.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:NABdistance"

\end_inset

.
\end_layout

\begin_layout Standard
Distance geometry converts a molecule represented as a set of interatomic
 distances into a 3-D structure.
 
\family sans
nab
\family default
 has several builtin functions that are used together to provide metric
 matrix distance geometry.
 A 
\family sans
bounds
\family default
 object contains the molecule's interatomic distance bounds matrix and a
 list of its chiral centers and their volumes.
 The function 
\family sans
newbounds()
\family default
 creates a 
\family sans
bounds
\family default
 object containing a distance bounds matrix containing initial upper and
 lower bounds for every pair of atoms, and a list of the molecule's chiral
 centers and their volumes.
 Distance bounds for pairs of atoms involving only a single residue are
 derived from that residue's coordinates.
 The 1,2 and 1,3 distance bounds are set to the actual distance between
 the atoms.
 The 1,4 distance lower bound is set to the larger of the sum of the two
 atoms van der Waals radii or their 
\shape italic
syn
\shape default
 (torsion angle = 0o) distance, and the upper bound is set to their 
\shape italic
anti
\shape default
 (torsion angle = 180o) distance.
 
\family sans
newbounds()
\family default
 also initializes the list of the molecule's chiral centers.
 Each chiral center is an ordered list of four atoms and the volume of the
 tetrahedron those four atoms enclose.
 Each entry in a 
\family sans
nab
\family default
 residue library contains a list of the chiral centers composed entirely
 of atoms in that residue.
\end_layout

\begin_layout Standard
Once a 
\family sans
bounds
\family default
 object has been initialized, the modeler can use functions to tighten,
 loosen or set other distance bounds and chiralities that correspond to
 experimental measurements or parts of the model's hypothesis.
 The functions 
\family sans
andbounds()
\family default
 and 
\family sans
orbounds()
\family default
 allow logical manipulation of bounds.
 
\family sans
setbounds_from_db()
\family default
 Allows distance information from a model structure or a database to be
 incorporated into a part of the current molecule's 
\family sans
bounds
\family default
 object, facilitating transfer of information between partially-built structures.
\end_layout

\begin_layout Standard
These primitive functions can be incorporated into higher-level routines.
 For example the functions 
\family sans
stack()
\family default
 and 
\family sans
watsoncrick()
\family default
 set the bounds between the two specified bases to what they would be if
 they were stacked in a strand or base-paired in a standard Watson/Crick
 duplex, with ranges of allowed distances derived from an analysis of structures
 in the Nucleic Acid Database.
\end_layout

\begin_layout Standard
After all experimental and model constraints have been entered into the
 
\family sans
bounds
\family default
 object, the function 
\family sans
tsmooth()
\family default
 applies 
\begin_inset Quotes eld
\end_inset

triangle smoothing
\begin_inset Quotes erd
\end_inset

 to pull in the large upper bounds, since the maximum distance between two
 atoms can not exceed the sum of the upper bounds of the shortest path between
 them.
 Random pairwise metrization
\begin_inset CommandInset citation
LatexCommand cite
key "Hodsdon96"
literal "true"

\end_inset

 can also be used to help ensure consistency of the bounds and to improve
 the sampling of conformational space.
 The function 
\family sans
embed()
\family default
 finally takes the smoothed bounds and converts them into a 3-D object.
 The newly embedded coordinates are subject to conjugate gradient refinement
 against the distance and chirality information contained in 
\family sans
bounds
\family default
.
 The call to 
\family sans
embed()
\family default
 is usually placed in a loop to explore the diversity of the structures
 the bounds represent.
\end_layout

\begin_layout Subsection

\shape italic
\emph on
Molecular mechanics
\end_layout

\begin_layout Standard
The final structure creation method that 
\family sans
nab
\family default
 offers is 
\shape italic
molecular mechanics
\shape default
.
 This includes both energy minimization and molecular dynamics - simulated
 annealing.
 Since this method requires a good estimate of the initial position of every
 atom in a structure, it is not suitable for creating initial structures.
 However, given a reasonable initial structure, it can be used to remove
 bad initial geometry and to explore the conformational space around the
 initial structure.
 This makes it a good method for refining structures created either by rigid
 body transformations or distance geometry.
 
\family sans
nab
\family default
 has its own 3-D/4-D molecular mechanics package that implements several
 AMBER force fields and reads AMBER parameter and topology files.
 Solvation effects can also be modelled with generalized Born continuum
 models.
 Details are given in Chap.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:NABmm"

\end_inset

.
\end_layout

\begin_layout Standard
Our hope is that 
\family sans
nab
\family default
 will serve to formalize the step-by-step process that is used to build
 complex model structures.
 It will facilitate the management and use of higher level symbolic constraints.
 Writing a program to create a structure forces one to make explicit more
 of the model's assumptions in the program itself.
 And an nab description can serve as a way to exhibit a model's salient
 features, much like helical parameters are used to characterize duplexes.
 So far, nab has been used to construct models for synthetic Holliday junctions,
\begin_inset CommandInset citation
LatexCommand cite
key "Macke92"
literal "true"

\end_inset

 calcyclin dimers,
\begin_inset CommandInset citation
LatexCommand cite
key "Potts95"
literal "true"

\end_inset

 HMG-protein/DNA complexes,
\begin_inset CommandInset citation
LatexCommand cite
key "Love95"
literal "true"

\end_inset

 active sites of Rieske iron-sulfur proteins,
\begin_inset CommandInset citation
LatexCommand cite
key "Gurbiel96"
literal "true"

\end_inset

 and supercoiled DNA.
\begin_inset CommandInset citation
LatexCommand cite
key "Macke96"
literal "true"

\end_inset

 The Examples chapter below provides a number of other sample applications.
\end_layout

\begin_layout Section

\series bold
Compiling nab Programs
\end_layout

\begin_layout Standard
Compiling 
\family sans
nab
\family default
 programs is very similar to compiling other high-level language programs,
 such as C and Fortran.
 The command line syntax is
\end_layout

\begin_layout LyX-Code

\size small
nab [-O] [-c] [-v] [-noassert] [-nodebug] [-o file] [-Dstring] 
\shape italic
file(s)
\end_layout

\begin_layout Standard
where
\end_layout

\begin_layout LyX-Code

\size small
-O optimizes the object code
\end_layout

\begin_layout LyX-Code

\size small
-c suppresses the linking stage with ld and produces a .o file
\end_layout

\begin_layout LyX-Code

\size small
-v verbosely reports on the compile process
\end_layout

\begin_layout LyX-Code

\size small
-noassert causes the compiler to ignore assert statements
\end_layout

\begin_layout LyX-Code

\size small
-nodebug causes the compiler to ignore debug statements
\end_layout

\begin_layout LyX-Code

\size small
-o 
\shape italic
file
\shape default
 names the output file (deafult is 
\begin_inset Quotes eld
\end_inset

a.out
\begin_inset Quotes erd
\end_inset

 on most operating systems)
\end_layout

\begin_layout LyX-Code

\size small
-D
\shape italic
string
\shape default
 defines 
\shape italic
string
\shape default
 to the C preprocessor
\end_layout

\begin_layout Standard
Linking Fortran and C object code with 
\family sans
nab
\family default
 is accomplished simply by including the source files on the command line
 with the 
\family sans
nab
\family default
 file.
 For instance, if a 
\family sans
nab
\family default
 program 
\shape italic
bar.nab
\shape default
 uses a C function defined in the file 
\shape italic
foo.c
\shape default
, compiling and linking 
\family sans
nab
\family default
 code would be accomplished by
\end_layout

\begin_layout LyX-Code

\size small
nab -o bar bar.nab foo.c
\end_layout

\begin_layout Standard
The result is an executable 
\family sans
bar
\family default
 file.
 To run the program, type:
\end_layout

\begin_layout LyX-Code
./bar <command line options needed go here>
\end_layout

\begin_layout Section

\series bold
Parallel Execution
\begin_inset CommandInset label
LatexCommand label
name "sec:nab-parallel"

\end_inset


\end_layout

\begin_layout Standard
The generalized Born energy routines (for both first and second derivatives)
 include directives that will allow for parallel execution on machines that
 support this option.
 Once you have some level of comfort and experience with the single-CPU
 version, you can enable parallel execution by supplying one of several
 parallelization options (
\shape italic
-openmp, -mpi
\shape default
 or 
\shape italic
-scalapack
\shape default
) to configure, by re-building the NAB compiler and by recompiling your
 NAB program.
\end_layout

\begin_layout Standard
The 
\shape italic
-openmp
\shape default
 option enables parallel execution under OpenMP on shared- memory machines.
 To enable OpenMP execution, add the 
\shape italic
-openmp
\shape default
 option to configure, re-build the NAB compiler and re-compile your NAB
 program.
 Then, if you set the OMP_NUM_THREADS
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
OMP
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

NUM
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

THREADS
\end_layout

\end_inset

 environment variable to the number of threads that you wish to perform
 parallel execution, the Born energy computation will execute in parallel.
\end_layout

\begin_layout Standard
The 
\shape italic
-mpi
\shape default
 option enables parallel execution under MPI
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MPI
\end_layout

\end_inset

 on either clusters or shared-memory machines.
 To enable MPI execution, add the 
\shape italic
-mpi
\shape default
 option to configure and re-build the NAB compiler.
 You will not need to modify your NAB programs; just execute them with an
 
\family typewriter
mpirun
\family default
 command.
 
\end_layout

\begin_layout Standard
The 
\shape italic
-scalapack
\shape default
 option enables parallel execution under MPI on either clusters or shared-memory
 machines, and in addition uses the Scalable LAPACK (ScaLAPACK
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ScaLAPACK
\end_layout

\end_inset

) library for parallel linear algebra computation that is required to calculate
 the second derivatives of the generalized Born energy, to perform Newton-Raphso
n minimization or to perform normal mode analysis.
 For computations that do not involve linear algebra (such as conjugate
 gradients minimization or molecular dynamics) the 
\shape italic
-scalapack
\shape default
 option functions in the same manner as the 
\shape italic
-mpi
\shape default
 option.
 Do not use the 
\shape italic
-mpi
\shape default
 and 
\shape italic
-scalapack
\shape default
 options simultaneously.
 Use the 
\shape italic
-scalapack
\shape default
 option only when ScaLAPACK has been installed on your cluster or shared-memory
 machine.
\end_layout

\begin_layout Standard
In order that the 
\shape italic
-mpi
\shape default
 or 
\shape italic
-scalapack
\shape default
 options result in a correct build of the NAB compiler, the configure script
 must specify linking of the MPI library, or ScaLAPACK and BLACS libraries,
 as part of that build.
 These libraries are specified for Sun machines in the solaris_cc section
 of the configure script.
 If you want to use MPI or ScaLAPACK on a machine other than a Sun machine,
 you will need to modify the configure script to link these libraries in
 a manner analogous to what occurs in the solaris_cc section of the script.
\end_layout

\begin_layout Standard
There are three options to specify the manner in which NAB supports linear
 algebra computation.
 The 
\shape italic
-scalapack
\shape default
 option discussed above specifies ScaLAPACK.
 The 
\shape italic
-perflib
\shape default
 option specifies Sun TM Performance Library TM , a multi-threaded implementatio
n of LAPACK.
 If neither 
\shape italic
-scalapack
\shape default
 nor 
\shape italic
-perflib
\shape default
 is specified, then linear algebra computation will be performed by a single
 CPU using LAPACK.
 In this last case, the Intel MKL library will be used if the 
\family typewriter
MKL_HOME
\family default
 environment variable is set at configure time.
 Absent that, if a 
\family typewriter
GOTO
\family default
 environment variable is found, the GotoBLAS libraries will be used.
\end_layout

\begin_layout Standard
The parallel execution capability of NAB was developed primarily on Sun
 machines, and has also been tested on the SGI Altix platform.
 But it has been much less widely-used than have other parts of NAB, so
 you should certainly run some tests with your system to ensure that single-CPU
 and parallel runs give the same results.
\end_layout

\begin_layout Section

\series bold
First Examples
\end_layout

\begin_layout Standard
This section introduces 
\family sans
nab
\family default
 via three simple examples.
 All 
\family sans
nab
\family default
 programs in this user manual are set in Courier, a typewriter style font.
 The line numbers at the beginning of each line are not parts of the programs
 but have been added to make it easier to refer to specific program sections.
\end_layout

\begin_layout Subsection

\series bold
B-form DNA duplex
\end_layout

\begin_layout Standard
One of the goals of 
\family sans
nab
\family default
 was that simple models should require simple programs.
 Here is an 
\family sans
nab
\family default
 program that creates a model of a B-form DNA duplex and saves it as a PDB
 file.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left,numberstyle={\tiny}"
inline false
status collapsed

\begin_layout Plain Layout

// Program 1 - Average B-form DNA duplex
\end_layout

\begin_layout Plain Layout

molecule m;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = bdna( "gcgttaacgc" );
\end_layout

\begin_layout Plain Layout

putpdb( "gcg10.pdb", m );
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Line 2 is a declaration used to tell the 
\family sans
nab
\family default
 compiler that the name 
\family sans
m
\family default
 is a molecule variable, something 
\family sans
nab
\family default
 programs use to hold structures.
 Line 4 creates the actual model using the predefined function 
\family sans
bdna()
\family default
.
 This function's argument is a literal string which represents the sequence
 of the duplex that is to be created.
 Here's how 
\family sans
bdna()
\family default
 converts this string into a molecule.
 Each letter stands for one of the four standard bases: 
\family sans
a
\family default
 for adenine, 
\family sans
c
\family default
 for cytosine, 
\family sans
g
\family default
 for guanine and 
\family sans
t
\family default
 for thymine.
 In a standard DNA duplex every adenine is paired with thymine and every
 cytosine with guanine in an antiparallel double helix.
 Thus only one strand of the double helix has to be specified.
 As 
\family sans
bdna()
\family default
 reads the string from left to right, it creates one strand from 5' to 3'
 (5'-
\family sans
gcgttaacgc
\family default
 -3'), automatically creating the other antiparallel strand using Watson/Crick
 pairing.
 It uses a uniform helical step of 3.38 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 rise and 36.0o twist.
 Naturally, 
\family sans
nab
\family default
 has other ways to create helical molecules with arbitrary helical parameters
 and even mismatched base pairs, but if you need some 
\begin_inset Quotes eld
\end_inset

average
\begin_inset Quotes erd
\end_inset

 DNA, you should be able to get it without having to specify every detail.
 The last line uses the 
\family sans
nab
\family default
 builtin 
\family sans
putpdb()
\family default
 to write the newly created duplex to the file 
\family sans
gcg10.pdb
\family default
.
\end_layout

\begin_layout Standard
Program 1 is about the smallest 
\family sans
nab
\family default
 program that does any real work.
 Even so, it contains several elements common to almost all 
\family sans
nab
\family default
 programs.
 The two consecutive forward slashes in line 1 introduce a comment which
 tells the 
\family sans
nab
\family default
 compiler to ignore all characters between them and the end of the line.
 This particular comment begins in column 1, but that is not required as
 comments may begin in any column.
 Line 3 is blank.
 It serves no purpose other than to visually separate the declaration part
 from the action part.
 
\family sans
nab
\family default
 input is free format.
 Runs of white space characters—spaces, tabs, blank lines and page breaks—act
 like a single space which is required only to separate reserved words like
 
\family sans
molecule
\family default
 from identifiers like 
\family sans
m
\family default
.
 Thus white space can be used to increase readability.
\end_layout

\begin_layout Subsection

\series bold
Superimpose two molecules
\end_layout

\begin_layout Standard
Here is another simple 
\family sans
nab
\family default
 program.
 It reads two DNA molecules and superimposes them using a rotation matrix
 made from a correspondence between their 
\family sans
C1'
\family default
 atoms.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

 // Program 2 - Superimpose two DNA duplexes
\end_layout

\begin_layout Plain Layout

molecule m, mr;
\end_layout

\begin_layout Plain Layout

float r;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = getpdb( "test.pdb" );
\end_layout

\begin_layout Plain Layout

mr = getpdb( "gcg10.pdb" );
\end_layout

\begin_layout Plain Layout

superimpose( m, "::C1'", mr, "::C1'" );
\end_layout

\begin_layout Plain Layout

putpdb( "test.sup.pdb", m );
\end_layout

\begin_layout Plain Layout

rmsd( m, "::C1'", mr, "::C1'", r );
\end_layout

\begin_layout Plain Layout

printf( "rmsd = %8.3fn", r );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This program uses three variables—two molecules, 
\family sans
m
\family default
 and 
\family sans
mr
\family default
 and one float, 
\family sans
r
\family default
.
 An 
\family sans
nab
\family default
 declaration can include any number of variables of the same type, but variables
 of different types must be in separate declarations.
 The builtin function 
\family sans
getpdb()
\family default
 reads two molecules in PDB format from the files 
\family sans
test.pdb
\family default
 and 
\family sans
gcg10.pdb
\family default
 into the variables 
\family sans
m
\family default
 and 
\family sans
mr
\family default
.
 The superimposition is done with the builtin function 
\family sans
superimpose()
\family default
.
 The arguments to 
\family sans
superimpose()
\family default
 are two molecules and two 
\begin_inset Quotes eld
\end_inset

atom expressions
\begin_inset Quotes erd
\end_inset

.
 
\family sans
nab
\family default
 uses atom expressions as a compact way of specifying sets of atoms.
 Atom expressions and atom names are discussed in more detail below but
 for now an atom expression is a pattern that selects one or more of the
 atoms in a molecule.
 In this example, they select all atoms with names 
\family sans
C1'
\family default
.
\end_layout

\begin_layout Standard

\family sans
superimpose()
\family default
 uses the two atom expressions to associate the corresponding 
\family sans
C1'
\family default
 carbons in the two molecules.
 It uses these correspondences to create a rotation matrix that when applied
 to 
\family sans
m
\family default
 will minimize the root mean square deviation between the pairs.
 It applies this matrix to 
\family sans
m
\family default
, 
\begin_inset Quotes eld
\end_inset

moving
\begin_inset Quotes erd
\end_inset

 it on to 
\family sans
mr
\family default
.
 The transformed molecule 
\family sans
m
\family default
 is written out to the file 
\family sans
test.sup.pdb
\family default
 in PDB format using the builtin function 
\family sans
putpdb()
\family default
.
 Finally the builtin function 
\family sans
rmsd()
\family default
 is used to compute the actual root mean square deviation between corresponding
 atoms in the two superimposed molecules.
 It returns the result in 
\family sans
r
\family default
, which is written out using the C-like I/O function 
\family sans
printf()
\family default
.
 
\family sans
rmsd()
\family default
 also uses two atom expressions to select the corresponding pairs.
 In this example, they are the same pairs that were used in the superimposition,
 but any set of pairs would have been acceptable.
 An example of how this might be used would be to use different subsets
 of corresponding atoms to compute trial superimpositions and then use 
\family sans
rmsd()
\family default
 over all atoms of both molecules to determine which subset did the best
 job.
\end_layout

\begin_layout Subsection

\series bold
Place residues in a standard orientation
\end_layout

\begin_layout Standard
This is the last of the introductory examples.
 It places nucleic acid monomers in an orientation that is useful for building
 Watson/Crick base pairs.
 It uses several atom expressions to create a frame or handle attached to
 an 
\family sans
nab
\family default
 molecule that permits easy movement along important 
\begin_inset Quotes eld
\end_inset

molecular directions
\begin_inset Quotes erd
\end_inset

.
 In a standard Watson/Crick base pair the 
\family sans
C4
\family default
 and 
\family sans
N1
\family default
 atoms of the purine base and the 
\family sans
H3
\family default
, 
\family sans
N3
\family default
 and 
\family sans
C6
\family default
 atoms of the pyrimidine base are colinear.
 Such a line is obviously an important molecular direction and would make
 a good coordinate axis.
 Program 3 aligns these monomers so that this hydrogen bond is along the
 Y-axis.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 3 - orient nucleic acid monomers
\end_layout

\begin_layout Plain Layout

molecule m; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = getpdb( "ADE.pdb" );
\end_layout

\begin_layout Plain Layout

setframe( 2, m, // also for GUA
\end_layout

\begin_layout Plain Layout

          "::C4",
\end_layout

\begin_layout Plain Layout

          "::C5", "::N3", 
\end_layout

\begin_layout Plain Layout

          "::C4", "::N1" );
\end_layout

\begin_layout Plain Layout

alignframe( m, NULL );
\end_layout

\begin_layout Plain Layout

putpdb( "ADE.std.pdb", m );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = getpdb( "THY.pdb" ); 
\end_layout

\begin_layout Plain Layout

setframe( 2, m, // also for CYT & URA 
\end_layout

\begin_layout Plain Layout

          "::C6", 
\end_layout

\begin_layout Plain Layout

          "::C5", "::N1", 
\end_layout

\begin_layout Plain Layout

          "::C6", "::N3" ); 
\end_layout

\begin_layout Plain Layout

alignframe( m, NULL ); 
\end_layout

\begin_layout Plain Layout

putpdb( "THY.std.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/case/nabc/doc/ADE.THY.eps
	lyxscale 60
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig.frame1"

\end_inset

ADE and THY after execution of Program 3.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This program uses only one variable, the molecule 
\family sans
m
\family default
.
 Execution begins on line 4 where the builtin 
\family sans
getpdb()
\family default
 is used to read in the coordinates of an adenine (created elsewhere) from
 the file 
\family sans
ADE.pdb
\family default
.
 The 
\family sans
nab
\family default
 builtin 
\family sans
setframe()
\family default
 creates a coordinate frame for this molecule using vectors defined by some
 of its atoms as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig.frame1"

\end_inset

.
 The first atom expression (line 6) sets the origin of this coordinate frame
 to be the coordinates of the 
\family sans
C4
\family default
 atom.
 The two atom expressions on line 7 set the X direction from the coordinates
 of the 
\family sans
C5
\family default
 to the coordinates of the 
\family sans
N3
\family default
.
 The last two atom expressions set the Y direction from the 
\family sans
C4
\family default
 to the 
\family sans
N1
\family default
.
 The Z-axis is created by the cross product X
\begin_inset Formula $\times$
\end_inset

Y.
 Frames are thus like sets of local coordinates that can be attached to
 molecules and used to facilitate defining transformations; a more complete
 discussion is given in the section 
\series bold
Frames
\series default
 below.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 requires that the coordinate axes of all frames be orthogonal, and while
 the X and Y axes as specified here are close, they are not quite exact.
 
\family sans
setframe()
\family default
 uses its first parameter to specify which of the original two axes is to
 be used as a formal axis.
 If this parameter is 
\family sans
1
\family default
, then the specified X axis becomes the formal X axis and Y is recreated
 from Z
\begin_inset Formula $\times$
\end_inset

X; if the value is 
\family sans
2
\family default
, then the specified Y axis becomes the formal Y axis and X is recreated
 from Y
\begin_inset Formula $\times$
\end_inset

Z.
 In this example the specified Y axis is used and X is recreated.
 The builtin 
\family sans
alignframe()
\family default
 transforms the molecule so that the X, Y and Z axes of the newly created
 coordinate frame point along the standard X, Y and Z directions and that
 the origin is at (0,0,0).
 The transformed molecule is written to the file 
\family sans
ADE.std.pdb
\family default
.
 A similar procedure is performed on a thymine residue with the result that
 the hydrogen bond between the 
\family sans
H3
\family default
 of thymine and the 
\family sans
N1
\family default
 of adenine in a Watson Crick pair is now along the Y axis of these two
 residues.
\end_layout

\begin_layout Section

\series bold
Molecules, Residues and Atoms
\end_layout

\begin_layout Standard
We now turn to a discussion of ways of describing and manipulating molecules.
 In addition to the general-purpose variable types like 
\family sans
float
\family default
, 
\family sans
int
\family default
 and 
\family sans
string
\family default
, 
\family sans
nab
\family default
 has three types for working with molecules: 
\family sans
molecule
\family default
, 
\family sans
residue
\family default
 and 
\family sans
atom
\family default
.
 Like their chemical counterparts, 
\family sans
nab
\family default
 molecules are composed of residues which are in turn composed of atoms.
 The residues in an 
\family sans
nab
\family default
 molecule are organized into one or more named, ordered lists called strands.
 Residues in a strand are usually bonded so that the 
\begin_inset Quotes eld
\end_inset

exiting
\begin_inset Quotes erd
\end_inset

 atom of residue 
\begin_inset Formula $i$
\end_inset

 is connected to the 
\begin_inset Quotes eld
\end_inset

entering
\begin_inset Quotes erd
\end_inset

 atom of residue 
\begin_inset Formula $i+1$
\end_inset

.
 The residues in a strand need not be bonded; however, only residues in
 the same strand can be bonded.
\end_layout

\begin_layout Standard
Each of the three molecular types has a complex internal structure, only
 some of which is directly accessible at the 
\family sans
nab
\family default
 level.
 Simple elements of these types, like the number of atoms in a molecule
 or the X coordinate of an atom are accessed via attributes—a suffix attached
 to a molecule, residue or atom variable.
 Attributes behave almost like 
\family sans
int
\family default
, 
\family sans
float
\family default
 and 
\family sans
string
\family default
 variables; the only exception being that some attributes are read only
 with values that can t be changed.
 More complex operations on these types such as adding a residue to a molecule
 or merging two strands into one are handled with builtin functions.
 A complete list of 
\family sans
nab
\family default
 builtin functions and molecule attributes can be found in the 
\family sans
nab
\family default
 Language Reference.
\end_layout

\begin_layout Section

\series bold
Creating Molecules
\end_layout

\begin_layout Standard
The following functions are used to create molecules.
 Only an overview is given here; more details are in chapter 3.
\end_layout

\begin_layout LyX-Code

\size small
molecule newmolecule
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
newmolecule
\end_layout

\end_inset

();
\end_layout

\begin_layout LyX-Code

\size small
int addstrand
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addstrand
\end_layout

\end_inset

( molecule m, string str );
\end_layout

\begin_layout LyX-Code

\size small
residue getresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getresidue
\end_layout

\end_inset

( string rname, string rlib );
\end_layout

\begin_layout LyX-Code

\size small
residue transformres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transformres
\end_layout

\end_inset

( matrix mat, residue res, string aex );
\end_layout

\begin_layout LyX-Code

\size small
int addresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addresidue
\end_layout

\end_inset

( molecule m, string str, residue res );
\end_layout

\begin_layout LyX-Code

\size small
int connectres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
connectres
\end_layout

\end_inset

( molecule m, string str,
\end_layout

\begin_layout LyX-Code

\size small
       int rn1, string atm1, int rn2, string atm2 );
\end_layout

\begin_layout LyX-Code

\size small
int mergestr
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mergestr
\end_layout

\end_inset

( molecule m1, string str1, string end1,
\end_layout

\begin_layout LyX-Code

\size small
       molecule m2, string str2, string end2 );
\end_layout

\begin_layout Standard
The general strategy for creating molecules with 
\family sans
nab
\family default
 is to create a new (empty) molecule then build it one residue at a time.
 Each residue is fetched from a residue library, transformed to properly
 position it and added to a growing strand.
 A template showing this strategy is shown below.
 
\family sans
mat
\family default
, 
\family sans
m
\family default
 and 
\family sans
res
\family default
 are respectively a 
\family sans
matrix
\family default
, 
\family sans
molecule
\family default
 and 
\family sans
residue
\family default
 variable declared elsewhere.
 Words in italics indicate general instances of things that would be filled
 in according to actual application.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

m = newmolecule();
\end_layout

\begin_layout Plain Layout

addstrand( m, 
\backslash
fIstr-1
\backslash
fC );
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

for( ...
 ){
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

res = getresidue( 
\backslash
fIres-name
\backslash
fC, 
\backslash
fIres-lib
\backslash
fC );
\end_layout

\begin_layout Plain Layout

res = transformres( mat, res, NULL );
\end_layout

\begin_layout Plain Layout

addresidue( m, 
\backslash
fIstr-name
\backslash
fC, res );
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In line 2, the function 
\family sans
newmolecule()
\family default
 creates a molecule and stores it in 
\family sans
m
\family default
.
 The new molecule is empty—no strands, residues or atoms.
 Next 
\family sans
addstrand()
\family default
 is used to add a strand named 
\shape italic
str-1
\shape default
.
 Strand names may be up to 255 characters in length and can include any
 characters except white space.
 Each strand in a molecule must have a unique name.
 There is no limit on the number of strands a molecule may have.
\end_layout

\begin_layout Standard
The actual structure would be created in the loop on lines 5-11.
 Each time around the loop, the function 
\family sans
getresidue()
\family default
 is used to extract the next residue with the name 
\shape italic
res-name
\shape default
 from some residue library 
\shape italic
res-lib
\shape default
 and stores it in the 
\family sans
residue
\family default
 variable 
\family sans
res
\family default
.
 Next the function 
\family sans
transformres()
\family default
 applies a transformation matrix, held in the 
\family sans
matrix
\family default
 variable 
\family sans
mat
\family default
 to the residue in 
\family sans
res
\family default
, which places it in the orientation and position it will have in the new
 molecule.
 Finally, the function 
\family sans
addresidue()
\family default
 appends the transformed residue to the end of the chain of residues in
 the strand 
\shape italic
str-name
\shape default
 of the new molecule.
\end_layout

\begin_layout Standard
Residues in each strand are numbered from 1 to 
\begin_inset Formula $N$
\end_inset

, where 
\begin_inset Formula $N$
\end_inset

 is the number of residues in that strand.
 The residue order is the order in which they were inserted with 
\family sans
addresidue()
\family default
.
 While 
\family sans
nab
\family default
 does not require it, nucleic acid chains are usually numbered from 5' to
 3' and proteins chains from the N-terminus to the C-terminus.
 The residues in nucleic acid strands and protein chains are usually bonded
 with the outgoing end of residue 
\begin_inset Formula $i$
\end_inset

 bonded to the incoming end of residue 
\begin_inset Formula $i$
\end_inset

+1.
 However, as this is not always the case, 
\family sans
nab
\family default
 requires the user to explicitly make all interresidue bonds with the builtin
 
\family sans
connectres()
\family default
.
\end_layout

\begin_layout Standard

\family sans
connectres()
\family default
 makes bonds between two atoms in different residues of the same strand
 of a molecule.
 Only residues in the same strand can be bonded.
 
\family sans
connectres()
\family default
 takes six arguments.
 They are a molecule, the name of the strand containing the residues to
 be bonded, and two pairs each of a residue number and the name of an atom
 in that residue.
 As an example, this call to 
\family sans
connectres()
\family default
,
\end_layout

\begin_layout LyX-Code
connectres( m, "sense", i, "O3'", i+1, "P" );
\end_layout

\begin_layout Standard
connects an atom named 
\family sans
"O3'"
\family default
 in residue 
\family sans
i
\family default
 to an atom named 
\family sans
"P"
\family default
 in residue 
\family sans
i+1
\family default
, creating the phosphate bond that joins two nucleic acid monomers.
\end_layout

\begin_layout Standard
The function 
\family sans
mergestr()
\family default
 is used to either move or copy the residues in one strand into another
 strand.
 Details are provided in chapter 3.
\end_layout

\begin_layout Section

\series bold
Residues and Residue Libraries
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 programs build molecules from residues that are parts of residue libraries,
 which are exactly those distributed with the Amber molecular mechanics
 programs (see 
\family sans
http://ambermd.org/
\family default
).
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides several functions for working with residues.
 All return a valid residue on success and 
\family sans
NULL
\family default
 on failure.
 The function 
\family sans
getres()
\family default
 is written in 
\family sans
nab
\family default
 and it source is shown below.
 
\family sans
transformres()
\family default
 which applies a coordinate transformation to a residue and is discussed
 under the section 
\series bold
Matrices and Transformations
\series default
.
\end_layout

\begin_layout LyX-Code

\size small
residue getresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getresidue
\end_layout

\end_inset

( string resname, string reslib );
\end_layout

\begin_layout LyX-Code

\size small
residue getres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getres
\end_layout

\end_inset

( string resname, string reslib );
\end_layout

\begin_layout LyX-Code

\size small
residue transformres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transformres
\end_layout

\end_inset

( matrix mat, residue res, string aexp );
\end_layout

\begin_layout Standard
getresidue() extracts the residue with name 
\family sans
resname
\family default
 from the residue library 
\family sans
reslib
\family default
.
 
\family sans
reslib
\family default
 is the name of a file that either contains the residue information or contains
 names of other files that contain it.
 
\family sans
reslib
\family default
 is assumed to be in the directory 
\family sans
$AMBERCLASSICHOME/dat/reslib
\family default
 unless it begins with a slash (
\family sans
/
\family default
)
\end_layout

\begin_layout Standard
A common task of many 
\family sans
nab
\family default
 programs is the translation of a string of characters into a structure
 where each letter in the string represents a residue.
 Generally, some mapping of one or two character names into actual residue
 names is required.
 
\family sans
nab
\family default
 supplies the function 
\family sans
getres()
\family default
 that maps the single character names 
\family sans
a
\family default
, 
\family sans
c
\family default
, 
\family sans
g
\family default
, 
\family sans
t
\family default
 and 
\family sans
u
\family default
 and their 5' and 3' terminal analogues into the residues 
\family sans
ADE
\family default
, 
\family sans
CYT
\family default
, 
\family sans
GUA
\family default
, 
\family sans
THY
\family default
 and 
\family sans
URA
\family default
.
 Here is its source: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// getres() - map 1 letter names into 3 letter names
\end_layout

\begin_layout Plain Layout

residue getres( string rname, string rlib )
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    residue res;
\end_layout

\begin_layout Plain Layout

    string map1to3[ hashed ];          // convert residue names
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    map1to3["A"] = "ADE";     map1to3["C"] = "CYT";
\end_layout

\begin_layout Plain Layout

    map1to3["G"] = "GUA";     map1to3["T"] = "THY";
\end_layout

\begin_layout Plain Layout

    map1to3["U"] = "URA";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    map1to3["a"] = "ADE";     map1to3["c"] = "CYT";
\end_layout

\begin_layout Plain Layout

    map1to3["g"] = "GUA";     map1to3["t"] = "THY";
\end_layout

\begin_layout Plain Layout

    map1to3["u"] = "URA";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if( r in map1to3 ) {
\end_layout

\begin_layout Plain Layout

        res = getresidue( map1to3[ r ], rlib );
\end_layout

\begin_layout Plain Layout

    }else{
\end_layout

\begin_layout Plain Layout

        fprintf( stderr, "undefined residue %s
\backslash

\backslash
n", r );
\end_layout

\begin_layout Plain Layout

        exit( 1 );
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return( res );
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
getres()
\family default
 is the first of several 
\family sans
nab
\family default
 functions that are discussed in this User Manual.
 The following explanation will cover not just 
\family sans
getres()
\family default
 but will serve as an introduction to user defined 
\family sans
nab
\family default
 functions in general.
\end_layout

\begin_layout Standard
An 
\family sans
nab
\family default
 function is a named group of declarations and statements that is executed
 as a unit by using the function's name in an expression.
 
\family sans
nab
\family default
 functions can have special variables called parameters that allow the same
 function to operate on different data.
 A function definition begins with a header that describes the function,
 followed by the function body which is a list of statements and declarations
 enclosed in braces (
\family sans
{}
\family default
) and ends with a semicolon.
 The header to 
\family sans
getres()
\family default
 is on line 2 and the body is on lines 3 to 22.
\end_layout

\begin_layout Standard
Every 
\family sans
nab
\family default
 function header begins with the reserved word that specifies its type,
 followed by the function's name followed by its parameters (if any) enclosed
 in parentheses.
 The parentheses are always required, even if the function does not have
 parameters.
 
\family sans
nab
\family default
 functions may return a single value of any of the 10 
\family sans
nab
\family default
 types.
 
\family sans
nab
\family default
 functions can not return arrays.
 In symbolic terms every 
\family sans
nab
\family default
 function header uses this template:
\end_layout

\begin_layout LyX-Code

\shape italic
type name
\family sans
\shape default
(
\family default
 
\shape italic
parameters?
\shape default
 
\family sans
)
\end_layout

\begin_layout Standard
The parameters (if present) to an 
\family sans
nab
\family default
 function are a comma separated list of type variable pairs:
\end_layout

\begin_layout LyX-Code

\shape italic
type1 variable1
\family sans
\shape default
,
\family default
 
\shape italic
type2 variable2
\family sans
\shape default
, ...
\end_layout

\begin_layout Standard
An 
\family sans
nab
\family default
 function may have any number of parameters, including none.
 Parameters may of any of the 10 
\family sans
nab
\family default
 types, but unlike function values, parameters can be arrays, including
 
\shape italic
hashed
\shape default
 arrays.
 The function 
\family sans
getres()
\family default
 has two parameters, the two 
\family sans
string
\family default
 variables 
\family sans
resname
\family default
 and 
\family sans
reslib
\family default
.
\end_layout

\begin_layout Standard
Parameters to 
\family sans
nab
\family default
 functions are 
\begin_inset Quotes eld
\end_inset

called by reference
\begin_inset Quotes erd
\end_inset

 which means that they contain the actual data—not copies of it—that the
 function was called with.
 When an 
\family sans
nab
\family default
 function parameter is assigned, the actual data in the calling function
 is changed.
 The only exception is when an expression is passed as a parameter to an
 
\family sans
nab
\family default
 function.
 In this case, the 
\family sans
nab
\family default
 compiler evaluates the expression into a temporary (and invisible to the
 
\family sans
nab
\family default
 programmer) variable and then operates on its contents.
\end_layout

\begin_layout Standard
Immediately following the function header is the function body.
 It is a list of declarations followed by a list of statements enclosed
 in braces.
 The list of declarations, the list of statements or both may be empty.
 
\family sans
getres()
\family default
 has several statements, and a single declaration, the variable 
\family sans
res
\family default
.
 This variable is a 
\shape italic
local variables
\shape default
.
 Local variables are defined only when the function is active.
 If a local variable has the same name as variable defined outside of a
 it the local variable hides the global one.
 Local variables can not be parameters.
\end_layout

\begin_layout Standard
The statement part of 
\family sans
getres()
\family default
 begins on line 6.
 It consists of several 
\family sans
if
\family default
 statements organized into a decision tree.
 The action of this tree is to translate one of the strings 
\family sans
A
\family default
, , , 
\family sans
T
\family default
, etc., or their lower case equivalents into the corresponding three letter
 standard nucleic acid residue name and then extract that residue from 
\family sans
reslib
\family default
 using the low level residue library function 
\family sans
getresidue()
\family default
.
 The value returned by 
\family sans
getresidue()
\family default
 is stored in the local variable 
\family sans
res
\family default
, except when the input string is not one of those listed above.
 In that case, 
\family sans
getres()
\family default
 writes a message to 
\family sans
stderr
\family default
 indicating that it can not translate the input string and sets 
\family sans
res
\family default
 to the value 
\family sans
NULL
\family default
.
 
\family sans
nab
\family default
 uses 
\family sans
NULL
\family default
 to represent non-existent values of the types 
\family sans
string
\family default
, 
\family sans
file
\family default
, 
\family sans
atom
\family default
, 
\family sans
residue
\family default
, 
\family sans
molecule
\family default
 and 
\family sans
bounds
\family default
.
 A value of 
\family sans
NULL
\family default
 generally means that a variable is uninitialized or that an error occurred
 in creating it.
\end_layout

\begin_layout Standard
A function returns a value by executing a 
\family sans
return
\family default
 statement, which is the reserved word 
\family sans
return
\family default
 followed by an expression.
 The 
\family sans
return
\family default
 statement evaluates the expression, sets the function value to it and returns
 control to the point just after the call.
 The expression is optional but if present the type of the expression must
 be the same as the type of the function or both must be numeric (
\family sans
int
\family default
, 
\family sans
float
\family default
).
 If the expression is missing, the function still returns, but its value
 is undefined.
 
\family sans
getres()
\family default
 includes one 
\family sans
return
\family default
 statements on line 20.
 A function also returns with an undefined value when it "runs off the bottom",
 i.e., executes the last statement before the closing brace and that statement
 is not a 
\family sans
return
\family default
.
\end_layout

\begin_layout Section

\series bold
Atom Names and Atom Expressions
\end_layout

\begin_layout Standard
Every atom in an 
\family sans
nab
\family default
 molecule has a name.
 This name is composed of the strand name, the residue 
\shape italic
number
\shape default
 and the atom name.
 As both PDB and off formats require that all atoms in a residue have distinct
 names, the combination of strand name, residue number and atom name is
 unique for each atom in a single molecule.
 Atoms in different molecules, however, may have the same name.
\end_layout

\begin_layout Standard
Many 
\family sans
nab
\family default
 builtins require the user to specify exactly which atoms are to be covered
 by the operation.
 
\family sans
nab
\family default
 does this with special strings called 
\shape italic
atom expressions
\shape default
.
 An atom expression is a pattern that matches one or more atom names in
 the specified molecule or residue.
 An atom expression consists of three parts—a strand part, a residue part
 and an atom part.
 The parts are separated by colons (
\family sans
:
\family default
).
 Not all three parts are required.
 An atom expression with no colons consists of only a strand part; it selects
 
\shape italic
all
\shape default
 atoms in the selected strands.
 An atom expression with one colon consists of a strand part and a residue
 part; it selects 
\shape italic
all
\shape default
 atoms in the selected residues in the selected strands.
 An empty part selects all strands, residues or atoms depending on which
 parts are empty.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 patterns specify the 
\shape italic
entire
\shape default
 string to be matched.
 For example, the atom pattern 
\family sans
C
\family default
 matches only atoms named 
\family sans
C
\family default
 , and not those named 
\family sans
CA
\family default
, 
\family sans
HC
\family default
, etc.
 To match any name that begins with 
\family sans
C
\family default
, use 
\family sans
C*
\family default
, to match any name ending with 
\family sans
C
\family default
, use 
\family sans
*C
\family default
 and to match a 
\family sans
C
\family default
 in any position use 
\family sans
*C*
\family default
.
 An atom expression is first parsed into its parts.
 The strand part is evaluated selecting one or more strands in a molecule.
 Next the residue part is evaluated.
 Only residues in selected strands can be selected.
 Finally the atom part is evaluated and only atoms in selected residues
 are selected.
 Here are some typical atom expressions and the atoms they match.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
:ADE:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select all atoms in any residue named 
\family sans
ADE
\family default
.
 All three parts are present but both the strand and atom parts are empty.
 The atom expression 
\family sans
:ADE
\family default
 selects the same set of atoms.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
::C,CA,N
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
select all atoms with names 
\family sans
C
\family default
, 
\family sans
CA
\family default
 or 
\family sans
N
\family default
 in all residues in all strands—typically the peptide backbone.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
A:1-10,13,URA:C1'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select atoms named 
\family sans
C1'
\family default
 (the glycosyl-carbons) in residues 1 to 10 and 13 and in any residues named
 
\family sans
URA
\family default
 in the strand named 
\family sans
A
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
::C*[^']
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select all non-sugar carbons.
 The
\family sans
 [^']
\family default
 is an example of a negated character class.
 It matches any character in the last position except 
\family sans
'
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
::P,O?P,C[3-5]?,O[35]?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The nucleic acid backbone.
 This 
\family sans
P
\family default
 selects phosphorous atoms.
 The 
\family sans
O?P
\family default
 matches phosphate oxygens that have various second letters 
\family sans
O1P
\family default
, 
\family sans
O2P
\family default
 or 
\family sans
OAP
\family default
 or 
\family sans
OBP
\family default
.
 The 
\family sans
C[3-5]?
\family default
 matches the backbone carbons, 
\family sans
C3'
\family default
, 
\family sans
C4'
\family default
, 
\family sans
C5'
\family default
 or 
\family sans
C3*
\family default
, 
\family sans
C4*
\family default
, 
\family sans
C5*
\family default
.
 And the 
\family sans
O[35]?
\family default
 matches the backbone oxygens 
\family sans
O3'
\family default
, 
\family sans
O5'
\family default
 or 
\family sans
O3*
\family default
, 
\family sans
O5*
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
::
\family default
 or 
\family sans
:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Select all atoms in the molecule.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
An important property of 
\family sans
nab
\family default
 atom expressions is that the order in which the strands, residues, and
 atoms are listed is unimportant.
 That is, the atom expression 
\family sans
"2,1:5,2,3:N1,C1'"
\family default
 is the exact same atom expression as 
\family sans
"1,2:3,2,5:C1',N1"
\family default
.
 All atom expressions are reordered, internal to 
\family sans
nab
\family default
, in increasing atom number.
 So, in the above example, the selected atoms will be selected in the following
 sequence:
\end_layout

\begin_layout LyX-Code
1:2:N1, 1:2:C1', 1:3:N1, 1:3:C1', 1:5:N1, 1:5:C1', 2:2:N1, 2:2:C1',
\begin_inset Newline newline
\end_inset

2:3:N1, 2:3:C1', 2:5:N1, 2:5:C1'
\end_layout

\begin_layout Standard
The order in which atoms are selected internal to a specific residue are
 the order in which they appear in a 
\family sans
nab
\family default
 PDB file.
 As seen in the above example, 
\family sans
N1
\family default
 appears before 
\family sans
C1'
\family default
 in all 
\family sans
nab
\family default
 nucleic acid residues and PDB files.
\end_layout

\begin_layout Section

\series bold
Looping over atoms in molecules
\end_layout

\begin_layout Standard
Another thing that many 
\family sans
nab
\family default
 programs have to do is visit every atom of a molecule.
 
\family sans
nab
\family default
 provides a special form of its 
\family sans
for
\family default
-loop for accomplishing this task.
 These loops have this form:
\end_layout

\begin_layout LyX-Code

\size small
for( 
\begin_inset Formula $a$
\end_inset

 in 
\begin_inset Formula $m$
\end_inset

 ) 
\shape italic
stmt
\shape default
;
\end_layout

\begin_layout Standard
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $m$
\end_inset

 represent an 
\family sans
atom
\family default
 and a 
\family sans
molecule
\family default
 variable.
 The action of the loop is to set 
\begin_inset Formula $a$
\end_inset

 to each atom in 
\begin_inset Formula $m$
\end_inset

 in this order.
 The first atom is the first atom of the first residue of the first strand.
 This is followed by the rest of the atoms of this residue, followed by
 the atoms of the second residue, etc until all the atoms in the first strand
 have been visited.
 The process is then repeated on the second and subsequent strands in 
\begin_inset Formula $m$
\end_inset

 until 
\begin_inset Formula $a$
\end_inset

 has been set to every atom in 
\begin_inset Formula $m$
\end_inset

.
 The order of the strands in a molecule is the order in which they were
 created with 
\family sans
addstrand()
\family default
, the order of the residues in a strand is the order in which they were
 added with 
\family sans
addresidue()
\family default
 and the order of the atoms in a residue is the order in which they are
 listed in the residue library entry that the residue is based on.
\end_layout

\begin_layout Standard
The following program uses two nested for-
\family sans
in
\family default
 loops to compute all the proton-proton distances in a molecule.
 Distances less than 
\family sans
cutoff
\family default
 are written to 
\family sans
stdout
\family default
.
 The program uses the second argument on the command to hold the 
\family sans
cutoff
\family default
 value.
 The program also uses the 
\family sans
=
\begin_inset Formula $\sim$
\end_inset


\family default
 operator to compare a character string , in this case an atom name to pattern,
 specified as a regular expression.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 4 - compute H-H distances <= cutoff
\end_layout

\begin_layout Plain Layout

molecule    m;  
\end_layout

\begin_layout Plain Layout

atom        ai, aj; 
\end_layout

\begin_layout Plain Layout

float       d, cutoff;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

cutoff = atof( argv[ 2 ] );
\end_layout

\begin_layout Plain Layout

m = getpdb( "gcg10.pdb" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( ai in m ){
\end_layout

\begin_layout Plain Layout

    if( ai.atomname !~ "H" )continue;
\end_layout

\begin_layout Plain Layout

    for( aj in m ){
\end_layout

\begin_layout Plain Layout

        if( aj.tatomnum <= ai.tatomnum )continue;
\end_layout

\begin_layout Plain Layout

        if( aj.atomname !~ "H" )continue;
\end_layout

\begin_layout Plain Layout

        if(( d=distp(ai.pos,aj.pos))<=cutoff){
\end_layout

\begin_layout Plain Layout

            printf(
\end_layout

\begin_layout Plain Layout

                "%3d %-4s %-4s %3d %-4s %-4s %8.3f
\backslash

\backslash
n",
\end_layout

\begin_layout Plain Layout

                ai.tresnum, ai.resname, ai.atomname,
\end_layout

\begin_layout Plain Layout

                aj.tresnum, aj.resname, aj.atomname,
\end_layout

\begin_layout Plain Layout

                d );
\end_layout

\begin_layout Plain Layout

        }   
\end_layout

\begin_layout Plain Layout

    }   
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The molecule is read into 
\family sans
m
\family default
 using 
\family sans
getpdb()
\family default
.
 Two atom variables 
\family sans
ai
\family default
 and 
\family sans
aj
\family default
 are used to hold the pairs of atoms.
 The outer loop in lines 9-22 sets 
\family sans
ai
\family default
 to each atom in 
\family sans
m
\family default
 in the order discussed above.
 Since this program is only interested in proton-proton distances, if 
\family sans
ai
\family default
 is not a proton, all calculations involving that atom can be skipped.
 The 
\family sans
if
\family default
 in line 10 tests to see if 
\family sans
ai
\family default
 is a proton.
 It does so by testing to see if 
\family sans
ai
\family default
's name, available via the 
\family sans
atomname
\family default
 attribute doesn't match the regular expression 
\family sans
"H"
\family default
.
 If it doesn't match then the program executes the 
\family sans
continue
\family default
 statement also on line 10, which has the effect of advancing the outer
 loop to its next atom.
\end_layout

\begin_layout Standard
>From the section on attributes, 
\family sans
ai.atomname
\family default
 behaves like a character string.
 It can be compared against other character strings or tested to see if
 it matches a pattern or regular expression.
 The two operators, 
\family sans
=
\begin_inset Formula $\sim$
\end_inset


\family default
 and 
\family sans
!
\begin_inset Formula $\sim$
\end_inset


\family default
 stand for 
\shape italic
match
\shape default
 and 
\shape italic
doesn't-match
\shape default
 They also inform the 
\family sans
nab
\family default
 compiler that the string on their right hand sides is to be treated like
 a regular expression.
 In this case, the regular expression 
\family sans
"H"
\family default
 matches any name that contains the letter 
\family sans
H
\family default
, or any proton which is just what is required.
\end_layout

\begin_layout Standard
If 
\family sans
ai
\family default
 is a proton, then the inner loop from 11-21 is executed.
 This sets 
\family sans
aj
\family default
 to each atom in the same order as the loop in 9.
 Since distance is reflexive (
\shape italic
dist
\shape default
 
\begin_inset Formula $i,j$
\end_inset

 
\shape italic
= dist
\shape default
 
\begin_inset Formula $j,i$
\end_inset

 ), and the distance between an atom and itself is 0, the inner loop uses
 the 
\family sans
if
\family default
 on line 12 to skip the calculation on 
\family sans
aj
\family default
 unless it follows 
\family sans
ai
\family default
 in the molecule's atom order.
 Next the 
\family sans
if
\family default
 on line 13 checks to see if 
\family sans
aj
\family default
 is a proton, skipping to the next atom if it is not.
 Finally, the 
\family sans
if
\family default
 on line 14 computes the distance between the two protons 
\family sans
ai
\family default
 and 
\family sans
aj
\family default
 and if it is 
\begin_inset Formula $<$
\end_inset

= 
\family sans
cutoff
\family default
 writes the information out using the C-like I/O function 
\family sans
printf()
\family default
.
\end_layout

\begin_layout Section

\series bold
Points, Transformations and Frames
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides three kinds of geometric objects.
 They are the types 
\family sans
point
\family default
 and 
\family sans
matrix
\family default
 and the frame component of a 
\family sans
molecule
\family default
.
\end_layout

\begin_layout Subsection

\series bold
Points and Vectors
\end_layout

\begin_layout Standard
The 
\family sans
nab
\family default
 type 
\family sans
point
\family default
 is an object that holds three 
\family sans
float
\family default
 values.
 These values can represent the X, Y and Z coordinates of a point or the
 components of 3-vector.
 The individual elements of a 
\family sans
point
\family default
 variable are accessed via attributes or suffixes added to the variable
 name.
 The three 
\family sans
point
\family default
 attributes are 
\family sans
"x"
\family default
, 
\family sans
"y"
\family default
 and 
\family sans
"z"
\family default
.
 Many 
\family sans
nab
\family default
 builtin functions use, return or create 
\family sans
point
\family default
 values.
 Details of operations on points are given in chapter 3.
\end_layout

\begin_layout Subsection

\series bold
Matrices and Transformations
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 uses the 
\family sans
matrix
\family default
 type to hold a 4
\begin_inset Formula $\times$
\end_inset

4 transformation matrix.
 Transformations are applied to residues and molecules to move them into
 new orientations and/or positions.
 Unlike a general coordinate transformation, 
\family sans
nab
\family default
 transformations can not alter the scale (size) of an object.
 However, transformations can be applied to a subset of the atoms of a residue
 or molecule changing its shape.
 For example, 
\family sans
nab
\family default
 would use a transformation to rotate a group of atoms about a bond.
 
\family sans
nab
\family default
 does 
\shape italic
not
\shape default
 require that transformations applied to parts of residues or molecules
 be chemically valid.
 It simply transforms the coordinates of the selected atoms leaving it to
 the user to correct (or ignore) any chemically incorrect geometry caused
 by the transformation.
 
\family sans
nab
\family default
 uses the following builtin functions to create and use transformations.
\end_layout

\begin_layout LyX-Code

\size small
matrix newtransform
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
newtransform
\end_layout

\end_inset

( float dx, float dy, float dz,
\end_layout

\begin_layout LyX-Code

\size small
       float rx, float ry, float rz );
\end_layout

\begin_layout LyX-Code

\size small
matrix rot4
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rot4
\end_layout

\end_inset

( molecule m, string tail, string head, float angle );
\end_layout

\begin_layout LyX-Code

\size small
matrix rot4p
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rot4p
\end_layout

\end_inset

( point tail, point head, float angle );
\end_layout

\begin_layout LyX-Code

\size small
matrix trans4
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
trans4
\end_layout

\end_inset

( molecule m, string tail, string head, float distance );
\end_layout

\begin_layout LyX-Code

\size small
matrix trans4p
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
trans4p
\end_layout

\end_inset

( point tail, point head, float distance );
\end_layout

\begin_layout LyX-Code

\size small
residue transformres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transformres
\end_layout

\end_inset

( matrix mat, residue r, string aex );
\end_layout

\begin_layout LyX-Code

\size small
int transformmol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transformmol
\end_layout

\end_inset

( matrix mat, molecule m, string aex );
\end_layout

\begin_layout Standard
nab provides three ways to create a new transformation matrix.
 The function 
\family sans
newtransform()
\family default
 creates a transformation matrix from 3 translations and 3 rotations.
 It is intended to position objects with respect to the standard X, Y, and
 Z axes located at (0,0,0).
 Here is how it works.
 Imagine two coordinate systems, X, Y, Z and X', Y', Z' that are initially
 superimposed.
 
\family sans
newtransform()
\family default
 first rotates the the primed coordinate system about Z by 
\family sans
rz
\family default
 degrees, then about Y by 
\family sans
ry
\family default
 degrees, then about X by 
\family sans
rx
\family default
 degrees.
 Finally the reoriented primed coordinate system is translated to the point
 (
\family sans
dx
\family default
,
\family sans
dy
\family default
,
\family sans
dz
\family default
) in the unprimed system.
 The functions 
\family sans
rot4()
\family default
 and 
\family sans
rot4p()
\family default
 create a transformation matrix that effects a clockwise rotation by an
 angle (in degrees) about an axis defined by two points.
 The points can be specified implicitly by atom expressions applied to a
 molecule in 
\family sans
rot4()
\family default
 or explicitly as points in 
\family sans
rot4p()
\family default
.
 If an atom expression in 
\family sans
rot4()
\family default
 selects more that one atom, the average coordinate of all selected atoms
 is used as the point's value.
 (Note that a positive rotation angle here is defined to be clockwise, which
 is in accord with the IUPAC rules for defining torsional angles in molecules,
 but is opposite to the convention found in many other branches of mathematics.)
 Similarly, the functions 
\family sans
trans4()
\family default
 and 
\family sans
trans4p()
\family default
 create a transformation that effects a translation by a distance along
 the axis defined by two points.
 A positive translation is from 
\family sans
tail
\family default
 to 
\family sans
head
\family default
.
\end_layout

\begin_layout Standard

\family sans
transformres()
\family default
 applies a transformation to those atoms of 
\family sans
res
\family default
 that match the atom expression 
\family sans
aex
\family default
.
 It returns a 
\shape italic
copy
\shape default
 of the input residue with the changed coordinates.
 The input residue is unchanged.
 It returns 
\family sans
NULL
\family default
 if the new residue could not be created.
 
\family sans
transformmol()
\family default
 applies a transformation to those atoms of 
\family sans
mol
\family default
 that match 
\family sans
aex
\family default
 .
 Unlike 
\family sans
transformres()
\family default
, 
\family sans
transformmol()
\family default
 
\shape italic
changes
\shape default
 the coordinates of the input molecule.
 It returns the number of atoms selected by 
\family sans
aex
\family default
.
 In both functions, the special atom expression 
\family sans
NULL
\family default
 selects all atoms in the input residue or molecule.
\end_layout

\begin_layout Subsection

\series bold
Frames
\end_layout

\begin_layout Standard
Every 
\family sans
nab
\family default
 molecule includes a frame, a handle that allows arbitrary and precise movement
 of the molecule.
 This frame is set with the 
\family sans
nab
\family default
 builtins 
\family sans
setframe()
\family default
 and 
\family sans
setframep()
\family default
.
 It is initially set to the standard X, Y and Z directions centered at (0,0,0).
 
\family sans
setframe()
\family default
 creates a coordinate frame from atom expressions that specify the the origin,
 the X direction and the Y direction.
 If any atom expression selects more that one atom, the average of the selected
 atoms' coordinates is used.
 Z is created from X
\begin_inset Formula $\times$
\end_inset

Y.
 Since the initial X and Y directions are unlikely to be orthogonal, the
 
\family sans
use
\family default
 parameter specifies which of the input X and Y directions is to become
 the formal X or Y direction.
 If 
\family sans
use
\family default
 is 
\family sans
1
\family default
, X is chosen and Y is recreated from Z
\begin_inset Formula $\times$
\end_inset

X.
 If 
\family sans
use
\family default
 is 
\family sans
2
\family default
, then Y is chosen and X is recreated from Y
\begin_inset Formula $\times$
\end_inset

Z.
 
\family sans
setframep()
\family default
 is identical except that the five points defining the frame are explicitly
 provided.
\end_layout

\begin_layout LyX-Code

\size small
int setframe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setframe
\end_layout

\end_inset

( int use, molecule mol, string origin,
\end_layout

\begin_layout LyX-Code

\size small
         string xtail, string xhead,
\end_layout

\begin_layout LyX-Code

\size small
         string ytail, string yhead );
\end_layout

\begin_layout LyX-Code

\size small
int setframep
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setframep
\end_layout

\end_inset

( int use, molecule mol, point origin,
\end_layout

\begin_layout LyX-Code

\size small
         point xtail, point xhead,
\end_layout

\begin_layout LyX-Code

\size small
         point ytail, point yhead );
\end_layout

\begin_layout LyX-Code

\size small
int alignframe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
alignframe
\end_layout

\end_inset

( molecule mol, molecule mref );
\end_layout

\begin_layout Standard
alignframe() is similar to 
\family sans
superimpose()
\family default
, but works on the molecules' frames rather than selected sets of their
 atoms.
 It transforms 
\family sans
mol
\family default
 to superimpose its 
\shape italic
frame
\shape default
 on the 
\shape italic
frame
\shape default
 of 
\family sans
mref
\family default
.
 If 
\family sans
mref
\family default
 is 
\family sans
NULL
\family default
, 
\family sans
alignframe()
\family default
 superimposes the frame of 
\family sans
mol
\family default
 on the standard X, Y and Z coordinate system centered at (0,0,0).
\end_layout

\begin_layout Standard
Here's how frames and transformations work together to permit precise motion
 between two molecules.
 Corresponding frames are defined for two molecules.
 These frames are based on molecular directions.
 
\family sans
alignframe()
\family default
 is first used to align the frame of one molecule along with the standard
 X, Y and Z directions.
 The molecule is then moved and reoriented via transformations.
 Because its initial frame was along these molecular directions, the transformat
ions are likely to be along or about the axes.
 Finally 
\family sans
alignframe()
\family default
 is used to realign the transformed molecule on the frame of the fixed molecule.
\end_layout

\begin_layout Standard
One use of this method would be the rough placement of a drug into a groove
 on a DNA molecule to create a starting structure for restrained molecular
 dynamics.
 
\family sans
setframe()
\family default
 is used to define a frame for the DNA along the appropriate groove, with
 its origin at the center of the binding site.
 A similar frame is defined for the drug.
 
\family sans
alignframe()
\family default
 first aligns the drug on the standard coordinate system whose axes are
 now important directions between the DNA and the drug.
 The drug is transformed and 
\family sans
alignframe()
\family default
 realigns the transformed drug on the DNA's frame.
\end_layout

\begin_layout Section

\series bold
Creating Watson Crick duplexes
\end_layout

\begin_layout Standard
Watson/Crick duplexes are fundamental components of almost all nucleic acid
 structures and 
\family sans
nab
\family default
 provides several functions for use in creating them.
 They are
\end_layout

\begin_layout LyX-Code

\size small
residue getres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getres
\end_layout

\end_inset

( string resname, string reslib );
\end_layout

\begin_layout LyX-Code

\size small
molecule bdna
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bdna
\end_layout

\end_inset

( string seq );
\end_layout

\begin_layout LyX-Code

\size small
molecule fd_helix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
helix
\end_layout

\end_inset

( string helix_type, string seq, string acid_type );
\end_layout

\begin_layout LyX-Code

\size small
string wc_complement
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
complement
\end_layout

\end_inset

( string seq, string reslib, string natype );
\end_layout

\begin_layout LyX-Code

\size small
molecule wc_basepair
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
basepair
\end_layout

\end_inset

( residue sres, residue ares );
\end_layout

\begin_layout LyX-Code

\size small
molecule wc_helix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
helix
\end_layout

\end_inset

( string seq, string rlib, string natype,
\end_layout

\begin_layout LyX-Code

\size small
         string aseq, string arlib, string anatype, float xoff,
\end_layout

\begin_layout LyX-Code

\size small
         float incl, float twist, float rise, string opts );
\end_layout

\begin_layout Standard
All of these functions are written in 
\family sans
nab
\family default
 allowing the user to modify or extend them as needed without having to
 modify the 
\family sans
nab
\family default
 compiler.
\end_layout

\begin_layout Standard

\series bold
Note:
\series default
 If you just want to create a regular helical structure with a given sequence,
 use the "fiber-diffraction" routine 
\family sans
fd_helix()
\family default
, which is discussed in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:fdhelix"

\end_inset

.
 The methods discussed next are more general, and can be extended to more
 complicated problems, but they are also much harder to follow and understand.
 The construction of "unusual" nucleic acids was the original focus of NAB;
 if you are using NAB for some other purpose (such as running Amber force
 field calculations) you should probably skip to Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:NABmm"

\end_inset

 at this point.
\end_layout

\begin_layout Subsection

\series bold
bdna() and fd_helix()
\end_layout

\begin_layout Standard
The function 
\family sans
bdna()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bdna()
\end_layout

\end_inset

 which was used in the first example converts a string into a Watson/Crick
 DNA duplex using average DNA helical parameters.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// bdna() - create average B-form duplex
\end_layout

\begin_layout Plain Layout

molecule bdna( string seq )
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

        molecule m;
\end_layout

\begin_layout Plain Layout

        string cseq;
\end_layout

\begin_layout Plain Layout

        cseq = wc_complement( seq, "", "dna" );
\end_layout

\begin_layout Plain Layout

        m = wc_helix( seq, "", "dna",
\end_layout

\begin_layout Plain Layout

                 cseq, "", "dna",
\end_layout

\begin_layout Plain Layout

                 2.25, -4.96, 36.0, 3.38, "s5a5s3a3" );
\end_layout

\begin_layout Plain Layout

         return( m );
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
bdna()
\family default
 calls 
\family sans
wc_helix()
\family default
 to create the molecule.
 However, 
\family sans
wc_helix()
\family default
 requires both strands of the duplex so 
\family sans
bdna()
\family default
 calls 
\family sans
wc_complement()
\family default
 to create a string that represents the Watson/Crick complement of the sequence
 contained in its parameter 
\family sans
seq
\family default
.
 The string 
\shape italic
"s5a5s3a3"
\shape default
 replaces both the 
\begin_inset Formula $s$
\end_inset

ense and 
\begin_inset Formula $a$
\end_inset

nti 
\begin_inset Formula $5$
\end_inset

' terminal phosphates with hydrogens and adds hydrogens to both the 
\begin_inset Formula $s$
\end_inset

ense and 
\begin_inset Formula $a$
\end_inset

nti 
\begin_inset Formula $3$
\end_inset

' terminal O3' oxygens.
 The finished molecule in 
\family sans
m
\family default
 is returned as the function's value.
 If any errors had occurred in creating 
\family sans
m
\family default
, it would have the value 
\family sans
NULL
\family default
, indicating that 
\family sans
bdna()
\family default
 failed.
\end_layout

\begin_layout Standard
Note that the simple method used in 
\family sans
bdna()
\family default
 for constructing the helix is not very generic, since it assumes that the
 
\shape italic
internal
\shape default
 geometry of the residues in the (default) library are appropriate for this
 sort of helix.
 This is in fact the case for B-DNA, but this method cannot be trivially
 generalized to other forms of helices.
 One could create initial models of other helical forms in the way described
 above, and fix up the internal geometry by subsequent energy minimization.
 An alternative is to directly use fiber-diffraction models for other types
 of helices.
 The 
\family sans
fd_helix()
\family default
 routine does this, reading a database of experimental coordinates from
 fiber diffraction data, and constructing a helix of the appropriate form,
 with the helix axis along 
\begin_inset Formula $z$
\end_inset

.
 More details are given in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:fdhelix"

\end_inset

.
\end_layout

\begin_layout Subsection

\series bold
wc_complement()
\end_layout

\begin_layout Standard
The function 
\family sans
wc_complement()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wc
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

complement()
\end_layout

\end_inset

 takes three strings.
 The first is a sequence using the standard one letter code, the second
 is the name of an 
\family sans
nab
\family default
 residue library, and the third is the nucleic acid type (RNA or DNA).
 It returns a string that contains the Watson/Crick complement of the input
 sequence in the same one letter code.
 The input string and the returned complement string have opposite directions.
 If the left end of the input string is the 5' base then the left end of
 the returned string will be the 3' base.
 The actual direction of the two strings depends on their use.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// wc_complement() - create a string that is the W/C 
\end_layout

\begin_layout Plain Layout

// complement of the string seq 
\end_layout

\begin_layout Plain Layout

string wc_complement( string seq, string rlib, string rlt )
\end_layout

\begin_layout Plain Layout

//  (note that rlib is unused: included only for backwards compatibility
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   string acbase, base, wcbase, wcseq;
\end_layout

\begin_layout Plain Layout

   int i, len;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   if( rlt == "dna" )      acbase = "t";
\end_layout

\begin_layout Plain Layout

   else if( rlt == "rna" ) acbase = "u";
\end_layout

\begin_layout Plain Layout

   else{
\end_layout

\begin_layout Plain Layout

      fprintf( stderr,
\end_layout

\begin_layout Plain Layout

        "wc_complement: rlt (%s) is not dna/rna, no W/C comp.", rlt );
\end_layout

\begin_layout Plain Layout

      return( NULL );
\end_layout

\begin_layout Plain Layout

   }   
\end_layout

\begin_layout Plain Layout

   len = length( seq );
\end_layout

\begin_layout Plain Layout

   wcseq = NULL;
\end_layout

\begin_layout Plain Layout

   for( i = 1; i <= len; i = i + 1 ){
\end_layout

\begin_layout Plain Layout

       base = substr( seq, i, 1 );
\end_layout

\begin_layout Plain Layout

       if( base == "a" || base == "A" )       wcbase = acbase;
\end_layout

\begin_layout Plain Layout

       else if( base == "c" || base == "C" )  wcbase = "g";
\end_layout

\begin_layout Plain Layout

       else if( base == "g" || base == "G" )  wcbase = "c";
\end_layout

\begin_layout Plain Layout

       else if( base == "t" || base == "T" )  wcbase = "a";
\end_layout

\begin_layout Plain Layout

       else if( base == "u" || base == "U" )  wcbase = "a";
\end_layout

\begin_layout Plain Layout

       else{
\end_layout

\begin_layout Plain Layout

           fprintf( stderr, "wc_complement: unknown base %sn", base );
\end_layout

\begin_layout Plain Layout

           return( NULL );
\end_layout

\begin_layout Plain Layout

       }   
\end_layout

\begin_layout Plain Layout

       wcseq = wcseq + wcbase;
\end_layout

\begin_layout Plain Layout

   }    
\end_layout

\begin_layout Plain Layout

   return( wcseq );
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
wc_complement()
\family default
 begins its work in line 9, where the nucleic acid type, as indicated by
 
\family sans
rlt
\family default
 as DNA or RNA is used to determine the correct complement for an 
\family sans
a
\family default
.
 The complementary sequence is created in the 
\family sans
for
\family default
 loop that begins in line 18 and extends to line 30.
 The 
\family sans
nab
\family default
 builtin 
\family sans
substr()
\family default
 is used to extract single characters from the input sequence beginning
 with with position 1 and working from left to right until entire input
 sequence has been converted.
 The 
\family sans
if
\family default
-tree from lines 20 to 28 is used to set the character complementary to
 the current character, using the previously determined 
\family sans
acbase
\family default
 if the input character is an 
\family sans
a
\family default
 or 
\family sans
A
\family default
.
 Any character other than the expected 
\family sans
a
\family default
, 
\family sans
c
\family default
, 
\family sans
g
\family default
, 
\family sans
t
\family default
, 
\family sans
u
\family default
 (or 
\family sans
A
\family default
, 
\family sans
C
\family default
, 
\family sans
G
\family default
, 
\family sans
T
\family default
, 
\family sans
U
\family default
) is an error causing 
\family sans
wc_complement()
\family default
 to print an error message and return 
\family sans
NULL
\family default
, indicating that it failed.
 Line 29 shows how 
\family sans
nab
\family default
 uses the infix 
\family sans
+
\family default
 to concatenate character strings.
 When the entire string has been complemented, the 
\family sans
for
\family default
 loop terminates and the complementary sequence now in 
\family sans
wcseq
\family default
 is returned as the function value.
 Note that if the input sequence is empty, 
\family sans
wc_complement()
\family default
 returns 
\family sans
NULL
\family default
, indicating failure.
\end_layout

\begin_layout Subsection

\series bold
wc_helix() Overview
\end_layout

\begin_layout Standard

\family sans
wc_helix()
\family default
 generates a uniform helical duplex from a sequence, its complement, two
 residue libraries and four helical parameters: x-offset, inclination, twist
 and rise.
 By using two residue libraries, 
\family sans
wc_helix()
\family default
 can generate RNA/DNA heteroduplexes.
 
\family sans
wc_helix()
\family default
 returns an 
\family sans
nab
\family default
 molecule containing two strands.
 The string 
\family sans
seq
\family default
 becomes the 
\family sans
"sense"
\family default
 strand and the string 
\family sans
aseq
\family default
 becomes the 
\family sans
"anti"
\family default
 strand.
 
\family sans
seq
\family default
 and 
\family sans
aseq
\family default
 are required to be complementary although this is not checked.
 
\family sans
wc_helix()
\family default
 creates the molecule one base pair at a time.
 
\family sans
seq
\family default
 is read from left to right, 
\family sans
aseq
\family default
 is read from right to left and corresponding letters are extracted and
 converted to residues by 
\family sans
getres()
\family default
.
 These residues are in turn combined into an idealized Watson/Crick base
 pair by 
\family sans
wc_basepair()
\family default
.
 An 
\family sans
AT
\family default
 created by 
\family sans
wc_basepair()
\family default
 is shown in Figure 2.
\end_layout

\begin_layout Standard
A Watson/Crick duplex can be modeled as a set of planes stacked in a helix.
 The numbers that describe the relationships between the planes and between
 the planes and the helical axis are called helical parameters.
 Planes can be defined for each base or base pair.
 Six numbers (three displacements and three angles) can be defined for every
 pair of planes; however, helical parameters for nucleic acid bases are
 restricted to the six numbers describing the the relationship between the
 two bases in a base pair and the six numbers describing the relationship
 between adjacent base pairs.
 A complete description of helical parameters can be found in Dickerson.
\begin_inset CommandInset citation
LatexCommand cite
key "Dickerson89"
literal "true"

\end_inset


\end_layout

\begin_layout Standard

\family sans
wc_helix()
\family default
 uses only four of the 12 helical parameters.
 It builds its helices from idealized Watson/Crick pairs.
 These pairs are planar so the three intra base angles are 0.
 In addition the displacements are displacements from the idealized Watson/Crick
 geometry and are also 0.
 The 
\family sans
A
\family default
 and the 
\family sans
T
\family default
 in Figure 2 are in plane of the page.
 
\family sans
wc_helix()
\family default
 uses four of the six parameters that relate a base pair to the helical
 axis.
 The helices created by 
\family sans
wc_helix()
\family default
 have a single axis (the Z axis, not shown) which is at the intersection
 of the X and Y axes of Figure 2.
 Now imagine keeping the axes fixed in the plane of the paper and moving
 the base pair.
 X-offset is the displacement along the X axis between the Y axis and the
 line marked Y'.
 A positive X-offset is toward the arrow on the X-axis.
 Inclination is the rotation of the base pair about the X axis.
 A rotation that moves the A above the plane of page and the T below is
 positive.
 Twist involves a rotation of the base pair about the Z-axis.
 A counterclockwise twist is positive.
 Finally, rise is a displacement along the Z-axis.
 A positive rise is out of the page toward the reader.
\end_layout

\begin_layout Subsection

\series bold
wc_basepair()
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /home/case/nabc/doc/AT.pair.eps
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig.ATpair"

\end_inset

ADE.THY from wc_basepair().
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function 
\family sans
wc_basepair()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wc
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

basepair()
\end_layout

\end_inset

 takes two residues and assembles them into a two stranded 
\family sans
nab
\family default
 molecule containing one base pair.
 Residue 
\family sans
sres
\family default
 is placed in the 
\family sans
"sense"
\family default
 strand and residue 
\family sans
ares
\family default
 is placed in the 
\family sans
"anti"
\family default
 strand.
 The work begins in line 14 where 
\family sans
newmolecule()
\family default
 is used to create an empty molecule stored in 
\family sans
m
\family default
.
 Two strands, 
\family sans
sense
\family default
 and 
\family sans
anti
\family default
 are added using 
\family sans
addstrand()
\family default
.
 In addition, two more molecules are created, 
\family sans
m_sense
\family default
 for the sense residue and 
\family sans
m_anti
\family default
 for the anti residue.
 The 
\family sans
if
\family default
-trees in lines 26-61 and 63-83 are used to select residue dependent atoms
 that will be used to move the base pairs into a convenient orientation
 for helix generation.
 The 
\shape italic
purine
\shape default
:
\family sans
C4
\family default
 and 
\shape italic
pyrimidine
\shape default
:
\family sans
C6
\family default
 distance which is residue dependent is also set.
 In line 62, 
\family sans
addresidue()
\family default
 adds 
\family sans
sres
\family default
 to the strand 
\family sans
sense
\family default
 of 
\family sans
m_sense
\family default
.
 In line 84, 
\family sans
addresidue()
\family default
 adds 
\family sans
ares
\family default
 to the strand 
\family sans
anti
\family default
 of 
\family sans
m_anti
\family default
.
 Lines 86 and 87 align the molecules containing the sense residue and anti
 residue so that 
\family sans
sres
\family default
 and 
\family sans
ares
\family default
 are on top of each other.
 Line 88 creates a transformation matrix that rotates 
\family sans
m_anti
\family default
 ( containing 
\family sans
ares
\family default
 ) 180o about the X-axis.
 After applying this transformation, the two bases are still occupying the
 same space but 
\family sans
ares
\family default
 is now antiparallel to 
\family sans
sres
\family default
.
 Line 90 creates a transformation matrix that displaces 
\family sans
m_anti
\family default
 and 
\family sans
ares
\family default
 along the Y-axis by 
\family sans
sep
\family default
.
 The properly positioned molecules containing 
\family sans
sres
\family default
 and 
\family sans
ares
\family default
 are merged into a single molecule, m
\family sans
,
\family default
 completing the base pair.
 Lines 97-98 move this base pair to a more convenient orientation for helix
 generation.
 Initially the base as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig.ATpair"

\end_inset

 is in the plane of page with origin on the C4 of the A.
 The calls to 
\family sans
setframe()
\family default
 and 
\family sans
alignframe()
\family default
 move the base pair so that the origin is at the intersection of the lines
 marked X and Y'.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// wc_basepair() - create Watson/Crick base pair
\end_layout

\begin_layout Plain Layout

#define AT_SEP 8.29
\end_layout

\begin_layout Plain Layout

#define CG_SEP 8.27
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

molecule wc_basepair( residue sres, residue ares )
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

        molecule m, m_sense, m_anti;
\end_layout

\begin_layout Plain Layout

        float sep;
\end_layout

\begin_layout Plain Layout

        string srname, arname;
\end_layout

\begin_layout Plain Layout

        string xtail, xhead;
\end_layout

\begin_layout Plain Layout

        string ytail, yhead;
\end_layout

\begin_layout Plain Layout

        matrix mat;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        m = newmolecule();
\end_layout

\begin_layout Plain Layout

        m_sense = newmolecule();
\end_layout

\begin_layout Plain Layout

        m_anti = newmolecule();
\end_layout

\begin_layout Plain Layout

        addstrand( m, "sense" );
\end_layout

\begin_layout Plain Layout

        addstrand( m, "anti" );
\end_layout

\begin_layout Plain Layout

        addstrand( m_sense, "sense" );
\end_layout

\begin_layout Plain Layout

        addstrand( m_anti, "anti" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        srname = getresname( sres );
\end_layout

\begin_layout Plain Layout

        arname = getresname( ares );
\end_layout

\begin_layout Plain Layout

        ytail = "sense::C1'";
\end_layout

\begin_layout Plain Layout

        yhead = "anti::C1'";
\end_layout

\begin_layout Plain Layout

        if( ( srname == "ADE" ) || ( srname == "DA" ) ||
\end_layout

\begin_layout Plain Layout

            ( srname == "RA" ) || ( srname =~ "[DR]A[35]" ) ){
\end_layout

\begin_layout Plain Layout

                sep = AT_SEP;
\end_layout

\begin_layout Plain Layout

                xtail = "sense::C5";
\end_layout

\begin_layout Plain Layout

                xhead = "sense::N3";
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_sense,
\end_layout

\begin_layout Plain Layout

                        "::C4", "::C5", "::N3", "::C4", "::N1" );
\end_layout

\begin_layout Plain Layout

        }else if( ( srname == "CYT" ) || ( srname =~ "[DR]C[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                sep = CG_SEP;
\end_layout

\begin_layout Plain Layout

                xtail = "sense::C6";
\end_layout

\begin_layout Plain Layout

                xhead = "sense::N1";
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_sense,
\end_layout

\begin_layout Plain Layout

                        "::C6", "::C5", "::N1", "::C6", "::N3" );
\end_layout

\begin_layout Plain Layout

        }else if( ( srname == "GUA" ) || ( srname =~ "[DR]G[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                sep = CG_SEP;
\end_layout

\begin_layout Plain Layout

                xtail = "sense::C5";
\end_layout

\begin_layout Plain Layout

                xhead = "sense::N3";
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_sense,
\end_layout

\begin_layout Plain Layout

                        "::C4", "::C5", "::N3", "::C4", "::N1" );
\end_layout

\begin_layout Plain Layout

        }else if( ( srname == "THY" ) || ( srname =~ "DT[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                sep = AT_SEP;
\end_layout

\begin_layout Plain Layout

                xtail = "sense::C6";
\end_layout

\begin_layout Plain Layout

                xhead = "sense::N1";
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_sense,
\end_layout

\begin_layout Plain Layout

                        "::C6", "::C5", "::N1", "::C6", "::N3" );
\end_layout

\begin_layout Plain Layout

        }else if( ( srname == "URA" ) || ( srname =~ "RU[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                sep = AT_SEP;
\end_layout

\begin_layout Plain Layout

                xtail = "sense::C6";
\end_layout

\begin_layout Plain Layout

                xhead = "sense::N1";
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_sense,
\end_layout

\begin_layout Plain Layout

                        "::C6", "::C5", "::N1", "::C6", "::N3" );
\end_layout

\begin_layout Plain Layout

        }else{
\end_layout

\begin_layout Plain Layout

                fprintf( stderr,
\end_layout

\begin_layout Plain Layout

                        "wc_basepair : unknown sres %s
\backslash

\backslash
n",srname );
\end_layout

\begin_layout Plain Layout

                exit( 1 );
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        addresidue( m_sense, "sense", sres );
\end_layout

\begin_layout Plain Layout

        if( ( arname == "ADE" ) || ( arname == "DA" ) ||
\end_layout

\begin_layout Plain Layout

            ( arname == "RA" ) || ( arname =~ "[DR]A[35]" ) ){
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_anti,
\end_layout

\begin_layout Plain Layout

                        "::C4", "::C5", "::N3", "::C4", "::N1" );
\end_layout

\begin_layout Plain Layout

        }else if( ( arname == "CYT" ) || ( arname =~ "[DR]C[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_anti,
\end_layout

\begin_layout Plain Layout

                        "::C6", "::C5", "::N1", "::C6", "::N3" );
\end_layout

\begin_layout Plain Layout

        }else if( ( arname == "GUA" ) || ( arname =~ "[DR]G[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_anti,
\end_layout

\begin_layout Plain Layout

                        "::C4", "::C5", "::N3", "::C4", "::N1" );
\end_layout

\begin_layout Plain Layout

        }else if( ( arname == "THY" ) || ( arname =~ "DT[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_anti,
\end_layout

\begin_layout Plain Layout

                        "::C6", "::C5", "::N1", "::C6", "::N3" );
\end_layout

\begin_layout Plain Layout

        }else if( ( arname == "URA" ) || ( arname =~ "RU[35]*" ) ){
\end_layout

\begin_layout Plain Layout

                setframe( 2, m_anti,
\end_layout

\begin_layout Plain Layout

                        "::C6", "::C5", "::N1", "::C6", "::N3" );
\end_layout

\begin_layout Plain Layout

        }else{
\end_layout

\begin_layout Plain Layout

                fprintf( stderr,
\end_layout

\begin_layout Plain Layout

                        "wc_basepair : unknown ares %s
\backslash

\backslash
n",arname );
\end_layout

\begin_layout Plain Layout

                exit( 1 );
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        addresidue( m_anti, "anti", ares );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        alignframe( m_sense, NULL );
\end_layout

\begin_layout Plain Layout

        alignframe( m_anti, NULL );
\end_layout

\begin_layout Plain Layout

        mat = newtransform( 0., 0., 0., 180., 0., 0.
 );
\end_layout

\begin_layout Plain Layout

        transformmol( mat, m_anti, NULL );
\end_layout

\begin_layout Plain Layout

        mat = newtransform( 0., sep, 0., 0., 0., 0.
 );
\end_layout

\begin_layout Plain Layout

        transformmol( mat, m_anti, NULL );
\end_layout

\begin_layout Plain Layout

        mergestr( m, "sense", "last", m_sense, "sense", "first" );
\end_layout

\begin_layout Plain Layout

        mergestr( m, "anti", "last", m_anti, "anti", "first" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        freemolecule( m_sense ); freemolecule( m_anti );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        setframe( 2, m, "::C1'", xtail, xhead, ytail, yhead );
\end_layout

\begin_layout Plain Layout

        alignframe( m, NULL );
\end_layout

\begin_layout Plain Layout

        return( m );
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\series bold
wc_helix() Implementation
\end_layout

\begin_layout Standard
The function 
\family sans
wc_helix()
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wc
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

helix()
\end_layout

\end_inset

 assembles base pairs from 
\family sans
wc_basepair()
\family default
 into a helical duplex.
 It is a fairly complicated function that uses several transformations and
 shows how 
\family sans
mergestr()
\family default
 is used to combine smaller molecules into a larger one.
 In addition to creating complete duplexes, 
\family sans
wc_helix()
\family default
 can also create molecules that contain only one strand of a duplex.
 Using the special value 
\family sans
NULL
\family default
 for either 
\family sans
seq
\family default
 or 
\family sans
aseq
\family default
 creates a duplex that omits the residues for the 
\family sans
NULL
\family default
 sequence.
 The molecule still contains two strands, 
\family sans
sense
\family default
 and 
\family sans
anti
\family default
, but the strand corresponding to the 
\family sans
NULL
\family default
 sequence has zero residues.
 
\family sans
wc_helix()
\family default
 first determines which strands are required, then creates the first base
 pair, then creates the subsequent base pairs and assembles them into a
 helix and finally packages the requested strands into the returned molecule.
\end_layout

\begin_layout Standard
Lines 20-34 test the input sequences to see which strands are required.
 The variables 
\family sans
has_s
\family default
 and 
\family sans
has_a
\family default
 are flags where a value of 
\family sans
1
\family default
 indicates that 
\family sans
seq
\family default
 and/or 
\family sans
aseq
\family default
 was requested.
 If an input sequence is 
\family sans
NULL
\family default
, 
\family sans
wc_complement()
\family default
 is used to create it and the appropriate flag is set to 
\family sans
0
\family default
.
 The 
\family sans
nab
\family default
 builtin 
\family sans
setreslibkind()
\family default
 is used to set the nucleic acid type so that the proper residue ( DNA or
 RNA ) is extracted from the residue library.
\end_layout

\begin_layout Standard
The first base pair is created in lines 42-63.
 The two letters corresponding the 5' base of 
\family sans
seq
\family default
 and the 3' base of 
\family sans
aseq
\family default
 are extracted using the 
\family sans
nab
\family default
 builtin 
\family sans
substr()
\family default
, converted to residues using 
\family sans
getresidue()
\family default
 and assembled into a base pair by 
\family sans
wc_basepair()
\family default
.
 This base pair is oriented as in Figure 2 with the origin at the intersection
 of the lines X and Y'.
 Two transformations are created, 
\family sans
xomat
\family default
 for the x-offset and 
\family sans
inmat
\family default
 for the inclination and applied to this pair.
\end_layout

\begin_layout Standard
Base pairs 2 to 
\family sans
slen-1
\family default
 are created in the 
\family sans
for
\family default
 loop in lines 66-87.
 
\family sans
substr()
\family default
 is used to extract the appropriate letters from 
\family sans
seq
\family default
 and 
\family sans
aseq
\family default
 which are converted into another base pair by 
\family sans
getresidue()
\family default
 and 
\family sans
wc_basepair()
\family default
.
 Four transformations are applied to these base pairs - two to set the x-offset
 and the inclination and two more to set the twist and the rise.
 Next 
\family sans
m2
\family default
, the molecule containing the newly created properly positioned base pair
 must be bonded to the previously created molecule in 
\family sans
m1
\family default
.
 Since 
\family sans
nab
\family default
 only permits bonds between residues in the same strand, 
\family sans
mergestr()
\family default
 must be used to combine the corresponding strands in the two molecules
 before 
\family sans
connectres()
\family default
 can create the bonds.
\end_layout

\begin_layout Standard
Because the two strands in a Watson/Crick duplex are antiparallel, adding
 a base pair to one end requires that one residue be added 
\shape italic
after
\shape default
 the 
\shape italic
last
\shape default
 residue of one strand and that the other residue added 
\shape italic
before
\shape default
 the 
\shape italic
first
\shape default
 residue of the other strand.
 In 
\family sans
wc_helix()
\family default
 the 
\family sans
sense
\family default
 strand is extended after its last residue and the 
\family sans
anti
\family default
 strand is extended before its first residue.
 The call to 
\family sans
mergestr()
\family default
 in line 79 extends the 
\family sans
sense
\family default
 strand of 
\family sans
m1
\family default
 with the the residue of the 
\family sans
sense
\family default
 strand of 
\family sans
m2
\family default
.
 The residue of 
\family sans
m2
\family default
 is added after the 
\family sans
"last"
\family default
 residue of of the 
\family sans
sense
\family default
 strand of 
\family sans
m1
\family default
.
 The final argument 
\family sans
"first"
\family default
 indicates that the residue of 
\family sans
m2
\family default
 are copied in their original order 
\family sans
m1:sense:last
\family default
 is followed by 
\family sans
m2:sense:first
\family default
.
 After the strands have been merged, 
\family sans
connectres()
\family default
 makes a bond between the 
\family sans
O3'
\family default
 of the next to last residue (
\family sans
i-1
\family default
) and the 
\family sans
P
\family default
 of the last residue (
\family sans
i
\family default
).
 The next call to 
\family sans
mergestr()
\family default
 works similarly for the residues in the 
\family sans
anti
\family default
 strands.
 The residue in the 
\family sans
anti
\family default
 strand of 
\family sans
m2
\family default
 are copied into the the 
\family sans
anti
\family default
 strand of 
\family sans
m1
\family default
 
\shape italic
before
\shape default
 the first residue of the 
\family sans
anti
\family default
 strand of 
\family sans
m1 m2:anti:
\family default
\shape italic
last
\shape default
 precedes 
\family sans
m1:anti:
\family default
\shape italic
first
\shape default
 .
 After merging 
\family sans
connectres()
\family default
 creates a bond between the 
\family sans
O3'
\family default
 of the new first residue and the 
\family sans
P
\family default
 of the second residue.
\end_layout

\begin_layout Standard
Lines 121-130 create the returned molecule 
\family sans
m3
\family default
.
 If the flag 
\family sans
has_s
\family default
 is 
\family sans
1
\family default
, 
\family sans
mergestr()
\family default
 copies the entire sense 
\family sans
strand
\family default
 of 
\family sans
m1
\family default
 into the empty sense 
\family sans
strand
\family default
 of 
\family sans
m3
\family default
.
 If the flag 
\family sans
has_a
\family default
 is 
\family sans
1
\family default
, the 
\family sans
anti
\family default
 strand is also copied.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// wc_helix() - create Watson/Crick duplex
\end_layout

\begin_layout Plain Layout

string  wc_complement();
\end_layout

\begin_layout Plain Layout

molecule wc_basepair();
\end_layout

\begin_layout Plain Layout

molecule wc_helix(
\end_layout

\begin_layout Plain Layout

       string seq, string sreslib, string snatype,
\end_layout

\begin_layout Plain Layout

       string aseq, string areslib, string anatype,
\end_layout

\begin_layout Plain Layout

       float xoff, float incl, float twist, float rise,
\end_layout

\begin_layout Plain Layout

       string opts )
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

molecule m1, m2, m3;
\end_layout

\begin_layout Plain Layout

matrix xomat, inmat, mat;
\end_layout

\begin_layout Plain Layout

string arname, srname;
\end_layout

\begin_layout Plain Layout

string sreslib_use, areslib_use;
\end_layout

\begin_layout Plain Layout

string loup[ hashed ];
\end_layout

\begin_layout Plain Layout

residue sres, ares;
\end_layout

\begin_layout Plain Layout

int     has_s, has_a;
\end_layout

\begin_layout Plain Layout

int i, slen;
\end_layout

\begin_layout Plain Layout

float   ttwist, trise;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

has_s = 1; has_a = 1;
\end_layout

\begin_layout Plain Layout

if( sreslib == "" ) sreslib_use = "all_nucleic94.lib";
\end_layout

\begin_layout Plain Layout

       else sreslib_use = sreslib;
\end_layout

\begin_layout Plain Layout

if( areslib == "" ) areslib_use = "all_nucleic94.lib";
\end_layout

\begin_layout Plain Layout

       else areslib_use = areslib;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if( seq == NULL && aseq == NULL ){
\end_layout

\begin_layout Plain Layout

       fprintf( stderr, "wc_helix: no sequence
\backslash

\backslash
n" );
\end_layout

\begin_layout Plain Layout

       return( NULL );
\end_layout

\begin_layout Plain Layout

}else if( seq == NULL ){
\end_layout

\begin_layout Plain Layout

       seq = wc_complement( aseq, areslib_use, snatype );
\end_layout

\begin_layout Plain Layout

       has_s = 0;
\end_layout

\begin_layout Plain Layout

}else if( aseq == NULL ){
\end_layout

\begin_layout Plain Layout

       aseq = wc_complement( seq, sreslib_use, anatype );
\end_layout

\begin_layout Plain Layout

       has_a = 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

slen = length( seq );
\end_layout

\begin_layout Plain Layout

loup["g"] = "G"; loup["a"] = "A";
\end_layout

\begin_layout Plain Layout

loup["t"] = "T"; loup["c"] = "C";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//                       handle the first base pair:
\end_layout

\begin_layout Plain Layout

setreslibkind( sreslib_use, snatype );
\end_layout

\begin_layout Plain Layout

srname = "D" + loup[ substr( seq, 1, 1 ) ];
\end_layout

\begin_layout Plain Layout

if( opts =~ "s5" )
\end_layout

\begin_layout Plain Layout

    sres = getresidue( srname + "5", sreslib_use );
\end_layout

\begin_layout Plain Layout

else if( opts =~ "s3" && slen == 1 )
\end_layout

\begin_layout Plain Layout

    sres = getresidue( srname + "3", sreslib_use );
\end_layout

\begin_layout Plain Layout

else sres = getresidue( srname, sreslib_use );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setreslibkind( areslib_use, anatype );
\end_layout

\begin_layout Plain Layout

arname = "D" + loup[ substr( aseq, 1, 1 ) ];
\end_layout

\begin_layout Plain Layout

if( opts =~ "a3" )
\end_layout

\begin_layout Plain Layout

    ares = getresidue( arname + "3", areslib_use );
\end_layout

\begin_layout Plain Layout

else if( opts =~ "a5" && slen == 1 )
\end_layout

\begin_layout Plain Layout

    ares = getresidue( arname + "5", areslib_use );
\end_layout

\begin_layout Plain Layout

else ares = getresidue( arname, areslib_use );
\end_layout

\begin_layout Plain Layout

m1 = wc_basepair( sres, ares );
\end_layout

\begin_layout Plain Layout

freeresidue( sres ); freeresidue( ares );
\end_layout

\begin_layout Plain Layout

xomat = newtransform(xoff, 0., 0., 0., 0., 0.
 );
\end_layout

\begin_layout Plain Layout

transformmol( xomat, m1, NULL );
\end_layout

\begin_layout Plain Layout

inmat = newtransform( 0., 0., 0., incl, 0., 0.);
\end_layout

\begin_layout Plain Layout

transformmol( inmat, m1, NULL );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//                       add in the main portion of the helix:
\end_layout

\begin_layout Plain Layout

trise = rise; ttwist = twist;
\end_layout

\begin_layout Plain Layout

for( i = 2; i <= slen-1; i = i + 1 ){
\end_layout

\begin_layout Plain Layout

       srname = "D" + loup[ substr( seq, i, 1 ) ];
\end_layout

\begin_layout Plain Layout

       setreslibkind( sreslib, snatype );
\end_layout

\begin_layout Plain Layout

       sres = getresidue( srname, sreslib_use );
\end_layout

\begin_layout Plain Layout

       arname = "D" + loup[ substr( aseq, i, 1 ) ];
\end_layout

\begin_layout Plain Layout

       setreslibkind( areslib, anatype );
\end_layout

\begin_layout Plain Layout

       ares = getresidue( arname, areslib_use );
\end_layout

\begin_layout Plain Layout

       m2 = wc_basepair( sres, ares );
\end_layout

\begin_layout Plain Layout

       freeresidue( sres ); freeresidue( ares );
\end_layout

\begin_layout Plain Layout

       transformmol( xomat, m2, NULL );
\end_layout

\begin_layout Plain Layout

       transformmol( inmat, m2, NULL );
\end_layout

\begin_layout Plain Layout

       mat = newtransform( 0., 0., trise, 0., 0., ttwist );
\end_layout

\begin_layout Plain Layout

       transformmol( mat, m2, NULL );
\end_layout

\begin_layout Plain Layout

       mergestr( m1, "sense", "last", m2, "sense", "first" );
\end_layout

\begin_layout Plain Layout

       connectres( m1, "sense", i-1, "O3'", i, "P" );
\end_layout

\begin_layout Plain Layout

       mergestr( m1, "anti", "first", m2, "anti", "last" );
\end_layout

\begin_layout Plain Layout

       connectres( m1, "anti", 1, "O3'", 2, "P" );
\end_layout

\begin_layout Plain Layout

       trise = trise + rise;
\end_layout

\begin_layout Plain Layout

       ttwist = ttwist + twist;
\end_layout

\begin_layout Plain Layout

       freemolecule( m2 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

i = slen;         // add in final residue pair:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if( i > 1 ){
\end_layout

\begin_layout Plain Layout

       srname = substr( seq, i, 1 );
\end_layout

\begin_layout Plain Layout

       srname = "D" + loup[ substr( seq, i, 1 ) ];
\end_layout

\begin_layout Plain Layout

       setreslibkind( sreslib, snatype );
\end_layout

\begin_layout Plain Layout

       if( opts =~ "s3"  )
\end_layout

\begin_layout Plain Layout

          sres = getres( srname + "3", sreslib_use );
\end_layout

\begin_layout Plain Layout

       else
\end_layout

\begin_layout Plain Layout

          sres = getres( srname, sreslib_use );
\end_layout

\begin_layout Plain Layout

       arname = "D" + loup[ substr( aseq, i, 1 ) ];
\end_layout

\begin_layout Plain Layout

       setreslibkind( areslib, anatype );
\end_layout

\begin_layout Plain Layout

       if( opts =~ "a5" )
\end_layout

\begin_layout Plain Layout

          ares = getres( arname + "5", areslib_use );
\end_layout

\begin_layout Plain Layout

       else
\end_layout

\begin_layout Plain Layout

          ares = getres( arname, areslib_use );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

       m2 = wc_basepair( sres, ares );
\end_layout

\begin_layout Plain Layout

       freeresidue( sres ); freeresidue( ares );
\end_layout

\begin_layout Plain Layout

       transformmol( xomat, m2, NULL );
\end_layout

\begin_layout Plain Layout

       transformmol( inmat, m2, NULL );
\end_layout

\begin_layout Plain Layout

       mat = newtransform( 0., 0., trise, 0., 0., ttwist );
\end_layout

\begin_layout Plain Layout

       transformmol( mat, m2, NULL );
\end_layout

\begin_layout Plain Layout

       mergestr( m1, "sense", "last", m2, "sense", "first" );
\end_layout

\begin_layout Plain Layout

       connectres( m1, "sense", i-1, "O3'", i, "P" );
\end_layout

\begin_layout Plain Layout

       mergestr( m1, "anti", "first", m2, "anti", "last" );
\end_layout

\begin_layout Plain Layout

       connectres( m1, "anti", 1, "O3'", 2, "P" );
\end_layout

\begin_layout Plain Layout

       trise = trise + rise;
\end_layout

\begin_layout Plain Layout

       ttwist = ttwist + twist;
\end_layout

\begin_layout Plain Layout

       freemolecule( m2 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m3 = newmolecule();
\end_layout

\begin_layout Plain Layout

addstrand( m3, "sense" );
\end_layout

\begin_layout Plain Layout

addstrand( m3, "anti" );
\end_layout

\begin_layout Plain Layout

if( has_s )
\end_layout

\begin_layout Plain Layout

       mergestr( m3, "sense", "last", m1, "sense", "first" );
\end_layout

\begin_layout Plain Layout

if( has_a )
\end_layout

\begin_layout Plain Layout

       mergestr( m3, "anti", "last",  m1, "anti", "first" );
\end_layout

\begin_layout Plain Layout

freemolecule( m1 ); 
\end_layout

\begin_layout Plain Layout

       
\end_layout

\begin_layout Plain Layout

return( m3 ); 
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter

\series bold
NAB: Language Reference
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 is a computer language used to create, modify and describe models of macromolec
ules, especially those of unusual nucleic acids.
 The following sections provide a complete description of the 
\family sans
nab
\family default
 language.
 The discussion begins with its lexical elements, continues with sections
 on expressions, statements and user defined functions and concludes with
 an explanation of each of 
\family sans
nab
\family default
's builtin functions.
 Two appendices contain a more detailed and formal description of the lexical
 and syntactic elements of the language including the actual 
\family sans
lex
\family default
 and 
\family sans
yacc
\family default
 input used to create the compiler.
 Two other appendices describe 
\family sans
nab
\family default
's internal data structures and the C code generated to support some of
 
\family sans
nab
\family default
's higher level operations.
\end_layout

\begin_layout Section

\series bold
Language Elements
\end_layout

\begin_layout Standard
An 
\family sans
nab
\family default
 program is composed of several basic lexical elements: identifiers, reserved
 words, literals, operators and special characters.
 These are discussed in the following sections.
\end_layout

\begin_layout Subsection

\series bold
Identifiers
\end_layout

\begin_layout Standard
An identifier is a sequence of letters, digits and underscores beginning
 with a letter.
 Upper and lower case letters are distinct.
 Identifiers are limited to 255 characters in length.
 The underscore (_) is a letter.
 Identifiers beginning with underscore must be used carefully as they may
 conflict with operating system names and 
\family sans
nab
\family default
 created temporaries.
 Here are some 
\family sans
nab
\family default
 identifiers.
\end_layout

\begin_layout LyX-Code

\family sans
mol i3 twist TWIST Watson_Crick_Base_Pair
\end_layout

\begin_layout Subsection

\series bold
Reserved Words
\end_layout

\begin_layout Standard
Certain identifiers are reserved words, special symbols used by 
\family sans
nab
\family default
 to denote control flow and program structure.
 Here are the 
\family sans
nab
\family default
 reserved words:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
allocate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
assert
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
atom
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bounds
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
break
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
continue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
deallocate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
debug
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
delete
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dynamic
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
else
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
for
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hashed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
if
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
matrix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
molecule
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
point
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
residue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
return
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
while
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Literals
\end_layout

\begin_layout Standard
Literals are self defining terms used to introduce constant values into
 expressions.
 
\family sans
nab
\family default
 provides three types of literals: integers, floats and character strings.
 Integer literals are sequences of one or more decimal digits.
 Float literals are sequences of decimal digits that include a decimal point
 and/or are followed by an exponent.
 An exponent is the letter 
\family sans
e
\family default
 or 
\family sans
E
\family default
 followed by an optional 
\family sans
+
\family default
 or 
\family sans
-
\family default
 followed by one to three decimal digits.
 The exponent is interpreted as 
\begin_inset Quotes eld
\end_inset

times 10 to the power of 
\shape italic
exp
\shape default

\begin_inset Quotes erd
\end_inset

 where 
\shape italic
exp
\shape default
 is the number following the 
\family sans
e
\family default
 or 
\family sans
E
\family default
.
 All numeric literals are base 10.
 Here are some integer and float literals:
\end_layout

\begin_layout LyX-Code

\family sans
1 3.14159 5 .234 3.0e7 1E-7
\end_layout

\begin_layout Standard
String literals are sequences of characters enclosed in double quotes (
\family sans
"
\family default
).
 A double quote is placed into a string literal by preceding it with a backslash
 (
\family sans

\begin_inset Formula $\backslash$
\end_inset


\family default
).
 A backslash is inserted into a string by preceding it with a backslash.
 Strings of zero length are permitted.
\end_layout

\begin_layout LyX-Code

\family sans
"" "a string" "string with a 
\begin_inset Formula $\backslash$
\end_inset

"" "string with a 
\begin_inset Formula $\backslash\backslash$
\end_inset

"
\end_layout

\begin_layout Standard
Non-printing characters are inserted into strings via escape sequences:
 one to three characters following a backslash.
 Here are the 
\family sans
nab
\family default
 string escapes and their meanings:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bell (a for audible alarm)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Back space
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
f
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Form feed (new page)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
New line
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
r
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Carriage return
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
t
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Horizontal tab
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
v
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vertical tab
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash

\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Literal double quote
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash

\backslash

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Literal backspace
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
ooo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Octal character
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
xhh
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hex character (hh is 1 or 2 hex digits
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here are some strings with escapes:
\end_layout

\begin_layout LyX-Code

\family sans
"Molecule
\begin_inset Formula $\backslash$
\end_inset

tResidue
\begin_inset Formula $\backslash$
\end_inset

tAtom
\begin_inset Formula $\backslash$
\end_inset

n"
\end_layout

\begin_layout LyX-Code

\family sans
"
\begin_inset Formula $\backslash$
\end_inset

252Real quotes
\begin_inset Formula $\backslash$
\end_inset

272"
\end_layout

\begin_layout Standard
The second string has octal values, 
\family sans

\begin_inset Formula $\backslash$
\end_inset

252
\family default
, the left double quote, and
\family sans
 
\begin_inset Formula $\backslash$
\end_inset

272,
\family default
 the right double quote.
 
\end_layout

\begin_layout Subsection

\series bold
Operators
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 uses several additional 1 or 2 character symbols as operators.
 Operators combine literals and identifiers into expressions.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="26" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Meaning
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Precedence
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Associates
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
( )
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
expression grouping
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
array indexing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
select attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unary 
\begin_inset Formula $-$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
negation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
right to left
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
!
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
not
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
^
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cross product
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left to right
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
@
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dot product
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
multiplication
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left to right
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
/
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
division
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left to right
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
modulus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left to right
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
addition, concatenation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left to right
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
binary 
\begin_inset Formula $-$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
subtraction
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left to right
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
less than
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
<=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
less than or equal to
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
==
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
equal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
!=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
not equal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
>=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
greater than or equal to
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
greater than
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
=~
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
match
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
!~
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
doesn't match
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hashed array member
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
or
\emph default
 atom in molecule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
&&
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
and
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
||
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
or
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
assignment
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
right to left
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Special Characters
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 uses braces (
\family sans
{}
\family default
) to group statements into compound statements and statements and declarations
 into function bodies.
 The semicolon (
\family sans
;
\family default
) is used to terminate statements.
 The comma (
\family sans
,
\family default
) separates items in parameter lists and declarations.
 The sharp (
\family sans
#
\family default
) used in column 1 designates a preprocessor directive, which invokes the
 standard C preprocessor to provide constants, macros and file inclusion.
 A 
\family sans
#
\family default
 in any other column, except in a comment or a literal string is an error.
 Two consecutive forward slashes (
\family sans
//
\family default
) indicate that the rest of the line is a comment which is ignored.
 All other characters except white space (spaces, tabs, newlines and formfeeds)
 are illegal except in literal strings and comments.
\end_layout

\begin_layout Section

\series bold
Higher-level constructs
\end_layout

\begin_layout Subsection

\series bold
Variables
\end_layout

\begin_layout Standard
A variable is a name given to a part of memory that is used to hold data.
 Every 
\family sans
nab
\family default
 variable has type which determines how the computer interprets the variable's
 contents.
 
\family sans
nab
\family default
 provides 10 data types.
 They are the numeric types 
\family sans
int
\family default
 and 
\family sans
float
\family default
 which are translated into the underlying C compiler's 
\family sans
int
\family default
 and 
\family sans
double
\family default
 respectively.*
\end_layout

\begin_layout Standard
The 
\family sans
string
\family default
 type is used to hold null (zero byte) terminated (C) character strings.
 The 
\family sans
file
\family default
 type is used to access files (equivalent to C's 
\family sans
FILE *
\family default
).
 There are three types—
\family sans
atom
\family default
, 
\family sans
residue
\family default
 and 
\family sans
molecule
\family default
 for creating and working with molecules.
 The 
\family sans
point
\family default
 type holds three 
\family sans
float
\family default
 values which can represent the X, Y and Z coordinates of a point or the
 components of a 3-vector.
 The 
\family sans
matrix
\family default
 type holds 16 
\family sans
float
\family default
 values in a 4
\begin_inset Formula $\times$
\end_inset

4 matrix and the 
\family sans
bounds
\family default
 type is used to hold distance bounds and other information for use in distance
 geometry calculations.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 string variables are mapped into C 
\family sans
char *
\family default
 variables which are allocated as needed and freed when possible.
 However, all of this is invisible at the 
\family sans
nab
\family default
 level where 
\family sans
string
\family default
s are atomic objects.
 The 
\family sans
atom
\family default
, 
\family sans
residue
\family default
, 
\family sans
molecule
\family default
 and 
\family sans
bounds
\family default
 types become pointers to the appropriate C 
\family sans
struct
\family default
s.
 
\family sans
point
\family default
 and 
\family sans
matrix
\family default
 are implemented as 
\family sans
float [3]
\family default
 and 
\family sans
float [4][4]
\family default
 respectively.
 Again the 
\family sans
nab
\family default
 compiler automatically generates all the C code required to makes these
 types appear as atomic objects.
\end_layout

\begin_layout Standard
Every 
\family sans
nab
\family default
 variable must be declared.
 All declarations for functions or variables in the main block must precede
 the first executable statement of that block.
 Also all declarations in a user defined 
\family sans
nab
\family default
 function must precede the first executable statement of that function.
 An 
\family sans
nab
\family default
 variable declaration begins with the reserved word that specifies the variable'
s type followed by a comma separated list of identifiers which become variables
 of that type.
 Each declaration ends with a semicolon.
\end_layout

\begin_layout LyX-Code

\family sans
int i, j, j;
\end_layout

\begin_layout LyX-Code

\family sans
matrix mat;
\end_layout

\begin_layout LyX-Code

\family sans
point origin;
\end_layout

\begin_layout Standard
Six 
\family sans
nab
\family default
 types—
\family sans
string
\family default
, 
\family sans
file
\family default
, 
\family sans
atom
\family default
, 
\family sans
residue
\family default
, 
\family sans
molecule
\family default
 and 
\family sans
bounds
\family default
 use the predefined identifier 
\family sans
NULL
\family default
 to indicate a non-existent object of these types.
 
\family sans
nab
\family default
 builtin functions returning objects of these types return 
\family sans
NULL
\family default
 to indicate that the object could not be created.
 
\family sans
nab
\family default
 considers a 
\family sans
NULL
\family default
 value to be false.
 The empty 
\family sans
nab
\family default
 string 
\family sans
""
\family default
 is 
\shape italic
not
\shape default
 equal to 
\family sans
NULL
\family default
.
\end_layout

\begin_layout Subsection

\series bold
Attributes
\end_layout

\begin_layout Standard
Four 
\family sans
nab
\family default
 types—
\family sans
atom
\family default
, 
\family sans
residue
\family default
, 
\family sans
molecule
\family default
 and 
\family sans
point
\family default
—have attributes which are elements of their internal structure directly
 accessible at the 
\family sans
nab
\family default
 level.
 Attributes are accessed via the select operator (
\family sans
.
\family default
) which takes a variable as its left hand operand and an attribute name
 (an identifier) as its right.
 The general form is 
\begin_inset space ~
\end_inset


\end_layout

\begin_layout LyX-Code

\shape italic
\emph on
var
\family sans
\shape default
.
\family default
\shape italic
attr
\end_layout

\begin_layout Standard
Most attributes behave exactly like ordinary variables of the same type.
 However, some attributes are read only.
 They are not permitted to appear as the left hand side of an assignment.
 When a read only attribute is passed to an 
\family sans
nab
\family default
 function, it is copied into temporary variable which in turn is passed
 to the function.
 Read only attributes are not permitted to appear as destination variables
 in 
\family sans
scanf()
\family default
 parameter lists.
 Attribute names are kept separate from variable and function names and
 since attributes can only appear to the right of select there is no conflict
 between variable and attribute names.
 For example, if 
\family sans
x
\family default
 is a 
\family sans
point
\family default
, then
\end_layout

\begin_layout LyX-Code

\family sans
x // the point variable x
\end_layout

\begin_layout LyX-Code

\family sans
x.x // x coordinate of x
\end_layout

\begin_layout LyX-Code

\family sans
.x // Error!
\end_layout

\begin_layout Standard
Here is the complete list of 
\family sans
nab
\family default
 attributes.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="3in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Atom attributes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Write?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
atomname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ordinarily taken from columns 13-16 of an input pdb file, or from a residue
 library.
 Spaces are removed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
atomnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of the atom starting at 
\family sans
1
\family default
 for 
\shape italic
each
\shape default
 strand in the molecule.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tatomnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The 
\shape italic
total
\shape default
 number of the atom starting at 
\family sans
1
\family default
.
 Unlike 
\family sans
atomnum
\family default
, 
\family sans
tatomnum
\family default
 does not restart at 
\family sans
1
\family default
 for each strand.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fullname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The fully qualified atom name, having the form
\shape italic
 strandnum
\family sans
\shape default
:
\family default
\shape italic
resnum
\family sans
\shape default
:
\family default
\shape italic
atomname
\shape default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The 
\shape italic
resid
\shape default
 of the residue containing this atom; see the 
\series bold
Residue attributes
\series default
 table.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The name of the residue containing this atom.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of the residue containing the atom.

\family sans
 resnum
\family default
 starts at 
\family sans
1
\family default
 for 
\shape italic
each
\shape default
 strand.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tresnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The 
\shape italic
total
\shape default
 number of the residue containing this atom starting at 
\family sans
1
\family default
.
 Unlike 
\family sans
resnum
\family default
, 
\family sans
tresnum
\family default
 does not restart at 
\family sans
1
\family default
 for each strand.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
strandname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The name of the strand containing this atom.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
strandnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of the strand containing this atom.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pos
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
point
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
point
\family default
 variable giving the atom's position.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x,y,z
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The Cartesian coordinates of this atom
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
charge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Atomic charge
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
radius
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dielectric radius
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User-definable integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User-definable float
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="3in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Residue attributes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Write?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
A 6-character string, ordinarily taken from columns 22-27 of a PDB file.
 It can be re-set to something else, but should always be either empty or
 exactly 6 characters long, since this string is used (if it is not empty)
 by
\family default
\series default
\shape default
\emph default
\bar default
 
\size default
\emph on
\noun default
\color inherit
putpdb
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Three-character identifier
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
resnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of the residue.

\family sans
 resnum
\family default
 starts at 
\family sans
1
\family default
 for 
\shape italic
each
\shape default
 strand.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tresnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The 
\shape italic
total
\shape default
 number of the residue, starting at 
\family sans
1
\family default
.
 Unlike 
\family sans
resnum
\family default
, 
\family sans
tresnum
\family default
 does not restart at 
\family sans
1
\family default
 for each strand.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
strandname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The name of the strand containing this residue.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
strandnum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The number of the strand containing this residue.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="3in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Molecule attributes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Write?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
natoms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The total number of atoms in the molecule.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nresidues
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The total number of residues in the molecule.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nstrands
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The total number of strands in the molecule.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Arrays
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 supports two kinds of arrays—ordinary arrays where the selector is a comma
 separated list of integer expressions and associative or 
\begin_inset Quotes eld
\end_inset

hashed
\begin_inset Quotes erd
\end_inset

 arrays where the selector is a character string.
 The set of character strings that is associated with data in a hashed array
 is called its keys.
 Array elements may be of any 
\family sans
nab
\family default
 type.
 All the dimensions of an ordinary array are indexed from 
\family sans
1
\family default
 to 
\begin_inset Formula $Nd$
\end_inset

 , where 
\begin_inset Formula $Nd$
\end_inset

 is the size of the 
\shape italic
d th
\shape default
 dimension.
 Non parameter array declarations are similar to scalar declarations except
 the variable name is followed by either a comma separated list of integer
 constants surrounded by square brackets (
\family sans
[]
\family default
) for ordinary arrays or the reserved word 
\family sans
hashed
\family default
 in square brackets for associative arrays.
 Associative arrays have no predefined size.
\end_layout

\begin_layout LyX-Code

\family sans
float energy[ 20 ], surface[ 13,13 ];
\end_layout

\begin_layout LyX-Code

\family sans
int attr[ dynamic, dynamic ];
\end_layout

\begin_layout LyX-Code

\family sans
molecule structs[ hashed ];
\end_layout

\begin_layout Standard
The syntax for multi-dimensional arrays like that for Fortran, not C.
 The 
\shape italic
nab2c
\shape default
 compiler linearizes all index references, and the underlying C code sees
 only single-dimension arrays.
 Arrays are stored in "column-order", so that the most-rapidly varying index
 is the first index, as in Fortran.
 Multi-dimensional 
\family sans
int
\family default
 or 
\family sans
float
\family default
 arrays created in 
\shape italic
nab
\shape default
 can generally be passed to Fortran routines expecting the analogous construct.
\end_layout

\begin_layout Standard
Dynamic arrays are not allocated space upon program startup, but are created
 and freed by the 
\family sans
allocate
\family default
 and 
\family sans
deallocate
\family default
 statements:
\end_layout

\begin_layout LyX-Code

\family sans
allocate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
allocate
\end_layout

\end_inset

 attr[ i, j ];
\end_layout

\begin_layout LyX-Code

\family sans
....
\end_layout

\begin_layout LyX-Code

\family sans
deallocate
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
deallocate
\end_layout

\end_inset

 attr;
\end_layout

\begin_layout Standard
Here 
\family sans
i
\family default
 and 
\family sans
j
\family default
 must be integer expressions that may be evaluated at run-time.
 It is an error (generally fatal) to refer to the contents of such an array
 before it has been allocated or after it has been deallocated.
\end_layout

\begin_layout Subsection

\series bold
Expressions
\end_layout

\begin_layout Standard
Expressions use operators to combine variables, constants and function values
 into new values.
 
\family sans
nab
\family default
 uses standard algebraic notation (
\family sans
a+b*c
\family default
, etc) for expressions.
 Operators with higher precedence are evaluated first.
 Parentheses are used to alter the evaluation order.
 The complete list of 
\family sans
nab
\family default
 operators with precedence levels and associativity is listed under 
\series bold
Operators
\series default
.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 permits mixed mode arithmetic in that 
\family sans
int
\family default
 and 
\family sans
float
\family default
 data may be freely combined in expressions as long as the operation(s)
 are defined.
 The only exceptions are that the modulus operator (
\family sans
%
\family default
) does not accept 
\family sans
float
\family default
 operands, and that subscripts to ordinary arrays must be integer valued.
 In all other cases except parameter passing and assignment, when an 
\family sans
int
\family default
 and 
\family sans
float
\family default
 are combined by an operator, the 
\family sans
int
\family default
 is converted to 
\family sans
float
\family default
 then the operation is executed.
 In the case of parameter passing, 
\family sans
nab
\family default
 requires (but does not check) that actual parameters passed to functions
 have the same type as the corresponding formal parameters.
 As for assignment (
\family sans
=
\family default
) the right hand side is converted to the type of the left hand side (as
 long as both are numeric) and then assigned.
 
\family sans
nab
\family default
 treats assignment like any other binary operator which permits multiple
 assignments (
\family sans
a=b=c
\family default
) as well as 
\begin_inset Quotes eld
\end_inset

embedded
\begin_inset Quotes erd
\end_inset

 assignments like:
\end_layout

\begin_layout LyX-Code

\family sans
if( mol = newmolecule() ) ...
\end_layout

\begin_layout Standard
nab relational operators are strictly binary.
 Any two objects can be compared provided that both are numeric, both are
 
\family sans
string
\family default
 or both are the same type.
 Comparisons for objects other than 
\family sans
int
\family default
, 
\family sans
float
\family default
 and 
\family sans
string
\family default
 are limited to tests for equality.
 Comparisons between 
\family sans
file
\family default
, 
\family sans
atom
\family default
, 
\family sans
residue
\family default
, 
\family sans
molecule
\family default
 and 
\family sans
bounds
\family default
 objects test for 
\begin_inset Quotes eld
\end_inset

pointer
\begin_inset Quotes erd
\end_inset

 equality, meaning that if the pointers are the same, the objects are same
 and thus equal, but if the pointers are different, no inference about the
 actual objects can be made.
 The most common comparison on objects of these types is against 
\family sans
NULL
\family default
 to see if the object was correctly created.
 Note that as 
\family sans
nab
\family default
 considers 
\family sans
NULL
\family default
 to be false the following expressions are equivalent.
\end_layout

\begin_layout LyX-Code

\family sans
if(
\family default
 
\shape italic
var
\shape default
 
\family sans
== NULL )...

\family default
 is the same as 
\family sans
if( !
\family default
\shape italic
var
\shape default
 
\family sans
)...
\end_layout

\begin_layout LyX-Code

\family sans
if(
\family default
 
\shape italic
var
\shape default
 
\family sans
!= NULL )...

\family default
 is the same as 
\family sans
if(
\family default
 
\shape italic
var
\shape default
 
\family sans
)...
\end_layout

\begin_layout Standard
The Boolean operators 
\family sans
&&
\family default
 and 
\family sans

\begin_inset Formula $\vert\vert$
\end_inset


\family default
 evaluate only enough of an expression to determine its truth value.
 
\family sans
nab
\family default
 considers the value 
\family sans
0
\family default
 to be false and 
\shape italic
any
\shape default
 nonzero value to be true.
 
\family sans
nab
\family default
 supports direct assignment and concatenation of string values.
 The infix 
\family sans
+
\family default
 is used for 
\family sans
string
\family default
 concatenation.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides several infix vector operations for 
\family sans
point
\family default
 values.
 They can be assigned and 
\family sans
point
\family default
 valued functions are permitted.
 Two 
\family sans
point
\family default
 values can be added or subtracted.
 A 
\family sans
point
\family default
 can be multiplied or divided by a 
\family sans
float
\family default
 or an 
\family sans
int
\family default
.
 The unary minus can be applied to a 
\family sans
point
\family default
 which has the same effect as multiplying it by 
\family sans
-1
\family default
.
 Finally, the at sign (
\family sans
@
\family default
) is used to form the dot product of two 
\family sans
point
\family default
s and the circumflex (
\family sans
 ̂
\family default
) is used to form their cross product.
\end_layout

\begin_layout Subsection

\series bold
Regular expressions
\end_layout

\begin_layout Standard
The 
\shape italic
=
\begin_inset Formula $\sim$
\end_inset


\shape default
 and 
\shape italic
!
\begin_inset Formula $\sim$
\end_inset


\shape default
 operators (match and not match) have strings on the left-hand-sides and
 
\shape italic
regular expression
\shape default
 strings on their right-hand-sides.
 These regular expressions are interpreted according to standard conventions
 drawn from the UNIX libraries.
\end_layout

\begin_layout Subsection

\series bold
Atom Expressions
\end_layout

\begin_layout Standard
An atom expression is a character string that contains one or more patterns
 that match a set of atom names in a molecule.
 Atom expressions contain three substrings separated by colons (
\family sans
:
\family default
).
 They represent the strand, residue and atom parts of the atom expression.
 Each subexpression consists of a comma (
\family sans
,
\family default
) separated list of patterns, or for the residue part, patterns and/or number
 ranges.
 Several atom expressions may be placed in a single character string by
 separating them with the vertical bar (
\family sans

\begin_inset Formula $\vert$
\end_inset


\family default
).
\end_layout

\begin_layout Standard
Patterns in atom expressions are similar to Unix shell expressions.
 Each pattern is a sequence of 1 or more single character patterns and/or
 stars (
\family sans
*
\family default
).
 The star matches 
\shape italic
zero
\shape default
 or more occurrences of 
\shape italic
any
\shape default
 single character.
 Each part of an atom expression is composed of a comma separated list of
 limited regular expressions, or in the case of the residue part, limited
 regular expressions and/or ranges.
 A 
\shape italic
range
\shape default
 is a number or a pair of numbers separated by a dash.
 A 
\shape italic
regular expression
\shape default
 is a sequence of ordinary characters and 
\begin_inset Quotes eld
\end_inset

metacharacters
\begin_inset Quotes erd
\end_inset

.
 Ordinary characters represent themselves, while the metacharacters are
 operators used to construct more complicated patterns from the ordinary
 characters.
 All characters except 
\family sans
?
\family default
, 
\family sans
*
\family default
, 
\family sans
[
\family default
, 
\family sans
]
\family default
, 
\family sans
-
\family default
, 
\family sans
,
\family default
(comma), 
\family sans
:
\family default
 and 
\family sans

\begin_inset Formula $\vert$
\end_inset


\family default
 are ordinary characters.
 Regular expressions and the strings they match follow these rules.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="4in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
aexpr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
matches
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
An ordinary character matches itself.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A question mark matches any single character.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A star matches any run of zero of more characters.
 The pattern * matches anything.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[xyz]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A character class.
 It matches a single occurrence of any character between the [ and the ].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[^xyz]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A 
\begin_inset Quotes eld
\end_inset

negated
\begin_inset Quotes erd
\end_inset

 character class.
 It matches a single occurrence of any character not between the ̂ and the
 ].
 Character ranges, f-l , are permitted in both types of character class.
 This is a shorthand for all characters beginning with f up to and including
 l.
 Useful ranges are 0-9 for all the digits and a-zA-Z for all the letters.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The dash is used to delimit ranges in characters classes and to separate
 numbers in residue ranges.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
$
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The dollar sign is used in a residue range to represent the 
\begin_inset Quotes eld
\end_inset

last
\begin_inset Quotes erd
\end_inset

 residue without having to know its number.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The comma separates regular expressions and/or ranges in an atom expression
 part.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The colon separates the parts of an atom expression.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
|
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The vertical bar separates atom expressions in the same character string.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The backslash is used as an escape.
 Any character including metacharacters following a backslash matches itself.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Atom expressions match the 
\shape italic
entire
\shape default
 name.
 The pattern 
\family sans
C
\family default
, matches only 
\family sans
C
\family default
, not 
\family sans
CA
\family default
, 
\family sans
HC
\family default
, etc.
 To match any name that begins with 
\family sans
C
\family default
 use 
\family sans
C*
\family default
; to match any name that ends with 
\family sans
C
\family default
, use 
\family sans
*C
\family default
; to match any name containing a 
\family sans
C
\family default
, use 
\family sans
*C*
\family default
.
 A table of examples was given in chapter 2.
\end_layout

\begin_layout Subsection

\series bold
Format Expressions
\end_layout

\begin_layout Standard
A format expression is a special character string that is used to direct
 the conversion between the computer's internal data representations and
 their character equivalents.
 
\family sans
nab
\family default
 uses the underlying C compiler's 
\family sans
printf()
\family default
/
\family sans
scanf()
\family default
 system to provide formatted I/O.
 This section provides a short introduction to this system.
 For the complete description, consult any standard C reference.
 Note that since 
\family sans
nab
\family default
 supports fewer types than its underlying C compiler, formatted I/O options
 pertaining to the data subtypes (
\family sans
h
\family default
,
\family sans
l
\family default
,
\family sans
L
\family default
) are not applicable to 
\family sans
nab
\family default
 format expressions.
\end_layout

\begin_layout Standard
An input format string is a mixture of ordinary characters, 
\shape italic
spaces
\shape default
 and format descriptors.
 An output format string is mixture of ordinary characters including spaces
 and format descriptors.
 Each format descriptor begins with a percent sign (
\family sans
%
\family default
) followed by several optional characters describing the format and ends
 with single character that specifies the type of the data to be converted.
 Here are the most common format descriptors.
 The 
\family sans
...

\family default
 represent optional characters described below.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%...c
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
convert a character
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%...d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
convert and integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%...lf
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
convert a float
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%...s
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
convert a string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
convert a literal %
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Input and output format descriptors and format expressions resemble each
 other and in many cases the same format expression can be used for both
 input and output.
 However, the two types of format descriptors have different options and
 their actions are sufficiently distinct to consider in some detail.
 Generally, C based formatted output is more useful than C based formatted
 input.
\end_layout

\begin_layout Standard
When an input format expression is executed, it is scanned at most once
 from left to right.
 If the current format expression character is an ordinary character (anything
 but space or 
\family sans
%
\family default
), it must match the current character in the input stream.
 If they match then both the current character of the format expression
 and current character of the stream are advanced one character to the right.
 If they don't match, the scan ends.
 If the current format expression character is a space or a run of spaces
 and if the current input stream is one or more 
\begin_inset Quotes eld
\end_inset

white space
\begin_inset Quotes erd
\end_inset

 characters (space, tab, 
\shape italic
newline
\shape default
), then both the format and input stream are advanced to the next non-white
 space character.
 If the input format is one or more spaces but the current character of
 the input stream is non-blank, then only the format expression is advanced
 to the next non-blank character.
 If the current format character is a percent sign, the format descriptor
 is used to convert the next 
\begin_inset Quotes eld
\end_inset

field
\begin_inset Quotes erd
\end_inset

 in the input stream.
 A field is a sequence of non-blank characters surrounded by white space
 or the beginning or end of the stream.
 This means that a format descriptor will 
\shape italic
skip
\shape default
 white space including newlines to find non blank characters to convert,
 even if it is the first element of the format expression.
 This implicit scanning is what limits the ability of C based formatted
 input to read fixed format data that contains any spaces.
\end_layout

\begin_layout Standard
Note that 
\family sans
lf
\family default
 is used to input a NAB 
\shape italic
float
\shape default
 variable, rather than the 
\family sans
f
\family default
 argument that would be used in C.
 This is because 
\shape italic
float
\shape default
 in NAB is converted to 
\shape italic
double
\shape default
 in the output C code (see 
\shape italic
defreal.h
\shape default
 if you want to change this behavior.) Ideally, the NAB compiler should parse
 the format string, and make the appropriate substitutions, but this is
 not (yet) done: NAB translates the format string directly into the C code,
 so that the NAB code must also generally use 
\family sans
lf
\family default
 as a format descriptor for floating point values.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 input format descriptors have two options, a field width, and an assignment
 suppression indicator.
 The field width is an integer which specifies how much of current 
\shape italic
field
\shape default
 and not the input stream is to be converted.
 Conversion begins with the first character of the field and stops when
 the correct number of characters have been converted or white space is
 encountered.
 A star (
\family sans
*
\family default
) option indicates that the field is to be converted, but the result of
 the conversion is not stored.
 This can be used to skip unwanted items in a data stream.
 The order of the two options does not matter.
\end_layout

\begin_layout Standard
The execution of an output format expression is somewhat different.
 It is scanned once from left to right.
 If the current character is not a percent sign, it placed on the output
 stream.
 Thus spaces have no special significance in formatted output.
 When the scan encounters a percent sign it replaces the entire format descripto
r with the properly formatted value of the corresponding output expression.
\end_layout

\begin_layout Standard
Each output format descriptor has four optional attributes—width, alignment,
 padding and precision.
 The width is the 
\shape italic
minimum
\shape default
 number of characters the data is to occupy for output.
 Padding controls how the field will be filled if the number of characters
 required for the data is less than the field width.
 Alignment specifies whether the data is to start in the first character
 of the field (left aligned) or end in the last (right aligned).
 Finally precision, which applies only to string and float conversions controls
 how much of the string is be converted or how many digits should follow
 the decimal point.
\end_layout

\begin_layout Standard
Output field attributes are specified by optional characters between the
 initial percent sign and the final data type character.
 Alignment is first, with left alignment specified by a minus sign (
\family sans
-
\family default
).
 Any other character after the percent sign indicates right alignment.
 Padding is specified next.
 Padding depends on both the alignment and the type of the data being converted.
 Character conversions (
\family sans
%c
\family default
) are always filled with spaces, regardless of their alignment.
 Left aligned conversions are also always filled with spaces.
 However, right aligned string and numeric conversions can use a 
\family sans
0
\family default
 to indicate that left fill should be zeroes instead of spaces.
 In addition numeric conversions can also specify an optional + to indicate
 that non-negative numbers should be preceded by a plus sign.
 The default action for numeric conversions is that negative numbers are
 preceded by a minus, and other numbers have no sign.
 If both 
\family sans
0
\family default
 and 
\family sans
+
\family default
 are specified, their order does not matter.
\end_layout

\begin_layout Standard
Output field width and precision are last and are specified by one or two
 integers or stars (
\family sans
*
\family default
) separated by a period (
\family sans
.
\family default
).
 The first number (or star) is the field width, the second is its precision.
 If the precision is not specified, a default precision is chosen based
 on the conversion type.
 For floats (
\family sans
%f
\family default
), it is six decimal places and for strings it is the entire string.
 Precision is not applicable to character or integer conversions and is
 ignored if specified.
 Precision may be specified without the field width by use of single integer
 (or star) preceded by a period.
 Again, the action is conversion type dependent.
 For strings (
\family sans
%s
\family default
), the action is to print the first 
\begin_inset Formula $N$
\end_inset

 characters of the string or the entire string, whichever is shorter.
 For floats (
\family sans
%f
\family default
), it will print 
\begin_inset Formula $N$
\end_inset

 decimal places but will extend the field to whatever size if required to
 print the whole number part of the float.
 The use of the star (
\family sans
*
\family default
) as an output width or precision indicates that the width or precision
 is specified as the next argument in the conversion list which allows for
 runtime widths and precisions.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="4in">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Ouput format options
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Alignment
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left justified
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
right justified
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Padding
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
%d, 
\family sans
%f
\family default
, 
\family sans
%s
\family default
 only, left fill with zeros, right fill with spaces.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
%d
\family default
, 
\family sans
%f
\family default
 only, precede non-negative numbers with a 
\family sans
+
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
left and right fill with spaces.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Width & precision
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
minimum
\shape default
 field width of 
\begin_inset Formula $W$
\end_inset

.
 
\begin_inset Formula $W$
\end_inset

 is either an integer or a 
\family sans
*
\family default
 where the star indicates that the width is the next argument in the parameter
 list.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
W.P
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
minimum
\shape default
 field width of 
\begin_inset Formula $W$
\end_inset

, with a precision of 
\begin_inset Formula $P$
\end_inset

.

\shape italic
 W
\shape default
,
\begin_inset Formula $P$
\end_inset

 are integers or stars, where stars indicate that they are to be set from
 the appropriate arguments in the parameter list.
 Precision is ignored for 
\family sans
%c
\family default
 and 
\family sans
%d
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.P
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
%s
\family default
, print the first 
\begin_inset Formula $P$
\end_inset

 characters of the string or the entire string whichever is shorter.
 
\family sans
%f
\family default
, print 
\begin_inset Formula $P$
\end_inset

 decimal places in a field wide enough to hold the integer and fractional
 parts of the number.
 
\family sans
%c
\family default
 and 
\family sans
%d
\family default
, use whatever width is required.
 Again 
\begin_inset Formula $P$
\end_inset

 is either an integer or a star where the star indicates that it is to be
 taken from the next expression in the parameter list.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
%c
\family default
, 
\family sans
%d
\family default
, 
\family sans
%s
\family default
, use whatever width is required to exactly hold the data.
 
\family sans
%f
\family default
, use a precision of 6 and whatever width is required to hold the data.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section

\series bold
Statements
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 statements describe the action the 
\family sans
nab
\family default
 program is to perform.
 The expression statement evaluates expressions.
 The 
\family sans
if
\family default
 statement provides a two way branch.
 The 
\family sans
while
\family default
 and 
\family sans
for
\family default
 statements provide loops.
 The 
\family sans
break
\family default
 statement is used to 
\begin_inset Quotes eld
\end_inset

short circuit
\begin_inset Quotes erd
\end_inset

 or exit these loops.
 The 
\family sans
continue
\family default
 statement advances a 
\family sans
for
\family default
 loop to its next iteration.
 The 
\family sans
return
\family default
 statement assigns a function's value and returns control to the caller.
 Finally a list of statements can be enclosed in braces (
\family sans
{}
\family default
) to create a compound statement.
\end_layout

\begin_layout Subsection

\series bold
Expression Statement
\end_layout

\begin_layout Standard
An expression statement is an expression followed by a semicolon.
 It evaluates the expression.
 Many expression statements include an assignment operator and its evaluation
 will update the values of those variables on the left hand side of the
 assignment operator.
 These kinds of expression statements are usually called 
\begin_inset Quotes eld
\end_inset

assignment statements
\begin_inset Quotes erd
\end_inset

 in other languages.
 Other expression statements consist of a single function call with its
 result ignored.
 These statements take the place of 
\begin_inset Quotes eld
\end_inset

call statements
\begin_inset Quotes erd
\end_inset

 in other languages.
 Note that an expression statement can contain 
\shape italic
any
\shape default
 expression, even ones that have no lasting effect.
\end_layout

\begin_layout LyX-Code

\family sans
mref = getpdb( "5p21.pdb" ); // "assignment" stmt
\end_layout

\begin_layout LyX-Code

\family sans
m = getpdb( "6q21.pdb" );
\end_layout

\begin_layout LyX-Code

\family sans
superimpose( m,"::CA",mref,"::CA" ); // "call" stmt
\end_layout

\begin_layout LyX-Code

\family sans
0; // expression stmt.
\end_layout

\begin_layout Subsection

\series bold
Delete Statement
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides the 
\family sans
delete
\family default
 statement to remove elements of 
\family sans
hashed
\family default
 arrays.
 The syntax is
\end_layout

\begin_layout LyX-Code

\family sans
delete
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
delete
\end_layout

\end_inset

 
\shape italic
h_array
\family sans
\shape default
[
\family default
 
\shape italic
str
\shape default
 
\family sans
];
\end_layout

\begin_layout Standard
where 
\shape italic
h_array
\shape default
 is a 
\family sans
hashed
\family default
 array and 
\shape italic
str
\shape default
 is a 
\family sans
string
\family default
 valued expression.
 If the specified element is in 
\shape italic
h_array
\shape default
 it is removed; if not, the statement has no effect.
\end_layout

\begin_layout Subsection

\series bold
If Statement
\end_layout

\begin_layout Standard
The 
\family sans
if
\family default
 statement is used to choose between two options based on the value of the
 
\family sans
if
\family default
 expression.
 There are two kinds of 
\family sans
if
\family default
 statements—the simple 
\family sans
if
\family default
 and the 
\family sans
if-else
\family default
.
 The simple 
\family sans
if
\family default
 contains an expression and a statement.
 If the expression is true (any nonzero value), the statement is executed.
 If the expression is false (
\family sans
0
\family default
), the statement is skipped.
\end_layout

\begin_layout LyX-Code

\family sans
if(
\family default
 
\shape italic
expr
\shape default
 
\family sans
)
\family default
 
\shape italic
true_stmt
\family sans
\shape default
;
\end_layout

\begin_layout Standard
The 
\family sans
if-else
\family default
 statement places two statements under control of the 
\family sans
if
\family default
.
 One is executed if the expression is true, the other if it is false.
\end_layout

\begin_layout LyX-Code

\family sans
if(
\family default
 
\shape italic
expr
\shape default
 
\family sans
)
\end_layout

\begin_layout LyX-Code
 
\shape italic
  true_stmt
\family sans
\shape default
;
\end_layout

\begin_layout LyX-Code

\family sans
else
\end_layout

\begin_layout LyX-Code
 
\shape italic
  false_stmt
\family sans
\shape default
;
\end_layout

\begin_layout Subsection

\series bold
While Statement
\end_layout

\begin_layout Standard
The 
\family sans
while
\family default
 statement is used to execute the statement under its control as long as
 the the 
\family sans
while
\family default
 expression is true (nonzero).
 A compound statement is required to place more than one statement under
 the 
\family sans
while
\family default
 statement's control.
\end_layout

\begin_layout LyX-Code

\family sans
while(
\family default
 
\shape italic
expr
\shape default
 
\family sans
)
\family default
 
\shape italic
stmt
\family sans
\shape default
;
\end_layout

\begin_layout LyX-Code

\family sans
while(
\family default
 
\shape italic
expr
\shape default
 
\family sans
) {
\end_layout

\begin_layout LyX-Code
 
\shape italic
  stmt_1
\family sans
\shape default
; 
\end_layout

\begin_layout LyX-Code
 
\shape italic
  stmt_2
\family sans
\shape default
; 
\end_layout

\begin_layout LyX-Code
 
\family sans
    ...
 
\end_layout

\begin_layout LyX-Code
 
\shape italic
  stmt_N
\family sans
\shape default
; 
\end_layout

\begin_layout LyX-Code

\family sans
}
\end_layout

\begin_layout Subsection

\series bold
For Statement
\end_layout

\begin_layout Standard
The 
\family sans
for
\family default
 statement is a loop statement that allows the user to include initialization
 and an increment as well as a loop condition in the loop header.
 The single statement under the control of the 
\family sans
for
\family default
 statement is executed as long as the condition is true (nonzero).
 A compound statement is required to place more than one statement under
 control of a 
\family sans
for
\family default
.
 The general form of the 
\family sans
for
\family default
 statement is
\end_layout

\begin_layout LyX-Code

\family sans
for(
\family default
 
\shape italic
expr_1
\family sans
\shape default
;
\family default
 
\shape italic
expr_2
\family sans
\shape default
;
\family default
 
\shape italic
expr_3
\shape default
 
\family sans
)
\family default
  
\shape italic
stmt
\family sans
\shape default
;
\end_layout

\begin_layout Standard
which behaves like
\end_layout

\begin_layout LyX-Code

\shape italic
expr_1
\family sans
\shape default
; 
\end_layout

\begin_layout LyX-Code

\family sans
while(
\family default
 
\shape italic
expr_2
\shape default
 
\family sans
) {
\end_layout

\begin_layout LyX-Code
 
\shape italic
   stmt
\family sans
\shape default
; 
\end_layout

\begin_layout LyX-Code
 
\shape italic
   expr_3
\family sans
\shape default
; 
\end_layout

\begin_layout LyX-Code

\family sans
}
\end_layout

\begin_layout Standard

\shape italic
expr_3
\shape default
 is generally an expression that computes the next value of the loop index.
 Any or all of 
\shape italic
expr_1
\shape default
, 
\shape italic
expr_2
\shape default
 or 
\shape italic
expr_3
\shape default
 can be omitted.
 An omitted 
\shape italic
expr_2
\shape default
 is considered to be true, thus giving rise to an 
\begin_inset Quotes eld
\end_inset

infinite
\begin_inset Quotes erd
\end_inset

 loop.
 Here are some 
\family sans
for
\family default
 loops.
\end_layout

\begin_layout LyX-Code

\family sans
for( i = 1; i 
\begin_inset Formula $<$
\end_inset

= 10; i = i + 1 )
\end_layout

\begin_layout LyX-Code

\family sans
printf( "%3d
\begin_inset Formula $\backslash$
\end_inset

n", i ); // print 1 to 10
\end_layout

\begin_layout LyX-Code

\family sans
for( ; ; ) // "infinite" loop
\end_layout

\begin_layout LyX-Code

\family sans
{
\end_layout

\begin_layout LyX-Code
 
\family sans
   getcmd( cmd ); // Exit better be in
\end_layout

\begin_layout LyX-Code
 
\family sans
   docmd( cmd ); // getcmd() or docmd().
\end_layout

\begin_layout LyX-Code

\family sans
}
\end_layout

\begin_layout Standard
nab also includes a special kind of 
\family sans
for
\family default
 statement that is used to range over all the entries of a hashed array
 or all the atoms of a molecule.
 The forms are
\end_layout

\begin_layout LyX-Code

\family sans
// hashed version
\end_layout

\begin_layout LyX-Code

\family sans
for(
\family default
 
\family sans
\shape italic
str
\family default
\shape default
 
\family sans
in
\family default
 
\family sans
\shape italic
h_array
\family default
\shape default
 
\family sans
) ~
\shape italic
stmt
\shape default
;
\end_layout

\begin_layout LyX-Code

\family sans
// molecule version
\end_layout

\begin_layout LyX-Code

\family sans
for(
\family default
 
\family sans
\shape italic
a
\family default
\shape default
 
\family sans
in
\family default
 
\family sans
\shape italic
mol
\family default
\shape default
 
\family sans
) ~
\shape italic
stmt
\shape default
;
\end_layout

\begin_layout Standard
In the first code fragment, 
\shape italic
str
\shape default
 is string and 
\shape italic
h_array
\shape default
 is a hashed array.
 This loop sets 
\shape italic
str
\shape default
 to each key or string associated with data in 
\shape italic
h_array
\shape default
.
 Keys are returned in increasing lexical order.
 In the second code fragment 
\begin_inset Formula $a$
\end_inset

 is an atom and 
\shape italic
mol
\shape default
 is a molecule.
 This loop sets 
\begin_inset Formula $a$
\end_inset

 to each atom in 
\shape italic
mol
\shape default
.
 The first atom is the first atom in the first residue of the first strand.
 Once all the atoms in this residue have been visited, it moves to the first
 atom of the next residue in the first strand.
 Once all atoms in all residues in the first strand have been visited, the
 process is repeated on the second and subsequent strands in mol until all
 atoms have been visited.
 The order of the strands of molecule is the order in which they were created
 using 
\family sans
addstrand()
\family default
.
 Residues in each strand are numbered from 1 to 
\begin_inset Formula $N$
\end_inset

.
 The order of the atoms in a residue is the order in which the atoms were
 listed in the reslib entry or pdbfile that that residue derives from.
\end_layout

\begin_layout Subsection

\series bold
Break Statement
\end_layout

\begin_layout Standard
Execution of a 
\family sans
break
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
break
\end_layout

\end_inset

 statement exits the immediately enclosing 
\family sans
for
\family default
 or 
\family sans
while
\family default
 loop.
 By placing the 
\family sans
break
\family default
 under control of an 
\family sans
if
\family default
 conditional exits can be created.
 
\family sans
break
\family default
 statements are only permitted inside 
\family sans
while
\family default
 or 
\family sans
for
\family default
 loops.
\end_layout

\begin_layout LyX-Code

\family sans
for(
\family default
 
\shape italic
expr_1
\family sans
\shape default
;
\family default
 
\shape italic
expr_2
\family sans
\shape default
;
\family default
 
\shape italic
expr_3
\shape default
 
\family sans
) { 
\end_layout

\begin_layout LyX-Code
 
\family sans
    ...
 
\end_layout

\begin_layout LyX-Code
 
\family sans
   if(
\family default
 
\shape italic
expr
\shape default
 
\family sans
)  break; // "break" out of loop 
\end_layout

\begin_layout LyX-Code
 
\family sans
       ...
  
\end_layout

\begin_layout LyX-Code

\family sans
}
\end_layout

\begin_layout Subsection

\series bold
Continue Statement
\end_layout

\begin_layout Standard
Execution of a 
\family sans
continue
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
continue
\end_layout

\end_inset

 statement causes the immediately enclosing 
\family sans
for
\family default
 loop to skip to its next value.
 If the next value causes the loop control expression to be false, the loop
 is exited.
 
\family sans
continue
\family default
 statements are permitted only inside 
\family sans
while
\family default
 and 
\family sans
for
\family default
 loops.
\end_layout

\begin_layout LyX-Code

\family sans
for(
\family default
 
\shape italic
expr_1
\family sans
\shape default
;
\family default
 
\shape italic
expr_2
\family sans
\shape default
;
\family default
 
\shape italic
expr_3
\shape default
 
\family sans
)  {
\end_layout

\begin_layout LyX-Code
 
\family sans
   ...
 if(
\family default
 
\shape italic
expr
\shape default
 
\family sans
) continue; // "continue" with next value 
\end_layout

\begin_layout LyX-Code
 
\family sans
   ...
 
\end_layout

\begin_layout LyX-Code

\family sans
}
\end_layout

\begin_layout Subsection

\series bold
Return Statement
\end_layout

\begin_layout Standard
The 
\family sans
return
\family default
 statement has two uses.
 It terminates execution of the current function returning control to the
 point immediately following the call and when followed by an optional expressio
n, returns the value of the expression as the value of the function.
 A function's execution also ends when it 
\begin_inset Quotes eld
\end_inset

runs off the bottom
\begin_inset Quotes erd
\end_inset

.
 When a function executes the last statement of its definition, it returns
 even if that statement is not a 
\family sans
return
\family default
.
 The value of the function in such cases is undefined.
\end_layout

\begin_layout LyX-Code

\family sans
return
\family default
 
\shape italic
expr
\family sans
\shape default
; // return the value
\family default
 
\shape italic
expr
\end_layout

\begin_layout LyX-Code

\family sans
return; // return, function value undefined.
\end_layout

\begin_layout Subsection

\series bold
Compound Statement
\end_layout

\begin_layout Standard
A compound statement is a list of statements enclosed in braces.
 Compound statements are required when a loop or an 
\family sans
if
\family default
 has to control more than one statement.
 They are also required to associate an 
\family sans
else
\family default
 with an 
\family sans
if
\family default
 other than the nearest unpaired one.
 Compound statements may include other compound statements.
 Unlike C, 
\family sans
nab
\family default
 compound statements are not blocks and may not include declarations.
\end_layout

\begin_layout Section
Structures
\end_layout

\begin_layout Standard
A struct is collection of data elements, where the elements are accessed
 via their names.
 Unlike arrays which require all elements of an array to have the same type,
 elements of a structure can have different types.
 Users define a struct via the reserved word `struct'.
 Here's a simple example, a struct that could be used to hold a complex
 number.
\end_layout

\begin_layout LyX-Code
struct cmplx_t { float r, i; } c;
\end_layout

\begin_layout Standard
This declares a nab variable, `c', of user defined type `struct cmplx_t'.
 The variable, c, has two float valued elements, `c.r', `c.i' which can be
 used like any other nab float variables:
\end_layout

\begin_layout LyX-Code
c.r = -2.0; ...
 5*c.i ...
 printf( "c.r,i = %8.3f, %8.3f
\backslash
n", c.r, c.i );
\end_layout

\begin_layout Standard
Now, let's look more closely at that struct declaration.
 
\end_layout

\begin_layout LyX-Code
struct cmplx_t { float r, i; } c;
\end_layout

\begin_layout Standard
As mentioned before, every nab struct begins with the reserved word struct.
 This must be followed by an identifier called the structure tag, which
 in this example is `cmplx_t'.
 Unlike C/C++, a nab struct can not be anonymous.
\end_layout

\begin_layout Standard
Following the structure tag is a list of the struct's element declarations
 surrounded by a left and right curly bracket.
 Element declarations are just like ordinary nab variable declarations:
 they begin with the type, followed by a comma separated list of variables
 and end with a semicolon.
 nab structures must contain at least one declaration containing at least
 one variable.
 Also, nab struct elements are currently restricted to scalar values of
 the basic nab types, so nab structs can not contain arrays or other structs.
 Note that in our example, both elements are in one declaration, but two
 declarations would have worked as well.
\end_layout

\begin_layout Standard
The whole assembly `struct ...
 }' serves to define a new type which can be used like any other nab type
 to declare variables of that type, in this example, a single scalar variable,
 `c'.
 And finally, like all other nab variable declarations, this one also ends
 with a semicolon.
\end_layout

\begin_layout Standard
Although nab structs can not contain arrays, nab allows users to create
 arrays, including dynamic and hashed arrays of structs.
 For example
\end_layout

\begin_layout LyX-Code
struct cmplx_t { float r, i; } a[ 10 ], da[ dynamic ], ha[ hashed ];
\end_layout

\begin_layout Standard
declares an ordinary, dynamic and hashed array of struct cmplx_t.
\end_layout

\begin_layout Standard
Up til now, we've only looked at complete struct declaration.
 Our example
\end_layout

\begin_layout LyX-Code
struct cmplx_t { float r, i; } c;
\end_layout

\begin_layout Standard
contains all the parts of a struct declaration.
 However there are two other forms of struct declarations.
 The first one is to define a type, as opposed to declaring variables:
\end_layout

\begin_layout LyX-Code
struct cmplx_t { float r, i; };
\end_layout

\begin_layout Standard
defines a new type `struct cmplx_t' but does not declare any variables of
 this type.
 This is quite useful in that the type can be placed in a header file allowing
 it to be shared among parts of a larger program.
\end_layout

\begin_layout Standard
The othe form of a struct declaration is this short form:
\end_layout

\begin_layout LyX-Code
struct cmplx_t cv1, cv2;
\end_layout

\begin_layout Standard
This form can only be used once the type has been defined, either via a
 type declaration (ie not variable) or a complete type + variable declaration.
 In fact, once a struct type has been defined, all subsequent declarations
 of variables of that type, including parameters, must use the short form.
 
\end_layout

\begin_layout LyX-Code
struct cmplx_t { float r, i; }; // define type type `struct cmplx_t' 
\end_layout

\begin_layout LyX-Code
struct cmplx_t c, ctab[ 10 ]; // define some vars
\end_layout

\begin_layout LyX-Code
int f( int s, struct cmplx_t ct[1] ) // func taking array of 
\end_layout

\begin_layout LyX-Code
                                     // struct cmplx_t { ...
 }; 
\end_layout

\begin_layout Section

\series bold
Functions
\end_layout

\begin_layout Standard
A function is a named group of declarations and statements that is executed
 as a unit by using the function's name in an expression.
 Functions may include special variables called parameters that enable the
 same function to work on different data.
 All 
\family sans
nab
\family default
 functions return a value which can be ignored in the calling expression.
 Expression statements consisting of a single function call where the return
 value is ignored resemble procedure call statements in other languages.
\end_layout

\begin_layout Standard
All parameters to user defined 
\family sans
nab
\family default
 functions are passed by reference.
 This means that each 
\family sans
nab
\family default
 parameter operates on the actual data that was passed to the function during
 the call.
 Changes made to parameters during the execution of the function will persist
 after the function returns.
 The only exception to this is if an expression is passed in as a parameter
 to a user defined 
\family sans
nab
\family default
 function.
 It this case, 
\family sans
nab
\family default
 evaluates the expression, stores its value in a compiler created temporary
 variable and uses that temporary variable as the actual parameter.
 For example if a user were to pass in the constant 1 to an 
\family sans
nab
\family default
 function which in turned used it and then assigned it the value 6, the
 6 would be stored in the temporary location and the external 1 would be
 unchanged.
\end_layout

\begin_layout Subsection

\series bold
Function Definitions
\end_layout

\begin_layout Standard
An 
\family sans
nab
\family default
 function definition begins with a header that describes the function value
 type, the function name and the parameters if any.
 If a function does not have parameters, an empty parameter list is still
 required.
 Following the header is a list of declarations and statements enclosed
 in braces.
 The function's declarations must precede all of its statements.
 A function can include zero or more declarations and/or zero or more statements.
 The empty function—no declarations and no statements is legal.
\end_layout

\begin_layout Standard
The function header begins with the reserved word specifying the type of
 the function.
 All 
\family sans
nab
\family default
 functions must be typed.
 An 
\family sans
nab
\family default
 function can return a single value of any 
\family sans
nab
\family default
 type.
 
\family sans
nab
\family default
 functions can not return 
\family sans
nab
\family default
 arrays.
 Following the type is an identifier which is the name of the function.
 Each parameter declaration begins with the parameter type followed by its
 name.
 Parameter declarations are enclosed in parentheses and separated by commas.
 If a function has no parameters, there is nothing between the parentheses.
 Here is the general form of a function definition:
\end_layout

\begin_layout LyX-Code

\shape italic
ftype fname
\family sans
\shape default
(
\family default
 
\shape italic
ptype1 parm1
\family sans
\shape default
, ...
 )
\end_layout

\begin_layout LyX-Code

\family sans
{
\end_layout

\begin_layout LyX-Code
 
\shape italic
  decls
\end_layout

\begin_layout LyX-Code
 
\shape italic
  stmts
\end_layout

\begin_layout LyX-Code

\family sans
};
\end_layout

\begin_layout Subsection

\series bold
Function Declarations
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 requires that every function be declared or made known to the compiler
 before it is used.
 Unfortunately this is not possible if functions used in one source file
 are defined in other source files or if two functions are mutually recursive.
 To solve these problem, 
\family sans
nab
\family default
 permits functions to be declared as well as defined.
 A function declaration resembles the header of a function definition.
 However, in place of the function body, the declaration ends with a semicolon
 or a semicolon preceded by either the word 
\family sans
c
\family default
 or the word 
\family sans
fortran
\family default
 indicating the external function is written in C or 
\family sans
Fortran
\family default
 instead of 
\family sans
nab
\family default
.
\end_layout

\begin_layout LyX-Code

\shape italic
ftype fname
\family sans
\shape default
(
\family default
 
\shape italic
ptype1 parm1
\family sans
\shape default
, ...
 )
\family default
 
\shape italic
flang
\family sans
\shape default
;
\end_layout

\begin_layout Section

\series bold
Points and Vectors
\end_layout

\begin_layout Standard
The 
\family sans
nab
\family default
 type 
\family sans
point
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
point
\end_layout

\end_inset

 is an object that holds three 
\family sans
float
\family default
 values.
 These values can represent the X, Y and Z coordinates of a point or the
 components of 3-vector.
 The individual elements of a 
\family sans
point
\family default
 variable are accessed via attributes or suffixes added to the variable
 name.
 The three 
\family sans
point
\family default
 attributes are 
\family sans
"x"
\family default
, 
\family sans
"y"
\family default
 and 
\family sans
"z"
\family default
.
 Many 
\family sans
nab
\family default
 builtin functions use, return or create 
\family sans
point
\family default
 values.
 When used in this context, the three attributes represent the point's X,
 Y and Z coordinates.
 
\family sans
nab
\family default
 allows users to combine point values with numbers in expressions using
 conventional algebraic or infix notation.
 
\family sans
nab
\family default
 does not support operations between numbers and 
\family sans
point
\family default
s where the number must be converted into a vector to perform the operation.
 For example, if 
\family sans
p
\family default
 is a 
\family sans
point
\family default
 then the expression 
\family sans
p + 1.

\family default
 is an error, as 
\family sans
nab
\family default
 does not know how to expand the scalar 1.
 into a 3-vector.
 The following table contains 
\family sans
nab point
\family default
 and vector operations.
 
\family sans
p
\family default
, 
\family sans
q
\family default
 are 
\family sans
point
\family default
 variables; 
\begin_inset Formula $s$
\end_inset

 a numeric expression.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Example
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Precedence
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Explanation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
Unary
\shape default
 
\family sans
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-p
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector negation, same as 
\family sans
-1 * p
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
^
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p ̂ q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Compute the cross or vector product of 
\family sans
p
\family default
, 
\family sans
q
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
@
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p @ q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Compute the scalar or dot product of 
\family sans
p
\family default
, 
\family sans
q
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $s$
\end_inset

 
\family sans
* p
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Multiply 
\family sans
p
\family default
 by 
\begin_inset Formula $s$
\end_inset

, same as 
\family sans
p *
\family default
 
\begin_inset Formula $s$
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
/
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p /
\family default
 
\begin_inset Formula $s$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Divide 
\family sans
p
\family default
 by 
\begin_inset Formula $s$
\end_inset

, 
\family sans
s / p
\family default
 not allowed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p + q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector addition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
Binary
\shape default
 
\family sans
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p - q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vector subtraction
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
==
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p == q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test if 
\family sans
p
\family default
 and 
\family sans
q
\family default
 equal.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
!=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p != q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test if 
\family sans
p
\family default
 and 
\family sans
q
\family default
 are different.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
p = q
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the value of 
\family sans
p
\family default
 to 
\family sans
q
\family default
.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section

\series bold
String Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides the following 
\family sans
awk
\family default
-like string functions.
 Unlike 
\family sans
awk
\family default
, the 
\family sans
nab
\family default
 functions do not have optional parameters or builtin variables that control
 the actions or receive results from these functions.
 
\family sans
nab string
\family default
s are indexed from 
\family sans
1
\family default
 to 
\begin_inset Formula $N$
\end_inset

 where 
\begin_inset Formula $N$
\end_inset

 is the number of characters in the string.
\end_layout

\begin_layout LyX-Code

\family sans
int length
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
length
\end_layout

\end_inset

( string s );
\end_layout

\begin_layout LyX-Code

\family sans
int index
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
index
\end_layout

\end_inset

( string s, string t );
\end_layout

\begin_layout LyX-Code

\family sans
int match
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
match
\end_layout

\end_inset

( string s, string r, int rlength );
\end_layout

\begin_layout LyX-Code

\family sans
string substr
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
substr
\end_layout

\end_inset

( string s, int pos, int len );
\end_layout

\begin_layout LyX-Code

\family sans
int split
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
split
\end_layout

\end_inset

( string s, string fields[], string fsep );
\end_layout

\begin_layout LyX-Code

\family sans
int sub
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sub
\end_layout

\end_inset

( string r, string s, string t );
\end_layout

\begin_layout LyX-Code

\family sans
int gsub
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gsub
\end_layout

\end_inset

( string r, string s, string t );
\end_layout

\begin_layout Standard
length() returns the length of the string 
\family sans
s
\family default
.
 Both 
\family sans
""
\family default
 and 
\family sans
NULL
\family default
 have length 
\family sans
0
\family default
.
 
\family sans
index()
\family default
 returns the position of the left most occurrence of 
\family sans
t
\family default
 in 
\family sans
s
\family default
.
 If 
\family sans
t
\family default
 is not in 
\family sans
s
\family default
, 
\family sans
index()
\family default
 returns 
\family sans
0
\family default
.
 
\family sans
match
\family default
 returns the position of the longest leftmost substring of 
\family sans
s
\family default
 that matches the regular expression 
\family sans
r
\family default
.
 The length of this substring is returned in 
\family sans
rlength
\family default
.
 If no substring of 
\family sans
s
\family default
 matches 
\family sans
r
\family default
, 
\family sans
match()
\family default
 returns 
\family sans
0
\family default
 and 
\family sans
rlength
\family default
 is set to 
\family sans
0
\family default
.
 
\family sans
substr()
\family default
 extracts the substring of length 
\family sans
len
\family default
 from 
\family sans
s
\family default
 beginning at position 
\family sans
pos
\family default
.
 If 
\family sans
len
\family default
 is greater than the rest of the string beginning at 
\family sans
pos
\family default
, return the substring from 
\family sans
pos
\family default
 to 
\begin_inset Formula $N$
\end_inset

 where 
\begin_inset Formula $N$
\end_inset

 is the length of the 
\family sans
string
\family default
.
 If 
\family sans
pos
\family default
 is 
\begin_inset Formula $<$
\end_inset

 
\family sans
1
\family default
 or 
\begin_inset Formula $>\quad N$
\end_inset

, return 
\family sans
""
\family default
.
\end_layout

\begin_layout Standard

\family sans
split()
\family default
 partitions 
\family sans
s
\family default
 into fields separated by 
\family sans
fsep
\family default
.
 These field strings are returned in the array 
\family sans
fields
\family default
.
 The number of fields is returned as the function value.
 The array 
\family sans
fields
\family default
 must be allocated before 
\family sans
split()
\family default
 is called and must be large enough to hold all the field strings.
 The action of 
\family sans
split()
\family default
 depends on the value of 
\family sans
fsep
\family default
.
 If 
\family sans
fsep
\family default
 is a string containing one or more blanks, the fields of 
\family sans
s
\family default
 are considered to be separated by 
\shape italic
runs
\shape default
 of white space.
 Also, leading and trailing white space in 
\family sans
s
\family default
 do not indicate an empty initial or final field.
 However, if 
\family sans
fsep
\family default
 contains any value but blank, then fields are considered to be delimited
 by 
\shape italic
single
\shape default
 characters from 
\family sans
fsep
\family default
 and initial and/or trailing 
\family sans
fsep
\family default
 characters do represent initial and/or trailing fields with values of 
\family sans
""
\family default
.
 
\family sans
NULL
\family default
 and the empty string 
\family sans
""
\family default
 have 
\family sans
0
\family default
 fields.
 If both 
\family sans
s
\family default
 and 
\family sans
fsep
\family default
 are composed of only white space then 
\family sans
s
\family default
 also has 
\family sans
0
\family default
 fields.
 If 
\family sans
fsep
\family default
 is not white space and 
\family sans
s
\family default
 consists of nothing but characters from 
\family sans
fsep
\family default
, 
\family sans
s
\family default
 will have 
\begin_inset Formula $N$
\end_inset

 + 1 fields of 
\family sans
""
\family default
 where 
\begin_inset Formula $N$
\end_inset

 is the number of characters of 
\family sans
s
\family default
.
\end_layout

\begin_layout Standard

\family sans
sub()
\family default
 replaces the leftmost, longest substring of the 
\emph on
target string
\emph default
 
\family sans
t
\family default
 that matches the 
\emph on
regular expression
\emph default
 
\family sans
r
\family default
 with the 
\emph on
substitution string
\emph default
 
\family sans
s
\family default
.
 
\family sans
gsub()
\family default
 replaces all non-overlapping substrings of 
\family sans
t
\family default
 that match the regular expression
\family sans
 r
\family default
 with the string 
\family sans
s
\family default
.
 Each function returns the number of substitutions made.
 Unlike 
\family sans
awk
\family default
, the regular expression 
\family sans
r
\family default
 is a string variable, with no surrounding '/' characters.
 For example:
\end_layout

\begin_layout LyX-Code
int nmatch;
\end_layout

\begin_layout LyX-Code
string regexp, substitute, target;
\end_layout

\begin_layout LyX-Code
target = 
\begin_inset Quotes eld
\end_inset

water, water, everywhere
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
regexp = 
\begin_inset Quotes eld
\end_inset

at
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
substitute = 
\begin_inset Quotes eld
\end_inset

ith
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
nmatch = gsub( regexp, substitute, target);
\end_layout

\begin_layout Standard
After this, 
\family typewriter
target
\family default
 will contain 
\begin_inset Quotes eld
\end_inset


\family typewriter
wither, wither, everywhere
\family default

\begin_inset Quotes erd
\end_inset

, and 
\family typewriter
nmatch
\family default
 will be 2.
\end_layout

\begin_layout Standard
The special substitute character '&' stands for the precise substring matched
 by the regular expression.
 Hence
\end_layout

\begin_layout LyX-Code
target = 
\begin_inset Quotes eld
\end_inset

daabaaa
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
sub( 
\begin_inset Quotes eld
\end_inset

a+
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

c&c
\begin_inset Quotes erd
\end_inset

, target);
\end_layout

\begin_layout Standard
will yield 
\begin_inset Quotes eld
\end_inset


\family typewriter
dcaacbaaa
\family default

\begin_inset Quotes erd
\end_inset

.
 Note what 
\begin_inset Quotes eld
\end_inset

leftmost, longest substring
\begin_inset Quotes erd
\end_inset

 means here: 
\begin_inset Quotes eld
\end_inset

lefmost
\begin_inset Quotes erd
\end_inset

 takes precedence over 
\begin_inset Quotes eld
\end_inset

longest
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section

\series bold
Math Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides the builtin mathematical functions shown in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:NABmath"

\end_inset

.
 Since 
\family sans
nab
\family default
 is intended for chemical structure calculations which always measure angles
 in degrees, the argument to the trig functions—
\family sans
cos()
\family default
, 
\family sans
sin()
\family default
 and 
\family sans
tan()
\family default
— and the return value of the inverse trig functions—
\family sans
acos()
\family default
, 
\family sans
asin()
\family default
, 
\family sans
atan()
\family default
 and 
\family sans
atan2()
\family default
—are in degrees instead of radians as they are in other languages.
 Note that the pseudo-random number functions have a different calling sequence
 than in earlier versions of NAB; you may have to edit and re-compile earlier
 programs that used those routines.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="29" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="3in">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
Inverse Trig Functions.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float acos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
acos
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Return 
\begin_inset Formula $\cos^{-1}(x)$
\end_inset

 in degrees.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float asin
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
asin
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Return 
\begin_inset Formula $\sin^{-1}(x)$
\end_inset

 in degrees.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float atan
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
atan
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Return 
\begin_inset Formula $\tan^{-1}(x)$
\end_inset

 in degrees.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float atan2
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
atan2
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return tan -1 ( y / x ) in degrees.
 By keeping x and y separate, 90o can be returned without encountering a
 zero divide.
 Also, 
\family sans
atan2
\family default
 will return an angle in the full range [-180o, 180o].
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
Trig Functions
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float cos
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cos
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Return cos( x ), where x is in degrees.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float sin
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sin
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Return sin( x ), where x is in degrees.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float tan
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tan
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Return tan( x ), where x is in degrees.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
Conversion Functions.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float atof
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
atof
\end_layout

\end_inset

( string str );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interpret the next run of non blank characters in 
\family sans
str
\family default
 as a 
\family sans
float
\family default
 and return its value.
 Return 
\family sans
0
\family default
 on error.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
int atoi
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
atoi
\end_layout

\end_inset

( string str );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interpret the next run of non blank characters in 
\family sans
str
\family default
 as an 
\family sans
int
\family default
 and return its value.
 Return 
\family sans
0
\family default
 on error.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
Other Functions.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float rand2
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rand2
\end_layout

\end_inset

();
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return a pseudo-random number in (0,1).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float gauss
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gauss
\end_layout

\end_inset

( float mean, float sd );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return a pseudo-random number taken from a Gaussian distribution with the
 given mean and standard deviation.
 The rand2() and gauss() routines share a common seed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
int setseed
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setseed
\end_layout

\end_inset

( int seed );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reset the pseudo-random number sequence with the new seed, which must be
 a negative integer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
int rseed
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rseed
\end_layout

\end_inset

( );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Use the system 
\family sans
time()
\family default
 command to set the random number sequence with a reasonably random seed.
 Returns the seed it used; this could be used in a later call to 
\family sans
setseed()
\family default
 to regenerate the same sequence of pseudo-random values.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float ceil
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ceil
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return 
\begin_inset Formula $\left\lceil x\right\rceil $
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float exp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
exp
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return 
\begin_inset Formula $e^{x}$
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float cosh
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
cosh
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the hyperbolic cosine of x.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float fabs
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fabs
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return 
\begin_inset Formula $|x|$
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float floor
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
floor
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return 
\begin_inset Formula $\left\lfloor x\right\rfloor $
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float fmod
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fmod
\end_layout

\end_inset

( float x, float y );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return r, the remainder of x with respect to y; the signs of r and y are
 the same.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float log
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
log
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the natural logarithm of x.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float log10
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
log10
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the base 10 logarithm of x.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float pow
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pow
\end_layout

\end_inset

( float x, float y );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return 
\begin_inset Formula $x^{y}$
\end_inset

, 
\begin_inset Formula $x>0$
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float sinh
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sinh
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the hyperbolic sine of x.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float tanh
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tanh
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return the hyperbolic tangent of x.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
float sqrt
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sqrt
\end_layout

\end_inset

( float x );
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return positive square root of x, x 
\begin_inset Formula $>$
\end_inset

= 0.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:NABmath"

\end_inset

NAB built-in mathematical functions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section

\series bold
System Functions
\end_layout

\begin_layout LyX-Code

\family sans
int exit
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
exit
\end_layout

\end_inset

( int i );
\end_layout

\begin_layout LyX-Code

\family sans
int system
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
system
\end_layout

\end_inset

( string cmd );
\end_layout

\begin_layout Standard
The function 
\family sans
exit()
\family default
 terminates the calling 
\family sans
nab
\family default
 program with return status 
\family sans
i
\family default
.
 
\family sans
system()
\family default
 invokes a subshell to execute 
\family sans
cmd
\family default
.
 The subshell is always 
\family sans
/bin/sh
\family default
.
 The return value of 
\family sans
system()
\family default
 is the return value of the subshell and not the command it executed.
\end_layout

\begin_layout Section

\series bold
I/O Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 uses the C I/O model.
 Instead of special I/O statements, 
\family sans
nab
\family default
 I/O is done via calls to special builtin functions.
 These function calls have the same syntax as ordinary function calls but
 some of them have different semantics, in that they accept both a variable
 number of parameters and the parameters can be various types.
 
\family sans
nab
\family default
 uses the underlying C compiler's 
\family sans
printf()
\family default
/
\family sans
scanf()
\family default
 system to perform I/O on 
\family sans
int
\family default
, 
\family sans
float
\family default
 and 
\family sans
string
\family default
 objects.
 I/O on 
\family sans
point
\family default
 is via their 
\family sans
float x
\family default
, 
\family sans
y
\family default
 and 
\family sans
z
\family default
 attributes.
 
\family sans
molecule
\family default
 I/O is covered in the next section, while 
\family sans
bounds
\family default
 can be written using 
\family sans
dumpbounds()
\family default
.
 Transformation matrices can be written using 
\family sans
dumpmatrix()
\family default
, but there is currently no builtin for reading them.
 The value of an 
\family sans
nab file
\family default
 object may be written by treating as an integer.
 Input to 
\family sans
file
\family default
 variables is not defined.
\end_layout

\begin_layout Subsection

\series bold
Ordinary I/O Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides these functions for stream or 
\family sans
FILE *
\family default
 I/O of 
\family sans
int
\family default
, 
\family sans
float
\family default
 and 
\family sans
string
\family default
 objects.
\end_layout

\begin_layout LyX-Code

\family sans
int fclose
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fclose
\end_layout

\end_inset

( file f );
\end_layout

\begin_layout LyX-Code

\family sans
file fopen
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fopen
\end_layout

\end_inset

( string fname, string mode );
\end_layout

\begin_layout LyX-Code

\family sans
int unlink
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
unlink
\end_layout

\end_inset

( string fname );
\end_layout

\begin_layout LyX-Code

\family sans
int printf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
printf
\end_layout

\end_inset

( string fmt, ...
 );
\end_layout

\begin_layout LyX-Code

\family sans
int fprintf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fprintf
\end_layout

\end_inset

( file f, string fmt, ...
 );
\end_layout

\begin_layout LyX-Code

\family sans
string sprintf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sprintf
\end_layout

\end_inset

( string fmt, ...
 );
\end_layout

\begin_layout LyX-Code

\family sans
int scanf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
scanf
\end_layout

\end_inset

( string fmt, ...
 );
\end_layout

\begin_layout LyX-Code

\family sans
int fscanf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fscanf
\end_layout

\end_inset

( file f, string fmt, ...
 );
\end_layout

\begin_layout LyX-Code

\family sans
int sscanf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sscanf
\end_layout

\end_inset

( string str, string fmt, ...
 );
\end_layout

\begin_layout LyX-Code

\family sans
string getline
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getline
\end_layout

\end_inset

( file f );
\end_layout

\begin_layout Standard
fclose() closes (disconnects) the file represented by 
\family sans
f
\family default
.
 It returns 
\family sans
0
\family default
 on success and 
\family sans
-1
\family default
 on failure.
 All open 
\family sans
nab
\family default
 files are automatically closed when the program terminates.
 However, since the number of open files is limited, it is a good idea to
 close open files when they are no longer needed.
 The system call 
\family sans
unlink
\family default
 removes (deletes) the file.
\end_layout

\begin_layout Standard

\family sans
fopen()
\family default
 attempts to open (prepare for use) the file named 
\family sans
fname
\family default
 with mode 
\family sans
mode
\family default
.
 It returns a valid 
\family sans
nab file
\family default
 on success, and NULL on failure.
 Code should thus check for a return value of NULL, and do the appropriate
 thing.
 (An alternative, 
\family sans
safe_fopen()
\family default
 sends an error message to 
\family sans
stderr
\family default
 and exits on failure; this is sometimes a convenient alternative to 
\family sans
fopen()
\family default
 itself, fitting with a general bias of 
\family sans
nab
\family default
 system functions to exit on failure, rather than to return error codes
 that must always be processed.) Here are the most common values for 
\family sans
mode
\family default
 and their meanings.
 For other values, consult any standard C reference.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="3.5in">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
fopen()
\family default
\series default
 
\series bold
mode values
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

r
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Open for reading.
 The file 
\family sans
fname
\family default
 must exist and be readable by the user.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

w
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Open for writing.
 If the file exists and is writable by the user, truncate it to zero length.
 If the file does not exist, and if the directory in which it will exist
 is writable by the user, then create it.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Open for appending.
 The file must exist and be writable by the user.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The three functions 
\family sans
printf()
\family default
, 
\family sans
fprintf()
\family default
 and 
\family sans
sprintf()
\family default
 are for formatted (ASCII) output to 
\family sans
stdout
\family default
, the file 
\family sans
f
\family default
 and a 
\family sans
string
\family default
.
 Strictly speaking, 
\family sans
sprintf()
\family default
 does not perform output, but is discussed here because it acts as if 
\begin_inset Quotes eld
\end_inset

writes
\begin_inset Quotes erd
\end_inset

 to a string.
 Each of these functions uses the format string 
\family sans
fmt
\family default
 to direct the conversion of the expressions that follow it in the parameter
 list.
 Format strings and expressions are discussed 
\series bold
Format Expressions
\series default
.
 The first format descriptor of 
\family sans
fmt
\family default
 is used to convert the first expression after 
\family sans
fmt
\family default
, the second descriptor, the next expression etc.
 If there are more expressions than format descriptors, the extra expressions
 are not converted.
 If there are fewer expressions than format descriptors, the program will
 likely die when the function tries to covert non-existent data.
\end_layout

\begin_layout Standard
The three functions 
\family sans
scanf()
\family default
, 
\family sans
fscanf()
\family default
 and 
\family sans
sscanf()
\family default
 are for formatted (ASCII) input from 
\family sans
stdin
\family default
, the file 
\family sans
f
\family default
 and the string 
\family sans
str
\family default
.
 Again, 
\family sans
sscanf()
\family default
 does not perform input but the function behaves like it is 
\begin_inset Quotes eld
\end_inset

reading
\begin_inset Quotes erd
\end_inset

 from 
\family sans
str
\family default
.
 The action of these functions is similar to their output counterparts in
 that the format expression in 
\family sans
fmt
\family default
 is used to direct the conversion of characters in the input and store the
 results in the variables specified by the parameters following 
\family sans
fmt
\family default
.
 Format descriptors in 
\family sans
fmt
\family default
 correspond to variables following 
\family sans
fmt
\family default
, with the first descriptor corresponding to the first variable, etc.
 If there are fewer descriptors than variables, then extra variables are
 not assigned; if there are more descriptors than variables, the program
 will most likely die due to a reference to a non-existent address.
\end_layout

\begin_layout Standard
There are two very important differences between 
\family sans
nab
\family default
 formatted I/O and C formatted I/O.
 In C, formatted input is assigned through pointers to the variables (
\family sans
&
\family default
\shape italic
var
\shape default
).
 In 
\family sans
nab
\family default
 formatted I/O, the compiler automatically supplies the addresses of the
 variables to be assigned The second difference is when a 
\family sans
string
\family default
 object receives data during an 
\family sans
nab
\family default
 formatted I/O.
 
\family sans
nab string
\family default
s are allocated when needed.
 However, in the case of any kind of 
\family sans
scanf()
\family default
 to a 
\family sans
string
\family default
 or the implied (and hidden) writing to a string with 
\family sans
sprintf()
\family default
, the number of characters to be written to the string is unknown until
 the string has been written.
 
\family sans
nab
\family default
 automatically allocates strings of length 256 to hold such data with the
 idea that 256 is usually big enough.
 However, there will be cases where it is not big enough and this will cause
 the program to die or behave strangely as it will overwrite other data.
\end_layout

\begin_layout Standard
Also note that the default precision for floats in 
\shape italic
nab
\shape default
 is double precision (see 
\family sans
$AMBERCLASSICHOME/src/nab/defreal.h
\family default
, since this could be changed, or may be different on your system.) Formats
 for floats for the 
\shape italic
scanf
\shape default
 functions then need to be "%lf" rather than "%f".
\end_layout

\begin_layout Standard
The 
\family sans
getline()
\family default
 function returns a string that has the next line from file 
\family sans
f
\family default
.
 The end-of-line character has been stripped off.
\end_layout

\begin_layout Subsection
matrix I/O
\end_layout

\begin_layout Standard
NAB uses 4x4 matrices to represent coordinate transformations:
\end_layout

\begin_layout LyX-Code
 r  r  r 0 
\end_layout

\begin_layout LyX-Code
 r  r  r 0 
\end_layout

\begin_layout LyX-Code
 r  r  r 0 
\end_layout

\begin_layout LyX-Code
dx dy dz 1
\end_layout

\begin_layout Standard
The r's are a 3x3 rotation matrix, and the d's are the translations along
 the X,Y and Z axes.
\end_layout

\begin_layout Standard
NAB coordinates are row vectors which are transformed by appending a 1 to
 each point (x,y,z) -> (x,y,z,1), post multiplying by the transformation
 matrix, and then discarding the final 1 in the new point.
\end_layout

\begin_layout Standard
Two builtins are provided for reading/writing transformation matrices.
\end_layout

\begin_layout LyX-Code
matrix getmatrix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getmatrix
\end_layout

\end_inset

(string filename); 
\end_layout

\begin_layout Standard
Read the matrix from the file with name filename.
 Use "-" to read a matrix from stdin.
 A matrix is 4 lines of 4 numbers.
 A line of less than 4 numbers is an error, but anything after the 4th number
 is ignored.
 Lines beginning with a '#' are comments.
 Lines after the 4th data line are not read.
 Return a matrix with all zeroes on error, which can be tested:
\end_layout

\begin_layout LyX-Code
mat = getmatrix("bad.mat"); 
\end_layout

\begin_layout LyX-Code
if(!mat){ fprintf(stderr, "error reading matrix
\backslash
n"); ...
 }
\end_layout

\begin_layout Standard
Keep in mind that nab transformations are intended for use on molecular
 coordinates, and that transformations like scaling and shearing [which
 can not be created with nab directly but can now be introduced via 
\emph on
getmatrix
\emph default
()] may lead to incorrect on non-sensical results.
\end_layout

\begin_layout LyX-Code
int putmatrix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
putmatrix
\end_layout

\end_inset

(string filename, matrix mat);
\end_layout

\begin_layout Standard
Write matrix mat to to file with name filename.
 Use "-" to write a matrix to stdout.
 There is currently no way to write matrix to stderr.
 A matrix is writen as 4 lines of 4 numbers.
 Return 0 on success and 1 on failure.
\end_layout

\begin_layout Section

\series bold
Molecule Creation Functions
\end_layout

\begin_layout Standard
The 
\family sans
nab
\family default
 molecule type has a complex and dynamic internal structure organized in
 a three level hierarchy.
 A 
\family sans
molecule
\family default
 contains zero or more named strands.
 Strand names are strings of any characters except white space and can not
 exceed 255 characters in length.
 Each strand in a molecule must have a unique name.
 Strands in different molecules may have the same name.
 A strand contains zero or more residues.
 Residues in each strand are numbered from 
\family sans
1
\family default
.
 There is no upper limit on the number of residues a strand may contain.
 Residues have names, which need not be unique.
 However, the combination of 
\shape italic
strand-name
\family sans
\shape default
:
\family default
\shape italic
res-num
\shape default
 is unique for every residue in a molecule.
 Finally residues contain one or more atoms.
 Each atom name in a residue should be distinct, although this is neither
 required nor checked by 
\family sans
nab
\family default
.
 
\family sans
nab
\family default
 uses the following functions to create and modify molecules.
\end_layout

\begin_layout LyX-Code

\family sans
molecule newmolecule
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
newmolecule
\end_layout

\end_inset

();
\end_layout

\begin_layout LyX-Code

\family sans
molecule copymolecule
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
copymolecule
\end_layout

\end_inset

( molecule mol );
\end_layout

\begin_layout LyX-Code

\family sans
int freemolecule
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
freemolecule
\end_layout

\end_inset

( molecule mol );
\end_layout

\begin_layout LyX-Code

\family sans
int freeresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
freeresidue
\end_layout

\end_inset

( residue r );
\end_layout

\begin_layout LyX-Code

\family sans
int addstrand
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addstrand
\end_layout

\end_inset

( molecule mol, string sname );
\end_layout

\begin_layout LyX-Code

\family sans
int addresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
addresidue
\end_layout

\end_inset

( molecule mol, string sname, residue res );
\end_layout

\begin_layout LyX-Code

\family sans
int connectres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
connectres
\end_layout

\end_inset

( molecule mol, string sname, int res1, string aname1, 
\begin_inset Newline newline
\end_inset

          int res2, string aname2 );
\end_layout

\begin_layout LyX-Code

\family sans
int mergestr
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mergestr
\end_layout

\end_inset

( molecule mol1, string str1, string end1, molecule mol2, string str2, string
 end2 );
\end_layout

\begin_layout Standard
newmolecule() creates an 
\begin_inset Quotes eld
\end_inset

empty
\begin_inset Quotes erd
\end_inset

 molecule—one with no strands, residues or atoms.
 It returns 
\family sans
NULL
\family default
 if it can not create it.
 
\family sans
copymolecule()
\family default
 makes a copy of an existing molecule and returns a 
\family sans
NULL
\family default
 on failure.
 
\family sans
freemolecule()
\family default
 and 
\shape italic
freeresidue()
\shape default
 are used to deallocate memory set aside for a molecule or residue.
 In most programs, these functions are usually not necessary, but should
 be used when a large number of molecules are being copied.
 Once a molecule has been created, 
\family sans
addstrand()
\family default
 is used to add one or more named strands.
 Strands can be added at any to a molecule.
 There is no limit on the number of strands in a molecule.
 Strands can be added to molecules created by 
\family sans
getpdb()
\family default
 or other functions as long as the strand names are unique.
 
\family sans
addstrand()
\family default
 returns 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
 Finally 
\family sans
addresidue()
\family default
 is used to add residues to a strand.
 The first residue is numbered 
\family sans
1
\family default
 and subsequent residues are numbered 
\family sans
2
\family default
, 
\family sans
3
\family default
, etc.
 
\family sans
addresidue()
\family default
 also returns 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 requires that users explicitly make all inter-residue bonds.
 
\family sans
connectres()
\family default
 makes a bond between two atoms of 
\shape italic
different
\shape default
 residues of the strand with name 
\family sans
sname
\family default
.
 It returns 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
 Atoms in different strands can not be bonded.
 The bonding between atoms in a residue is set by the residue library entry
 and can not be changed at runtime at the 
\family sans
nab
\family default
 level.
\end_layout

\begin_layout Standard
The last function 
\family sans
mergestr()
\family default
 is used to merge two strands of the same molecule or copy a strand of the
 second molecule into a strand of the first.
 The residues of a strand are ordered from 
\family sans
1
\family default
 to 
\begin_inset Formula $N$
\end_inset

, where 
\begin_inset Formula $N$
\end_inset

 is the number of residues in that strand.
 
\family sans
nab
\family default
 imposes no chemical ordering on the residues in a strand.
 However, since the strands are generally ordered, there are four ways to
 combine the two strands.
 
\family sans
mergestr()
\family default
 uses the two values 
\family sans
"first"
\family default
 and 
\family sans
"last"
\family default
 to stand for residues 1 and 
\begin_inset Formula $N$
\end_inset

.
 The four combinations and their meanings are shown in the next table.
 In the table, 
\family sans
str1
\family default
 has 
\begin_inset Formula $N$
\end_inset

 residues and 
\family sans
str2
\family default
 has 
\begin_inset Formula $M$
\end_inset

 residues.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
end1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
end2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
first
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
first
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The residues of 
\family sans
str2
\family default
 are reversed and then inserted before those of 
\family sans
str1
\family default
: M , ..., 2, 1 : 1 , 2 , ..., N
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
first
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The residues of 
\family sans
str2
\family default
 are inserted before those of 
\family sans
str1
\family default
: 1 , 2, ..., M : 1 , 2 , ..., N
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
first
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The residues of 
\family sans
str2
\family default
 are inserted after those of 
\family sans
str1
\family default
: 1 , 2 , ..., N : 1 , 2 , ..., M
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The residues of 
\family sans
str2
\family default
 are reversed and then inserted after those of 
\family sans
str1
\family default
: 1 , 2 , ..., N : M , ..., 2 , 1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section

\series bold
Creating Biopoloymers
\end_layout

\begin_layout LyX-Code

\family sans
molecule linkprot
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
linkprot
\end_layout

\end_inset

( string strandname, string seq, string reslib );
\end_layout

\begin_layout LyX-Code

\family sans
molecule link_na
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
link
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

na
\end_layout

\end_inset

( string strandname, string seq, string reslib, string natype, 
\begin_inset Newline newline
\end_inset

         string opts );
\end_layout

\begin_layout Standard
Although many 
\family sans
nab
\family default
 functions don't care what kind of molecule they operate on, many operations
 require molecules that are compatible with the Amber force field libraries
 (see Chapter 6).
 The best and most general way to do this is to use tleap commands, described
 in Chapter 8).
 The 
\shape italic
linkprot()
\shape default
 and 
\shape italic
link_na()
\shape default
 routines given here are limited commands that may sometimes be useful,
 and are included for backwards compatibility with earlier versions of NAB.
\end_layout

\begin_layout Standard

\family sans
linkprot()
\family default
 takes a strand identifier and a sequence, and returns a molecule with this
 sequence.
 The molecule has an extended structure, so that the 
\begin_inset Formula $\phi$
\end_inset

, 
\begin_inset Formula $\psi$
\end_inset

and 
\begin_inset Formula $\omega$
\end_inset

 angles are all 180o .
 The 
\shape italic
reslib
\shape default
 input determines which residue library is used; if it is an empty string,
 the AMBER 94 all-atom library is used, with charged end groups at the N
 and C termini.
 All 
\family sans
nab
\family default
 residue libraries are denoted by the suffix 
\family sans
.rlb
\family default
 and 
\family sans
LEaP
\family default
 residue libraries are denoted by the suffix 
\family sans
.lib
\family default
.
 If 
\shape italic
reslib
\shape default
 is set to "nneut", "cneut" or "neut", then neutral groups will be used
 at the N-terminus, the C-terminus, or both, respectively.
\end_layout

\begin_layout Standard
The 
\family sans
seq
\family default
 string should give the amino acids using the one-letter code with upper-case
 letters.
 Some non-standard names are: "H" for histidine with the proton on the 
\begin_inset Formula $\delta$
\end_inset

 position; "h" for histidine with the proton at the 
\begin_inset Formula $\epsilon$
\end_inset

 position; "3" for protonated histidine; "n" for an acetyl blocking group;
 "c" for an HNMe blocking group, "a" for an NH 2 group, and "w" for a water
 molecule.
 If the sequence contains one or more "
\begin_inset Formula $\vert$
\end_inset

" characters, the molecule will consist of separate polypeptide strands
 broken at these positions.
\end_layout

\begin_layout Standard
The 
\family sans
link_na()
\family default
 routine works much the same way for DNA and RNA, using an input residue
 library to build a single-strand with correct local geometry but arbitrary
 torsion angles connecting one residue to the next.
 
\family sans
natype
\family default
 is used to specify either DNA or RNA.
 If the 
\shape italic
opts
\shape default
 string contains a "5", the 5' residue will be "capped" (a hydrogen will
 be attached to the O5' atom); if this string contains a "3" the O3' atom
 will be capped.
\end_layout

\begin_layout Standard
The newer (and generally recommended) way to generate biomolecules uses
 the 
\shape italic
getpdb_prm()
\shape default
 function described in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:NABmm"

\end_inset

.
\end_layout

\begin_layout Section

\series bold
Fiber Diffraction Duplexes in NAB
\begin_inset CommandInset label
LatexCommand label
name "sec:fdhelix"

\end_inset


\end_layout

\begin_layout Standard
The primary function in NAB for creating Watson-Crick duplexes based on
 fibre-diffraction data is fd_helix:
\end_layout

\begin_layout LyX-Code

\family sans
molecule fd_helix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fd
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

helix
\end_layout

\end_inset

( string helix_type, string seq, string acid_type );
\end_layout

\begin_layout Standard
fd_helix() takes as its arguments three strings - the helix type of the
 duplex, the sequence of one strand of the duplex, and the acid type (which
 is "dna" or "rna").
 Available helix types are as follows:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Helix type options for fd_helix()
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
arna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Right Handed A-RNA (Arnott)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
aprna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Right Handed A'-RNA (Arnott)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
lbdna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Right Handed B-DNA (Langridge)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
abdna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Right Handed B-DNA (Arnott)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
sbdna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Left Handed B-DNA (Sasisekharan)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
adna
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Right Handed A-DNA (Arnott)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The molecule returns contains a Watson-Crick double-stranded helix, with
 the helix axis along 
\begin_inset Formula $z$
\end_inset

.
 For a further explanation of the fd_helix code, please see the code comments
 in the source file fd_helix.nab.
\end_layout

\begin_layout Standard
References for the fibre-diffraction data:
\end_layout

\begin_layout Enumerate
Structures of synthetic polynucleotides in the A-RNA and A'-RNA conformations.
 X-ray diffraction analyses of the molecule conformations of (polyadenylic
 acid) and (polyinosinic acid).(polycytidylic acid).
 Arnott, S.; Hukins, D.W.L.; Dover, S.D.; Fuller, W.; Hodgson, A.R.
 
\shape italic
J.Mol.
 Biol.

\shape default
 (1973), 81(2), 107-22.
\end_layout

\begin_layout Enumerate
Left-handed DNA helices.
 Arnott, S; Chandrasekaran, R; Birdsall, D.L.; Leslie, A.G.W.; Ratliff, R.L.
 
\shape italic
Nature
\shape default
 (1980), 283(5749), 743-5.
\end_layout

\begin_layout Enumerate
Stereochemistry of nucleic acids and polynucleotides.
 Lakshimanarayanan, A.V.; Sasisekharan, V.
 
\shape italic
Biochim.
 Biophys.
 Acta
\shape default
 204, 49-53.
\end_layout

\begin_layout Enumerate
Fuller, W., Wilkins, M.H.F., Wilson, H.R., Hamilton, L.D.
 and Arnott, S.
 (1965).
 
\shape italic
J.
 Mol.
 Biol.

\shape default
 12, 60.
\end_layout

\begin_layout Enumerate
Arnott, S.; Campbell Smith, P.J.; Chandraseharan, R.
 in 
\shape italic
Handbook of Biochemistry and Molecular Biology, 3rd Edition.
 Nucleic Acids–Volume II
\shape default
, Fasman, G.P., ed.
 (Cleveland: CRC Press, 1976), pp.
 411-422.
\end_layout

\begin_layout Section

\series bold
Reduced Representation DNA Modeling Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides several functions for creating the reduced representation models
 of DNA described by R.
 Tan and S.
 Harvey.
\begin_inset CommandInset citation
LatexCommand cite
key "Tan89"
literal "true"

\end_inset

 This model uses only 3 pseudo-atoms to represent a base pair.
 The pseudo atom named 
\family sans
CE
\family default
 represents the helix axis, the atom named 
\family sans
SI
\family default
 represents the position of the sugar-phosphate backbone on the sense strand
 and the atom named 
\family sans
MA
\family default
 points into the major groove.
 The plane described by these three atoms ( and a corresponding virtual
 atom that represents the anti sugar-phosphate backbone ) represents quite
 nicely an all atom watson-crick base pair plane.
\end_layout

\begin_layout LyX-Code

\family sans
molecule dna3
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dna3
\end_layout

\end_inset

( int nbases, float roll, float tilt, float twist, float rise );
\end_layout

\begin_layout LyX-Code

\family sans
molecule dna3_to_allatom
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dna3
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

to
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

allatom
\end_layout

\end_inset

( molecule m_dna3, string seq, string aseq, string reslib, string natype
 );
\end_layout

\begin_layout LyX-Code

\family sans
molecule allatom_to_dna3
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
allatom
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

to
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

dna3
\end_layout

\end_inset

( molecule m_allatom, string sense, string anti );
\end_layout

\begin_layout Standard
The function 
\family sans
dna3()
\family default
 creates a reduced representation DNA structure.
 
\family sans
dna3()
\family default
 takes as parameters the number of bases 
\family sans
nbases
\family default
, and four helical parameters 
\family sans
roll
\family default
, 
\family sans
tilt
\family default
, 
\family sans
twist
\family default
, and 
\family sans
rise
\family default
.
\end_layout

\begin_layout Standard

\family sans
dna3_to_allatom()
\family default
 makes an all-atom dna model from a dna3 molecule as input.
 The molecule 
\family sans
m_dna3
\family default
 is a dna3 molecule, and the strings 
\family sans
seq
\family default
 and 
\family sans
aseq
\family default
 are the sense and anti sequences of the all-atom helix to be constructed.
 Obviously, the number of bases in the all-atom model should be the same
 as in the dna3 model.
 If the string 
\family sans
aseq
\family default
 is left blank ( "" ), the sequence generated is the 
\family sans
wc_complement()
\family default
 of the sense sequence.
 
\family sans
reslib
\family default
 names the residue library from which the all-atom model is to be constructed.
 If left blank, this will default to 
\family sans
all_nucleic94.lib The last parameter is either "dna
\family default
" or "
\family sans
rna
\family default
" and defaults to 
\family sans
dna
\family default
 if left blank.
\end_layout

\begin_layout Standard
The 
\family sans
allatom_to_dna3()
\family default
 function creates a dna3 model from a double stranded all-atom helix.
 The function takes as parameters the input all-atom molecule 
\family sans
m_allatom
\family default
, the name of the sense strand in the all-atom molecule, 
\family sans
sense
\family default
 and the name of the anti strand, 
\family sans
anti
\family default
.
\end_layout

\begin_layout Section

\series bold
Molecule I/O Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides several functions for reading and writing molecule and residue
 objects.
\end_layout

\begin_layout LyX-Code

\family sans
residue getresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getresidue
\end_layout

\end_inset

( string rname, string rlib );
\end_layout

\begin_layout LyX-Code

\family sans
molecule getpdb
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getpdb
\end_layout

\end_inset

( string fname [, string options ] );
\end_layout

\begin_layout LyX-Code

\family sans
molecule getcif
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getcif
\end_layout

\end_inset

( string fname, string blockId );
\end_layout

\begin_layout LyX-Code

\family sans
int putpdb
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
putpdb
\end_layout

\end_inset

( string fname, molecule mol [, string options ] );
\end_layout

\begin_layout LyX-Code

\family sans
int putcif
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
putcif
\end_layout

\end_inset

( string fname, molecule mol );
\end_layout

\begin_layout LyX-Code

\family sans
int putbnd
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
putbnd
\end_layout

\end_inset

( string fname, molecule mol );
\end_layout

\begin_layout LyX-Code

\family sans
int putdist
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
putdist
\end_layout

\end_inset

( string fname, molecule mol );
\end_layout

\begin_layout Standard
The function 
\family sans
getresidue()
\family default
 returns a copy of the residue with name 
\family sans
rname
\family default
 from the residue library named 
\family sans
rlib
\family default
.
 If it can not do so it returns the value 
\family sans
NULL
\family default
.
\end_layout

\begin_layout Standard
The function 
\family sans
getpdb()
\family default
 converts the contents of the PDB file with name 
\family sans
fname
\family default
 into an 
\family sans
nab molecule
\family default
.
 
\family sans
getpdb()
\family default
 creates bonds between any two atoms in the same residue if their distance
 is less than: 1.20 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 if either atom is a hydrogen, 2.20 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 if either atom is a sulfur, and 1.85 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 otherwise.
 Atoms in different residues are never bonded by 
\family sans
getpdb()
\family default
.
 
\end_layout

\begin_layout Standard

\family sans
getpdb()
\family default
 creates a new strand each time the chain id changes or if the chain id
 remains the same and a 
\family sans
TER
\family default
 card is encountered.
 The strand name is the chain id if it is not blank and 
\family sans
"
\family default

\begin_inset Formula $N$
\end_inset


\family sans
"
\family default
, where 
\begin_inset Formula $N$
\end_inset

 is the number of that strand in the molecule beginning with 
\family sans
1
\family default
.
 For example, a PDB file containing chain with no chain ID, followed by
 chain 
\family sans
A
\family default
, followed by another blank chain would have three strands with names 
\family sans
"1"
\family default
, 
\family sans
"A"
\family default
 and 
\family sans
"3"
\family default
.
 
\family sans
getpdb()
\family default
 returns a molecule on success and 
\family sans
NULL
\family default
 on failure.
\end_layout

\begin_layout Standard
The optional final argument to 
\family sans
getpdb
\family default
 can be used for a variety of purposes, which are outlined in the table
 below.
\end_layout

\begin_layout Standard
The (experimental!) function 
\family sans
getcif
\family default
 is like 
\family sans
getpdb
\family default
, but reads an mmCIF (macro-molecular crystallographic information file)
 formatted file, and extracts "atom-site" information from data block 
\family sans
blockID
\family default
.
 You will need to compile and install the 
\family sans
cifparse
\family default
 library in order to use this.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="1in">
<column alignment="left" valignment="top" width="4in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\align center

\shape italic
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-pqr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Put (or get) charges and radii into the columns following the xyz coordinates.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-nobocc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Do not put occupancy and b-factor into the columns following the xyz coordinates.
 This is implied if
\shape italic
 -pqr
\shape default
 is present, but may also be used to save space in the output file, or for
 compatibility with programs that do not work well if such data is present.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-brook
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Convert atom and residue names to the conventions used in Brookhaven PDB
 (version 2) files.
 This often gives greater compatibility with other software that may expect
 these conventions to hold, but the conversion may not be what is desired
 in many cases.
 Also, put the first character of the atom name in column 78, a preliminary
 effort at identifying it as in the most recent PDB format.
 If the 
\shape italic
-brook
\shape default
 flag is not present, no conversion of atom and residue names is made, and
 no id is in column 78.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-wwpdb
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Same as the 
\family sans
-brook
\family default
 option, except use the 
\begin_inset Quotes eld
\end_inset

wwPDB
\begin_inset Quotes erd
\end_inset

 (aka version 3) residue and atom naming scheme.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-nocid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
For 
\emph on
getpdb
\emph default
, ignore the input chain id's (column 22 of PDB-format files), and generate
 strand names as consecutive integers.
 For 
\emph on
putpdb
\emph default
, do not put the chain-id in the output (i.e., if this flag is present, the
 chain-id column will be blank).
 This can be useful when many water molecules are present.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-allcid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set, create a chain ID for every strand in the molecule being written.
 Use the strand's name if it is an upper case letter, else use the next
 free upper case letter.
 Use a blank if no more upper case letters are available.
 Default is false.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-tr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Do not start numbering residues over again when a new chain is encountered,
 i.e., the residue numbers are consecutive across chains, as required by some
 force-field programs like Amber.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Options-putpdb"

\end_inset

Options for getpdb and putpdb.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next group of builtins write various parts of the molecule 
\family sans
mol
\family default
 to the file 
\family sans
fname
\family default
.
 All return 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
 If 
\family sans
fname
\family default
 exists and is writable, it is overwritten without warning.
 
\family sans
putpdb()
\family default
 writes the molecule 
\family sans
mol
\family default
 into the PDB file 
\family sans
fname
\family default
.
 If the "resid" of a residue has been set (either by using 
\family sans
getpdb
\family default
 to create the molecule, or by an explicit operation in an 
\family sans
nab
\family default
 routine) then columns 22-27 of the output pdb file will use it; otherwise,
 
\family sans
nab
\family default
 will assign a chain-id and residue number and use those.
 In this latter case, a molecule with a single strand will have a blank
 chain-id; if there is more than one strand, each strand is written as a
 separate chain with chain id 
\family sans
"A"
\family default
 assigned to the first strand in 
\family sans
mol
\family default
, 
\family sans
"B"
\family default
 to the second, etc.
 Options for 
\family sans
putpdb
\family default
 are given in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Options-putpdb"

\end_inset

.
\end_layout

\begin_layout Standard

\family sans
putbnd()
\family default
 writes the bonds of 
\family sans
mol
\family default
 into 
\family sans
fname
\family default
.
 Each bond is a pair of integers on a line.
 The integers refer to atom records in the corresponding PDB-style file.
 
\family sans
putdist()
\family default
 writes the interatomic distances between all atoms of 
\family sans
mol
\family default
 
\shape italic
a i , a j
\shape default
 where 
\begin_inset Formula $i$
\end_inset

<
\begin_inset Formula $j$
\end_inset

, in this seven column format.
\end_layout

\begin_layout LyX-Code

\family sans
rnum1 rname1 aname1 rnum2 rname2 aname2 distance
\end_layout

\begin_layout Section

\series bold
Other Molecular Functions
\end_layout

\begin_layout LyX-Code

\family sans
matrix superimpose
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
superimpose
\end_layout

\end_inset

( molecule mol, string aex1, molecule r_mol, string aex2 );
\end_layout

\begin_layout LyX-Code

\family sans
int rmsd
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rmsd
\end_layout

\end_inset

( molecule mol, string aex1, molecule r_mol, string aex2, float r );
\end_layout

\begin_layout LyX-Code

\family sans
float angle
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
angle
\end_layout

\end_inset

( molecule mol, string aex1, string aex2, string aex3 );
\end_layout

\begin_layout LyX-Code

\family sans
float anglep
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
anglep
\end_layout

\end_inset

( point pt1, point pt2, point pt3 );
\end_layout

\begin_layout LyX-Code

\family sans
float torsion
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
torsion
\end_layout

\end_inset

( molecule mol, string aex1, string aex2, string aex3, string aex4 );
\end_layout

\begin_layout LyX-Code

\family sans
float torsionp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
torsionp
\end_layout

\end_inset

( point pt1, point pt2, point pt3, point pt4 );
\end_layout

\begin_layout LyX-Code

\family sans
float dist
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dist
\end_layout

\end_inset

( molecule mol, string aex1, string aex2 );
\end_layout

\begin_layout LyX-Code

\family sans
float distp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
distp
\end_layout

\end_inset

( point pt1, point pt2 );
\end_layout

\begin_layout LyX-Code

\family sans
int countmolatoms
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
countmolatoms
\end_layout

\end_inset

( molecule mol, string aex );
\end_layout

\begin_layout LyX-Code

\family sans
int sugarpuckeranal
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sugarpuckeranal
\end_layout

\end_inset

( molecule mol, int strandnum, int startres, int endres );
\end_layout

\begin_layout LyX-Code

\family sans
int helixanal
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
helixanal
\end_layout

\end_inset

( molecule mol );
\end_layout

\begin_layout LyX-Code

\family sans
int plane
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
plane
\end_layout

\end_inset

( molecule mol, string aex, float A, float B, float C );
\end_layout

\begin_layout LyX-Code

\family sans
float molsurf
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
molsurf
\end_layout

\end_inset

( molecule mol, string aex, float probe_rad );
\end_layout

\begin_layout Standard
superimpose() transforms molecule 
\family sans
mol
\family default
 so that the root mean square deviation between corresponding atoms in 
\family sans
mol
\family default
 and 
\family sans
r_mol
\family default
 is minimized.
 The corresponding atoms are those selected by the atom expressions 
\family sans
aex1
\family default
 applied to 
\family sans
mol
\family default
 and 
\family sans
aex2
\family default
 applied to 
\family sans
r_mol
\family default
.
 The atom expressions must select the same number of atoms in each molecule.
 No checking is done to insure that the atoms selected by the two atom expressio
ns actually correspond.
 
\family sans
superimpose()
\family default
 returns the transformation matrix it found.
 
\family sans
rmsd()
\family default
 computes the root mean square deviation between the pairs of corresponding
 atoms selected by applying 
\family sans
aex1
\family default
 to 
\family sans
mol
\family default
 and 
\family sans
aex2
\family default
 to 
\family sans
r_mol
\family default
 and returns the value in 
\family sans
r
\family default
.
 The two atom expressions must select the same number of atoms.
 Again, it is the user's responsibility to insure the two atom expressions
 select corresponding atoms.
 
\family sans
rmsd()
\family default
 returns 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
\end_layout

\begin_layout Standard

\family sans
angle()
\family default
 and 
\family sans
anglep()
\family default
 compute the angle in degrees between three points.
 
\family sans
angle()
\family default
 uses atoms expressions to determine the average coordinates of the sets.
 
\family sans
anglep()
\family default
 takes as an argument three explicit points.
 Similarly, 
\family sans
torsion()
\family default
 and 
\family sans
torsionp()
\family default
 compute a torsion angle in degrees defined by four points.
 
\family sans
torsion()
\family default
 uses atom expressions to specify the points.
 These atom expression match sets of atoms in 
\family sans
mol
\family default
.
 The points are defined by the average coordinates of the sets.
 
\family sans
torsionp()
\family default
 uses four explicit 
\family sans
point
\family default
s.
 Both functions return 
\family sans
0
\family default
 if the torsion angle is not defined.
\end_layout

\begin_layout Standard

\family sans
dist()
\family default
 and 
\family sans
distp()
\family default
 compute the distance in angstroms between two explicit atoms.
 
\family sans
dist()
\family default
 uses atom expressions to determine which atoms to include in the calculation.
 An atom expression which selects more than one atom results in the distance
 being calculated from the average coordinate of the selected atoms.
 
\family sans
distp()
\family default
 returns the distance between two explicit points.
 The function 
\family sans
countmolatoms()
\family default
 returns the number of atoms selected by 
\family sans
aex
\family default
 in 
\family sans
mol
\family default
.
\end_layout

\begin_layout Standard

\family sans
sugarpuckeranal()
\family default
 is a function that reports the various torsion angles in a nucleic acid
 structure.
 
\family sans
helixanal()
\family default
 is an interactive helix analysis function based on the methods described
 by Babcock 
\shape italic
et al..
\begin_inset CommandInset citation
LatexCommand cite
key "Babcock94"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
The 
\family sans
plane()
\family default
 routine takes an atom expression 
\family sans
aex
\family default
 and calculates the least-squares plane and returns the answer in the form
 z = Ax + By + C.
 It returns the number of atoms used to calculate the plane.
\end_layout

\begin_layout Standard
The 
\family sans
molsurf()
\family default
 routine is an NAB adaptation of Paul Beroza's program of the same name.
 It takes coordinates and radii of atoms matching the atom expression 
\shape italic
aex
\shape default
 in the input molecule, and returns the molecular surface area (the area
 of the solvent-excluded surface), in square angstroms.
 To compute the solvent-accessible area, add the probe radius to each atom's
 radius (using a 
\family sans
for( a in m )
\family default
 loop), and call 
\family sans
molsurf
\family default
 with a zero value for 
\family sans
probe_rad.
\end_layout

\begin_layout Section

\series bold
Debugging Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides the following builtin functions that allow the user to write the
 contents of various 
\family sans
nab
\family default
 objects to an ASCII file.
 The file must be opened for writing before any of these functions are called.
\end_layout

\begin_layout LyX-Code

\family sans
int dumpmatrix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dumpmatrix
\end_layout

\end_inset

( file, matrix mat );
\end_layout

\begin_layout LyX-Code

\family sans
int dumpbounds
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dumpbounds
\end_layout

\end_inset

( file f, bounds b, int binary );
\end_layout

\begin_layout LyX-Code

\family sans
float dumpboundsviolations
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dumpboundsviolations
\end_layout

\end_inset

( file f, bounds b, int cutoff );
\end_layout

\begin_layout LyX-Code

\family sans
int dumpmolecule
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dumpmolecule
\end_layout

\end_inset

( file f, molecule mol, int dres, int datom, int dbond );
\end_layout

\begin_layout LyX-Code

\family sans
int dumpresidue
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dumpresidue
\end_layout

\end_inset

( file f, residue res, int datom, int dbond );
\end_layout

\begin_layout LyX-Code

\family sans
int dumpatom
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dumpatom
\end_layout

\end_inset

( file f, residue res, int anum, int dbond );
\end_layout

\begin_layout LyX-Code

\family sans
int assert
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
assert
\end_layout

\end_inset

( condition );
\end_layout

\begin_layout LyX-Code

\family sans
int debug
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
debug
\end_layout

\end_inset

( expression(s) );
\end_layout

\begin_layout Standard
dumpmatrix() writes the 16 
\family sans
float
\family default
 values of 
\family sans
mat
\family default
 to the file 
\family sans
f
\family default
.
 The matrix is written as four rows of four numbers.
 
\family sans
dumpbounds()
\family default
 writes the distance bounds information contained in 
\family sans
b
\family default
 to the file 
\family sans
f
\family default
 using this eight column format:
\end_layout

\begin_layout LyX-Code

\family sans
atom-number1 atom-number2 lower upper
\end_layout

\begin_layout Standard
If 
\family sans
binary
\family default
 is set to a nonzero value, equivalent information is written in binary
 format, which can save disk-space, and is much faster to read back in on
 subsequent runs.
\end_layout

\begin_layout Standard

\family sans
dumpboundsviolations()
\family default
 writes all the bounds violations in the bounds object that are more than
 
\shape italic
cutoff
\shape default
, and returns the bounds violation energy.
 
\family sans
dumpmolecule()
\family default
 writes the contents of 
\family sans
mol
\family default
 to the file 
\family sans
f
\family default
.
 If 
\family sans
dres
\family default
 is 
\family sans
1
\family default
, then detailed residue information will also be written.
 If 
\family sans
datom
\family default
 or 
\family sans
dbond
\family default
 is 
\family sans
1
\family default
, then detailed atom and/or bond information will be written.
 
\family sans
dumpresidue()
\family default
 writes the contents of residue 
\family sans
res
\family default
 to the file 
\family sans
f
\family default
.
 Again if 
\family sans
datom
\family default
 or 
\family sans
dbond
\family default
 is 
\family sans
1
\family default
, detailed information about that residue's atoms and bonds will be written.
 Finally 
\family sans
dumpatom()
\family default
 writes the contents of the atom 
\family sans
anum
\family default
 of residue 
\family sans
res
\family default
 to the file 
\family sans
f
\family default
.
 If 
\family sans
dbond
\family default
 is 
\family sans
1
\family default
, bonding information about that atom is also written.
\end_layout

\begin_layout Standard
The 
\family sans
assert()
\family default
 statement will evaluate the condition expression, and terminate (with an
 error message) if the expression is not true.
 Unlike the corresponding "C" language construct (which is a macro), code
 is generated at compile time to indicate both the file and line number
 where the assertion failed, and to parse the condition expression and print
 the values of subexpressions inside it.
 Hence, for a code fragment like:
\end_layout

\begin_layout LyX-Code

\family sans
i=20; MAX=17;
\end_layout

\begin_layout LyX-Code

\family sans
assert( i 
\begin_inset Formula $<$
\end_inset

 MAX );
\end_layout

\begin_layout Standard
the error message will provide the assertion that failed, its location in
 the code, and the current values of "i" and "MAX".
 If the 
\shape italic
-noassert
\shape default
 flag is set at compile time, 
\family sans
assert
\family default
 statements in the code are ignored.
\end_layout

\begin_layout Standard
The 
\family sans
debug()
\family default
 statement will evaluate and print a comma-separated expression list along
 with the source file(s) and line number(s).
 Continuing the above example, the statement
\end_layout

\begin_layout LyX-Code

\family sans
debug( i, MAX );
\end_layout

\begin_layout Standard
would print the values of "i" and "MAX" to 
\shape italic
stdout
\shape default
, and continue execution.
 If the 
\shape italic
-nodebug
\shape default
 flag is set at compile time, 
\family sans
debug
\family default
 statements in the code are ignored.
\end_layout

\begin_layout Section

\series bold
Time and date routines
\end_layout

\begin_layout Standard
NAB incorporates a few interfaces to time and date routines:
\end_layout

\begin_layout LyX-Code

\family sans
string date
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
date
\end_layout

\end_inset

();
\end_layout

\begin_layout LyX-Code

\family sans
string timeofday
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
timeofday
\end_layout

\end_inset

();
\end_layout

\begin_layout LyX-Code

\family sans
string ftime
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ftime
\end_layout

\end_inset

( string fmt );
\end_layout

\begin_layout Standard
The 
\family sans
date()
\family default
 routine returns a string in the format "03/08/1999", and the 
\family sans
timeofday()
\family default
 routine returns the current time as "13:45:00".
 If you need access to more sophisticated time and date functions, the 
\family sans
ftime()
\family default
 routine is just a wrapper for the standard C routine 
\family sans
strftime
\family default
, where the format string is used to determine what is output; see standard
 C documentation for how this works.
\end_layout

\begin_layout Section
Computational resource consumption functions
\end_layout

\begin_layout Standard
NAB has a small number of functions to provide information about computational
 resources used during the run:
\end_layout

\begin_layout LyX-Code
int mme_timer
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mme_timer
\end_layout

\end_inset

();
\end_layout

\begin_layout LyX-Code
int mme_rism_max_memory
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mme_rism_max_memory
\end_layout

\end_inset

();
\end_layout

\begin_layout Standard

\family sans
mme_timer()
\family default
 provides tables of execution times for 
\family sans
mme
\family default
 functions executed.
 It does not provide a complete summary nor does it include functions not
 in the 
\family sans
mme
\family default
 family.
 It is, however, useful for identifying the most expensive routines.
 
\family sans
mme_rism_max_memory()
\family default
 reports the maximum amount of memory allocated during a 3D-RISM calculation.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:NABrigid"

\end_inset


\series bold
NAB: Rigid-Body Transformations
\end_layout

\begin_layout Standard
This chapter describes NAB functions to create and manipulate molecules
 through a variety of rigid-body transformations.
 This capability, when combined with distance geometry (described in the
 next chapter) offers a powerful approach to many problems in initial structure
 generation.
\end_layout

\begin_layout Section

\series bold
Transformation Matrix Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 uses 4
\begin_inset Formula $\times$
\end_inset

4 matrices to hold coordinate transformations.
 
\family sans
nab
\family default
 provides these functions to create transformation matrices.
\end_layout

\begin_layout LyX-Code

\family sans
matrix newtransform
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
newtransform
\end_layout

\end_inset

( float dx, float dy, float dz, float rx, float ry, float rz );
\end_layout

\begin_layout LyX-Code

\family sans
matrix rot4
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rot4
\end_layout

\end_inset

( molecule mol, string aex1, string aex2, float ang );
\end_layout

\begin_layout LyX-Code

\family sans
matrix rot4p
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rot4p
\end_layout

\end_inset

( point p1, point p2, float angle );
\end_layout

\begin_layout Standard
newtransform() creates a 4
\begin_inset Formula $\times$
\end_inset

4 matrix that will rotate an object by 
\family sans
rz
\family default
 degrees about the Z axis, 
\family sans
ry
\family default
 degrees about the Y axis, 
\family sans
rx
\family default
 degrees about the X axis and then translate the rotated object by 
\family sans
dx
\family default
, 
\family sans
dy
\family default
, 
\family sans
dz
\family default
 along the X, Y and Z axes.
 All rotations and transformations are with respect the standard X, Y and
 Z axes centered at (0,0,0).
 
\family sans
rot4()
\family default
 and 
\family sans
rot4p()
\family default
 create transformation matrices that rotate an object about an arbitrary
 axis.
 The rotation amount is in degrees.
 
\family sans
rot4()
\family default
 uses two atom expressions to define an axis that goes from 
\family sans
aex1
\family default
 to 
\family sans
aex2
\family default
.
 If an atom expression matches more that one atom in 
\family sans
mol
\family default
, the average of the coordinates of the matched atoms are used.
 If an atom expression matches no atoms in 
\family sans
mol
\family default
, the zero matrix is returned.
 
\family sans
rot4p()
\family default
 uses explicit points instead of atom expressions to specify the axis.
 If 
\family sans
p1
\family default
 and 
\family sans
p2
\family default
 are the same, the zero matrix is returned.
\end_layout

\begin_layout Section

\series bold
Frame Functions
\end_layout

\begin_layout Standard
Every 
\family sans
nab
\family default
 molecule has a 
\begin_inset Quotes eld
\end_inset

frame
\begin_inset Quotes erd
\end_inset

 which is three orthonormal vectors and their origin.
 The frame acts like a handle attached to the molecule allowing control
 over its movement.
 Two frames attached to different molecules allow for precise positioning
 of one molecule with respect to the other.
 These functions are used in frame creation and manipulation.
 All return 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
\end_layout

\begin_layout LyX-Code

\family sans
int setframe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setframe
\end_layout

\end_inset

( int use, molecule mol, string org, string xtail, string xhead, 
\end_layout

\begin_layout LyX-Code

\family sans
           string ytail, string yhead );
\end_layout

\begin_layout LyX-Code

\family sans
int setframep
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setframep
\end_layout

\end_inset

( int use, molecule mol, point org, point xtail, point xhead, 
\end_layout

\begin_layout LyX-Code

\family sans
          point ytail, point yhead );
\end_layout

\begin_layout LyX-Code

\family sans
int alignframe
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
alignframe
\end_layout

\end_inset

( molecule mol, molecule r_mol );
\end_layout

\begin_layout Standard
setframe() and 
\family sans
setframep()
\family default
 create coordinate frames for molecule 
\family sans
mol
\family default
 from an origin and two independent vectors.
 In 
\family sans
setframe()
\family default
, the origin and two vectors are specified by atom expressions.
 These atom expressions match sets of atoms in 
\family sans
mol
\family default
.
 The average coordinates of the selected sets are used to define the origin
 (
\family sans
org
\family default
), an X-axis (
\family sans
xtail
\family default
 to 
\family sans
xhead
\family default
) and a Y-axis (
\family sans
ytail
\family default
 to 
\family sans
yhead
\family default
).
 The Z-axis is created as X
\begin_inset Formula $\times$
\end_inset

Y.
 Since it is unlikely that the original X and Y axes are orthogonal, the
 parameter 
\family sans
use
\family default
 specifies which of them is to be a real axis.
 If 
\family sans
use == 1
\family default
, then the specified X-axis is the real X-axis and Y is recreated from Z
\begin_inset Formula $\times$
\end_inset

X.
 If 
\family sans
use == 2
\family default
, then the specified Y-axis is the real Y-axis and X is recreated from Y
\begin_inset Formula $\times$
\end_inset

Z.
 
\family sans
setframep()
\family default
 works exactly the same way except the vectors and origin are specified
 as explicit 
\family sans
point
\family default
s.
\end_layout

\begin_layout Standard

\family sans
alignframe()
\family default
 transforms 
\family sans
mol
\family default
 to superimpose its frame on the frame of 
\family sans
r_mol
\family default
.
 If 
\family sans
r_mol
\family default
 is 
\family sans
NULL
\family default
, 
\family sans
alignframe()
\family default
 transforms 
\family sans
mol
\family default
 to superimpose its frame on the standard X,Y,Z directions centered at (0,0,0).
\end_layout

\begin_layout Section

\series bold
Functions for working with Atomic Coordinates
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides several functions for getting and setting user defined sets of
 molecular coordinates.
\end_layout

\begin_layout LyX-Code

\family sans
int setpoint
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setpoint
\end_layout

\end_inset

( molecule mol, string aex, point pt );
\end_layout

\begin_layout LyX-Code

\family sans
int setxyz_from_mol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setxyz
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

from
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

mol
\end_layout

\end_inset

( molecule mol, string aex, point pts[] );
\end_layout

\begin_layout LyX-Code

\family sans
int setxyzw_from_mol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setxyzw
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

from
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

mol
\end_layout

\end_inset

( molecule mol, string aex, float xyzw[] );
\end_layout

\begin_layout LyX-Code

\family sans
int setmol_from_xyz
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setmol
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

from
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

xyz
\end_layout

\end_inset

( molecule mol, string aex, point pts[] );
\end_layout

\begin_layout LyX-Code

\family sans
int setmol_from_xyzw
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setmol
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

from
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

xyzw
\end_layout

\end_inset

( molecule mol, string aex, float xyzw[] );
\end_layout

\begin_layout LyX-Code

\family sans
int transformmol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transformmol
\end_layout

\end_inset

( matrix mat, molecule mol, string aex );
\end_layout

\begin_layout LyX-Code

\family sans
residue transformres
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transformres
\end_layout

\end_inset

( matrix mat, residue res, string aex );
\end_layout

\begin_layout Standard
setpoint() sets 
\family sans
pt
\family default
 to the average value of the coordinates of all atoms selected by the atom
 expression 
\family sans
aex
\family default
.
 If no atoms were selected it returns 
\family sans
1
\family default
, otherwise it returns a 
\family sans
0
\family default
.
 
\family sans
setxyz_from_mol()
\family default
 copies the coordinates of all atoms selected by the atom expression 
\family sans
aex
\family default
 to the 
\family sans
point
\family default
 array 
\family sans
pt
\family default
.
 It returns the number of atoms selected.
 
\family sans
setmol_from_xyz()
\family default
 replaces the coordinates of the selected atoms from the values in 
\family sans
pt
\family default
.
 It returns the number of replaced coordinates.
 The routines 
\family sans
setxyzw_from_mol
\family default
 and 
\family sans
setmol_from_xyzw
\family default
 work in the same way, except that they use four-dimensional coordinates
 rather than three-dimensional sets.
\end_layout

\begin_layout Standard

\family sans
transformmol()
\family default
 applies the transformation matrix 
\family sans
mat
\family default
 to those atoms of 
\family sans
mol
\family default
 that were selected by the atom expression 
\family sans
aex
\family default
.
 It returns the number of atoms selected.
 
\family sans
transformres()
\family default
 applies the transformation matrix 
\family sans
mat
\family default
 to those atoms of 
\family sans
res
\family default
 that were selected by the atom expression 
\family sans
aex
\family default
 and returns a transformed 
\shape italic
copy
\shape default
 of the input residue.
 It returns 
\family sans
NULL
\family default
 if the operation failed.
\end_layout

\begin_layout Section

\series bold
Symmetry Functions
\end_layout

\begin_layout Standard
Here we describe a set of NAB routines that provide an interface for rigid-body
 transformations based on crystallographic, point-group, or other symmetries.
 These are primarily higher-level ways to creating and manipulating sets
 of transformation matrices corresponding to common types of symmetry operations.
\end_layout

\begin_layout Subsection

\series bold
Matrix Creation Functions
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_cube
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MAT
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

cube, etc
\end_layout

\end_inset

( point pts[3], matrix mats[24] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_ico( point pts[3], matrix mats[60] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_octa( point pts[3], matrix mats[24] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_tetra( point pts[3], matrix mats[12] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_dihedral( point pts[3], int nfold, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_cyclic( point pts[2], float ang, int cnt, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_helix( point pts[2], float ang, float dst, int cnt, matrix mats[1]
 )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_orient( point pts[4], float angs[3], matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_rotate( point pts[2], float ang, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_translate( point pts[2], float dst, matrix mats[1] )
\end_layout

\begin_layout Standard
These two groups of functions produce arrays of matrices that can be applied
 to objects to generate point group symmetries (first group) or useful transform
ations (second group).
 The operations are defined with respect to a center and a set of axes specified
 by the points in the array 
\family sans
pts[]
\family default
.
 Every function requires a center and one axis which are 
\family sans
pts[1]
\family default
 and the vector 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
.
 The other two points (if required) define two additional directions: 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[3]
\family default
 and 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[4]
\family default
.
 How these directions are used depends on the function.
\end_layout

\begin_layout Standard
The point groups generated by the functions 
\family sans
MAT_cube()
\family default
, 
\family sans
MAT_ico()
\family default
, 
\family sans
MAT_octa()
\family default
 and 
\family sans
MAT_tetra()
\family default
 have three internal 2-fold axes.
 While these 2-fold are orthogonal, the 2 directions specified by the three
 points in 
\family sans
pts[]
\family default
 need only be independent (not parallel).
 The 2-fold axes are constructed in this fashion.
 Axis-1 is along the direction 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
.
 Axis-3 is along the vector 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
 
\begin_inset Formula $\times$
\end_inset

 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[3]
\family default
 and axis-2 is recreated along the vector axis-3 
\begin_inset Formula $\times$
\end_inset

 axis-1.
 Each of these four functions creates a fixed number of matrices.
\end_layout

\begin_layout Standard
Dihedral symmetry is generated by an N-fold rotation about an axis followed
 by a 2-fold rotation about a second axis orthogonal to the first axis.
 
\family sans
MAT_dihedral()
\family default
 produces matrices that generate this symmetry.
 The N-fold axis is 
\family sans
pts[0]
\begin_inset Formula $\to$
\end_inset

pts[1]
\family default
 and the second axis is created by the same orthogonalization process described
 above.
 Unlike the previous point group functions the number of matrices created
 by 
\family sans
MAT_dihedral()
\family default
 is not fixed but is equal to 
\begin_inset Formula $2\times nfold$
\end_inset

.
\end_layout

\begin_layout Standard

\family sans
MAT_cyclic()
\family default
 creates 
\family sans
cnt
\family default
 matrices that produce uniform rotations about the axis 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
.
 The rotations are in multiples of the angle 
\family sans
ang
\family default
 beginning with o, and increasing by 
\family sans
ang
\family default
 until 
\family sans
cnt
\family default
 matrices have been created.
 
\family sans
cnt
\family default
 is required to be 
\begin_inset Formula $>$
\end_inset

 0, but 
\family sans
ang
\family default
 can be 0, in which case 
\family sans
MAT_cyclic
\family default
 returns 
\family sans
cnt
\family default
 copies of the identity matrix.
\end_layout

\begin_layout Standard

\family sans
MAT_helix()
\family default
 creates 
\family sans
cnt
\family default
 matrices that produce a uniform helical twist about the axis 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
.
 The rotations are in multiples of 
\family sans
ang
\family default
 and the translations in multiples of 
\family sans
dst
\family default
.
 
\family sans
cnt
\family default
 must be 
\begin_inset Formula $>$
\end_inset

 0, but either 
\family sans
ang
\family default
 or 
\family sans
dst
\family default
 or both may be zero.
 If 
\family sans
ang
\family default
 is not 0, but 
\family sans
dst
\family default
 is, 
\family sans
MAT_helix()
\family default
 produces a uniform plane rotation and is equivalent to 
\family sans
MAT_cyclic()
\family default
.
 An 
\family sans
ang
\family default
 of 0 and a nonzero 
\family sans
dst
\family default
 produces matrices that generate a uniform translation along the axis.
 If both 
\family sans
ang
\family default
 and 
\family sans
dst
\family default
 are 0, the 
\family sans
MAT_helix()
\family default
 creates 
\family sans
cnt
\family default
 copies of the identity matrix.
\end_layout

\begin_layout Standard
The three functions 
\family sans
MAT_orient()
\family default
, 
\family sans
MAT_rotate()
\family default
 and 
\family sans
MAT_translate()
\family default
 are not really symmetry operations but are auxiliary operations that are
 useful for positioning the objects which are to be operated on by the true
 symmetry operators.
 Two of these functions 
\family sans
MAT_rotate()
\family default
 and MAT_translate() produce a single matrix that either rotates or translates
 an object along the axis 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
.
 A zero 
\family sans
ang
\family default
 or 
\family sans
dst
\family default
 is acceptable in which case the function creates an identity matrix.
 Except for a different user interface these two functions are equivalent
 to the 
\family sans
nab
\family default
 builtins 
\family sans
rot4p()
\family default
 and 
\family sans
tran4p()
\family default
.
\end_layout

\begin_layout Standard

\family sans
MAT_orient()
\family default
 creates a matrix that rotates a object about the three axes 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[2]
\family default
, 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[3]
\family default
 and 
\family sans
pts[1]
\begin_inset Formula $\to$
\end_inset

pts[4]
\family default
.
 The rotations are specified by the values of the array 
\family sans
angs[]
\family default
, with 
\family sans
ang[1]
\family default
 the rotation about axis-1 etc.
 The rotations are applied in the order axis-3, axis-2, axis-1.
 The axes remained fixed throughout the operation and zero angle values
 are acceptable.
 If all three angles are zero, 
\family sans
MAT_orient()
\family default
 creates an identity matrix.
\end_layout

\begin_layout Subsection

\series bold
Matrix I/O Functions
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_fprint
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MAT
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

fprint, etc
\end_layout

\end_inset

( file f, int nmats, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_sprint( string str, int nmats, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_fscan( file f, int smats, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
int MAT_sscan( string str, int smats, matrix mats[1] )
\end_layout

\begin_layout LyX-Code

\family sans
string MAT_getsyminfo()
\end_layout

\begin_layout Standard
This group of functions is used to read and write 
\family sans
nab matrix
\family default
 variables.
 The two functions 
\family sans
MAT_fprint()
\family default
 and 
\family sans
MAT_sprint()
\family default
 write the the matrix to the file 
\family sans
f
\family default
 or the string 
\family sans
str
\family default
.
 The number of matrices is specified by the parameter 
\family sans
nmats
\family default
 and the matrices are passed in the array 
\family sans
mats[]
\family default
.
\end_layout

\begin_layout Standard
The two functions 
\family sans
MAT_fscan()
\family default
 and 
\family sans
MAT_sscan()
\family default
 read matrices from the file 
\family sans
f
\family default
 or the string 
\family sans
str
\family default
 into the array 
\family sans
mats[]
\family default
.
 The parameter 
\family sans
smats
\family default
 is the size of the matrix array and if the source file or string contains
 more than 
\family sans
smats
\family default
 only the first 
\family sans
smats
\family default
 will be returned.
 These two functions return the number of matrices read unless there the
 number of matrices is greater than 
\family sans
smat
\family default
 or the last matrix was incomplete in which case they return 
\family sans
-1
\family default
.
\end_layout

\begin_layout Standard
In order to understand the last function in this group, 
\family sans
MAT_getsyminfo(),
\family default
 it is necessary to discuss both the internal structure the 
\family sans
nab
\family default
 matrix type and one of its most important uses.
 The 
\family sans
nab matrix
\family default
 type is used to hold transformation matrices.
 Although these are atomic objects at the 
\family sans
nab
\family default
 level, they are actually 
\begin_inset Formula $4\times4$
\end_inset

 matrices where the first three elements of the fourth row are the X Y and
 Z components of the translation part of the transformation.
 The matrix print functions write each matrix as four lines of four numbers
 separated by a single space.
 Similarly the matrix read functions expect each matrix to be represented
 as four lines of four white space (any number of tabs and spaces) separated
 numbers.
 The print functions use 
\family sans
%13.6e
\family default
 for each number in order to produce output with aligned columns, but the
 scan functions only require that each matrix be contained in four lines
 of four numbers each.
\end_layout

\begin_layout Standard
Most 
\family sans
nab
\family default
 programs use 
\family sans
matrix
\family default
 variables as intermediates in creating structures.
 The structures are then saved and the matrices disappear when the program
 exits.
 Recently 
\family sans
nab
\family default
 was used to create a set of routines called a 
\begin_inset Quotes eld
\end_inset

symmetry server
\begin_inset Quotes erd
\end_inset

.
 This is a set of 
\family sans
nab
\family default
 programs that work together to create matrix streams that are used to assemble
 composite objects.
 In order to make it most general, the symmetry server produces only matrices
 leaving it to the user to apply them.
 Since these programs will be used to create hierarchies of symmetries or
 transformations we decided that the external representation (files or strings)
 of matrices would consist of two kinds of information — required lines
 of row values and optional lines beginning with the character 
\family sans
#
\family default
 some of which are used to contain information that describes how these
 matrices were created.
\end_layout

\begin_layout Standard

\family sans
MAT_getsyminfo()
\family default
 is used to extract this symmetry information from either a matrix file
 or a string that holds the contents of a matrix file.
 Each time the user calls 
\family sans
MAT_fscan()
\family default
 or 
\family sans
MAT_sscan()
\family default
, any symmetry information present in the source file or string is saved
 in private buffer.
 The previous contents of this buffer are overwritten and lost.
 
\family sans
MAT_getsyminfo()
\family default
 returns the contents of this buffer.
 If the buffer is empty, indicating no symmetry information was present
 in either the source file or string, 
\family sans
MAT_getsyminfo()
\family default
 returns 
\family sans
NULL
\family default
.
\end_layout

\begin_layout Section

\series bold
\begin_inset CommandInset label
LatexCommand label
name "sec:symmetry_server"

\end_inset

Symmetry server programs
\end_layout

\begin_layout Standard
This section describes a set of 
\family sans
nab
\family default
 programs that are used together to create composite objects described by
 a hierarchical nest of transformations.
 There are four programs for creating and operating on transformation matrices:
 
\family sans
matgen
\family default
, 
\family sans
matmerge
\family default
, 
\family sans
matmul
\family default
 and 
\family sans
matextract
\family default
, a program, 
\family sans
transform
\family default
, for transforming PDB or point files, and two programs, 
\family sans
tss_init
\family default
 and 
\family sans
tss_next
\family default
 for searching spaces defined by transformation hierarchies.
 In addition to these programs, all of this functionality is available directly
 at the 
\family sans
nab
\family default
 level via the 
\family sans
MAT_
\family default
 and 
\family sans
tss_
\family default
 builtins described above.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:matgen"

\end_inset

matgen
\end_layout

\begin_layout Standard
The program 
\family sans
matgen
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
matgen
\end_layout

\end_inset

 creates matrices that correspond to a symmetry or transformation operation.
 It has one required argument, the name of a file containing a description
 of this operation.
 The created matrices are written to 
\family sans
stdout
\family default
.
 A single 
\family sans
matgen
\family default
 may be used by itself or two or more 
\family sans
matgen
\family default
 programs may be connected in a pipeline producing nested symmetries.
\end_layout

\begin_layout LyX-Code

\family sans
matgen -create
\family default
 
\shape italic
sydef-1
\shape default
 
\family sans

\begin_inset Formula $\vert$
\end_inset

 matgen
\family default
 
\shape italic
symdef-2
\shape default
 
\family sans

\begin_inset Formula $\vert$
\end_inset

 ...
 
\begin_inset Formula $\vert$
\end_inset

 matgen
\family default
 
\shape italic
symdef-N
\end_layout

\begin_layout Standard
Because a 
\family sans
matgen
\family default
 can be in the middle of a pipeline, it automatically looks for an stream
 of matrices on 
\family sans
stdin
\family default
.
 This means the first 
\family sans
matgen
\family default
 in a pipeline will wait for an 
\family sans
EOF
\family default
 (generally Ctl-D) from the terminal unless connected to an empty file or
 equivalent.
 In order to avoid the nuisance of having to create an empty matrix stream
 the first 
\family sans
matgen
\family default
 in a pipeline should use the 
\family sans
-create
\family default
 flag which tells 
\family sans
matgen
\family default
 to ignore 
\family sans
stdin
\family default
.
\end_layout

\begin_layout Standard
If input matrices are read, each input matrix left multiplies the first
 generated matrix, then the second etc.
 The table below shows the effect of a 
\family sans
matgen
\family default
 performing a 2-fold rotation on an input stream of three matrices.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Input:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $IM_{1,}\,\,IM_{2},\,\,IM_{3}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operation:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2-fold rotation: 
\begin_inset Formula $R_{1},\,\,R_{2}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $IM_{1}\times R_{1},\,\,IM_{2}\times R_{1},\,\,IM_{3}\times R_{1},\,\,IM_{1}\times R_{2},\,\,IM_{2}\times R_{2},\,\,IM_{3}\times R_{2}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Symmetry Definition Files
\end_layout

\begin_layout Standard
Transformations are specified in text files containing several lines of
 keyword/value pairs.
 These lines define the operation, its associated axes and other parameters
 such as angles, a distance or count.
 Most keywords have a default value, although the operation, center and
 axes are always required.
 Keyword lines may be in any order.
 Blank lines and most lines starting with a sharp (
\family sans
#
\family default
) are ignored.
 Lines beginning with 
\family sans
#S{
\family default
, 
\family sans
#S+
\family default
 and 
\family sans
#S}
\family default
 are structure comments that describe how the matrices were created.
 These lines are required to search the space defined by the transformation
 hierarchy and their meaning and use is covered in the section on 
\begin_inset Quotes eld
\end_inset

Searching Transformation Spaces
\begin_inset Quotes erd
\end_inset

.
 A complete list of keywords, their acceptable values and defaults is shown
 below.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="15" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Default Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Possible Values
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
symmetry
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
cube
\family default
, 
\family sans
cyclic
\family default
, 
\family sans
dihedral
\family default
, 
\family sans
dodeca
\family default
,
\family sans
 helix
\family default
, 
\family sans
ico
\family default
, 
\family sans
octa
\family default
, 
\family sans
tetra
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
transform
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
orient
\family default
, 
\family sans
rotate
\family default
, 
\family sans
translate
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mPid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any string of nonblank characters.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
noid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
true
\family default
, 
\family sans
false
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
axestype
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
absolute
\family default
, 
\family sans
relative
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
center
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any three numbers separated by tabs or spaces.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
axis, axis1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
axis2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
axis3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
angle,angle1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any number.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
angle2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
angle3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dist
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
count
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any integer.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\family sans
axis
\family default
 and 
\family sans
axis1
\family default
 are synonyms as are 
\family sans
angle
\family default
 and 
\family sans
angle1
\family default
.
 
\end_layout

\begin_layout Standard
The 
\family sans
symmetry
\family default
 and 
\family sans
transform
\family default
 keywords specify the operation.
 One or the other but not both must be specified.
\end_layout

\begin_layout Standard
The 
\family sans
name
\family default
 keyword names a particular symmetry operation.
 The default name is 
\family sans
m
\family default
 immediately followed by the process ID, eg 
\family sans
m2286
\family default
.
 
\family sans
name
\family default
 is used by the transformation space search routines 
\family sans
tss_init
\family default
 and 
\family sans
tss_next
\family default
 and is described later in the section 
\begin_inset Quotes eld
\end_inset

Searching Transformation Spaces
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The 
\family sans
noid
\family default
 keyword with value 
\family sans
true
\family default
 suppresses generation of the identity matrix in symmetry operations.
 For example, the keywords below
\end_layout

\begin_layout LyX-Code

\family sans
symmetry cyclic
\end_layout

\begin_layout LyX-Code

\family sans
noid false
\end_layout

\begin_layout LyX-Code

\family sans
center 0 0 0
\end_layout

\begin_layout LyX-Code

\family sans
axis 0 0 1
\end_layout

\begin_layout LyX-Code

\family sans
count 3
\end_layout

\begin_layout Standard
produce three matrices which perform rotations of 0o, 120o and 240o about
 the Z-axis.
 If 
\family sans
noid
\family default
 is 
\family sans
true
\family default
, only the two non-identity matrices are created.
 This option is useful in building objects with two or three orthogonal
 2-fold axes and is discussed further in the example 
\begin_inset Quotes eld
\end_inset

Icosahedron from Rotations
\begin_inset Quotes erd
\end_inset

.
 The default value of 
\family sans
noid
\family default
 is 
\family sans
false
\family default
.
\end_layout

\begin_layout Standard
The 
\family sans
axestype
\family default
, 
\family sans
center
\family default
 and 
\family sans
axis*
\family default
 keywords defined the symmetry axes.
 The 
\family sans
center
\family default
 and 
\family sans
axis*
\family default
 keywords each require a point value which is three numbers separated by
 tabs or spaces.
 Numbers may integer or real and in fixed or exponential format.
 Internally all numbers are converted to 
\family sans
nab
\family default
 type 
\family sans
float
\family default
 which is actually double precision.
 No space is permitted between the minus sign of a negative number and the
 digits.
\end_layout

\begin_layout Standard
The interpretation of these points depends on the value of the keyword 
\family sans
axestype
\family default
.
 If it is 
\family sans
absolute
\family default
 then the axes are defined as the vectors 
\family sans
center
\begin_inset Formula $\to$
\end_inset

axis1
\family default
, 
\family sans
center
\begin_inset Formula $\to$
\end_inset

axis2
\family default
 and 
\family sans
center
\begin_inset Formula $\to$
\end_inset

axis3
\family default
.
 If it 
\family sans
relative
\family default
, then the axes are vectors whose directions are 
\family sans
\series bold
O
\begin_inset Formula $\to$
\end_inset

axis1
\family default
\series default
, 
\family sans
\series bold
O
\begin_inset Formula $\to$
\end_inset

axis2
\family default
\series default
 and 
\family sans
\series bold
O
\begin_inset Formula $\to$
\end_inset

axis3
\family default
\series default
 with their origins at 
\family sans
center
\family default
.
 If the value of 
\family sans
center
\family default
 is 0,0,0, then 
\family sans
absolute
\family default
 and relative are equivalent.
 The default value 
\family sans
axestype
\family default
 is 
\family sans
relative
\family default
; 
\family sans
center
\family default
 and the 
\family sans
axis*
\family default
 do not have defaults.
\end_layout

\begin_layout Standard
The 
\family sans
angle
\family default
 keywords specify the rotation about the axes.
 
\family sans
angle1
\family default
 is associated with 
\family sans
axis1
\family default
 etc.
 Note that 
\family sans
angle
\family default
 and 
\family sans
angle1
\family default
 are synonyms.
 The angle is in degrees, with positive being in the counterclockwise direction
 as you sight from the 
\family sans
axis
\family default
 point to the 
\family sans
center
\family default
 point.
 Either an integer or real value is acceptable.
 No space is permitted between the minus sign of a negative number and its
 digits.
 All 
\family sans
angle*
\family default
 keywords have a default value of 
\family sans
0
\family default
.
\end_layout

\begin_layout Standard
The 
\family sans
dist
\family default
 keyword specifies the translation along an axis.
 The positive direction is from 
\family sans
center
\family default
 to 
\family sans
axis
\family default
.
 Either integer or real value is acceptable.
 No space is permitted between the minus sign of a negative number and its
 digits.
 The default value of 
\family sans
dist
\family default
 is 
\family sans
0
\family default
.
\end_layout

\begin_layout Standard
The 
\family sans
count
\family default
 keyword is used in three related ways.
 For the 
\family sans
cyclic
\family default
 value of the 
\family sans
symmetry
\family default
 it specifies 
\family sans
ount
\family default
 matrices, each representing a rotation of 360/
\family sans
count
\family default
.
 It also specifies the same rotations about the non 2-fold axis of 
\family sans
dihedral
\family default
 symmetry.
 For 
\family sans
helix
\family default
 symmetry, it indicates that 
\family sans
count
\family default
 matrices should be created, each with a rotation of 
\family sans
angle
\family default
.
 In all cases the default value is 
\family sans
1
\family default
.
\end_layout

\begin_layout Standard
This table shows which keywords are used and/or required for each type of
 operation.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="9">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
symmetry
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
noid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
axestype
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
center
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
axes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
angles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
dist
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
count
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
cube
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
cyclic
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
D=1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
dihedral
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
D=1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
dodeca
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
helix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,D=0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D=0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
D=1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ico
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
octa
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
tetra
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1,2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
transform
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
noid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
axestype
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
center
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
axes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
angles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
dist
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
count
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
orient
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All,D=0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rotate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,D=0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
translate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
m
\family default
\shape italic
Pid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
relative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
D=0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:matmerge"

\end_inset

matmerge
\end_layout

\begin_layout Standard
The 
\family sans
matmerge
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
matmerge
\end_layout

\end_inset

 program combines 2-4 files of matrices into a single stream of matrices
 written to 
\family sans
stdout
\family default
.
 Input matrices are in files whose names are given on as arguments on the
 
\family sans
matmerge
\family default
 command line.
 For example, the command line below
\end_layout

\begin_layout LyX-Code

\family sans
matmerge A.mat B.mat C.mat
\end_layout

\begin_layout Standard
copies the matrices from 
\family sans
A.mat
\family default
 to 
\family sans
stdout
\family default
, followed by those of 
\family sans
B.mat
\family default
 and finally those of 
\family sans
C.mat
\family default
.
 Thus 
\family sans
matmerge
\family default
 is similar to the Unix 
\family sans
cat
\family default
 command.
 The difference is that while they are called matrix files, they can contain
 special comments that describe how the matrices they contain were created.
 When matrix files are merged, these comments must be collected and grouped
 so that they are kept together in any further matrix processing.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:matmul"

\end_inset

matmul
\end_layout

\begin_layout Standard
The 
\family sans
matmul
\family default
 program takes two files of matrices, and creates a new stream of matrices
 formed by the pair wise product of the matrices in the input streams.
 The new matrices are written to 
\family sans
stdout
\family default
.
 If the number of matrices in the two input files differ, the last matrix
 of the shorter file is replicated and applied to all remaining matrices
 of the longer file.
 For example, if the file 
\family sans
3.mat
\family default
 has three matrices and the file 
\family sans
5.mat
\family default
 has five, then the command
\family sans
 
\begin_inset Quotes eld
\end_inset

matmul 3.mat 5.mat
\begin_inset Quotes erd
\end_inset


\family default
 would result in the third matrix of 
\family sans
3.mat
\family default
 multiplying the third, forth and fifth matrices of 
\family sans
5.mat
\family default
.
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:matextract"

\end_inset

matextract
\end_layout

\begin_layout Standard
The 
\family sans
matextract
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
matextract
\end_layout

\end_inset

 is used to extract matrices from the matrix stream presented on 
\family sans
stdin
\family default
 and writes them to 
\family sans
stdout
\family default
.
 Matrices are numbered from 1 to N, where N is the number of matrices in
 the input stream.
 The matrices are selected by giving their numbers as the arguments to the
 
\family sans
matextract
\family default
 command.
 Each argument is comma or space separated list of one or more ranges, where
 a range is either a number or two numbers separated by a dash (
\family sans
-
\family default
).
 A range beginning with 
\family sans
-
\family default
 starts with the first matrix and a range ending with 
\family sans
-
\family default
 ends with the last matrix.
 The range 
\family sans
-
\family default
 selects all matrices.
 Here are some examples.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Command
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract matrix number 2.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract 2,5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract matrices number 2 and 5.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract 2 5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract matrices number 2 and 5.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract 2-5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract matrices number 2 up to and including 5.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract -5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract matrices 1 to 5.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract 2-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract all matrices beginning with number 2.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract -
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract all matrices.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
matextract 2-4,7 13 15,19-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Extract matrices 2 to 4, 7, 13, 15 and all matrices numbered 19 or higher.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:transform"

\end_inset

transform
\end_layout

\begin_layout Standard
The 
\family sans
transform
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
transform
\end_layout

\end_inset

 program applies matrices to an object creating a composite object.
 The matrices are read from 
\family sans
stdin
\family default
 and the new object is written to 
\family sans
stdout
\family default
.
 
\family sans
transform
\family default
 takes one argument, the name of the file holding the object to be transformed.
 
\family sans
transform
\family default
 is limited to two types of objects, a molecule in PDB format, or a set
 of points in a text file, three space/tab separated numbers/line.
 The name of object file is preceded by a flag specifying its type.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Command
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
transform -pdb X.pdb
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transform a PDB format file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
transform -point X.pts
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transform a set of points.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:NABdistance"

\end_inset


\series bold
NAB: Distance Geometry
\end_layout

\begin_layout Standard
The second main element in NAB for the generation of initial structures
 is distance geometry.
 The next subsection gives a brief overview of the basic theory, and is
 followed by sections giving details about the implementation in NAB.
\end_layout

\begin_layout Section

\series bold
Metric Matrix Distance Geometry
\end_layout

\begin_layout Standard
A popular method for constructing initial structures that satisfy distance
 constraints is based on a metric matrix or "distance geometry" approach.
\begin_inset CommandInset citation
LatexCommand cite
key "Crippen88,Havel83"
literal "true"

\end_inset

 If we consider describing a macromolecule in terms of the distances between
 atoms, it is clear that there are many constraints that these distances
 must satisfy, since for 
\begin_inset Formula $N$
\end_inset

 atoms there are 
\begin_inset Formula $N(N-1)/2$
\end_inset

distances but only 3
\begin_inset Formula $N$
\end_inset

 coordinates.
 General considerations for the conditions required to "embed" a set of
 interatomic distances into a realizable three-dimensional object forms
 the subject of distance geometry.
 The basic approach starts from the 
\shape italic
metric matrix
\shape default
 that contains the scalar products of the vectors 
\begin_inset Formula $\mathbf{x}_{i}$
\end_inset

 that give the positions of the atoms:
\begin_inset Formula 
\begin{equation}
g_{ij}\equiv\mathbf{x}_{i}\cdot\mathbf{x}_{j}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
These matrix elements can be expressed in terms of the distances 
\begin_inset Formula $d_{ij}$
\end_inset

:
\begin_inset Formula 
\begin{equation}
g_{ij}=2(d_{i0}^{2}+d_{j0}^{2}-d_{ij}^{2})
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
If the origin ("0") is chosen at the centroid of the atoms, then it can
 be shown that distances from this point can be computed from the interatomic
 distances alone.
 A fundamental theorem of distance geometry states that a set of distances
 can correspond to a three-dimensional object only if the metric matrix
 
\series bold
g
\series default
 is rank three, i.e., if it has three positive and N-3 zero eigenvalues.
 This is not a trivial theorem, but it may be made plausible by thinking
 of the eigenanalysis as a principal component analysis: all of the distance
 properties of the molecule should be describable in terms of three "components,
" which would be the 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

 and 
\begin_inset Formula $z$
\end_inset

 coordinates.
 If we denote the eigenvector matrix as 
\series bold
w
\series default
 and the eigenvalues 
\begin_inset Formula $\lambda$
\end_inset

, the metric matrix can be written in two ways:
\begin_inset Formula 
\begin{equation}
g_{ij}=\sum_{k=1}^{3}x_{ik}x_{jk}=\sum_{k=1}^{3}w_{ik}w_{jk}\lambda_{k}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The first equality follows from the definition of the metric tensor, Eq.
 (1); the upper limit of three in the second summation reflects the fact
 that a rank three matrix has only three nonzero eigenvalues.
 Eq.
 (3) then provides an expression for the coordinates 
\begin_inset Formula $\mathbf{x}_{i}$
\end_inset

 in terms of the eigenvalues and eigenvectors of the metric matrix:
\begin_inset Formula 
\begin{equation}
x_{ik}=\lambda_{k}^{1/2}w_{ik}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
If the input distances are not exact, then in general the metric matrix
 will have more than three nonzero eigenvalues, but an approximate scheme
 can be made by using Eq.
 (4) with the three largest eigenvalues.
 Since information is lost by discarding the remaining eigenvectors, the
 resulting distances will not agree with the input distances, but will approxima
te them in a certain optimal fashion.
 A further "refinement" of these structures in three-dimensional space can
 then be used to improve agreement with the input distances.
\end_layout

\begin_layout Standard
In practice, even approximate distances are not known for most atom pairs;
 rather, one can set upper and lower bounds on acceptable distances, based
 on the covalent structure of the protein and on the observed NOE cross
 peaks.
 Then particular instances can be generated by choosing (often randomly)
 distances between the upper and lower bounds, and embedding the resulting
 metric matrix.
\end_layout

\begin_layout Standard
Considerable attention has been paid recently to improving the performance
 of distance geometry by examining the ways in which the bounds are "smoothed"
 and by which distances are selected between the bounds.
\begin_inset CommandInset citation
LatexCommand cite
key "Havel91,Kuszewski92"
literal "true"

\end_inset

 The use of triangle bound inequalities to improve consistency among the
 bounds has been used for many years, and NAB implements the "random pairwise
 metrization" algorithm developed by Jay Ponder.
\begin_inset CommandInset citation
LatexCommand cite
key "Hodsdon96"
literal "true"

\end_inset

 Methods like these are important especially for underconstrained problems,
 where a goal is to generate a reasonably random distribution of acceptable
 structures, and the difference between individual members of the ensemble
 may be quite large.
\end_layout

\begin_layout Standard
An alternative procedure, which we call "random embedding", implements the
 procedure of deGroot 
\shape italic
et al.

\shape default
 for satisfying distance constraints.
\begin_inset CommandInset citation
LatexCommand cite
key "deGroot97"
literal "true"

\end_inset

 This does not use the embedding idea discussed above, but rather randomly
 corrects individual distances, ignoring all couplings between distances.
 Doing this a great many times turns out to actually find fairly good structures
 in many cases, although the properties of the ensembles generated for undercons
trained problems are not well understood.
 A similar idea has been developed by Agrafiotis,
\begin_inset CommandInset citation
LatexCommand cite
key "Agrafiotis03"
literal "true"

\end_inset

 and we have adopted a version of his "learning parameter" strategy into
 our implementation.
\end_layout

\begin_layout Standard
Although results undoubtedly depend upon the nature of the problem and the
 constraints, in many (most?) cases, randomized embedding will be both faster
 and better than the metric matrix strategy.
 Given its speed, randomized embedding should generally be tried first.
\end_layout

\begin_layout Section

\series bold
Creating and manipulating bounds, embedding structures
\end_layout

\begin_layout Standard
A variety of metric-matrix distance geometry routines are included as builtins
 in 
\family sans
nab
\family default
.
\end_layout

\begin_layout LyX-Code

\family sans
bounds newbounds
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
newbounds
\end_layout

\end_inset

( molecule mol, string opts );
\end_layout

\begin_layout LyX-Code

\family sans
int andbounds
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
andbounds
\end_layout

\end_inset

( bounds b, molecule mol, string aex1, string aex2, 
\end_layout

\begin_layout LyX-Code

\family sans
           float lb, float ub );
\end_layout

\begin_layout LyX-Code

\family sans
int orbounds
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
orbounds
\end_layout

\end_inset

( bounds b, molecule mol, string aex1, string aex2, 
\end_layout

\begin_layout LyX-Code

\family sans
           float lb, float ub );
\end_layout

\begin_layout LyX-Code

\family sans
int setbounds
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setbounds
\end_layout

\end_inset

( bounds b, molecule mol, string aex1, string aex2, 
\end_layout

\begin_layout LyX-Code

\family sans
           float lb, float ub );
\end_layout

\begin_layout LyX-Code

\family sans
int showbounds
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
showbounds
\end_layout

\end_inset

( bounds b, molecule mol, string aex1, string aex2 );
\end_layout

\begin_layout LyX-Code

\family sans
int useboundsfrom
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
useboundsfrom
\end_layout

\end_inset

( bounds b, molecule mol1, string aex1, molecule mol2, 
\begin_inset Newline newline
\end_inset

                       string aex2, float deviation );
\end_layout

\begin_layout LyX-Code

\family sans
int setboundsfromdb
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setboundsfromdb
\end_layout

\end_inset

( bounds b, molecule mol, string aex1, string aex2, 
\begin_inset Newline newline
\end_inset

                       string dbase, float mul );
\end_layout

\begin_layout LyX-Code

\family sans
int setchivol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setchivol
\end_layout

\end_inset

( bounds b, molecule mol, string aex1, string aex2, string aex3, string
 aex4, float vol );
\end_layout

\begin_layout LyX-Code

\family sans
int setchiplane
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setchiplane
\end_layout

\end_inset

( bounds b, molecule mol, string aex );
\end_layout

\begin_layout LyX-Code

\family sans
float getchivol
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getchivol
\end_layout

\end_inset

( molecule mol, string aex1, string aex2, string aex3, string aex4 );
\end_layout

\begin_layout LyX-Code

\family sans
float getchivolp
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getchivolp
\end_layout

\end_inset

( point p1, point p2, point p3, point p4 );
\end_layout

\begin_layout LyX-Code

\family sans
int tsmooth
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
tsmooth
\end_layout

\end_inset

( bounds b, float delta );
\end_layout

\begin_layout LyX-Code

\family sans
int geodesics
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
geodesics
\end_layout

\end_inset

( bounds b );
\end_layout

\begin_layout LyX-Code

\family sans
int dg_options
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dg
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

options
\end_layout

\end_inset

( bounds b, string opts );
\end_layout

\begin_layout LyX-Code

\family sans
int embed
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
embed
\end_layout

\end_inset

( bounds b, float xyz[] );
\end_layout

\begin_layout Standard
The call to 
\family sans
newbounds()
\family default
 is necessary to establish a bounds matrix for further work.
 This routine sets lower bounds to van der Waals limits, along with bounds
 derived from the input geometry for atoms bonded to each other, and for
 atoms bonded to a common atoms (i.e., so-called 1-2 and 1-3 interactions.)
 Upper and lower bounds for 1-4 interactions are set to the maximum and
 minimum possibilities (the max ( 
\shape italic
syn
\shape default
 , "van der Waals limits" ) and 
\shape italic
anti
\shape default
 distances).
 
\family sans
newbounds()
\family default
 has a 
\family sans
string
\family default
 as its last parameter.
 This string is used to pass in options that control the details of how
 those routines execute.
 The string can be 
\family sans
NULL
\family default
, 
\family sans
""
\family default
 or contain one or more 
\shape italic
option
\shape default
s surrounded by white space.
 The formats of an option are
\end_layout

\begin_layout LyX-Code

\family sans
-
\family default
\shape italic
name
\family sans
\shape default
=
\family default
\shape italic
value
\shape default
 
\end_layout

\begin_layout LyX-Code

\family sans
-
\family default
\shape italic
name
\shape default
 to select the default value if it exists.
\end_layout

\begin_layout Standard
The options to 
\family sans
newbounds()
\family default
 are listed in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:newbounds"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Option
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Action
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-rbm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The value of the option is the name of a file containing the bounds matrix
 for this molecule.
 This file would ordinarily be made by the dump-bounds command.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-binary
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If this flag is present, bounds read in with the 
\shape italic
-rbm
\shape default
 will expect a binary file created by the 
\family sans
dumpbounds
\family default
 command.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-nocov
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If this flag is present, no covalent (bonding) information will be used
 in constructing the bounds matrix.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
-nchi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The option containing the keyword 
\shape italic
nchi
\shape default
 allocates 
\begin_inset Formula $n$
\end_inset

 extra chiral atoms for each residue of this molecule.
 This allows for additional chirality information to be provided by the
 user.
 The default is 4 extra chiral atoms per residue.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:newbounds"

\end_inset

Options to newbounds.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next five routines use atom expressions 
\family sans
aex1
\family default
 and 
\family sans
aex2
\family default
 to select two sets of atoms.
 Each of these four routines returns the number of bounds set or changed.
 For each pair of atoms (
\begin_inset Formula $a1$
\end_inset

 in 
\family sans
aex1
\family default
 and 
\begin_inset Formula $a2$
\end_inset

 in 
\family sans
aex2
\family default
) 
\family sans
andbounds()
\family default
 sets the lower bound to max ( 
\shape italic
current_lb, lb
\shape default
 ) and the upper bound to the min ( 
\shape italic
current_ub, ub
\shape default
 ).
 If 
\shape italic
ub 
\begin_inset Formula $<$
\end_inset

 current_lb
\shape default
 or if 
\shape italic
lb 
\begin_inset Formula $>$
\end_inset

 current_ub
\shape default
, the bounds for that pair are unchanged.
 The routine 
\family sans
orbounds()
\family default
 works in a similar fashion, except that it uses the less restrictive of
 the two sets of bounds, rather than the more restrictive one.
 The 
\family sans
setbounds()
\family default
 call updates the bounds, overwriting whatever was there.
 
\family sans
showbounds()
\family default
 prints all the bounds between the atoms selected in the first atom expression
 and those selected in the second atom expression.
 The 
\family sans
useboundsfrom()
\family default
 routine sets the the bounds between all the selected atoms in 
\shape italic
mol1
\shape default
 according to the geometry of a reference molecule, 
\shape italic
mol2
\shape default
.
 The bounds are set between every pair of atoms selected in the first atom
 expression, 
\shape italic
aex1
\shape default
 to the distance between the corresponding pair of atoms selected by 
\shape italic
aex2
\shape default
 in the reference molecule.
 In addition, a slack term, 
\shape italic
deviation
\shape default
, is used to allow some variance from the reference geometry by decreasing
 the lower bound and increasing the upper bound between every pair of atoms
 selected.
 The amount of increase or decrease depends on the distance between the
 two atoms.
 Thus, a 
\shape italic
deviation
\shape default
 of 
\begin_inset Formula $0.25$
\end_inset

 will result in the lower bound set between two atoms to be 75% of the actual
 distance separating the corresponding two atoms selected in the reference
 molecule.
 Similarly, the upper bound between two atoms will be set to 125% of the
 actual distance separating the corresponding two atoms selected in the
 reference molecule.
 For instance, the call
\end_layout

\begin_layout LyX-Code

\family sans
useboundsfrom(b, mol1, "1:2:C1',N1", mref, "3:4:C1',N1", 0.10 );
\end_layout

\begin_layout Standard
sets the lower bound between the C1' and N1 atoms in strand 1, residue 2
 of molecule 
\shape italic
mol1
\shape default
 to 90% of the distance between the corresponding pair of atoms in strand
 3, residue 4 of the reference molecule, 
\shape italic
mref
\shape default
.
 Similarly, the upper bound between the C1' and N1 atoms selected in 
\shape italic
mol1
\shape default
 is set to 110% of the distance between the corresponding pair of atoms
 in 
\shape italic
mref
\shape default
.
 A 
\shape italic
deviation
\shape default
 of 
\begin_inset Formula $0.0$
\end_inset

 sets the upper and lower bounds between every pair of atoms selected to
 be the actual distance between the corresponding reference atoms.
 If 
\shape italic
aex1
\shape default
 selects the same atoms as 
\shape italic
aex2
\shape default
, the bounds between those atoms selected will be constrained to the current
 geometry.
 Thus the call,
\end_layout

\begin_layout LyX-Code

\family sans
useboundsfrom(b, mol1, "1:1:", mol1, "1:1", 0.0 );
\end_layout

\begin_layout Standard
essentially constrains the current geometry of all the atoms in strand 1,
 residue 1, by setting the upper and lower bounds to the actual distances
 separating each atom pair.
 
\family sans
useboundsfrom()
\family default
 only checks the number of atoms selected by 
\shape italic
aex1
\shape default
 and compares it to the number of atoms selected by 
\shape italic
aex2
\shape default
.
 If the number of atoms selected by both atom expressions are not equal,
 an error message is output.
 Note, however, that there is no checking on the atom types selected by
 either atom expression.
 Hence, it is important to understand the method in which 
\family sans
nab
\family default
 atom expressions are evaluated.
 For more information, refer to Section 2.6, 
\begin_inset Quotes eld
\end_inset

Atom Names and Atom Expressions
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The 
\family sans
useboundsfrom()
\family default
 function can also be used with distance geometry "templates", as discussed
 in the next subsection.
\end_layout

\begin_layout Standard
The routine 
\family sans
setchivol()
\family default
 uses four atom expressions to select exactly four different atoms and sets
 the volume of the chiral (ordered) tetrahedron they describe to 
\family sans
vol
\family default
.
 Setting 
\family sans
vol
\family default
 to 
\family sans
0
\family default
 forces the four atoms to be planar.
 
\family sans
setchivol()
\family default
 returns 
\family sans
0
\family default
 on success and 
\family sans
1
\family default
 on failure.
 
\family sans
setchivol()
\family default
 does not affect any distance bounds in 
\family sans
b
\family default
 and may precede or follow triangle smoothing.
\end_layout

\begin_layout Standard
Similar to 
\family sans
setchivol()
\family default
, 
\family sans
setchiplane()
\family default
 enforces planarity across four or more atoms by setting the chiral volume
 to 
\family sans
0
\family default
 for every quartet of atoms selected by 
\family sans
aex
\family default
.
 
\family sans
setchiplane()
\family default
 returns the number of quartets constrained.
 
\family sans
Note:
\family default
 If the number of chiral constraints set is larger than the default number
 of chiral objects allocated in the call to 
\family sans
newbounds()
\family default
, a chiral table overflow will result.
 Thus, it may be necessary to allocate space for additional chiral objects
 by specifying a larger number for the option 
\shape italic
nchi
\shape default
 in the call to 
\family sans
newbounds()
\family default
.
\end_layout

\begin_layout Standard

\family sans
getchivol()
\family default
 takes as an argument four atom expressions and returns the chiral volume
 of the tetrahedron described by those atoms.
 If more than one atom is selected for a particular point, the atomic coordinate
 is calculated from the average of the atoms selected.
 Similarly, 
\family sans
getchivolp()
\family default
 takes as an argument four parameters of type 
\family sans
point
\family default
 and returns the chiral volume of the tetrahedron described by those points.
\end_layout

\begin_layout Standard
After bounds and chirality have been set in this way, the general approach
 would be to call 
\family sans
tsmooth()
\family default
 to carry out triangle inequality smoothing, followed by 
\family sans
embed()
\family default
 to create a three-dimensional object.
 This might then be refined against the distance bounds by a conjugate-gradient
 minimization routine.
 The 
\family sans
tsmooth()
\family default
 routine takes two arguments: a bounds object, and a tolerance parameter
 
\shape italic
delta
\shape default
, which is the amount by which an upper bound may exceed a lower bound without
 triggering a triangle error.
 For most circumstances, 
\shape italic
delta
\shape default
 would be chosen as a small number, like 0.0005, to allow for modest round-off.
 In some circumstances, however, 
\shape italic
delta
\shape default
 could be larger, to allow some significant inconsistencies in the bounds
 (in the hopes that the problems would be fixed in subsequent refinement
 steps.) If the 
\family sans
tsmooth()
\family default
 routine detects a violation, it will (arbitrarily) adjust the upper bound
 to equal the lower bound.
 Ideally, one should fix the bounds inconsistencies before proceeding, but
 in some cases this fix will allow the refinements to proceed even when
 the underlying cause of the inconsistency is not corrected.
\end_layout

\begin_layout Standard
For larger systems, the 
\family sans
tsmooth()
\family default
 routine becomes quite time-consuming as it scales O( ̂3).
 In this case, a more efficient triangle smoothing routine, 
\family sans
geodesics()
\family default
 is used.
 
\family sans
geodesics()
\family default
 smoothes the bounds matrix via the triangle inequality using a sparse matrix
 version of a shortest path algorithm.
\end_layout

\begin_layout Standard
The 
\family sans
embed
\family default
 routine takes a bounds object as input, and returns a four-dimensional
 array of coordinates; (values of the 4-th coordinate may be nearly zero,
 depending on the value of 
\begin_inset Formula $k4d$
\end_inset

, see below.) Options for how the embed is done are passed in through the
 
\shape italic
dg_options
\shape default
 routine, whose option string has 
\shape italic
name=value
\shape default
 pairs, separated by commas or whitespace.
 Allowed options are listed in the following table.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="20" columns="3">
<features islongtable="true" headBottomDL="true" longtabularalignment="center">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="3.5in">
<row endhead="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
default
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ddm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
none
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dump distance matrix to this file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rdm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
none
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instead of creating a distance matrix, read it from this file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
dmm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
none
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dump the metric matrix to this file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rmm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
none
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instead of creating a metric matrix, read it from this file.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
gdist
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to nonzero value, use a Gaussian distribution for selecting distances;
 this will have a mean at the center of the allowed range, and a standard
 deviation equal to 1/4 of the range.
 If gdist=0, select distances from a uniform distribution in the allowed
 range.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
randpair
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Use random pair-wise metrization for this percentage of the distances, i.e.,
 randpair=10.
 would metrize 10% of the distance pairs.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
eamax
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum number of embed attempts before bailing out.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
seed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial seed for the random number generator.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
pembed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to a nonzero value, use the "proximity embedding" scheme of de Groot
 
\shape italic
et al.
\shape default
, [26] and Agrafiotis [27], rather than metric matrix embedding.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
shuffle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set to 1 to randomize coordinates inside a box of dimension 
\shape italic
rbox
\shape default
 at the beginning of the 
\shape italic
pembed
\shape default
 scheme; if 0, use whatever coordinates are fed to the routine.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
rbox
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Size, in angstroms, of each side of the cubic into which the coordinates
 are randomly created in the proximity-embed procedure, if 
\shape italic
shuffle
\shape default
 is set.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
riter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum number of cycles for random-embed procedure.
 Each cycle selects 1000 pairs for adjustment.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
slearn
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Starting value for the learning parameter in proximity embedding; see [27]
 for details.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
kchi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Force constant for enforcement of chirality constraints.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
k4d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Force constant for squeezing out the fourth dimensional coordinate.
 If this is nonzero, a penalty function will be added to the bounds-violation
 energy, which is equal to 0.5 * 
\shape italic
k4d * w * w
\shape default
, where 
\begin_inset Formula $w$
\end_inset

 is the value of the fourth dimensional coordinate.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
sqviol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set to nonzero value, use parabolas for the violation energy when upper
 or lower bounds are violated; otherwise use functions based on those in
 the 
\family sans
dgeom
\family default
 program.
 See the code in 
\family sans
embed.c
\family default
 for details.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
lbpen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weighting factor for lower-bounds violations, relative to upper-bounds violation
s.
 The default penalizes lower bounds 3.5 times as much as the equivalent upper-bou
nds violations, which is frequently appropriate distance geometry calculations
 on molecules.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ntpr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency at which the bounds matrix violations will be printed in subsequent
 refinements.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
pencut
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If pencut 
\begin_inset Formula $>$
\end_inset

= 0.0, individual distance and chirality violations greater than pencut will
 be printed out (along with the total energy) every ntpr steps.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\shape italic
Typical calling sequences.

\shape default
 The following segment shows some ways in which these routines can be put
 together to do some simple embeds: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

molecule m;
\end_layout

\begin_layout Plain Layout

bounds b;
\end_layout

\begin_layout Plain Layout

float fret, xyz[ 10000 ];
\end_layout

\begin_layout Plain Layout

int ier;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = getpdb( argv[2] );
\end_layout

\begin_layout Plain Layout

b = newbounds( m, "" );
\end_layout

\begin_layout Plain Layout

tsmooth( b, 0.0005 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

dg_options( b, "gdist=1, ntpr=50, k4d=2.0, randpair=10." );
\end_layout

\begin_layout Plain Layout

embed( b, xyz );
\end_layout

\begin_layout Plain Layout

ier = conjgrad( xyz, 4*m.natoms, fret, db_viol, 0.1, 10., 200 );
\end_layout

\begin_layout Plain Layout

printf( "conjgrad returns %d
\backslash

\backslash
n", ier );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setmol_from_xyzw( m, NULL, xyz );
\end_layout

\begin_layout Plain Layout

putpdb( "new.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In lines 6-8, the molecule is created by reading in a pdb file, then bounds
 are created and smoothed for it.
 The embed options (established in line 10) include 10% random pairwise
 metrization, use of Gaussian distance selection, squeezing out the 4-th
 dimension with a force constant of 2.0, and printing every 50 steps.
 The coordinates developed in the 
\shape italic
embed
\shape default
 step (line 11) are passed to a conjugate gradient minimizer (see the descriptio
n below), which will minimize for 200 steps, using the bounds-violation
 routine 
\shape italic
db_viol
\shape default
 as the target function.
 Finally, in lines 15-16, the 
\shape italic
setmol_from_xyzw
\shape default
 routine is used to put the coordinates from the 
\shape italic
xyz
\shape default
 array back into the molecule, and a new pdb file is written.
\end_layout

\begin_layout Standard
More complex and representative examples of distance geometry are given
 in the 
\series bold
Examples
\series default
 chapter below.
\end_layout

\begin_layout Section

\series bold
Distance geometry templates
\end_layout

\begin_layout Standard
The 
\family sans
useboundsfrom()
\family default
 function can be used with structures supplied by the user, or by canonical
 structures supplied with the 
\family sans
nab
\family default
 distribution called "templates".
 These templates include stacking schemes for all standard residues in a
 A-DNA, B-DNA, C-DNA, D-DNA, T-DNA, Z-DNA, A-RNA, or A'-RNA stack.
 Also included are the 28 possible basepairing schemes as described in Saenger.
\begin_inset CommandInset citation
LatexCommand cite
key "Saenger84"
literal "true"

\end_inset

 The templates are in PDB format and are located in 
\family sans
$AMBERCLASSICHOME/dat/dgdb/basepairs/
\family default
 and 
\family sans
$AMBERCLASSICHOME/dat/dgdb/stacking/
\family default
.
\end_layout

\begin_layout Standard
A typical use of these templates would be to set the bounds between two
 residues to some percentage of the idealized distance described by the
 template.
 In this case, the template would be the reference molecule ( the second
 molecule passed to the function ).
 A typical call might be:
\end_layout

\begin_layout LyX-Code

\family sans
useboundsfrom(b, m, "1:2,3:??,H?", 
\end_layout

\begin_layout LyX-Code

\family sans
             getpdb( PATH + "gc.bdna.pdb" ), "::??,H?", 0.1 );
\end_layout

\begin_layout Standard
where 
\family sans
PATH
\family default
 is 
\family sans
$AMBERCLASSICHOME/dat/dgdb/stacking/
\family default
.
 This call sets the bounds of all the base atoms in residues 2 ( GUA ) and
 3 ( CYT ) of strand 1 to be within 10% of the distances found in the template.
\end_layout

\begin_layout Standard
The basepair templates are named so that the first field of the template
 name is the one-character initials of the two individual residues and the
 next field is the Roman numeral corresponding to same bonding scheme described
 by Sanger, p.
 120.
 
\shape italic
Note: since no specific sugar or backbone conformation is assumed in the
 templates, the non-base atoms should not be referenced.

\shape default
 The base atoms of the templates are show in figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig.ppa"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig.ppb"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/case/nabc/doc/ppa.eps
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig.ppa"

\end_inset

Basepair templates for use with 
\family sans
useboundsfrom(),
\family default
 (aa-gg)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/case/nabc/doc/ppb.eps
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig.ppb"

\end_inset

Basepair templates for use with 
\family sans
useboundsfrom(),
\family default
 (gg-uu)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The stacking templates are named in the same manner as the basepair templates.
 The first two letters of the template name are the one-character initials
 of the two residues involved in the stacking scheme ( 5' residue, then
 3' residue ) and the second field is the actual helical pattern ( 
\shape italic
note: a-rna represents the helical parameters of a'rna
\shape default
 ).
 The stacking shemes can be found in the 
\emph on
$AMBERCLASSICHOME/dat/dgdb/stacking
\emph default
 directory.
\end_layout

\begin_layout Section

\series bold
Bounds databases
\end_layout

\begin_layout Standard
In addition to canonical templates, it is also possible to specify bounds
 information from a database of known molecular structures.
 This provides the option to use data obtained from actual structures, rather
 than from an idealized, canonical conformation.
\end_layout

\begin_layout Standard
The function 
\family sans
setboundsfromdb()
\family default
 sets the bounds of all pairs of atoms between the two residues selected
 by 
\family sans
aex1
\family default
 and 
\family sans
aex2
\family default
 to a statistically averaged distance calculated from known structures plus
 or minus a multiple of the standard deviation.
 The statistical information is kept in database files.
 Currently, there are three types of database files - Those containing bounds
 information between Watson-Crick basepairs, those containing bounds information
 between helically stacked residues, and those containing intra-residue
 bounds information for residues in any conformation.
 The standard deviation is multiplied by the parameter 
\shape italic
mul
\shape default
 and subtracted from the average distance to determine the lower bound and
 similarly added to the average distance to determine the upper bound of
 all base-base atom distances.
 Base-backbone bounds, that is, bounds between pairs of atoms in which one
 atom is a base atom and the other atom is a backbone atom, are set to be
 looser than base-base atoms.
 Specifically, the lower bound between a base-backbone atom pair is set
 to the smallest measured distance of all the structures considered in creating
 the database.
 Similarly, the upper bound between a base-backbone atom pair is set to
 the largest measured distance of all the structures considered.
 Base-base, and base-sugar bounds are set in a similar manner.
 This was done to avoid imposing false constraints on the atomic bounds,
 since Watson-Crick basepairing and stacking does not preclude any specific
 backbone and sugar conformation.
 
\family sans
setboundsfromdb()
\family default
 first searches the current directory for 
\shape italic
dbase
\shape default
 before checking the default database location, 
\family sans
$AMBERCLASSICHOME/dat/dgdb.
\end_layout

\begin_layout Standard
Each entry in the database file has six fields: The atoms whose bounds are
 to be set, the number of separate structures sampled in constructing these
 statistics, the average distance between the two atoms, the standard deviation,
 the minimum measured distance, and the maximum measured distance.
 For example, the database 
\family sans
bdna.basepair.db
\family default
 has the following sample entries:
\end_layout

\begin_layout LyX-Code
A:C2-T:C1' 424 6.167 0.198 5.687 6.673
\end_layout

\begin_layout LyX-Code
A:C2-T:C2 424 3.986 0.175 3.554 4.505
\end_layout

\begin_layout LyX-Code
A:C2-T:C2' 424 7.255 0.304 5.967 7.944
\end_layout

\begin_layout LyX-Code
A:C2-T:C3' 424 8.349 0.216 7.456 8.897
\end_layout

\begin_layout LyX-Code
A:C2-T:C4 424 4.680 0.182 4.122 5.138
\end_layout

\begin_layout LyX-Code
A:C2-T:C4' 424 8.222 0.248 7.493 8.800
\end_layout

\begin_layout LyX-Code
A:C2-T:C5 424 5.924 0.168 5.414 6.413
\end_layout

\begin_layout LyX-Code
A:C2-T:C5' 424 9.385 0.306 8.273 10.104
\end_layout

\begin_layout LyX-Code
A:C2-T:C6 424 6.161 0.163 5.689 6.679
\end_layout

\begin_layout LyX-Code
A:C2-T:C7 424 7.205 0.184 6.547 7.658
\end_layout

\begin_layout Standard
The first column identifies the atoms from the adenosine C2 atom to various
 thymidine atoms in a Watson-Crick basepair.
 The second column indicates that 
\begin_inset Formula $424$
\end_inset

 structures were sampled in determining the next four columns: the average
 distance, the standard deviation, and the minimum and maximum distances.
\end_layout

\begin_layout Standard
The databases were constructing using the coordinates from all the known
 nucleic acid structures from the Nucleic Acid Database (NDB - 
\family sans
http://www.ndbserver.ebi.ac.uk:5700/NDB/
\family default
.
 If one wishes to remake the databases, the coordinates of all the NDB structure
s should be downloaded and kept in the 
\family sans
$AMBERCLASSICHOME/dat/coords
\family default
 directory.
 The databases are made by issuing the command 
\family sans
$AMBERCLASSICHOME/dat/dgdb/make_databases
\family default
 
\shape italic
dblist
\shape default
 where 
\shape italic
dblist
\shape default
 is a list of nucleic acid types (i.e., bdna, arna, 
\shape italic
etc.

\shape default
 ).
 If one wants to add new structures to the structure repository at 
\family sans
$AMBERCLASSICHOME/dat/coords
\family default
, it is necessary to make sure that the first two letters of the pdb file
 identify the nucleic acid type.
 That is, all bdna pdb files must begin with 
\shape italic
bd
\shape default
.
\end_layout

\begin_layout Standard
The 
\family sans
nab
\family default
 functions used to create the databases are located in 
\family sans
$AMBERCLASSCHOME/dat/dgdb/functions
\family default
.
 The stacking databases were constructed as follows: If two residues stacked
 5' to 3' in a helix have fewer than ten inter-residue atom distances closer
 than 2.0 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 or larger than 9.0 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

, and if the normals between the base planes are less than 20.0o, the residues
 were considered stacked.
 The base plane is calculated as the normal to the N1-C4 and midpoint of
 the C2-N3 and N1-C4 vectors.
 The first atom expression given to 
\family sans
setboundsfromdb()
\family default
 specifies the 5' residue and the second atom expression specifies the 3'
 residue.
 The source for this function is 
\family sans
getstackdist.nab
\family default
.
\end_layout

\begin_layout Standard
Similarly, the basepair databases were constructed by measuring the heavy
 atom distances of corresponding residues in a helix to check for hydrogen
 bonding.
 Specifically, if an A-U basepair has an N1-N3 distance of between 2.3 and
 3.2 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 and a N6-O4 distance of between 2.3 and 3.3 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

, then the A-U basepair is considered a Waton-Crick basepair and is used
 in the database.
 A C-G basepair is considered Watson-Crick paired if the N3-N1 distance
 is between 2.3 and 3.3 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

, the N4-O6 distance is between 2.3 and 3.2 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

, and the O2-N2 distance is between 2.3 and 3.2 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The nucleotide databases contain all the distance information between atoms
 in the same residue.
 No residues in the coordinates directory are excluded from this database.
 The intent was to allow the residues of this database to assume all possible
 conformations and ensure that a nucleotide residue would not be biased
 to a particular conformation.
\end_layout

\begin_layout Standard
For the basepair and stacking databases, setting the parameter 
\shape italic
mul
\shape default
 to 
\begin_inset Formula $1.0$
\end_inset

 results in lower bounds being set from the average database distance minus
 one standard deviation, and upper bounds as the average database distance
 plus one standard deviation, between base-base atoms.
 Base-backbone and base-sugar upper and lower bounds are set to the maximum
 and minimum measured database values, respectively.
 
\shape italic
Note, however, that a stacking multiple of 0.0 may not correspond to consistent
 bounds.
 A stacking multiple of 0.0 will probably have conflicting bounds information
 as the bounds information is derived from many different structures.
\end_layout

\begin_layout Standard
The database types are named 
\shape italic
nucleic_acid_type.database_type.
\family sans
\shape default
db
\family default
, and can be found in the 
\emph on
$AMBERCLASSICHOME/dat/dgdb
\emph default
 directory.
\end_layout

\begin_layout Section

\series bold
\begin_inset CommandInset label
LatexCommand label
name "sec:nab-typical"

\end_inset

Typical calling sequences
\end_layout

\begin_layout Standard
The following segment shows some ways in which these routines can be put
 together to do some molecular mechanics and dynamics: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// carry out molecular mechanics minimization and some simple dynamics
\end_layout

\begin_layout Plain Layout

molecule m, mi; 
\end_layout

\begin_layout Plain Layout

int  ier;
\end_layout

\begin_layout Plain Layout

float  m_xyz[ dynamic ], f_xyz[ dynamic ], v[ dynamic ];
\end_layout

\begin_layout Plain Layout

float  dgrad, fret, dummy[2];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mi = bdna( "gcgc" );  
\end_layout

\begin_layout Plain Layout

putpdb( "temp.pdb", mi );
\end_layout

\begin_layout Plain Layout

m = getpdb_prm( "temp.pdb", "leaprc.nucleic.OL15", "", 0 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

allocate m_xyz[ 3*m.natoms ];  allocate f_xyz[ 3*m.natoms ];
\end_layout

\begin_layout Plain Layout

allocate v[ 3*m.natoms ];
\end_layout

\begin_layout Plain Layout

setxyz_from_mol( m, NULL, m_xyz );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mm_options( "cut=25.0, ntpr=10, nsnb=999, gamma_ln=5.0" );
\end_layout

\begin_layout Plain Layout

mme_init( m, NULL, "::ZZZ", dummy, NULL );
\end_layout

\begin_layout Plain Layout

fret = mme( m_xyz, f_xyz, 1 );
\end_layout

\begin_layout Plain Layout

printf( "Initial energy is %8.3f
\backslash
n", fret );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

dgrad = 0.1;
\end_layout

\begin_layout Plain Layout

ier = conjgrad( m_xyz, 3*m.natoms, fret, mme, dgrad, 10.0, 100 );
\end_layout

\begin_layout Plain Layout

setmol_from_xyz( m, NULL, m_xyz );
\end_layout

\begin_layout Plain Layout

putpdb( "gcgc.min.pdb", m );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mm_options( "tautp=0.4, temp0=100.0, ntpr_md=10, tempi=50." );
\end_layout

\begin_layout Plain Layout

md( 3*m.natoms, 1000, m_xyz, f_xyz, v, mme );
\end_layout

\begin_layout Plain Layout

setmol_from_xyz( m, NULL, m_xyz );
\end_layout

\begin_layout Plain Layout

putpdb( "gcgc.md.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Line 7 creates an nab molecule; any nab creation method could be used here.
 Then a temporary pdb file is created, and this is used to generate a NAB
 molecule that can be used for force-field calculations (line 9).
 Lines 11-13 allocate some memory, and fill the coordinate array with the
 molecular position.
 Lines 15-17 initialize the force field routine, and call it once to get
 the initial energy.
 The atom expression "::ZZZ" will match no atoms, so that there will be
 no restraints on the atoms; hence the fourth argument to 
\family sans
mme_init
\family default
 can just be a place-holder, since there are no reference positions for
 this example.
 Minimization takes place at line 21, which will call 
\family sans
mme
\family default
 repeatedly, and which also arranges for its own printout of results.
 Finally, in lines 25-28, a short (1000-step) molecular dynamics run is
 made.
 Note the the initialization routine 
\family sans
mme_init
\family default
 
\shape italic
must
\shape default
 be called before calling the evaluation routines 
\family sans
mme
\family default
 or 
\family sans
md
\family default
.
\end_layout

\begin_layout Standard
Elaboration of the the above scheme is generally straightforward.
 For example, a simulated annealing run in which the target temperature
 is slowly reduced to zero could be written as successive calls to 
\family sans
mm_options
\family default
 (setting the 
\family sans
temp0
\family default
 parameter) and 
\family sans
md
\family default
 (to run a certain number of steps with the new target temperature.) Note
 also that routines other than 
\family sans
mme
\family default
 could be sent to 
\family sans
conjgrad
\family default
 and 
\family sans
md
\family default
: any routine that takes the same three arguments and returns a float function
 value could be used.
 In particular, the routines 
\family sans
db_viol
\family default
 (to get violations of distance bounds from a bounds matrix) or 
\family sans
mme4
\family default
 (to compute molecular mechanics energies in four spatial dimensions) could
 be used here.
 Or, you can write your own 
\family sans
nab
\family default
 routine to do this as well.
 For some examples, see the 
\shape italic
gbrna
\shape default
, 
\shape italic
gbrna_long
\shape default
 and 
\shape italic
rattle_md
\shape default
 programs in the 
\family sans
$AMBERCLASSICHOME/test/nab
\family default
 directory.
\end_layout

\begin_layout Chapter

\series bold
NAB: Sample programs
\end_layout

\begin_layout Standard
This chapter provides a variety of examples that use the basic NAB functionality
 described in earlier chapters to solve interesting molecular manipulation
 problems.
 Our hope is that the ideas and approaches illustrated here will facilitate
 construction of similar programs to solve other problems.
\end_layout

\begin_layout Section

\series bold
Duplex Creation Functions
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides a variety of functions for creating Watson/Crick duplexes.
 A short description of four of them is given in this section.
 All four of these functions are written in 
\family sans
nab
\family default
 and the details of their implementation is covered in the section 
\series bold
Creating Watson/Crick Duplexes
\series default
 of the 
\series bold
User Manual
\series default
.
 You should also look at the function 
\family sans
fd_helix()
\family default
 to see how to create duplex helices that correspond to fibre-diffraction
 models.
 As with the PERL language, "there is more than one way to do it."
\end_layout

\begin_layout LyX-Code

\family sans
molecule bdna
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bdna
\end_layout

\end_inset

( string seq );
\end_layout

\begin_layout LyX-Code

\family sans
string wc_complement
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wc
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

complement
\end_layout

\end_inset

( string seq, string rlib, string rlt );
\end_layout

\begin_layout LyX-Code

\family sans
molecule wc_helix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wc
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

helix
\end_layout

\end_inset

( string seq, string rlib, string natype, string cseq, string crlib, 
\end_layout

\begin_layout LyX-Code
 
\family sans
   string cnatype, float xoffset, float incl, float twist, float rise, string
 options );
\end_layout

\begin_layout LyX-Code

\family sans
molecule dg_helix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
dg
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

helix
\end_layout

\end_inset

( string seq, string rlib, string natype,
\end_layout

\begin_layout LyX-Code
 
\family sans
   string cseq, string crlib, string cnatype, float xoffset, float incl,
 float twist, float rise,
\end_layout

\begin_layout LyX-Code
 
\family sans
   string options );
\end_layout

\begin_layout LyX-Code

\family sans
molecule wc_basepair
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wc
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
_
\end_layout

\end_inset

basepair
\end_layout

\end_inset

( residue res, residue cres );
\end_layout

\begin_layout Standard
bdna() converts the character string 
\family sans
seq
\family default
 containing one or more 
\family sans
A
\family default
, 
\family sans
C
\family default
, 
\family sans
G
\family default
 or 
\family sans
T
\family default
s (or their lower case equivalents) into a uniform ideal Watson/Crick B-form
 DNA duplex.
 Each basepair has an X-offset of 2.25 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

, an inclination of -4.96 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 and a helical step of 3.38 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{A}
\end_layout

\end_inset

 rise and 36.0o twist.
 The first character of 
\family sans
seq
\family default
 is the 5' base of the strand 
\family sans
"sense"
\family default
 of the molecule returned by 
\family sans
bdna()
\family default
.
 The other strand is called 
\family sans
"anti"
\family default
.
 The phosphates of the two 5' bases have been replaced by hydrogens and
 and hydrogens have been added to the two 
\family sans
O3'
\family default
 atoms of the three prime bases.
 
\family sans
bdna()
\family default
 returns 
\family sans
NULL
\family default
 if it can not create the molecule.
\end_layout

\begin_layout Standard

\family sans
wc_complement()
\family default
 returns a 
\family sans
string
\family default
 that is the Watson/Crick complement of its argument 
\family sans
seq
\family default
.
 Each 
\family sans
C
\family default
, 
\family sans
G
\family default
, 
\family sans
T
\family default
 (
\family sans
U
\family default
) in 
\family sans
seq
\family default
 is replaced by 
\family sans
G
\family default
, 
\family sans
C
\family default
 and 
\family sans
A
\family default
.
 The replacements for 
\family sans
A
\family default
 depends if 
\family sans
rlt
\family default
 is DNA or RNA.
 If it is DNA, 
\family sans
A
\family default
 is replaced by 
\family sans
T
\family default
.
 If it is RNA 
\family sans
A
\family default
 is replaced by 
\family sans
U
\family default
.
 
\family sans
wc_complement()
\family default
 considers lower case and upper case letters to be the same and always returns
 upper case letters.
 
\family sans
wc_complement()
\family default
 returns 
\family sans
NULL
\family default
 on error.
 Note that the while the orientations of the argument string and the returned
 string are opposite, their absolute orientations are 
\shape italic
undefined
\shape default
 until they are used to create a molecule.
\end_layout

\begin_layout Standard

\family sans
wc_helix()
\family default
 creates a uniform duplex from its arguments.
 The two strands of the returned 
\family sans
molecule
\family default
 are called 
\family sans
"sense"
\family default
 and 
\family sans
"anti"
\family default
.
 The two sequences, 
\family sans
seq
\family default
 and 
\family sans
cseq
\family default
 must specify Watson/Crick base pairs.
 Note the that must be specified as 
\shape italic
lower-case
\shape default
 strings, such as "ggact".
 The nucleic acid type ( DNA or RNA ) of the sense strand is specified by
 
\family sans
natype
\family default
 and of the complementary strand 
\family sans
cseq
\family default
 by 
\family sans
cnatype
\family default
.
 Two residue libraries—
\family sans
rlib
\family default
 and 
\family sans
crlib
\family default
— permit creation of DNA:RNA heteroduplexes.
 If either 
\family sans
seq
\family default
 or 
\family sans
cseq
\family default
 (but not both) is 
\family sans
NULL
\family default
 only the specified strand of what would have been a uniform duplex is created.
 The 
\family sans
options
\family default
 string contains some combination of the strings "s5", "s3", "a5" and "a3";
 these indicate which (if any) of the ends of the helices should be "capped"
 with hydrogens attached to the O5' atom (in place of a phosphate) if "s5"
 or "a5" is specified, and a proton added to the O3' position if "s3" or
 "a3" is specified.
 A blank string indicates no capping, which would be appropriate if this
 section of helix were to be inserted into a larger molecule.
 The string "s5a5s3a3" would cap the 5' and 3' ends of both the "sense"
 and "anti" strands, leading to a chemically complete molecule.
 
\family sans
wc_helix()
\family default
 returns 
\family sans
NULL
\family default
 on error.
\end_layout

\begin_layout Standard

\family sans
dg_helix()
\family default
 is the functional equivalent of 
\family sans
wc_helix()
\family default
 but with the backbone geometry minimized via a distance constraint error
 function.
 
\family sans
dg_helix()
\family default
 takes the same arguments as 
\family sans
wc_helix()
\family default
.
\end_layout

\begin_layout Standard

\family sans
wc_basepair()
\family default
 assembles two nucleic acid residues (assumed to be in a standard orientation)
 into a two stranded molecule containing one Watson/Crick base pair.
 The two strands of the new molecule are 
\family sans
"sense"
\family default
 and 
\family sans
"anti"
\family default
.
 It returns 
\family sans
NULL
\family default
 on error.
\end_layout

\begin_layout Section

\series bold
nab and Distance Geometry
\end_layout

\begin_layout Standard
Distance geometry is a method which converts a molecule represented as a
 set of interatomic distances and related information into a 3-D structure.
 
\family sans
nab
\family default
 has several builtin functions that are used together to provide metric
 matrix distance geometry.
 
\family sans
nab
\family default
 also provides the 
\family sans
bounds
\family default
 type for holding a molecule's distance geometry information.
 A 
\family sans
bounds
\family default
 object contains the molecule's interatomic distance bounds matrix and a
 list of its chiral centers and their volumes.
 
\family sans
nab
\family default
 uses chiral centers with a volume of 
\family sans
0
\family default
 to enforce planarity.
\end_layout

\begin_layout Standard
Distance geometry has several advantages.
 It is unique in its power to create structures from very incomplete description
s.
 It easily incorporates 
\begin_inset Quotes eld
\end_inset

low resolution structural data
\begin_inset Quotes erd
\end_inset

 such as that derived from chemical probing since these kinds of experiments
 generally return only distance bounds.
 And it also provides an elegant method by which structures may be described
 functionally.
\end_layout

\begin_layout Standard
The 
\family sans
nab
\family default
 distance geometry package is described more fully in the section 
\series bold
NAB Language Reference
\series default
.
 Generally, the function 
\family sans
newbounds()
\family default
 creates and returns a 
\family sans
bounds
\family default
 object corresponding to the molecule 
\family sans
mol
\family default
.
 This object contains two things—a distance bounds matrix containing initial
 upper and lower bounds for every pair of atoms in 
\family sans
mol
\family default
 and a initial list of the molecules chiral centers and their volumes.
 Once a 
\family sans
bounds
\family default
 object has been initialized, the modeller uses functions from the middle
 of the distance geometry function list to tighten, loosen or set other
 distance bounds and chiralities that correspond to experimental measurements
 or parts of the model's hypothesis.
 The four functions 
\family sans
andbounds()
\family default
, 
\family sans
orbounds()
\family default
, 
\family sans
setbounds
\family default
 and 
\family sans
useboundsfrom()
\family default
 work in similar fashion.
 Each uses two atom expressions to select pairs of atoms from 
\family sans
mol
\family default
.
 In 
\family sans
andbounds()
\family default
, the current distance bounds of each pair are compared against 
\family sans
lb
\family default
 and 
\family sans
ub
\family default
 and are replaced by 
\family sans
lb
\family default
, 
\family sans
ub
\family default
 if they represent tighter bounds.
 
\family sans
orbounds()
\family default
 replaces the current bounds of each selected pair, if 
\family sans
lb
\family default
, 
\family sans
ub
\family default
 represent looser bounds.
 
\family sans
setbounds()
\family default
 sets the bounds of all selected pairs to 
\family sans
lb
\family default
, 
\family sans
ub
\family default
.
 
\family sans
useboundsfrom()
\family default
 sets the bounds between each atom selected in the first expression to a
 percentage of the distance between the atoms selected in the second atom
 expression.
 If the two atom expressions select the same atoms from the same molecule,
 the bounds between all the atoms selected will be constrained to the current
 geometry.
 
\family sans
setchivol()
\family default
 takes four atom expressions that must select exactly four atoms and sets
 the volume of the tetrahedron enclosed by those atoms to 
\family sans
vol
\family default
.
 Setting 
\family sans
vol
\family default
 to 
\family sans
0
\family default
 forces those atoms to be planar.
 
\family sans
getchivol()
\family default
 returns the chiral volume of the tetrahedron described by the four points.
\end_layout

\begin_layout Standard
After all experimental and model constraints have been entered into the
 
\family sans
bounds
\family default
 object, the function 
\family sans
tsmooth()
\family default
 applies a process called 
\begin_inset Quotes eld
\end_inset

triangle smoothing
\begin_inset Quotes erd
\end_inset

 to them.
 This tests each triple of distance bounds to see if they can form a triangle.
 If they can not form a triangle then the distance bounds do not even represent
 a Euclidean object let alone a 3-D one.
 If this occurs, 
\family sans
tsmooth()
\family default
 quits and returns a 
\family sans
1
\family default
 indicating failure.
 If all triples can form triangles, 
\family sans
tsmooth()
\family default
 returns a 
\family sans
0
\family default
.
 Triangle smoothing pulls in the large upper bounds.
 After all, the maximum distance between two atoms can not exceed the sum
 of the upper bounds of the shortest path between them.
 Triangle smoothing can also increase lower bounds, but this process is
 much less effective as it requires one or more large lower bounds to begin
 with.
\end_layout

\begin_layout Standard
The function 
\family sans
embed()
\family default
 takes the smoothed bounds and converts them into a 3-D object.
 This process is called 
\begin_inset Quotes eld
\end_inset

embedding
\begin_inset Quotes erd
\end_inset

.
 It does this by choosing a random distance for each pair of atoms within
 the bounds of that pair.
 Sometimes the bounds simply do not represent a 3-D object and 
\family sans
embed()
\family default
 fails, returning the value 
\family sans
1
\family default
.
 This is rare and usually indicates the that the distance bounds matrix
 part of the 
\family sans
bounds
\family default
 object contains errors.
 If the distance set does embed, 
\family sans
conjgrad()
\family default
 can subject newly embedded coordinates to conjugate gradient refinement
 against the distance and chirality information contained in 
\family sans
bounds
\family default
.
 The refined coordinates can replace the current coordinates of the molecule
 in 
\family sans
mol
\family default
.
 
\family sans
embed()
\family default
 returns a 
\family sans
0
\family default
 on success and 
\family sans
conjgrad()
\family default
 returns an exit code explained further in the 
\series bold
Language Reference
\series default
 section of this manual.
 The call to 
\family sans
embed()
\family default
 is usually placed in a loop with each new structure saved after each call
 to see the diversity of the structures the bounds represent.
\end_layout

\begin_layout Standard
In addition to the explicit bounds manipulation functions, 
\family sans
nab
\family default
 provides an implicit way of setting bounds between interacting residues.
 The function 
\family sans
setboundsfromdb()
\family default
 is for use in creating distance and chirality bounds for nucleic acids.
 
\family sans
setboundsfromdb()
\family default
 takes as an argument two atom expressions selecting two residues, the name
 of a database containing bounds information, and a number which dictates
 the tightness of the bounds.
 For instance, if the database 
\shape italic
bdna.stack.db
\shape default
 is specified, 
\family sans
setboundsfromdb()
\family default
 sets the bounds between the two residues to what they would be if they
 were stacked in strand in a typical Watson-Crick B-form duplex.
 Similarly, if the database 
\shape italic
arna.basepair.db
\shape default
 is specified, 
\family sans
setboundsfromdb()
\family default
 sets the bounds between the two residues to what they would be if the two
 residues form a typical Watson-Crick basepair in an A-form helix.
\end_layout

\begin_layout Subsection

\series bold
Refine DNA Backbone Geometry
\end_layout

\begin_layout Standard
As mentioned previously, 
\family sans
wc_helix()
\family default
 performs rigid body transformations on residues and does not correct for
 poor backbone geometry.
 Using distance geometry, several techniques are available to correct the
 backbone geometry.
 In program 7, an 8-basepair dna sequence is created using 
\family sans
wc_helix()
\family default
.
 A new bounds object is created on line 14, which automatically sets all
 the 1-2, 1-3, and 1-4 distance bounds information according the geometry
 of the model.
 Since this molecule was created using 
\family sans
wc_helix()
\family default
, the O3'-P distance between adjacent stacked residues is often not the
 optimal 1.595 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
r{ }
\end_layout

\end_inset

, and hence, the 1-2, 1-3, and 1-4, distance bounds set by 
\family sans
newbounds()
\family default
 are incorrect.
 We want to preserve the position of the nucleotide bases, however, since
 this is the helix whose backbone we wish to minimize.
 Hence the call to 
\family sans
useboundsfrom()
\family default
 on line 17 which sets the bounds from every atom in each nucleotide base
 to the actual distance to every other atom in every other nucleotide base.
 
\shape italic
In general, the likelihood of a distance geometry refinement to satisfy
 a given bounds criteria is proportional to the number of ( consistent )
 bounds set supporting that criteria
\shape default
.
 In other words, the more bounds that are set supporting a given conformation,
 the greater the chance that conformation will resolve after the refinement.
 An example of this concept is the use of 
\family sans
useboundsfrom()
\family default
 in line 17, which works to preserve our rigid helix conformation of all
 the nucleotide base atoms.
\end_layout

\begin_layout Standard
We can correct the backbone geometry by overwriting the erroneous bounds
 with more appropriate bounds.
 In lines 19-29, all the 1-2, 1-3, and 1-4 bounds involving the O3'-P connection
 between strand 1 residues are set to that which would be appropriate for
 an idealized phosphate linkage.
 Similarly, in lines 31-41, all the 1-2, 1-3, and 1-4 bounds involving the
 O3'-P connection among strand 2 residues are set to an idealized conformation.
 This technique is effective since all the 1-2, 1-3, and 1-4 distance bounds
 created by 
\family sans
newbounds()
\family default
 include those of the idealized nucleotides in the nucleic acid libraries
 
\family sans
dna.amber94.rlb
\family default
, 
\family sans
rna.amber94.rlb
\family default
, 
\shape italic
etc.

\shape default
 contained in 
\family sans
reslib
\family default
.
 Hence, by setting these bounds and refining against the distance energy
 function, we are spreading the 'error' across the backbone, where the 'error'
 is the departure from the idealized sugar conformation and idealized phosphate
 linkage.
\end_layout

\begin_layout Standard
On line 43, we smooth the bounds matrix, and on line 44 we give a substantial
 penalty for deviating from a 3-D refinement by setting k4d=
\begin_inset Formula $4.0$
\end_inset

.
 Notice that there is no need to embed the molecule in this program, as
 the actual coordinates are sufficient for any refinement.

\shape italic
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

 //  Program 7 - refine backbone geometry using distance function
\end_layout

\begin_layout Plain Layout

 molecule m;
\end_layout

\begin_layout Plain Layout

 bounds b;
\end_layout

\begin_layout Plain Layout

 string  seq, cseq;
\end_layout

\begin_layout Plain Layout

 int i;
\end_layout

\begin_layout Plain Layout

 float xyz[ dynamic ], fret;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 seq = "acgtacgt";
\end_layout

\begin_layout Plain Layout

 cseq = wc_complement( "acgtacgt", "", "dna" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 m = wc_helix( seq, "", "dna", cseq, "",
\end_layout

\begin_layout Plain Layout

               "dna", 2.25, -4.96, 36.0, 3.38, "" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 b = newbounds(m, "");
\end_layout

\begin_layout Plain Layout

 allocate xyz[ 4*m.natoms ];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 useboundsfrom(b, m, "::??,H?[^T']", m, "::??,H?[^T']", 0.0 );
\end_layout

\begin_layout Plain Layout

 for ( i = 1; i < m.nresidues/2 ; i = i + 1 ){
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:O3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:P",i+1),   1.595,1.595);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:O3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:O5'",i+1), 2.469,2.469);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:C3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:P",i+1),   2.609,2.609);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:O3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:O1P",i+1), 2.513,2.513);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:O3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:O2P",i+1), 2.515,2.515);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:C4'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:P",i+1),   3.550,4.107);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:C2'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:P",i+1),   3.550,4.071);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:C3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:O1P",i+1), 3.050,3.935);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:C3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:O2P",i+1), 3.050,4.004);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:C3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:O5'",i+1), 3.050,3.859);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("1:%d:O3'",i),
\end_layout

\begin_layout Plain Layout

                       sprintf("1:%d:C5'",i+1), 3.050,3.943);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:O3'",i),   1.595,1.595);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:O5'",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:O3'",i),   2.469,2.469);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:C3'",i),   2.609,2.609);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:O1P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:O3'",i),   2.513,2.513);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:O2P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:O3'",i),   2.515,2.515);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:C4'",i),   3.550,4.107);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:C2'",i),   3.550,4.071);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:O1P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:C3'",i),   3.050,3.935);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:O2P",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:C3'",i),   3.050,4.004);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:O5'",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:C3'",i),   3.050,3.859);
\end_layout

\begin_layout Plain Layout

        setbounds(b,m, sprintf("2:%d:C5'",i+1),
\end_layout

\begin_layout Plain Layout

                       sprintf("2:%d:O3'",i),   3.050,3.943);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

tsmooth( b, 0.0005 );
\end_layout

\begin_layout Plain Layout

dg_options(b, "seed=33333, gdist=0, ntpr=100, k4d=4.0" );
\end_layout

\begin_layout Plain Layout

setxyzw_from_mol( m, NULL, xyz );
\end_layout

\begin_layout Plain Layout

conjgrad( xyz, 4*m.natoms, fret, db_viol, 0.1, 10., 500 );
\end_layout

\begin_layout Plain Layout

setmol_from_xyzw( m, NULL, xyz );
\end_layout

\begin_layout Plain Layout

putpdb( "acgtacgt.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The approach of Program 7 is effective but has a disadvantage in that it
 does not scale linearly with the number of atoms in the molecule.
 In particular, 
\family sans
tsmooth()
\family default
 and 
\family sans
conjgrad()
\family default
 require extensive CPU cycles for large numbers of residues.
 For this reason, the function 
\family sans
dg_helix()
\family default
 was created.
 
\family sans
dg_helix()
\family default
 takes uses the same method of Program 7, but employs a 3-basepair helix
 template which traverses the new helix as it is being constructed.
 In this way, the helix is built in a piecewise manner and the maximum number
 of residues considered in each refinement is less than or equal to six.
 This is the preferred method of helix construction for large, idealized
 canonical duplexes.
\end_layout

\begin_layout Subsection

\series bold
RNA Pseudoknots
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/case/nabc/doc/pknot.eps
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig.pknot1"

\end_inset

Single-stranded RNA 
\emph on
(top)
\emph default
 folded into a pseudoknot 
\emph on
(bottom).

\emph default
 The black and dark grey base pairs can be stacked.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In addition to the standard helix generating functions, 
\family sans
nab
\family default
 provides extensive support for generating initial structures from low structura
l information.
 As an example, we will describe the construction of a model of an RNA pseudokno
t based on a small number of secondary and tertiary structure descriptions.
 Shen and Tinoco (
\shape italic
J.
 Mol.
 Biol.

\shape default
 
\series bold
247,
\series default
 963-978, 1995) used the molecular mechanics program X-PLOR to determine
 the three dimensional structure of a 34 nucleotide RNA sequence that folds
 into a pseudoknot.
 This pseudoknot promotes frame shifting in Mouse Mammary Tumor Virus.
 A pseudoknot is a single stranded nucleic acid molecule that contains two
 improperly nested hairpin loops as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig.pknot1"

\end_inset

.
 NMR distance and angle constraints were converted into a three dimensional
 structure using a two stage restrained molecular dynamics protocol.
 Here we show how a three-dimensional model can be constructed using just
 a few key features derived from the NMR investigation.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 8 - create a pseudoknot using distance geometry
\end_layout

\begin_layout Plain Layout

molecule m;  
\end_layout

\begin_layout Plain Layout

float   xyz[ dynamic ],f[ dynamic ],v[ dynamic ];
\end_layout

\begin_layout Plain Layout

bounds  b;
\end_layout

\begin_layout Plain Layout

int     i, seqlen;
\end_layout

\begin_layout Plain Layout

float   fret;
\end_layout

\begin_layout Plain Layout

string  seq, opt;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

seq = "GCGGAAACGCCGCGUAAGCG";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

seqlen = length(seq);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = link_na("1", seq, "", "RNA", "35");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

allocate xyz[ 4*m.natoms ];
\end_layout

\begin_layout Plain Layout

allocate f[ 4*m.natoms ];
\end_layout

\begin_layout Plain Layout

allocate v[ 4*m.natoms ];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

b = newbounds(m, "");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for ( i = 1; i <= seqlen; i = i + 1) {
\end_layout

\begin_layout Plain Layout

        useboundsfrom(b, m, sprintf("1:%d:??,H?[^'T]", i), m,
\end_layout

\begin_layout Plain Layout

        sprintf("1:%d:??,H?[^'T]", i), 0.0 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:1:",  "1:2:",  "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:2:",  "1:3:",  "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:3:",  "1:18:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:18:", "1:19:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:19:", "1:20:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:8:",  "1:9:",  "arna.stack.db",    1.0); 
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:9:",  "1:10:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:10:", "1:11:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:11:", "1:12:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:12:", "1:13:", "arna.stack.db",    1.0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:1:",  "1:13:", "arna.basepair.db", 1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:2:",  "1:12:", "arna.basepair.db", 1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:3:",  "1:11:", "arna.basepair.db", 1.0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:8:",  "1:20:", "arna.basepair.db", 1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:9:",  "1:19:", "arna.basepair.db", 1.0);
\end_layout

\begin_layout Plain Layout

setboundsfromdb(b, m, "1:10:", "1:18:", "arna.basepair.db", 1.0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

tsmooth(b, 0.0005);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

opt = "seed=571, gdist=0, ntpr=50, k4d=2.0, randpair=5., sqviol=1";
\end_layout

\begin_layout Plain Layout

dg_options( b, opt );
\end_layout

\begin_layout Plain Layout

embed(b, xyz );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

conjgrad( xyz, 4*m.natoms, fret, db_viol, 0.1, 10., 500 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setmol_from_xyzw( m, NULL, xyz );
\end_layout

\begin_layout Plain Layout

putpdb( "rna_pseudoknot.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Program 8 uses distance geometry followed by minimization and simulated
 annealing to create a model of a pseudoknot.
 Distance geometry code begins in line 20 with the call to 
\family sans
newbounds()
\family default
 and ends on line 53 with the call to 
\family sans
embed()
\family default
.
 The structure created with distance geometry is further refined with molecular
 dynamics in lines 58-74.
 Note that very little structural information is given - only connectivity
 and general base-base interactions.
 The stacking and base-pair interactions here are derived from NMR evidence,
 but in other cases might arise from other sorts of experiments, or as a
 model hypothesis to be tested.
\end_layout

\begin_layout Standard
The 20-base RNA sequence is defined on line 9.
 The molecule itself is created with the 
\family sans
link_na()
\family default
 function call which creates an extended conformation of the RNA sequence
 and caps the 5' and 3' ends.
 Lines 15-17 define arrays that will be used in the simulated annealing
 of the structure.
 The bounds object is created in line 19 which automatically sets the 1-2,
 1-3, and 1-4 distance bounds in the molecule.
 The loop in lines 21-24 sets the bounds of each atom in each residue base
 to the actual distance to every other atom in the same base.
 This has the effect of enforcing the planarity of the base by treating
 the base somewhat like a rigid body.
 In lines 26-44, bounds are set according to information stored in a database.
 The 
\family sans
setboundsfromdb()
\family default
 call sets the bounds from all the atoms in the two specified residues to
 a 
\begin_inset Formula $1.0$
\end_inset

 multiple of the standard deviation of the bounds distances in the specified
 database.
 Specifically, line 26 sets the bounds between the base atoms of the first
 and second residues of strand 1 to be within one standard deviation of
 a 
\shape italic
typical
\shape default
 aRNA stacked pair.
 Similarly, line 38 sets the bounds between residues 1 and 13 to be that
 of 
\shape italic
typical
\shape default
 Watson-Crick basepairs.
 For a description of the 
\family sans
setboundsfromdb()
\family default
 function, see Chapter 1.
\end_layout

\begin_layout Standard
Line 46 smooths the bounds matrix, by attempting to adjust any sets of bounds
 that violate the triangle equality.
 Lines 48-49 initialize some distance geometry variables by setting the
 random number generator seed, declaring the type of distance distribution,
 how often to print the energy refinement process, declaring the penalty
 for using a 4th dimension in refinement, and which atoms to use to form
 the initial metric matrix.
 The coordinates are calculated and embedded into a 3D coordinate array,
 
\shape italic
xyz
\shape default
 by the 
\family sans
embed()
\family default
 function call on line 50.
\end_layout

\begin_layout Standard
The coordinates 
\shape italic
xyz
\shape default
 are subject to conjugate gradient refinements in line 52.
 Line 54 replaces the old molecular coordinates with the new refined ones,
 and lastly, on line 55, the molecule is saved as "rna_pseudoknot.pdb".
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/case/nabc/doc/rnaknot.png
	lyxscale 80
	width 60text%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig.pknot2"

\end_inset

Folded RNA pseudoknot.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The resulting structure of Program 8 is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig.pknot2"

\end_inset

.
 This structure had an final total energy of 46 units.
 The helical region, shown as polytubes, shows stacking and wc-pairing interacti
ons and a well-defined right-handed helical twist.
 Of course, good modeling of a "real" pseudoknot would require putting in
 more constraints, but this example should illustrate how to get started
 on problems like this.
\end_layout

\begin_layout Subsection

\series bold
NMR refinement for a protein
\end_layout

\begin_layout Standard
Distance geometry techniques are often used to create starting structures
 in NMR refinement.
 Here, in addition to the covalent connections, one makes use of a set of
 distance and torsional restraints derived from NMR data.
 While NAB is not (yet?) a fully-functional NMR refinement package, it has
 enough capabilities to illustrate the basic ideas, and could be the starting
 point for a flexible procedure.
 Here we give an illustration of how the rough structure of a protein can
 be determined using distance geometry and NMR distance constraints; the
 structures obtained here would then be candidates for further refinement
 in programs like X-plor or Amber.
\end_layout

\begin_layout Standard
The program below illustrates a general procedure for a primarily helical
 DNA binding domain.
 Lines 15-22 just construct the sequence in an extended conformation, such
 that bond lengths and angles are correct, but none of the torsions are
 correct.
 The bond lengths and angles are used by 
\family sans
newbounds()
\family default
 to construct the "covalent" part of the bounds matrix.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

//  Program 8a.
 General driver routine to do distance geometry 
\backslash
fC
\end_layout

\begin_layout Plain Layout

//    on proteins, with DYANA-like distance restraints.
\backslash
fC
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define MAXCOORDS 12000
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

molecule m;
\end_layout

\begin_layout Plain Layout

atom    a;
\end_layout

\begin_layout Plain Layout

bounds    b;
\end_layout

\begin_layout Plain Layout

int    ier,i, numstrand, ires,jres;
\end_layout

\begin_layout Plain Layout

float    fret, rms, ub;
\end_layout

\begin_layout Plain Layout

float    xyz[ MAXCOORDS ], f[ MAXCOORDS ], v[ MAXCOORDS ];
\end_layout

\begin_layout Plain Layout

file    boundsf;
\end_layout

\begin_layout Plain Layout

string  iresname,jresname,iat,jat,aex1,aex2,aex3,aex4,line,dgopts,seq;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  sequence of the mrf2 protein:
\end_layout

\begin_layout Plain Layout

seq = "RADEQAFLVALYKYMKERKTPIERIPYLGFKQINLWTMFQAAQKLGGYETITARRQWKHIY"
\end_layout

\begin_layout Plain Layout

    + "DELGGNPGSTSAATCTRRHYERLILPYERFIKGEEDKPLPPIKPRK";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  build this sequence in an extended conformation, and construct a bounds
\end_layout

\begin_layout Plain Layout

//     matrix just based on the covalent structure:
\end_layout

\begin_layout Plain Layout

m = linkprot( "A", seq, "" );
\end_layout

\begin_layout Plain Layout

b = newbounds( m, "" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  read in constraints, updating the bounds matrix using "andbounds":
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  distance constraints are basically those from Y.-C.
 Chen, R.H.
  Whitson
\end_layout

\begin_layout Plain Layout

//    Q.
 Liu, K.
 Itakura and Y.
 Chen, "A novel DNA-binding motif shares
\end_layout

\begin_layout Plain Layout

//    structural homology to DNA replication and repair nucleases and
\end_layout

\begin_layout Plain Layout

//    polymerases,"  Nature Sturct.
 Biol.
 5:959-964 (1998).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

boundsf = fopen( "mrf2.7col", "r" );
\end_layout

\begin_layout Plain Layout

while( line = getline( boundsf ) ){
\end_layout

\begin_layout Plain Layout

    sscanf( line, "%d %s %s %d %s %s %lf", ires, iresname, iat,
\end_layout

\begin_layout Plain Layout

        jres, jresname, jat, ub );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//   translations for DYANA-style pseudoatoms:
\end_layout

\begin_layout Plain Layout

    if( iat == "HN" ){ iat = "H"; }
\end_layout

\begin_layout Plain Layout

    if( jat == "HN" ){ jat = "H"; }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if( iat == "QA" ){ iat = "CA"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QA" ){ jat = "CA"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QB" ){ iat = "CB"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QB" ){ jat = "CB"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QG" ){ iat = "CG"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QG" ){ jat = "CG"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QD" ){ iat = "CD"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QD" ){ jat = "CD"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QE" ){ iat = "CE"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QE" ){ jat = "CE"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QQG" ){ iat = "CB"; ub += 1.8; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QQG" ){ jat = "CB"; ub += 1.8; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QQD" ){ iat = "CG"; ub += 1.8; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QQD" ){ jat = "CG"; ub += 1.8; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QG1" ){ iat = "CG1"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QG1" ){ jat = "CG1"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QG2" ){ iat = "CG2"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QG2" ){ jat = "CG2"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QD1" ){ iat = "CD1"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QD1" ){ jat = "CD1"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QD2" ){ iat = "ND2"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QD2" ){ jat = "ND2"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( iat == "QE2" ){ iat = "NE2"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

    if( jat == "QE2" ){ jat = "NE2"; ub += 1.0; }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    aex1 = ":" + sprintf( "%d", ires) + ":" + iat;
\end_layout

\begin_layout Plain Layout

    aex2 = ":" + sprintf( "%d", jres) + ":" + jat;
\end_layout

\begin_layout Plain Layout

    andbounds( b, m, aex1, aex2, 0.0, ub );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

fclose( boundsf );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  add in helical chirality constraints to force right-handed helices:
\end_layout

\begin_layout Plain Layout

//    (hardwire in locations 1-16, 36-43, 88-92)
\end_layout

\begin_layout Plain Layout

for( i=1; i<=12; i++){
\end_layout

\begin_layout Plain Layout

    aex1 = ":" + sprintf( "%d", i ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex2 = ":" + sprintf( "%d", i+1 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex3 = ":" + sprintf( "%d", i+2 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex4 = ":" + sprintf( "%d", i+3 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    setchivol( b, m, aex1, aex2, aex3, aex4, 7.0 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

for( i=36; i<=39; i++){
\end_layout

\begin_layout Plain Layout

    aex1 = ":" + sprintf( "%d", i ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex2 = ":" + sprintf( "%d", i+1 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex3 = ":" + sprintf( "%d", i+2 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex4 = ":" + sprintf( "%d", i+3 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    setchivol( b, m, aex1, aex2, aex3, aex4, 7.0 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

for( i=88; i<=89; i++){
\end_layout

\begin_layout Plain Layout

    aex1 = ":" + sprintf( "%d", i ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex2 = ":" + sprintf( "%d", i+1 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex3 = ":" + sprintf( "%d", i+2 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    aex4 = ":" + sprintf( "%d", i+3 ) + ":CA";
\end_layout

\begin_layout Plain Layout

    setchivol( b, m, aex1, aex2, aex3, aex4, 7.0 );
\end_layout

\begin_layout Plain Layout

}   
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

//  set up some options for the distance geometry calculation
\end_layout

\begin_layout Plain Layout

//   here use the random embed method: 
\end_layout

\begin_layout Plain Layout

dgopts = "ntpr=10000,rembed=1,rbox=300.,riter=250000,seed=8511135";
\end_layout

\begin_layout Plain Layout

dg_options( b, dgopts );
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

//  do triangle-smoothing on the bounds matrix, then embed:
\end_layout

\begin_layout Plain Layout

geodesics( b ); embed( b, xyz );
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

//  now do conjugate-gradient minimization on the resulting structures:
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

//  first, weight the chirality constraints heavily:
\end_layout

\begin_layout Plain Layout

dg_options( b, "ntpr=20, k4d=5.0, sqviol=0, kchi=50." );
\end_layout

\begin_layout Plain Layout

conjgrad( xyz, 4*m.natoms, fret, db_viol, 0.02, 1000., 300 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  next, squeeze out the fourth dimension, and increase penalties for
\end_layout

\begin_layout Plain Layout

//     distance violations:
\end_layout

\begin_layout Plain Layout

dg_options( b, "k4d=10.0, sqviol=1, kchi=50." );
\end_layout

\begin_layout Plain Layout

conjgrad( xyz, 4*m.natoms, fret, db_viol, 0.02, 100., 400 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//  transfer the coordinates from the "xyz" array to the molecule
\end_layout

\begin_layout Plain Layout

//  itself, and print out the violations:
\end_layout

\begin_layout Plain Layout

setmol_from_xyzw( m, NULL, xyz );
\end_layout

\begin_layout Plain Layout

dumpboundsviolations( stdout, b, 0.5 );
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

//  do a final short molecular-mechanics "clean-up":
\end_layout

\begin_layout Plain Layout

putpdb( m, "temp.pdb" );
\end_layout

\begin_layout Plain Layout

m = getpdb_prm( "temp.pdb", "leaprc.protein.ff14SB", "", 0 );
\end_layout

\begin_layout Plain Layout

setxyz_from_mol( m, NULL, xyz ); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mm_options( "cut=10.0" );
\end_layout

\begin_layout Plain Layout

mme_init( m, NULL, "::ZZZ", xyz, NULL );
\end_layout

\begin_layout Plain Layout

conjgrad( xyz, 3*m.natoms, fret, mme, 0.02, 100., 200 );
\end_layout

\begin_layout Plain Layout

setmol_from_xyz( m, NULL, xyz );
\end_layout

\begin_layout Plain Layout

putpdb( argv[3] + ".mm.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once the covalent bounds are created, the the bounds matrix is modified
 by constraints constructed from an NMR analysis program.
 This particular example uses the format of the DYANA program, but NAB could
 be easily modified to read in other formats as well.
 Here are a few lines from the 
\shape italic
mrf2.7col
\shape default
 file:
\end_layout

\begin_layout LyX-Code
1 ARG+ QB  2 ALA  QB  7.0
\end_layout

\begin_layout LyX-Code
4 GLU- HA 93 LYS+ QB  7.0
\end_layout

\begin_layout LyX-Code
5 GLN  QB  8 LEU  QQD 9.9
\end_layout

\begin_layout LyX-Code
5 GLN  HA  9 VAL  QQG 6.4
\end_layout

\begin_layout LyX-Code
85 ILE HA 92 ILE  QD1 6.0
\end_layout

\begin_layout LyX-Code
5 GLN  HN  1 ARG+ O   2.0
\end_layout

\begin_layout LyX-Code
5 GLN  N   1 ARG+ O   3.0
\end_layout

\begin_layout LyX-Code
6 ALA  HN  2 ALA  O   2.0
\end_layout

\begin_layout LyX-Code
6 ALA  N   2 ALA  O   3.0
\end_layout

\begin_layout Standard
The format should be self-explanatory, with the final number giving the
 upper bound.
 Code in lines 31-69 reads these in, and translates pseudo-atom codes like
 "QQD" into atom names.
 Lines 71-93 add in chirality constraints to ensure right-handed alpha-helices:
 distance constraints alone do not distinguish chirality, so additions like
 this are often necessary.
 The "actual" distance geometry steps take place in line 101, first by triangle-
smoothing the bounds, then by embedding them into a three-dimensional object.
 The structures at this point are actually generally quite bad, so "real-space"
 refinement is carried out in lines 103-112, and a final short molecular
 mechanics minimization in lines 119-126.
\end_layout

\begin_layout Standard
It is important to realize that many of the structures for the above scheme
 will get "stuck", and not lead to good structures for the complex.
 Helical proteins are especially difficult for this sort of distance geometry,
 since helices (or even parts of helices) start out left-handed, and it
 is not always possible to easily convert these to right-handed structures.
 For this particular example, (using different values for the 
\shape italic
seed
\shape default
 in line 97), we find that about 30-40% of the structures are "acceptable",
 in the sense that further refinement in Amber yields good structures.
\end_layout

\begin_layout Section

\series bold
Building Larger Structures
\end_layout

\begin_layout Standard
While the DNA duplex is locally rather stiff, many DNA molecules are sufficientl
y long that they can be bent into a wide variety of both open and closed
 curves.
 Some examples would be simple closed circles, supercoiled closed circles
 that have relaxed into circles with twists and the nucleosome core fragment
 where the duplex itself is wound into a short helix.
 This section shows how 
\family sans
nab
\family default
 can be used to 
\begin_inset Quotes eld
\end_inset

wrap
\begin_inset Quotes erd
\end_inset

 DNA around a curve.
 Three examples are provided: the first produces closed circles with or
 without supercoiling, the second creates a simple model of the nucleosome
 core fragment and the third shows how to wind a duplex around a more arbitrary
 open curve specified as a set of points.
 The examples are fairly general but do require that the curves be relatively
 smooth so that the deformation from a linear duplex at each step is small.
\end_layout

\begin_layout Standard
Before discussing the examples and the general approach they use, it will
 be helpful to define some terminology.
 The helical axis of a base pair is the helical axis defined by an ideal
 B-DNA duplex that contains that base pair.
 The base pair plane is the mean plane of both bases.
 The origin of a base pair is at the intersection the base pair's helical
 axis and its mean plane.
 Finally the rise is the distance between the origins of adjacent base pairs.
\end_layout

\begin_layout Standard
The overall strategy for wrapping DNA around a curve is to create the curve,
 find the points on the curve that contain the base pair origins, place
 the base pairs at these points, oriented so that their helical axes are
 tangent to the curve and finally rotate the base pairs so that they have
 the correct helical twist.
 In all the examples below, the points are chosen so that the rise is constant.
 This is by no means an absolute requirement, but it does simplify the calculati
ons needed to locate base pairs, and is generally true for the gently bending
 curves these examples are designed for.
 In examples 1 and 2, the curve is simple, either a circle or a helix, so
 the points that locate the base pairs are computed directly.
 In addition, the bases are rotated about their original helical axes so
 that they have the correct helical orientation before being placed on the
 curve.
\end_layout

\begin_layout Standard
However, this method is inadequate for the more complicated curves that
 can be handled by example 3.
 Here each base is placed on the curve so that its helical axis is aligned
 correctly, but its helical orientation with respect to the previous base
 is arbitrary.
 It is then rotated about its helical axis so that it has the correct twist
 with respect to the previous base.
\end_layout

\begin_layout Subsection

\series bold
Closed Circular DNA
\end_layout

\begin_layout Standard
This section describes how to use 
\family sans
nab
\family default
 to make closed circular duplex DNA with a uniform rise of 3.38 
\begin_inset Formula $\textrm{Å}$
\end_inset

.
 Since the distance between adjacent base pairs is fixed, the radius of
 the circle that forms the axis of the duplex depends only on the number
 of base pairs and is given by this rule:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
rad
\shape default
=
\shape italic
rise
\shape default
/(2sin(180/
\shape italic
nbp
\shape default
))
\end_layout

\begin_layout Standard
where 
\shape italic
nbp
\shape default
 is the number of base pairs.
 To see why this is so, consider the triangle below formed by the center
 of the circle and the centers of two adjacent base pairs.
 The two long sides are radii of the circle and the third side is the rise.
 Since the the base pairs are uniformly distributed about the circle the
 angle between the two radii is 360/
\shape italic
nbp
\shape default
.
 Now consider the right triangle in the top half of the original triangle.
 The angle at the center is 180/
\shape italic
nbp
\shape default
, the opposite side is 
\shape italic
rise/2
\shape default
 and 
\shape italic
rad
\shape default
 follows from the definition of sin.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/case/nabc/doc/dna.circle.eps
	width 50text%

\end_inset


\end_layout

\begin_layout Standard
In addition to the radius, the helical twist which is a function of the
 amount of supercoiling must also be computed.
 In a closed circular DNA molecule, the last base of the duplex must be
 oriented in such a way that a single helical step will superimpose it on
 the first base.
 In circles based on ideal B-DNA, with 10 bases/turn, this requires that
 the number of base pairs in the duplex be a multiple of 10.
 Supercoiling adds or subtracts one or more whole turns.
 The amount of supercoiling is specified by the 
\begin_inset Formula $\Delta linkingnumber$
\end_inset

 which is the number of extra turns to add or subtract.
 If the original circle had 
\shape italic
nbp
\shape default
/10 turns, the supercoiled circle will have 
\begin_inset Formula $nbp/10+\Delta lk$
\end_inset

 turns.
 As each turn represents 360o of twist and there are 
\shape italic
nbp
\shape default
 base pairs, the twist between base pairs is
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
(
\shape italic
nbp
\shape default
/10+
\begin_inset Formula $\Delta$
\end_inset


\shape italic
lk
\shape default
)
\begin_inset Formula $\times$
\end_inset

360/
\shape italic
nbp
\end_layout

\begin_layout Standard
At this point, we are ready to create models of circular DNA.
 Bases are added to model in three stages.
 Each base pair is created using the 
\family sans
nab
\family default
 builtin 
\family sans
wc_helix()
\family default
.
 It is originally in the XY plane with its center at the origin.
 This makes it convenient to create the DNA circle in the XZ plane.
 After the base pair has been created, it is rotated around its own helical
 axis to give it the proper twist, translated along the global X axis to
 the point where its center intersects the circle and finally rotated about
 the Y axis to move it to its final location.
 Since the first base pair would be both twisted about Z and rotated about
 Y 0o, those steps are skipped for base one.
 A detailed description follows the code.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 9 - Create closed circular DNA.
\end_layout

\begin_layout Plain Layout

#define RISE    3.38
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int     b, nbp, dlk;
\end_layout

\begin_layout Plain Layout

float       rad, twist, ttw;
\end_layout

\begin_layout Plain Layout

molecule    m, m1;
\end_layout

\begin_layout Plain Layout

matrix      matdx, mattw, matry;
\end_layout

\begin_layout Plain Layout

string      sbase, abase;
\end_layout

\begin_layout Plain Layout

int     getbase();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if( argc != 3 ){
\end_layout

\begin_layout Plain Layout

    fprintf( stderr, "usage: %s nbp dlk
\backslash

\backslash
n", argv[ 1 ] );
\end_layout

\begin_layout Plain Layout

    exit( 1 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

nbp = atoi( argv[ 2 ] );
\end_layout

\begin_layout Plain Layout

if( !nbp || nbp % 10 ){
\end_layout

\begin_layout Plain Layout

    fprintf( stderr,
\end_layout

\begin_layout Plain Layout

    "%s: Num.
 of base pairs must be multiple of 10
\backslash

\backslash
n",
\end_layout

\begin_layout Plain Layout

        argv[ 1 ] );
\end_layout

\begin_layout Plain Layout

    exit( 1 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

dlk = atoi( argv[ 3 ] );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

twist = ( nbp / 10 + dlk ) * 360.0 / nbp;
\end_layout

\begin_layout Plain Layout

rad = 0.5 * RISE / sin( 180.0 / nbp );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

matdx = newtransform( rad, 0.0, 0.0, 0.0, 0.0, 0.0 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = newmolecule();
\end_layout

\begin_layout Plain Layout

addstrand( m, "A" );
\end_layout

\begin_layout Plain Layout

addstrand( m, "B" );
\end_layout

\begin_layout Plain Layout

ttw = 0.0;
\end_layout

\begin_layout Plain Layout

for( b = 1; b <= nbp; b = b + 1 ){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    getbase( b, sbase, abase );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    m1 = wc_helix(
\end_layout

\begin_layout Plain Layout

        sbase, "", "dna", abase, "",
\end_layout

\begin_layout Plain Layout

        "dna", 2.25, -4.96, 0.0, 0.0 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if( b > 1 ){
\end_layout

\begin_layout Plain Layout

        mattw = newtransform( 0.,0.,0.,0.,0.,ttw );
\end_layout

\begin_layout Plain Layout

        transformmol( mattw, m1, NULL );
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    transformmol( matdx, m1, NULL );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if( b > 1 ){
\end_layout

\begin_layout Plain Layout

        matry = newtransform(
\end_layout

\begin_layout Plain Layout

            0.,0.,0.,0.,-360.*(b-1)/nbp,0.
 );
\end_layout

\begin_layout Plain Layout

        transformmol( matry, m1, NULL );
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mergestr( m, "A", "last", m1, "sense", "first" );
\end_layout

\begin_layout Plain Layout

    mergestr( m, "B", "first", m1, "anti", "last" );
\end_layout

\begin_layout Plain Layout

    if( b > 1 ){
\end_layout

\begin_layout Plain Layout

        connectres( m, "A", b - 1, "O3'", b, "P" );
\end_layout

\begin_layout Plain Layout

        connectres( m, "B", 1, "O3'", 2, "P" );
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    ttw = ttw + twist;
\end_layout

\begin_layout Plain Layout

    if( ttw >= 360.0 )
\end_layout

\begin_layout Plain Layout

        ttw = ttw - 360.0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

connectres( m, "A", nbp, "O3'", 1, "P" );
\end_layout

\begin_layout Plain Layout

connectres( m, "B", nbp, "O3'", 1, "P" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

putpdb( "circ.pdb", m );
\end_layout

\begin_layout Plain Layout

putbnd( "circ.bnd", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code requires two integer arguments which specify the number of base
 pairs and the
\begin_inset Formula $\Delta linkingnumber$
\end_inset

or the amount of supercoiling.
 Lines 11-24 process the arguments making sure that they conform to the
 model's assumptions.
 In lines 11-14, the code checks that there are exactly three arguments
 (the 
\family sans
nab
\family default
 program's name is argument one), and exits with a error message if the
 number of arguments is different.
 Next lines 16-22 set the number of base pairs (
\family sans
nbp
\family default
) and test to make certain it is a nonzero multiple of 10, again exiting
 with an error message if it is not.
 Finally the 
\begin_inset Formula $\Delta linkingnumber$
\end_inset

(
\family sans
dlk
\family default
) is set in line 24.
 The helical twist and circle radius are computed in lines 26 and 27 in
 accordance with the formulas developed above.
 Line 29 creates a transformation matrix, 
\family sans
matdx
\family default
, that is used to move each base from the global origin along the X-axis
 to the point where its center intersects the circle.
\end_layout

\begin_layout Standard
The circular DNA is built in the molecule variable 
\family sans
m
\family default
, which is initialized and given two strands, 
\family sans
"A"
\family default
 and 
\family sans
"B"
\family default
 in lines 30-32.
 The variable 
\family sans
ttw
\family default
 in line 34 holds the total twist applied to each base pair The molecule
 is created in the loop from lines 35-66.
 The base pair number (
\family sans
b
\family default
) is converted to the appropriate strings specifying the two nucleotides
 in this pair.
 This is done by the function 
\family sans
getbase()
\family default
.
 This source of this function must be provided by the user who is creating
 the circles as only he or she will know the actual DNA sequence of the
 circle.
 Once the two bases are specified they are passed to the 
\family sans
nab
\family default
 builtin 
\family sans
wc_helix()
\family default
 which returns a single base pair in the XY plane with its center at the
 origin.
 The helical axis of this base pair is on the Z-axis with the 5'-3' direction
 oriented in the positive Z-direction.
\end_layout

\begin_layout Standard
One or three transformations is required to position this base in its correct
 place in the circle.
 It must be rotated about the Z-axis (its helical axis) so that it is one
 additional unit of twist beyond the previous base.
 This twist is done in lines 43-46.
 Since the first base needs 0o twist, this step is skipped for it.
 In line 48, the base pair is moved in the positive direction along the
 X-axis to place the base pair's origin on the circle.
 Finally, the base pair is rotated about the Y-axis in lines 50-54 to bring
 it to its proper position on the circle.
 Again, since this rotation is 0o for base 1, this step is also skipped
 for the first base.
\end_layout

\begin_layout Standard
In lines 56-57, the newly positioned base pair in 
\family sans
m1
\family default
 is added to the growing molecule in 
\family sans
m
\family default
.
 Note that since the two strands of DNA are antiparallel, the 
\family sans
"sense"
\family default
 strand of 
\family sans
m1
\family default
 is added after the last base of the 
\family sans
"A"
\family default
 strand of 
\family sans
m
\family default
 and the 
\family sans
"anti"
\family default
 strand of 
\family sans
m1
\family default
 is added before the first base of the 
\family sans
"B"
\family default
 strand of 
\family sans
m
\family default
.
 For all but the first base, the newly added residues are bonded to the
 residues they follow (or precede).
 This is done by the two calls to 
\family sans
connectres()
\family default
 in lines 59-60.
 Again, due to the antiparallel nature of DNA, the new residue in the 
\family sans
"A"
\family default
 strand is residue 
\family sans
b
\family default
, but is residue 
\family sans
1
\family default
 in the 
\family sans
"B"
\family default
 strand.
 In line 63-65, the total twist (
\family sans
ttw
\family default
) is updated and adjusted to keep in in the range [0,360).
 After all base pairs have been added the loop exits.
\end_layout

\begin_layout Standard
After the loop exit, since this is a 
\shape italic
closed
\shape default
 circular molecule the first and last bases of each strand must be bonded
 and this is done with the two calls to 
\family sans
connectres()
\family default
 in lines 67-68.
 The last step is to save the molecule's coordinates and connectivity in
 lines 71-72.
 The 
\family sans
nab
\family default
 builtin 
\family sans
putpdb()
\family default
 writes the coordinate information in PDB format to the file 
\family sans
"circ.pdb"
\family default
 and the 
\family sans
nab
\family default
 builtin 
\family sans
putbnd()
\family default
 saves the bonding as pairs of integers, one pair/line in the file 
\family sans
"circ.bnd"
\family default
, where each integer in a pair refers to an 
\family sans
ATOM
\family default
 record in the previously written PDB file.
\end_layout

\begin_layout Subsection

\series bold
Nucleosome Model
\end_layout

\begin_layout Standard
While the DNA duplex is locally rather stiff, many DNA molecules are sufficientl
y long that they can be bent into a wide variety of both open and closed
 curves.
 Some examples would be simple closed circles, supercoiled closed circles
 that have relaxed into circles with twists, and the nucleosome core fragment,
 where the duplex itself is wound into a short helix.
\end_layout

\begin_layout Standard
The overall strategy for wrapping DNA around a curve is to create the curve,
 find the points on the curve that contain the base pair origins, place
 the base pairs at these points, oriented so that their helical axes are
 tangent to the curve, and finally rotate the base pairs so that they have
 the correct helical twist.
 In the example below, the simplifying assumption is made that the rise
 is constant at 3.38 
\begin_inset Formula $\textrm{Å}$
\end_inset

.
\end_layout

\begin_layout Standard
The nucleosome core fragment is composed of duplex DNA wound in a left handed
 helix around a central protein core.
 A typical core fragment has about 145 base pairs of duplex DNA forming
 about 1.75 superhelical turns.
 Measurements of the overall dimensions of the core fragment indicate that
 there is very little space between adjacent wraps of the duplex.
 A side view of a schematic of core particle is shown below.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/case/nabc/doc/nuc.model.eps
	width 70text%

\end_inset


\end_layout

\begin_layout Standard
Computing the points at which to place the base pairs on a helix requires
 us to spiral an inelastic wire (representing the helical axis of the bent
 duplex) around a cylinder (representing the protein core).
 The system is described by four numbers of which only three are independent.
 They are the number of base pairs 
\begin_inset Formula $n$
\end_inset

, the number of turns its makes around the protein core 
\begin_inset Formula $t$
\end_inset

, the 
\begin_inset Quotes eld
\end_inset

winding
\begin_inset Quotes erd
\end_inset

 angle 
\begin_inset Formula $\theta$
\end_inset

 (which controls how quickly the the helix advances along the axis of the
 core) and the helix radius 
\begin_inset Formula $r$
\end_inset

.
 Both the the number of base pairs and the number of turns around the core
 can be measured.
 The leaves two choices for the third parameter.
 Since the relationship of the winding angle to the overall particle geometry
 seems more clear than that of the radius, this code lets the user specify
 the number of turns, the number of base pairs and the winding angle, then
 computes the helical radius and the displacement along the helix axis for
 each base pair:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
d=3.38\sin(\theta);\,\,\,\phi=360t/(n-1)\label{eq.dy}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
r=\frac{3.38(n-1)\cos(\theta)}{2\pi t}\label{eq.rad}
\end{equation}

\end_inset

where 
\begin_inset Formula $d$
\end_inset

 and 
\begin_inset Formula $\phi$
\end_inset

are the displacement along and rotation about the protein core axis for
 each base pair.
\end_layout

\begin_layout Standard
These relationships are easily derived.
 Let the nucleosome core particle be oriented so that its helical axis is
 along the global Y-axis and the lower cap of the protein core is in the
 XZ plane.
 Consider the circle that is the projection of the helical axis of the DNA
 duplex onto the XZ plane.
 As the duplex spirals along the core particle it will go around the circle
 
\begin_inset Formula $t$
\end_inset

 times, for a total rotation of 360
\begin_inset Formula $t$
\end_inset

o.
 The duplex contains 
\begin_inset Formula $(n-1)$
\end_inset

 steps, resulting in 
\begin_inset Formula $360t/(n-1)$
\end_inset

o of rotation between successive base pairs.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 10.
  Create simple nucleosome model.
\end_layout

\begin_layout Plain Layout

#define PI  3.141593
\end_layout

\begin_layout Plain Layout

#define RISE    3.38
\end_layout

\begin_layout Plain Layout

#define TWIST   36.0
\end_layout

\begin_layout Plain Layout

int         b, nbp; int getbase();
\end_layout

\begin_layout Plain Layout

float       nt, theta, phi, rad, dy, ttw, len, plen, side;
\end_layout

\begin_layout Plain Layout

molecule    m, m1;
\end_layout

\begin_layout Plain Layout

matrix      matdx, matrx, maty, matry, mattw;
\end_layout

\begin_layout Plain Layout

string      sbase, abase;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

nt = atof( argv[ 2 ] );    // number of turns
\end_layout

\begin_layout Plain Layout

nbp = atoi( argv[ 3 ] );   // number of base pairs
\end_layout

\begin_layout Plain Layout

theta = atof( argv[ 4 ] ); // winding angle
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

dy = RISE * sin( theta );
\end_layout

\begin_layout Plain Layout

phi = 360.0 * nt / ( nbp-1 );
\end_layout

\begin_layout Plain Layout

rad = (( nbp-1 )*RISE*cos( theta ))/( 2*PI*nt );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

matdx = newtransform( rad, 0.0, 0.0, 0.0, 0.0, 0.0 );
\end_layout

\begin_layout Plain Layout

matrx = newtransform( 0.0, 0.0, 0.0, -theta, 0.0, 0.0 );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m = newmolecule();
\end_layout

\begin_layout Plain Layout

addstrand( m, "A" ); addstrand( m, "B" ); 
\end_layout

\begin_layout Plain Layout

ttw = 0.0;
\end_layout

\begin_layout Plain Layout

for( b = 1; b <= nbp; b = b + 1 ){
\end_layout

\begin_layout Plain Layout

    getbase( b, sbase, abase );
\end_layout

\begin_layout Plain Layout

    m1 = wc_helix( sbase, "", "dna", abase, "", "dna",
\end_layout

\begin_layout Plain Layout

        2.25, -4.96, 0.0, 0.0 );
\end_layout

\begin_layout Plain Layout

    mattw = newtransform( 0., 0., 0., 0., 0., ttw );
\end_layout

\begin_layout Plain Layout

    transformmol( mattw, m1, NULL );
\end_layout

\begin_layout Plain Layout

    transformmol( matrx, m1, NULL );
\end_layout

\begin_layout Plain Layout

    transformmol( matdx, m1, NULL );
\end_layout

\begin_layout Plain Layout

    maty = newtransform( 0.,dy*(b-1),0., 0.,-phi*(b-1),0.);
\end_layout

\begin_layout Plain Layout

    transformmol( maty, m1, NULL );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    mergestr( m, "A", "last", m1, "sense", "first" );
\end_layout

\begin_layout Plain Layout

    mergestr( m, "B", "first", m1, "anti", "last" );
\end_layout

\begin_layout Plain Layout

    if( b > 1 ){
\end_layout

\begin_layout Plain Layout

        connectres( m, "A", b - 1, "O3'", b, "P" );
\end_layout

\begin_layout Plain Layout

        connectres( m, "B", 1, "O3'", 2, "P" );
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    ttw += TWIST; if( ttw >= 360.0 ) ttw -= 360.0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

putpdb( "nuc.pdb", m );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finding the radius of the superhelix is a little tricky.
 In general a single turn of the helix will not contain an integral number
 of base pairs.
 For example, using typical numbers of 1.75 turns and 145 base pairs requires
 82.9 base pairs to make one turn.
 An approximate solution can be found by considering the ideal superhelix
 that the DNA duplex is wrapped around.
 Let 
\begin_inset Formula $L$
\end_inset

 be the arc length of this helix.
 Then 
\begin_inset Formula $L\cos(\theta)$
\end_inset

 is the arc length of its projection into the XZ plane.
 Since this projection is an overwound circle, 
\begin_inset Formula $L$
\end_inset

 is also equal to 
\begin_inset Formula $2\pi rt$
\end_inset

, where 
\begin_inset Formula $t$
\end_inset

 is the number of turns and 
\begin_inset Formula $r$
\end_inset

 is the unknown radius.
 Now 
\begin_inset Formula $L$
\end_inset

 is not known but is approximately 
\begin_inset Formula $3.38(n-1)$
\end_inset

.
 Substituting and solving for 
\begin_inset Formula $r$
\end_inset

gives Eq.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq.rad"

\end_inset

.
\end_layout

\begin_layout Standard
The resulting 
\family sans
nab
\family default
 code is shown in Program 2.
 This code requires three arguments—the number of turns, the number of base
 pairs and the winding angle.
 In lines 15-17, the helical rise (
\family sans
dy
\family default
), twist (
\family sans
phi
\family default
) and radius (
\family sans
rad
\family default
) are computed according to the formulas developed above.
\end_layout

\begin_layout Standard
Two constant transformation matrices, 
\family sans
matdx
\family default
 and 
\family sans
matrx
\family default
 are created in lines 19-20.
 
\family sans
matdx
\family default
 is used to move the newly created base pair along the X-axis to the circle
 that is the helix's projection onto the XZ plane.
 
\family sans
matrx
\family default
 is used to rotate the new base pair about the X-axis so it will be tangent
 to the local helix of spirally wound duplex.
 The model of the nucleosome will be built in the molecule 
\family sans
m
\family default
 which is created and given two strands 
\family sans
"A"
\family default
 and 
\family sans
"B"
\family default
 in line 23.
 The variable 
\family sans
ttw
\family default
 will hold the total local helical twist for each base pair.
\end_layout

\begin_layout Standard
The molecule is created in the loop in lines 25-43.
 The user specified function 
\family sans
getbase()
\family default
 takes the number of the current base pair (
\family sans
b
\family default
) and returns two strings that specify the actual nucleotides to use at
 this position.
 These two strings are converted into a single base pair using the 
\family sans
nab
\family default
 builtin 
\family sans
wc_helix()
\family default
.
 The new base pair is in the XY plane with its origin at the global origin
 and its helical axis along Z oriented so that the 5'-3' direction is positive.
\end_layout

\begin_layout Standard
Each base pair must be rotated about its Z-axis so that when it is added
 to the global helix it has the correct amount of helical twist with respect
 to the previous base.
 This rotation is performed in lines 29-30.
 Once the base pair has the correct helical twist it must rotated about
 the X-axis so that its local origin will be tangent to the global helical
 axes (line 31).
\end_layout

\begin_layout Standard
The properly-oriented base is next moved into place on the global helix
 in two stages in lines 32-34.
 It is first moved along the X-axis (line 32) so it intersects the circle
 in the XZ plane that is projection of the duplex's helical axis.
 Then it is simultaneously rotated about and displaced along the global
 Y-axis to move it to final place in the nucleosome.
 Since both these movements are with respect to the same axis, they can
 be combined into a single transformation.
\end_layout

\begin_layout Standard
The newly positioned base pair in 
\family sans
m1
\family default
 is added to the growing molecule in 
\family sans
m
\family default
 using two calls to the 
\family sans
nab
\family default
 builtin 
\family sans
mergestr()
\family default
.
 Note that since the two strands of a DNA duplex are antiparallel, the base
 of the 
\family sans
"sense"
\family default
 strand of molecule 
\family sans
m1
\family default
 is added 
\emph on
after
\emph default
 the last base of the 
\family sans
"A"
\family default
 strand of molecule 
\family sans
m
\family default
 and the base of the 
\family sans
"anti"
\family default
 strand of molecule 
\family sans
m1
\family default
 is 
\emph on
before
\emph default
 the first base of the 
\family sans
"B"
\family default
 strand of molecule 
\family sans
m
\family default
.
 For all base pairs except the first one, the new base pair must be bonded
 to its predecessor.
 Finally, the total twist (
\family sans
ttw
\family default
) is updated and adjusted to remain in the interval [0,360) in line 42.
 After all base pairs have been created, the loop exits, and the molecule
 is written out.
 The coordinates are saved in PDB format using the 
\family sans
nab
\family default
 builtin 
\family sans
putpdb()
\family default
.
\end_layout

\begin_layout Section

\series bold
Wrapping DNA Around a Path
\end_layout

\begin_layout Standard
This last code develops two 
\family sans
nab
\family default
 programs that are used together to wrap B-DNA around a more general open
 curve specified as a cubic spline through a set of points.
 The first program takes the initial set of points defining the curve and
 interpolates them to produce a new set of points with one point at the
 location of each base pair.
 The new set of points always includes the first point of the original set
 but may or may not include the last point.
 These new points are read by the second program which actually bends the
 DNA.
\end_layout

\begin_layout Standard
The overall strategy used in this example is slightly different from the
 one used in both the circular DNA and nucleosome codes.
 In those codes it was possible to directly compute both the orientation
 and position of each base pair.
 This is not possible in this case.
 Here only the location of the base pair's origin can be computed directly.
 When the base pair is placed at that point its helical axis will be tangent
 to the curve and point in the right direction, but its rotation about this
 axis will be arbitrary.
 It will have to be rotated about its new helical axis to give the proper
 amount of helical twist to stack it properly on the previous base.
 Now if the helical twist of a base pair is determined with respect to the
 previous base pair, either the first base pair is left in an arbitrary
 orientation, or some other way must be devised to define the helical of
 it.
 Since this orientation will depend both on the curve and its ultimate use,
 this code leaves this task to the user with the result that the helical
 orientation of the first base pair is undefined.
\end_layout

\begin_layout Subsection

\series bold
Interpolating the Curve
\end_layout

\begin_layout Standard
This section describes the code that finds the base pair origins along the
 curve.
 This program takes an ordered set of points
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $p$
\end_inset

 1 ,
\begin_inset Formula $p$
\end_inset

 2 ,...,
\begin_inset Formula $pn$
\end_inset


\end_layout

\begin_layout Standard
and interpolates it to produce a new set of points
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
np
\shape default
 1 ,
\shape italic
np
\shape default
 2 ,...,
\shape italic
np
\shape default
 
\begin_inset Formula $m$
\end_inset


\end_layout

\begin_layout Standard
such that the distance between each 
\begin_inset Formula $np_{i}$
\end_inset

 and 
\begin_inset Formula $np_{i+1}$
\end_inset

 is constant, in this case equal to 3.38 which is the rise of an ideal B-DNA
 duplex.
 The interpolation begins by setting 
\begin_inset Formula $np_{1}$
\end_inset

 to 
\begin_inset Formula $p_{1}$
\end_inset

 and continues through the 
\begin_inset Formula $p_{i}$
\end_inset

 until a new point 
\begin_inset Formula $np_{m}$
\end_inset

 has been found that is within the constant distance to 
\begin_inset Formula $p_{n}$
\end_inset

 without having gone beyond it.
\end_layout

\begin_layout Standard
The interpolation is done via 
\family sans
spline()
\family default
 [45] and 
\family sans
splint()
\family default
, two routines that perform a cubic spline interpolation on a tabulated
 function
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y_{i}=f(x_{i})
\]

\end_inset

In order for 
\family sans
spline()
\family default
/
\family sans
splint()
\family default
 to work on this problem, two things must be done.
 These functions work on a table of 
\begin_inset Formula $(x_{i},y_{i})$
\end_inset

 pairs, of which we have only the 
\begin_inset Formula $y_{i}$
\end_inset

.
 However, since the only requirement imposed on the 
\begin_inset Formula $x_{i}$
\end_inset

is that they be monotonically increasing we can simply use the sequence
 1 , 2 , ...
 , n for the 
\begin_inset Formula $x_{i}$
\end_inset

, producing the producing the table 
\begin_inset Formula $(i,y_{i})$
\end_inset

.
 The second difficulty is that 
\family sans
spline()
\family default
/
\family sans
splint()
\family default
 interpolate along a one dimensional curve but we need an interpolation
 along a three dimensional curve.
 This is solved by creating three different splines, one for each of the
 three dimensions.
\end_layout

\begin_layout Standard

\family sans
spline()
\family default
/
\family sans
splint()
\family default
 perform the interpolation in two steps.
 The function 
\family sans
spline()
\family default
 is called first with the original table and computes the value of the second
 derivative at each point.
 In order to do this, the values of the second derivative at two points
 must be specified.
 In this code these points are the first and last points of the table, and
 the values chosen are 0 (signified by the unlikely value of 
\family sans
1e30
\family default
 in the calls to 
\family sans
spline()
\family default
).
 After the second derivatives have been computed, the interpolated values
 are computed using one or more calls to 
\family sans
splint()
\family default
.
\end_layout

\begin_layout Standard
What is unusual about this interpolation is that the points at which the
 interpolation is to be performed are unknown.
 Instead, these points are chosen so that the distance between each point
 and its successor is the constant value 
\family sans
RISE
\family default
, set here to 3.38 which is the rise of an ideal B-DNA duplex.
 Thus, we have to search for the points and most of the code is devoted
 to doing this search.
 The details follow the listing.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 11 - Build DNA along a curve
\end_layout

\begin_layout Plain Layout

#define RISE    3.38
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define EPS 1e-3
\end_layout

\begin_layout Plain Layout

#define APPROX(a,b) (fabs((a)-(b))<=EPS)
\end_layout

\begin_layout Plain Layout

#define MAXI    20
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define MAXPTS  150
\end_layout

\begin_layout Plain Layout

int npts;
\end_layout

\begin_layout Plain Layout

float   a[ MAXPTS ];
\end_layout

\begin_layout Plain Layout

float   x[ MAXPTS ], y[ MAXPTS ], z[ MAXPTS ];
\end_layout

\begin_layout Plain Layout

float   x2[ MAXPTS ], y2[ MAXPTS ], z2[ MAXPTS ];
\end_layout

\begin_layout Plain Layout

float   tmp[ MAXPTS ];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

string  line;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int i, li, ni;
\end_layout

\begin_layout Plain Layout

float   dx, dy, dz;
\end_layout

\begin_layout Plain Layout

float   la, lx, ly, lz, na, nx, ny, nz;
\end_layout

\begin_layout Plain Layout

float   d, tfrac, frac;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int spline();
\end_layout

\begin_layout Plain Layout

int splint();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( npts = 0; line = getline( stdin ); ){
\end_layout

\begin_layout Plain Layout

    npts = npts + 1;
\end_layout

\begin_layout Plain Layout

    a[ npts ] = npts;
\end_layout

\begin_layout Plain Layout

    sscanf( line, "%lf %lf %lf",
\end_layout

\begin_layout Plain Layout

        x[ npts ], y[ npts ], z[ npts ] );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

spline( a, x, npts, 1e30, 1e30, x2, tmp );
\end_layout

\begin_layout Plain Layout

spline( a, y, npts, 1e30, 1e30, y2, tmp );
\end_layout

\begin_layout Plain Layout

spline( a, z, npts, 1e30, 1e30, z2, tmp );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

li = 1; la = 1.0; lx = x[1]; ly = y[1]; lz = z[1];
\end_layout

\begin_layout Plain Layout

printf( "%8.3f %8.3f %8.3f
\backslash

\backslash
n", lx, ly, lz );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

while( li < npts ){
\end_layout

\begin_layout Plain Layout

    ni = li + 1;
\end_layout

\begin_layout Plain Layout

    na = a[ ni ];
\end_layout

\begin_layout Plain Layout

    nx = x[ ni ]; ny = y[ ni ]; nz = z[ ni ];
\end_layout

\begin_layout Plain Layout

    dx = nx - lx; dy = ny - ly; dz = nz - lz;
\end_layout

\begin_layout Plain Layout

    d = sqrt( dx*dx + dy*dy + dz*dz );
\end_layout

\begin_layout Plain Layout

    if( d > RISE ){
\end_layout

\begin_layout Plain Layout

        tfrac = frac = .5;
\end_layout

\begin_layout Plain Layout

        for( i = 1; i <= MAXI; i = i + 1 ){
\end_layout

\begin_layout Plain Layout

            na = la + tfrac * ( a[ni] - la );
\end_layout

\begin_layout Plain Layout

            splint( a, x, x2, npts, na, nx );
\end_layout

\begin_layout Plain Layout

            splint( a, y, y2, npts, na, ny );
\end_layout

\begin_layout Plain Layout

            splint( a, z, z2, npts, na, nz );
\end_layout

\begin_layout Plain Layout

            dx = nx - lx; dy = ny - ly; dz = nz - lz;
\end_layout

\begin_layout Plain Layout

            d = sqrt( dx*dx + dy*dy + dz*dz );
\end_layout

\begin_layout Plain Layout

            frac = 0.5 * frac;
\end_layout

\begin_layout Plain Layout

            if( APPROX( d, RISE ) )
\end_layout

\begin_layout Plain Layout

                break;
\end_layout

\begin_layout Plain Layout

            else if( d > RISE )
\end_layout

\begin_layout Plain Layout

                tfrac = tfrac - frac;
\end_layout

\begin_layout Plain Layout

            else if( d < RISE )
\end_layout

\begin_layout Plain Layout

                tfrac = tfrac + frac;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        printf( "%8.3f %8.3f %8.3f
\backslash
n", nx, ny, nz );
\end_layout

\begin_layout Plain Layout

    }else if( d < RISE ){
\end_layout

\begin_layout Plain Layout

        li = ni;
\end_layout

\begin_layout Plain Layout

        continue;
\end_layout

\begin_layout Plain Layout

    }else if( d == RISE ){
\end_layout

\begin_layout Plain Layout

        printf( "%8.3f %8.3f %8.3f
\backslash
n", nx, ny, nz );
\end_layout

\begin_layout Plain Layout

        li = ni;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    la = na;
\end_layout

\begin_layout Plain Layout

    lx = nx; ly = ny; lz = nz;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Execution begins in line 25 where the points are read from 
\family sans
stdin
\family default
 one point or three numbers/line and stored in the three arrays 
\family sans
x
\family default
, 
\family sans
y
\family default
 and 
\family sans
z
\family default
.
 The independent variable for each spline, stored in the array 
\family sans
a
\family default
 is created at this time holding the numbers 
\family sans
1
\family default
 to 
\family sans
npts
\family default
.
 The second derivatives for the three splines, one each for interpolation
 along the X, Y and Z directions are computed in lines 32-34.
 Each call to 
\family sans
spline()
\family default
 has two arguments set to 
\family sans
1e30
\family default
 which indicates that the second derivative values should be 0 at the first
 and last points of the table.
 The first point of the interpolated set is set to the first point of the
 original set and written to 
\family sans
stdout
\family default
 in lines 36-37.
\end_layout

\begin_layout Standard
The search that finds the new points is lines 39-72.
 To see how it works consider the figure below.
 The dots marked 
\begin_inset Formula $p_{1},p_{2},\ldots,p_{n}$
\end_inset

 correspond to the original points that define the spline.
 The circles marked 
\begin_inset Formula $np_{1},np_{2},np_{3}$
\end_inset

 represent the new points at which base pairs will be placed.
 The curve is a function of the parameter 
\begin_inset Formula $a$
\end_inset

, which as it ranges from 1 to 
\shape italic
npts
\shape default
 sweeps out the curve from 
\begin_inset Formula $(x_{1},y_{1},z_{1})$
\end_inset

 to 
\begin_inset Formula $(x_{npts},y_{npts},z_{npts})$
\end_inset

.
 Since the original points will in general not be the correct distance apart
 we have to find new points by interpolating between the original points.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/case/nabc/doc/curve.eps
	width 80text%

\end_inset


\end_layout

\begin_layout Standard
The search works by first finding a point of the original table that is
 at least 
\family sans
RISE
\family default
 distance from the last point found.
 If the last point of the original table is not far enough from the last
 point found, the search loop exits and the program ends.
 However, if the search does find a point in the original table that is
 at least 
\family sans
RISE
\family default
 distance from the last point found, it starts an interpolation loop in
 lines 47-61 to zero on the best value of 
\begin_inset Formula $a$
\end_inset

 that will produce a new point that is the correct distance from the previous
 point.
 After this point is found, the new point becomes the last point and the
 loop is repeated until the original table is exhausted.
\end_layout

\begin_layout Standard
The main search loop uses 
\family sans
li
\family default
 to hold the index of the point in the original table that is closest to,
 but does not pass, the last point found.
 The loop begins its search for the next point by assuming it will be before
 the next point in the original table (lines 40-42).
 It computes the distance between this point (
\family sans
nx
\family default
,
\family sans
ny
\family default
,
\family sans
nz
\family default
) and the last point (
\family sans
lx
\family default
,
\family sans
ly
\family default
,
\family sans
lz
\family default
) in lines 43-44 and then takes one of three actions depending it the distance
 is greater than 
\family sans
RISE
\family default
 (lines 46-62), less than 
\family sans
RISE
\family default
 (lines 64-65) or equal to 
\family sans
RISE
\family default
 (lines 67-68).
\end_layout

\begin_layout Standard
If this distance is greater than 
\family sans
RISE
\family default
, then the desired point is between the last point found which is the point
 generated by 
\family sans
la
\family default
 and the point corresponding to 
\family sans
a[ni]
\family default
.
 Lines 46-61 perform a bisection of the interval (
\family sans
la
\family default
,
\family sans
a[ni]
\family default
], a process that splits this interval in half, determines which half contains
 the desired point, then splits that half and continues in this fashion
 until the either the distance between the last and new points is close
 enough as determined by the macro 
\family sans
APPROX()
\family default
 or 
\family sans
MAXI
\family default
 subdivisions have been at made, in which case the new point is taken to
 be the point computed after the last subdivision.
 After the bisection the new point is written to 
\family sans
stdout
\family default
 (line 62) and execution skips to line 70-71 where the new values 
\family sans
na
\family default
 and (
\family sans
nx
\family default
,
\family sans
ny
\family default
,
\family sans
nz
\family default
) become the last values 
\family sans
la
\family default
 and (
\family sans
lx
\family default
,
\family sans
ly
\family default
,
\family sans
lz
\family default
) and then back to the top of the loop to continue the interpolation.
 The macro 
\family sans
APPROX()
\family default
 defined in line 4, tests to see if the absolute value of the difference
 between the current distance and 
\family sans
RISE
\family default
 is less than 
\family sans
EPS
\family default
, defined in line 3 as 
\begin_inset Formula $10^{-3}$
\end_inset

.
 This more complicated test is used instead of simply testing for equality
 because floating point arithmetic is inexact, which means that while it
 will get close to the target distance, it may never actually reach it.
\end_layout

\begin_layout Standard
If the distance between the last and candidate points is less than 
\family sans
RISE
\family default
, the desired point lies beyond the point at 
\family sans
a[ni]
\family default
.
 In this case the action is lines 64-65 is performed which advances the
 candidate point to 
\family sans
li+2
\family default
 then goes back to the top of the loop (line 38) and tests to see that this
 index is still in the table and if so, repeats the entire process using
 the point corresponding to 
\family sans
a[li+2]
\family default
.
 If the points are close together, this step may be taken more than once
 to look for the next candidate at 
\family sans
a[li+2]
\family default
, 
\family sans
a[li+3]
\family default
, etc.
 Eventually, it will find a point that is 
\family sans
RISE
\family default
 beyond the last point at which case it interpolates or it runs out points,
 indicating that the next point lies beyond the last point in the table.
 If this happens, the last point found, becomes the last point of the new
 set and the process ends.
\end_layout

\begin_layout Standard
The last case is if the distance between the last point found and the point
 at 
\family sans
a[ni]
\family default
 is exactly equal to 
\family sans
RISE
\family default
.
 If it is, the point at 
\family sans
a[ni]
\family default
 becomes the new point and 
\family sans
li
\family default
 is updated to 
\family sans
ni
\family default
.
 (lines 67-68).
 Then lines 70-71 are executed to update 
\family sans
la
\family default
 and (
\family sans
lx
\family default
,
\family sans
ly
\family default
,
\family sans
lz
\family default
) and then back to the top of the loop to continue the process.
\end_layout

\begin_layout Subsection

\series bold
Driver Code
\end_layout

\begin_layout Standard
This section describes the main routine or driver of the second program
 which is the actual DNA bender.
 This routine reads in the points, then calls 
\family sans
putdna()
\family default
 (described in the next section) to place base pairs at each point.
 The points are either read from 
\family sans
stdin
\family default
 or from the file whose name is the second command line argument.
 The source of the points is determined in lines 8-18, being 
\family sans
stdin
\family default
 if the command line contained a single arguments or in the second argument
 if it was present.
 If the argument count was greater than two, the program prints an error
 message and exits.
 The points are read in the loop in lines 20-26.
 Any line with a 
\family sans
#
\family default
 in column 1 is a comment and is ignored.
 All other lines are assumed to contain three numbers which are extracted
 from the string, 
\family sans
line
\family default
 and stored in the point array 
\family sans
pts
\family default
 by the 
\family sans
nab
\family default
 builtin 
\family sans
sscanf()
\family default
 (lines 23-24).
 The number of points is kept in 
\family sans
npts
\family default
.
 Once all points have been read, the loop exits and the point file is closed
 if it is not 
\family sans
stdin
\family default
.
 Finally, the points are passed to the function 
\family sans
putdna()
\family default
 which will place a base pair at each point and save the coordinates and
 connectivity of the resulting molecule in the pair of files 
\family sans
dna.path.pdb
\family default
 and 
\family sans
dna.path.bnd
\family default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 12 - DNA bender main program
\end_layout

\begin_layout Plain Layout

string      line;
\end_layout

\begin_layout Plain Layout

file        pf; 
\end_layout

\begin_layout Plain Layout

int     npts;
\end_layout

\begin_layout Plain Layout

point       pts[ 5000 ];
\end_layout

\begin_layout Plain Layout

int     putdna();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if( argc == 1 ) 
\end_layout

\begin_layout Plain Layout

    pf = stdin;
\end_layout

\begin_layout Plain Layout

else if( argc > 2 ){
\end_layout

\begin_layout Plain Layout

    fprintf( stderr, "usage: %s [ path-file ]
\backslash

\backslash
n", 
\end_layout

\begin_layout Plain Layout

        argv[ 1 ], argv[ 2 ] );
\end_layout

\begin_layout Plain Layout

    exit( 1 );
\end_layout

\begin_layout Plain Layout

}else if( !( pf = fopen( argv[ 2 ], "r" ) ) ){
\end_layout

\begin_layout Plain Layout

    fprintf( stderr, "%s: can't open %s
\backslash

\backslash
n", 
\end_layout

\begin_layout Plain Layout

        argv[ 1 ], argv[ 2 ] );
\end_layout

\begin_layout Plain Layout

    exit( 1 );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( npts = 0; line = getline( pf ); ){
\end_layout

\begin_layout Plain Layout

    if( substr( line, 1, 1 ) != "#" ){
\end_layout

\begin_layout Plain Layout

        npts = npts + 1;
\end_layout

\begin_layout Plain Layout

        sscanf( line, "%lf %lf %lf",
\end_layout

\begin_layout Plain Layout

            pts[ npts ].x, pts[ npts ].y, pts[ npts ].z );
\end_layout

\begin_layout Plain Layout

    }   
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if( pf != stdin )
\end_layout

\begin_layout Plain Layout

    fclose( pf );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

putdna( "dna.path", pts, npts );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Wrap DNA
\end_layout

\begin_layout Standard
Every 
\family sans
nab
\family default
 molecule contains a frame, a movable handle that can be used to position
 the molecule.
 A frame consists of three orthogonal unit vectors and an origin that can
 be placed in an arbitrary position and orientation with respect to its
 associated molecule.
 When the molecule is created its frame is initialized to the unit vectors
 along the global X, Y and Z axes with the origin at (0,0,0).
\end_layout

\begin_layout Standard

\family sans
nab
\family default
 provides three operations on frames.
 They can be defined by atom expressions or absolute points (
\family sans
setframe()
\family default
 and 
\family sans
setframep()
\family default
), one frame can be aligned or superimposed on another (
\family sans
alignframe()
\family default
) and a frame can be placed at a point on an axis (
\family sans
axis2frame()
\family default
).
 A frame is defined by specifying its origin, two points that define its
 X direction and two points that define its Y direction.
 The Z direction is X
\begin_inset Formula $\times$
\end_inset

Y.
 Since it is convenient to not require the original X and Y be orthogonal,
 both frame creation builtins allow the user to specify which of the original
 X or Y directions is to be the true X or Y direction.
 If X is chosen then Y is recreated from Z
\begin_inset Formula $\times$
\end_inset

X; if Y is chosen then X is recreated from Y
\begin_inset Formula $\times$
\end_inset

Z.
\end_layout

\begin_layout Standard
When the frame of one molecule is aligned on the frame of another, the frame
 of the first molecule is transformed to superimpose it on the frame of
 the second.
 At the same time the coordinates of the first molecule are also transformed
 to maintain their original position and orientation with respect to their
 own frame.
 In this way frames provide a way to precisely position one molecule with
 respect to another.
 The frame of a molecule can also be positioned on an axis defined by two
 points.
 This is done by placing the frame's origin at the first point of the axis
 and aligning the frame's Z-axis to point from the first point of the axis
 to the second.
 After this is done, the orientation of the frame's X and Y vectors about
 this axis is undefined.
\end_layout

\begin_layout Standard
Frames have two other properties that need to be discussed.
 Although the builtin 
\family sans
alignframe()
\family default
 is normally used to position two molecules by superimposing their frames,
 if the second molecule (represented by the second argument to 
\family sans
alignframe()
\family default
) has the special value 
\family sans
NULL
\family default
, the first molecule is positioned so that its frame is superimposed on
 the global X, Y and Z axes with its origin at (0,0,0).
 The second property is that when 
\family sans
nab
\family default
 applies a transformation to a molecule (or just a subset of its atoms),
 only the atomic coordinates are transformed.
 The frame's origin and its orthogonal unit vectors remain untouched.
 While this may at first glance seem odd, it makes possible the following
 three stage process of setting the molecule's frame, aligning that frame
 on the 
\shape italic
global
\shape default
 frame, then transforming the molecule with respect to the global axes and
 origin which provides a convenient way to position and orient a molecule's
 frame at arbitrary points in space.
 With all this in mind, here is the source to 
\family sans
putdna()
\family default
 which bends a B-DNA duplex about an open space curve.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numberstyle=
\backslash
tiny]
\end_layout

\begin_layout Plain Layout

// Program 13 - place base pairs on a curve.
\end_layout

\begin_layout Plain Layout

point       s_ax[ 4 ];
\end_layout

\begin_layout Plain Layout

int     getbase();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int putdna( string mname, point pts[ 1 ], int npts )
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    int p;
\end_layout

\begin_layout Plain Layout

    float   tw;
\end_layout

\begin_layout Plain Layout

    residue r;
\end_layout

\begin_layout Plain Layout

    molecule    m, m_path, m_ax, m_bp;
\end_layout

\begin_layout Plain Layout

    point   p1, p2, p3, p4;
\end_layout

\begin_layout Plain Layout

    string  sbase, abase;
\end_layout

\begin_layout Plain Layout

    string  aex;
\end_layout

\begin_layout Plain Layout

    matrix  mat;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    m_ax = newmolecule();
\end_layout

\begin_layout Plain Layout

    addstrand( m_ax, "A" );
\end_layout

\begin_layout Plain Layout

    r = getresidue( "AXS", "axes.rlb" );
\end_layout

\begin_layout Plain Layout

    addresidue( m_ax, "A", r );
\end_layout

\begin_layout Plain Layout

    setxyz_from_mol( m_ax, NULL, s_ax );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    m_path = newmolecule();
\end_layout

\begin_layout Plain Layout

    addstrand( m_path, "A" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    m = newmolecule();
\end_layout

\begin_layout Plain Layout

    addstrand( m, "A" );
\end_layout

\begin_layout Plain Layout

    addstrand( m, "B" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for( p = 1; p < npts; p = p + 1 ){
\end_layout

\begin_layout Plain Layout

        setmol_from_xyz( m_ax, NULL, s_ax );
\end_layout

\begin_layout Plain Layout

        setframe( 1, m_ax,
\end_layout

\begin_layout Plain Layout

            "::ORG", "::ORG", "::SXT", "::ORG", "::CYT" );
\end_layout

\begin_layout Plain Layout

        axis2frame( m_path, pts[ p ], pts[ p + 1 ] );
\end_layout

\begin_layout Plain Layout

        alignframe( m_ax, m_path );
\end_layout

\begin_layout Plain Layout

        mergestr( m_path, "A", "last", m_ax, "A", "first" );
\end_layout

\begin_layout Plain Layout

        if( p > 1 ){
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:CYT",p-1 ), p1 );
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:ORG",p-1 ), p2 );
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:ORG",p ), p3 );
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:CYT",p ), p4 );
\end_layout

\begin_layout Plain Layout

            tw = 36.0 - torsionp( p1, p2, p3, p4 );
\end_layout

\begin_layout Plain Layout

            mat = rot4p( p2, p3, tw );
\end_layout

\begin_layout Plain Layout

            aex = sprintf( ":%d:", p );
\end_layout

\begin_layout Plain Layout

            transformmol( mat, m_path, aex );
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:ORG",p ), p1 );
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:SXT",p ), p2 );
\end_layout

\begin_layout Plain Layout

            setpoint( m_path, sprintf( "A:%d:CYT",p ), p3 );
\end_layout

\begin_layout Plain Layout

            setframep( 1, m_path, p1, p1, p2, p1, p3 );
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        getbase( p, sbase, abase );
\end_layout

\begin_layout Plain Layout

        m_bp = wc_helix( sbase, "", "dna",
\end_layout

\begin_layout Plain Layout

            abase, "", "dna",
\end_layout

\begin_layout Plain Layout

            2.25, -5.0, 0.0, 0.0 );
\end_layout

\begin_layout Plain Layout

        alignframe( m_bp, m_path );
\end_layout

\begin_layout Plain Layout

        mergestr( m, "A", "last", m_bp, "sense", "first" );
\end_layout

\begin_layout Plain Layout

        mergestr( m, "B", "first", m_bp, "anti", "last" );
\end_layout

\begin_layout Plain Layout

        if( p >  1 ){
\end_layout

\begin_layout Plain Layout

            connectres( m, "A", p - 1, "O3'", p, "P" );
\end_layout

\begin_layout Plain Layout

            connectres( m, "B", 1, "P", 1, "O3'" );
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    putpdb( mname + ".pdb", m );
\end_layout

\begin_layout Plain Layout

    putbnd( mname + ".bnd", m );
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
putdna()
\family default
 takes three arguments—
\family sans
name
\family default
, a string that will be used to name the PDB and bond files that hold the
 bent duplex, 
\family sans
pts
\family default
 an array of points containing the origin of each base pair and 
\family sans
npts
\family default
 the number of points in the array.
 
\family sans
putdna()
\family default
 uses four molecules.
 
\family sans
m_ax
\family default
 holds a small artificial molecule containing four atoms that is a proxy
 for the some of the frame's used placing the base pairs.
 The molecule 
\family sans
m_path
\family default
 will eventually hold one copy of 
\family sans
m_ax
\family default
 for each point in the input array.
 The molecule 
\family sans
m_bp
\family default
 holds each base pair after it is created by 
\family sans
wc_helix()
\family default
 and 
\family sans
m
\family default
 will eventually hold the bent dna.
 Once again the function 
\family sans
getbase()
\family default
 (to be defined by the user) provides the mapping between the current point
 (
\family sans
p
\family default
) and the nucleotides required in the base pair at that point.
\end_layout

\begin_layout Standard
Execution of 
\family sans
putdna()
\family default
 begins in line 16 with the creation of 
\family sans
m_ax
\family default
.
 This molecule is given one strand 
\family sans
"A"
\family default
, into which is added one copy of the special residue 
\family sans
AXS
\family default
 from the standard 
\family sans
nab
\family default
 residue library 
\family sans
"axes.rlb"
\family default
 (lines 17-19).
 This residue contains four atoms named 
\family sans
ORG
\family default
, 
\family sans
SXT
\family default
, 
\family sans
CYT
\family default
 and 
\family sans
NZT
\family default
.
 These atoms are placed so that 
\family sans
ORG
\family default
 is at (0,0,0) and 
\family sans
SXT
\family default
, 
\family sans
CYT
\family default
 and 
\family sans
NZT
\family default
 are 1o along the X, Y and Z axes respectively.
 Thus the residue 
\family sans
AXS
\family default
 has the exact geometry as the molecules initial frame—three unit vectors
 along the standard axes centered on the origin.
 The initial coordinates of 
\family sans
m_ax
\family default
 are saved in the 
\family sans
point
\family default
 array 
\family sans
s_ax
\family default
.
 The molecules 
\family sans
m_path
\family default
 and 
\family sans
m
\family default
 are created in lines 22-23 and 25-27 respectively.
\end_layout

\begin_layout Standard
The actual DNA bending occurs in the loop in lines 29-62.
 Each base pair is added in a two stage process that uses 
\family sans
m_ax
\family default
 to properly orient the frame of 
\family sans
m_path
\family default
, so that when the frame of new the base pair in 
\family sans
m_bp
\family default
 is aligned on the frame of 
\family sans
m_path
\family default
, the new base pair will be correctly positioned on the curve.
\end_layout

\begin_layout Standard
Setting up the frame is done is lines 30-49.
 The process begins by restoring the original coordinates of 
\family sans
m_ax
\family default
 (line 30), so that the the atom 
\family sans
ORG
\family default
 is at (0,0,0) and 
\family sans
SXT
\family default
, 
\family sans
CYT
\family default
 and 
\family sans
NZT
\family default
 are each 1o along the global X, Y and Z axes.
 These atoms are then used to redefine the frame of 
\family sans
m_ax
\family default
 (line 32-33) so that it is equal to the three standard unit vectors at
 the global origin.
 Next the frame of 
\family sans
m_path
\family default
 is aligned so that its origin is at 
\family sans
pts[p]
\family default
 and its Z-axis points from 
\family sans
pts[p]
\family default
 to 
\family sans
pts[p+1]
\family default
 (line 34).
 The call to 
\family sans
alignframe()
\family default
 in line 34 transforms 
\family sans
m_ax
\family default
 to align its frame on the frame of 
\family sans
m_path
\family default
, which has the effect of moving 
\family sans
m_ax
\family default
 so that the atom 
\family sans
ORG
\family default
 is at 
\family sans
pts[p]
\family default
 and the 
\family sans
ORG
\family default
—
\family sans
NZT
\family default
 vector points towards 
\family sans
pts[p+1]
\family default
.
 A copy of the newly positioned 
\family sans
m_ax
\family default
 is merged into 
\family sans
m_path
\family default
 in line 35.
 The result of this process is that each time around the loop, 
\family sans
m_path
\family default
 gets a new residue that resembles a coordinate frame located at the point
 the new base pair is to be added.
\end_layout

\begin_layout Standard
When 
\family sans
nab
\family default
 sets a frame from an axis, the orientation of its X and Y vectors is arbitrary.
 While this does not matter for the first base pair for which any orientation
 is acceptable, it does matter for the second and subsequent base pairs
 which must be rotated about their Z axis so that they have the proper helical
 twist with respect to the previous base pair.
 This rotation is done by the code in lines 37-48.
 It does this by considering the torsion angle formed by the fours atoms—
\family sans
CYT
\family default
 and 
\family sans
ORG
\family default
 of the previous 
\family sans
AXS
\family default
 residue and 
\family sans
ORG
\family default
 and 
\family sans
CYT
\family default
 of the current 
\family sans
AXS
\family default
 residue.
 The coordinates of these points are determined in lines 37-40.
 Since this torsion angle is a marker for the helical twist between pairs
 of the bent duplex, it must be 36.0o.
 The amount of rotation required to give it the correct twist is computed
 in line 41.
 A transformation matrix that will rotate the new 
\family sans
AXS
\family default
 residue about the 
\family sans
ORG
\family default
—
\family sans
ORG
\family default
 axis by this amount is created in line 42, the atom expression that names
 the 
\family sans
AXS
\family default
 residue is created in line 43 and the residue rotated in line 44.
 Once the new residue is given the correct twist the frame 
\family sans
m_path
\family default
 is moved to the new residue in lines 45-48.
\end_layout

\begin_layout Standard
The base pair is added in lines 51-60.
 The user defined function 
\family sans
getbase()
\family default
 converts the point number (
\family sans
p
\family default
) into the names of the nucleotides needed for this base pair which is created
 by the 
\family sans
nab
\family default
 builtin 
\family sans
wc_helix()
\family default
.
 It is then placed on the curve in the correct orientation by aligning its
 frame on the frame of 
\family sans
m_path
\family default
 that we have just created (line 55).
 The new pair is merged into 
\family sans
m
\family default
 and bonded with the previous base pair if it exists.
 After the loop exits, the bend DNA duplex coordinates are saved as a PDB
 file and the connectivity as a bnd file in the calls to 
\family sans
putpdb()
\family default
 and 
\family sans
putbnd()
\family default
 in lines 64-65, whereupon 
\family sans
putdna()
\family default
 returns to the caller.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "amberclassic"
options "jacs"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"
name "Index"
literal "true"

\end_inset


\end_layout

\end_body
\end_document
