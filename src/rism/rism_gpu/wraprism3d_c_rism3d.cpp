// wraprism3d_c_rism3d.cpp
// This file is generated by Shroud 0.13.0. Do not edit.

#include "rism3d.hpp"
#include <string>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include "wraprism3d_c_rism3d.h"

// splicer begin namespace.rism3d_c.class.rism3d.CXX_definitions
// splicer end namespace.rism3d_c.class.rism3d.CXX_definitions

extern "C" {


// helper char_len_trim
// Returns the length of character string src with length nsrc,
// ignoring any trailing blanks.
static int ShroudCharLenTrim(const char *src, int nsrc) {
    int i;

    for (i = nsrc - 1; i >= 0; i--) {
        if (src[i] != ' ') {
            break;
        }
    }

    return i + 1;
}


// helper char_alloc
// Copy src into new memory and null terminate.
// If ntrim is 0, return NULL pointer.
// If blanknull is 1, return NULL when string is blank.
static char *ShroudCharAlloc(const char *src, int nsrc, int blanknull)
{
   int ntrim = ShroudCharLenTrim(src, nsrc);
   if (ntrim == 0 && blanknull == 1) {
     return nullptr;
   }
   char *rv = (char *) std::malloc(nsrc + 1);
   if (ntrim > 0) {
     std::memcpy(rv, src, ntrim);
   }
   rv[ntrim] = '\0';
   return rv;
}

// helper char_array_alloc
// Copy src into new memory and null terminate.
// char **src +size(nsrc) +len(len)
// CHARACTER(len) src(nsrc)
static char **ShroudStrArrayAlloc(const char *src, int nsrc, int len)
{
   char **rv = static_cast<char **>(std::malloc(sizeof(char *) * nsrc));
   const char *src0 = src;
   for(int i=0; i < nsrc; ++i) {
      int ntrim = ShroudCharLenTrim(src0, len);
      char *tgt = static_cast<char *>(std::malloc(ntrim+1));
      std::memcpy(tgt, src0, ntrim);
      tgt[ntrim] = '\0';
      rv[i] = tgt;
      src0 += len;
   }
   return rv;
}

// helper char_array_free
// Release memory allocated by ShroudStrArrayAlloc
static void ShroudStrArrayFree(char **src, int nsrc)
{
   for(int i=0; i < nsrc; ++i) {
       std::free(src[i]);
   }
   std::free(src);
}

// helper ShroudCharCopy
// Copy src into dest, blank fill to ndest characters
// Truncate if dest is too short.
// dest will not be NULL terminated.
static void ShroudCharCopy(char *dest, int ndest, const char *src, int nsrc)
{
   if (src == NULL) {
     std::memset(dest,' ',ndest); // convert NULL pointer to blank filled string
   } else {
     if (nsrc < 0) nsrc = std::strlen(src);
     int nm = nsrc < ndest ? nsrc : ndest;
     std::memcpy(dest,src,nm);
     if(ndest > nm) std::memset(dest+nm,' ',ndest-nm); // blank fill
   }
}

// helper char_free
// Release memory allocated by ShroudCharAlloc
static void ShroudCharFree(char *src)
{
   if (src != NULL) {
     std::free(src);
   }
}
// splicer begin namespace.rism3d_c.class.rism3d.C_definitions
int RIS_rism3d_c_rism3d_get_numatoms(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this =
        static_cast<rism3d_c::rism3d *>(self->addr);
    int SHC_rv = SH_this->get_numatoms();
    return SHC_rv;
}

int RIS_rism3d_c_rism3d_get_numatomtypes(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    int SHC_rv = SH_this->get_numatomtypes();
    return SHC_rv;
}
// splicer end namespace.rism3d_c.class.rism3d.C_definitions

RIS_rism3d_c_rism3d * RIS_rism3d_c_rism3d_new_0(RIS_solute_cpp * solu_f,
    RIS_solvent_cpp * solv_f, int centering, int ncuvsteps,
    char **closure, double cut, int mdiis_nvec, double mdiis_del,
    int mdiis_method, double mdiis_restart, bool treeDCF, bool treeTCF,
    bool treeCoulomb, double treeDCFMAC, double treeTCFMAC,
    double treeCoulombMAC, int treeDCFOrder, int treeTCFOrder,
    int treeCoulombOrder, int treeDCFN0, int treeTCFN0,
    int treeCoulombN0, double asympKSpaceTolerance, double ljTolerance,
    double chargeSmear, double o_buffer, double * o_grdspc,
    int o_mpicomm, char * o_periodic, double * o_unitCellDimensions,
    double o_biasPotential, RIS_rism3d_c_rism3d * SHC_rv)
{
    // splicer begin namespace.rism3d_c.class.rism3d.method.new_0
    rism3d_c::solute_cpp * SHCXX_solu_f = 
        static_cast<rism3d_c::solute_cpp *>(static_cast<void *>(
        solu_f));
    rism3d_c::solvent_cpp * SHCXX_solv_f = 
        static_cast<rism3d_c::solvent_cpp *>(static_cast<void *>(
        solv_f));
    rism3d_c::rism3d *SHCXX_rv = new rism3d_c::rism3d(SHCXX_solu_f,
        SHCXX_solv_f, centering, ncuvsteps, closure, cut, mdiis_nvec,
        mdiis_del, mdiis_method, mdiis_restart, treeDCF, treeTCF,
        treeCoulomb, treeDCFMAC, treeTCFMAC, treeCoulombMAC,
        treeDCFOrder, treeTCFOrder, treeCoulombOrder, treeDCFN0,
        treeTCFN0, treeCoulombN0, asympKSpaceTolerance, ljTolerance,
        chargeSmear, o_buffer, o_grdspc, o_mpicomm, o_periodic,
        o_unitCellDimensions, o_biasPotential);
    SHC_rv->addr = static_cast<void *>(SHCXX_rv);
    SHC_rv->idtor = 1;
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.new_0
}

RIS_rism3d_c_rism3d * RIS_rism3d_c_rism3d_new_0_bufferify(
    RIS_solute_cpp * solu_f, RIS_solvent_cpp * solv_f, int centering,
    int ncuvsteps, const char *closure, size_t SHT_closure_size,
    int SHT_closure_len, double cut, int mdiis_nvec, double mdiis_del,
    int mdiis_method, double mdiis_restart, bool treeDCF, bool treeTCF,
    bool treeCoulomb, double treeDCFMAC, double treeTCFMAC,
    double treeCoulombMAC, int treeDCFOrder, int treeTCFOrder,
    int treeCoulombOrder, int treeDCFN0, int treeTCFN0,
    int treeCoulombN0, double asympKSpaceTolerance, double ljTolerance,
    double chargeSmear, double o_buffer, double * o_grdspc,
    int o_mpicomm, char *o_periodic, int SHT_o_periodic_len,
    double * o_unitCellDimensions, double o_biasPotential,
    RIS_rism3d_c_rism3d * SHC_rv)
{
    // splicer begin namespace.rism3d_c.class.rism3d.method.new_0_bufferify
    rism3d_c::solute_cpp * SHCXX_solu_f = 
        static_cast<rism3d_c::solute_cpp *>(static_cast<void *>(
        solu_f));
    rism3d_c::solvent_cpp * SHCXX_solv_f = 
        static_cast<rism3d_c::solvent_cpp *>(static_cast<void *>(
        solv_f));
    char **SHCXX_closure = ShroudStrArrayAlloc(closure,
        SHT_closure_size, SHT_closure_len);
    char * SHT_o_periodic_str = ShroudCharAlloc(o_periodic,
        SHT_o_periodic_len, 0);
    rism3d_c::rism3d *SHCXX_rv = new rism3d_c::rism3d(SHCXX_solu_f,
        SHCXX_solv_f, centering, ncuvsteps, SHCXX_closure, cut,
        mdiis_nvec, mdiis_del, mdiis_method, mdiis_restart, treeDCF,
        treeTCF, treeCoulomb, treeDCFMAC, treeTCFMAC, treeCoulombMAC,
        treeDCFOrder, treeTCFOrder, treeCoulombOrder, treeDCFN0,
        treeTCFN0, treeCoulombN0, asympKSpaceTolerance, ljTolerance,
        chargeSmear, o_buffer, o_grdspc, o_mpicomm, SHT_o_periodic_str,
        o_unitCellDimensions, o_biasPotential);
    SHC_rv->addr = static_cast<void *>(SHCXX_rv);
    SHC_rv->idtor = 1;
    ShroudStrArrayFree(SHCXX_closure, SHT_closure_size);
    ShroudCharCopy(o_periodic, SHT_o_periodic_len, SHT_o_periodic_str,
        -1);
    ShroudCharFree(SHT_o_periodic_str);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.new_0_bufferify
}

RIS_rism3d_c_rism3d * RIS_rism3d_c_rism3d_new_1(RIS_solute_cpp * solu_f,
    RIS_solvent_cpp * solv_f, int centering, int ncuvsteps,
    char **closure, double cut, int mdiis_nvec, double mdiis_del,
    int mdiis_method, double mdiis_restart, bool treeDCF, bool treeTCF,
    bool treeCoulomb, double treeDCFMAC, double treeTCFMAC,
    double treeCoulombMAC, int treeDCFOrder, int treeTCFOrder,
    int treeCoulombOrder, int treeDCFN0, int treeTCFN0,
    int treeCoulombN0, double asympKSpaceTolerance, double ljTolerance,
    double chargeSmear, double * o_boxlen, int * o_ng3, int o_mpicomm,
    char * o_periodic, double * o_unitCellDimensions,
    double o_biasPotential, RIS_rism3d_c_rism3d * SHC_rv)
{
    // splicer begin namespace.rism3d_c.class.rism3d.method.new_1
    rism3d_c::solute_cpp * SHCXX_solu_f = 
        static_cast<rism3d_c::solute_cpp *>(static_cast<void *>(
        solu_f));
    rism3d_c::solvent_cpp * SHCXX_solv_f = 
        static_cast<rism3d_c::solvent_cpp *>(static_cast<void *>(
        solv_f));
    rism3d_c::rism3d *SHCXX_rv = new rism3d_c::rism3d(SHCXX_solu_f,
        SHCXX_solv_f, centering, ncuvsteps, closure, cut, mdiis_nvec,
        mdiis_del, mdiis_method, mdiis_restart, treeDCF, treeTCF,
        treeCoulomb, treeDCFMAC, treeTCFMAC, treeCoulombMAC,
        treeDCFOrder, treeTCFOrder, treeCoulombOrder, treeDCFN0,
        treeTCFN0, treeCoulombN0, asympKSpaceTolerance, ljTolerance,
        chargeSmear, o_boxlen, o_ng3, o_mpicomm, o_periodic,
        o_unitCellDimensions, o_biasPotential);
    SHC_rv->addr = static_cast<void *>(SHCXX_rv);
    SHC_rv->idtor = 1;
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.new_1
}

RIS_rism3d_c_rism3d * RIS_rism3d_c_rism3d_new_1_bufferify(
    RIS_solute_cpp * solu_f, RIS_solvent_cpp * solv_f, int centering,
    int ncuvsteps, const char *closure, size_t SHT_closure_size,
    int SHT_closure_len, double cut, int mdiis_nvec, double mdiis_del,
    int mdiis_method, double mdiis_restart, bool treeDCF, bool treeTCF,
    bool treeCoulomb, double treeDCFMAC, double treeTCFMAC,
    double treeCoulombMAC, int treeDCFOrder, int treeTCFOrder,
    int treeCoulombOrder, int treeDCFN0, int treeTCFN0,
    int treeCoulombN0, double asympKSpaceTolerance, double ljTolerance,
    double chargeSmear, double * o_boxlen, int * o_ng3, int o_mpicomm,
    char *o_periodic, int SHT_o_periodic_len,
    double * o_unitCellDimensions, double o_biasPotential,
    RIS_rism3d_c_rism3d * SHC_rv)
{
    // splicer begin namespace.rism3d_c.class.rism3d.method.new_1_bufferify
    rism3d_c::solute_cpp * SHCXX_solu_f = 
        static_cast<rism3d_c::solute_cpp *>(static_cast<void *>(
        solu_f));
    rism3d_c::solvent_cpp * SHCXX_solv_f = 
        static_cast<rism3d_c::solvent_cpp *>(static_cast<void *>(
        solv_f));
    char **SHCXX_closure = ShroudStrArrayAlloc(closure,
        SHT_closure_size, SHT_closure_len);
    char * SHT_o_periodic_str = ShroudCharAlloc(o_periodic,
        SHT_o_periodic_len, 0);
    rism3d_c::rism3d *SHCXX_rv = new rism3d_c::rism3d(SHCXX_solu_f,
        SHCXX_solv_f, centering, ncuvsteps, SHCXX_closure, cut,
        mdiis_nvec, mdiis_del, mdiis_method, mdiis_restart, treeDCF,
        treeTCF, treeCoulomb, treeDCFMAC, treeTCFMAC, treeCoulombMAC,
        treeDCFOrder, treeTCFOrder, treeCoulombOrder, treeDCFN0,
        treeTCFN0, treeCoulombN0, asympKSpaceTolerance, ljTolerance,
        chargeSmear, o_boxlen, o_ng3, o_mpicomm, SHT_o_periodic_str,
        o_unitCellDimensions, o_biasPotential);
    SHC_rv->addr = static_cast<void *>(SHCXX_rv);
    SHC_rv->idtor = 1;
    ShroudStrArrayFree(SHCXX_closure, SHT_closure_size);
    ShroudCharCopy(o_periodic, SHT_o_periodic_len, SHT_o_periodic_str,
        -1);
    ShroudCharFree(SHT_o_periodic_str);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.new_1_bufferify
}

void RIS_rism3d_c_rism3d_delete(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.delete
    delete SH_this;
    self->addr = nullptr;
    // splicer end namespace.rism3d_c.class.rism3d.method.delete
}

void RIS_rism3d_c_rism3d_createelectrondensitymap(
    RIS_rism3d_c_rism3d * self, int iv, double * electronRDF,
    double electronRDFGridSpacing, int totalSolventElectrons,
    double density, double * electronmap_ptr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.createelectrondensitymap
    SH_this->createelectrondensitymap(iv, electronRDF,
        electronRDFGridSpacing, totalSolventElectrons, density,
        electronmap_ptr);
    // splicer end namespace.rism3d_c.class.rism3d.method.createelectrondensitymap
}

double * RIS_rism3d_c_rism3d_get_spacing(RIS_rism3d_c_rism3d * self,
    int * len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_spacing
    double * SHC_rv = SH_this->get_spacing(len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_spacing
}

void RIS_rism3d_c_rism3d_get_spacing_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_spacing_bufferify
    int len;
    double * SHC_rv = SH_this->get_spacing(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_spacing_bufferify
}

double * RIS_rism3d_c_rism3d_get_voxelvectorsr(
    RIS_rism3d_c_rism3d * self, int * len1, int * len2)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_voxelvectorsr
    double * SHC_rv = SH_this->get_voxelvectorsr(len1, len2);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_voxelvectorsr
}

void RIS_rism3d_c_rism3d_get_voxelvectorsr_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_voxelvectorsr_bufferify
    int len1;
    int len2;
    double * SHC_rv = SH_this->get_voxelvectorsr(&len1, &len2);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 2;
    SHT_rv_cdesc->shape[0] = len1;
    SHT_rv_cdesc->shape[1] = len2;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_voxelvectorsr_bufferify
}

double * RIS_rism3d_c_rism3d_get_unitcellangles(
    RIS_rism3d_c_rism3d * self, int * len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_unitcellangles
    double * SHC_rv = SH_this->get_unitcellangles(len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_unitcellangles
}

void RIS_rism3d_c_rism3d_get_unitcellangles_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_unitcellangles_bufferify
    int len;
    double * SHC_rv = SH_this->get_unitcellangles(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_unitcellangles_bufferify
}

double * RIS_rism3d_c_rism3d_get_unitcellvectorsk(
    RIS_rism3d_c_rism3d * self, int * len1, int * len2)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_unitcellvectorsk
    double * SHC_rv = SH_this->get_unitcellvectorsk(len1, len2);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_unitcellvectorsk
}

void RIS_rism3d_c_rism3d_get_unitcellvectorsk_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_unitcellvectorsk_bufferify
    int len1;
    int len2;
    double * SHC_rv = SH_this->get_unitcellvectorsk(&len1, &len2);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 2;
    SHT_rv_cdesc->shape[0] = len1;
    SHT_rv_cdesc->shape[1] = len2;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_unitcellvectorsk_bufferify
}

double * RIS_rism3d_c_rism3d_get_unitcellvectorsr(
    RIS_rism3d_c_rism3d * self, int * len1, int * len2)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_unitcellvectorsr
    double * SHC_rv = SH_this->get_unitcellvectorsr(len1, len2);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_unitcellvectorsr
}

void RIS_rism3d_c_rism3d_get_unitcellvectorsr_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_unitcellvectorsr_bufferify
    int len1;
    int len2;
    double * SHC_rv = SH_this->get_unitcellvectorsr(&len1, &len2);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 2;
    SHT_rv_cdesc->shape[0] = len1;
    SHT_rv_cdesc->shape[1] = len2;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_unitcellvectorsr_bufferify
}

double * RIS_rism3d_c_rism3d_get_boxlength(RIS_rism3d_c_rism3d * self,
    int * len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_boxlength
    double * SHC_rv = SH_this->get_boxlength(len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_boxlength
}

void RIS_rism3d_c_rism3d_get_boxlength_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_boxlength_bufferify
    int len;
    double * SHC_rv = SH_this->get_boxlength(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_boxlength_bufferify
}

int RIS_rism3d_c_rism3d_get_totallocalpointsr(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_totallocalpointsr
    int SHC_rv = SH_this->get_totallocalpointsr();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_totallocalpointsr
}

void RIS_rism3d_c_rism3d_set_nsolution(RIS_rism3d_c_rism3d * self,
    int nsol)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.set_nsolution
    SH_this->set_nsolution(nsol);
    // splicer end namespace.rism3d_c.class.rism3d.method.set_nsolution
}

int RIS_rism3d_c_rism3d_get_nsolution(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_nsolution
    int SHC_rv = SH_this->get_nsolution();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_nsolution
}

double RIS_rism3d_c_rism3d_get_voxelvolume(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_voxelvolume
    double SHC_rv = SH_this->get_voxelvolume();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_voxelvolume
}

int * RIS_rism3d_c_rism3d_get_localdimsr_0(RIS_rism3d_c_rism3d * self,
    int * len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_localdimsr_0
    int * SHC_rv = SH_this->get_localdimsr(len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_localdimsr_0
}

void RIS_rism3d_c_rism3d_get_localdimsr_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_localdimsr_0_bufferify
    int len;
    int * SHC_rv = SH_this->get_localdimsr(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_INT;
    SHT_rv_cdesc->elem_len = sizeof(int);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_localdimsr_0_bufferify
}

int RIS_rism3d_c_rism3d_get_localdimsr_1(RIS_rism3d_c_rism3d * self,
    int indx)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_localdimsr_1
    int SHC_rv = SH_this->get_localdimsr(indx);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_localdimsr_1
}

int * RIS_rism3d_c_rism3d_get_globaldimsr_0(RIS_rism3d_c_rism3d * self,
    int * len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_globaldimsr_0
    int * SHC_rv = SH_this->get_globaldimsr(len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_globaldimsr_0
}

void RIS_rism3d_c_rism3d_get_globaldimsr_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_globaldimsr_0_bufferify
    int len;
    int * SHC_rv = SH_this->get_globaldimsr(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_INT;
    SHT_rv_cdesc->elem_len = sizeof(int);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_globaldimsr_0_bufferify
}

int RIS_rism3d_c_rism3d_get_globaldimsr_1(RIS_rism3d_c_rism3d * self,
    int indx)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_globaldimsr_1
    int SHC_rv = SH_this->get_globaldimsr(indx);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_globaldimsr_1
}

#if 0
! Not Implemented
void RIS_rism3d_c_rism3d_get_atomname(RIS_rism3d_c_rism3d * self,
    char * * names, int * name_len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_atomname
    SH_this->get_atomname(names, name_len);
    // splicer end namespace.rism3d_c.class.rism3d.method.get_atomname
}
#endif

void RIS_rism3d_c_rism3d_get_atomname_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_names_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_atomname_bufferify
    std::string *names;
    int name_len;
    SH_this->get_atomname(&names, &name_len);
    RIS_ShroudArrayStringOut(SHT_names_cdesc, names, name_len);
    // splicer end namespace.rism3d_c.class.rism3d.method.get_atomname_bufferify
}

double RIS_rism3d_c_rism3d_get_xikt_dt(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_xikt_dt
    double SHC_rv = SH_this->get_xikt_dt();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_xikt_dt
}

double RIS_rism3d_c_rism3d_get_temperature(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_temperature
    double SHC_rv = SH_this->get_temperature();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_temperature
}

double * RIS_rism3d_c_rism3d_get_charge_0(RIS_rism3d_c_rism3d * self,
    int * len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_charge_0
    double * SHC_rv = SH_this->get_charge(len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_charge_0
}

void RIS_rism3d_c_rism3d_get_charge_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_charge_0_bufferify
    int len;
    double * SHC_rv = SH_this->get_charge(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_charge_0_bufferify
}

double RIS_rism3d_c_rism3d_get_charge_1(RIS_rism3d_c_rism3d * self,
    int indx)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_charge_1
    double SHC_rv = SH_this->get_charge(indx);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_charge_1
}

double * RIS_rism3d_c_rism3d_get_density_0(RIS_rism3d_c_rism3d * self,
    int * len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_density_0
    double * SHC_rv = SH_this->get_density(len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_density_0
}

void RIS_rism3d_c_rism3d_get_density_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_density_0_bufferify
    int len;
    double * SHC_rv = SH_this->get_density(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_density_0_bufferify
}

double RIS_rism3d_c_rism3d_get_density_1(RIS_rism3d_c_rism3d * self,
    int indx)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_density_1
    double SHC_rv = SH_this->get_density(indx);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_density_1
}

bool RIS_rism3d_c_rism3d_get_ionic(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_ionic
    bool SHC_rv = SH_this->get_ionic();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_ionic
}

double * RIS_rism3d_c_rism3d_get_centerofmass(
    RIS_rism3d_c_rism3d * self, int * len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_centerofmass
    double * SHC_rv = SH_this->get_centerofmass(len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_centerofmass
}

void RIS_rism3d_c_rism3d_get_centerofmass_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_centerofmass_bufferify
    int len;
    double * SHC_rv = SH_this->get_centerofmass(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_centerofmass_bufferify
}

double * RIS_rism3d_c_rism3d_get_translation(RIS_rism3d_c_rism3d * self,
    int * len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_translation
    double * SHC_rv = SH_this->get_translation(len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_translation
}

void RIS_rism3d_c_rism3d_get_translation_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_translation_bufferify
    int len;
    double * SHC_rv = SH_this->get_translation(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_translation_bufferify
}

bool RIS_rism3d_c_rism3d_get_charged(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_charged
    bool SHC_rv = SH_this->get_charged();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_charged
}

double * RIS_rism3d_c_rism3d_get_mass(RIS_rism3d_c_rism3d * self,
    int * dim1)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_mass
    double * SHC_rv = SH_this->get_mass(dim1);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_mass
}

void RIS_rism3d_c_rism3d_get_mass_bufferify(RIS_rism3d_c_rism3d * self,
    RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_mass_bufferify
    int dim1;
    double * SHC_rv = SH_this->get_mass(&dim1);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_mass_bufferify
}

double * RIS_rism3d_c_rism3d_get_guv_0(RIS_rism3d_c_rism3d * self,
    int * dim1, int * dim2, int arg1, int arg2)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_guv_0
    double * SHC_rv = SH_this->get_guv(dim1, dim2, arg1, arg2);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_guv_0
}

void RIS_rism3d_c_rism3d_get_guv_0_bufferify(RIS_rism3d_c_rism3d * self,
    int arg1, int arg2, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_guv_0_bufferify
    int dim1;
    int dim2;
    double * SHC_rv = SH_this->get_guv(&dim1, &dim2, arg1, arg2);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 2;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_guv_0_bufferify
}

double * RIS_rism3d_c_rism3d_get_guv_1(RIS_rism3d_c_rism3d * self,
    int * dim1, int * dim2, int arg)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_guv_1
    double * SHC_rv = SH_this->get_guv(dim1, dim2, arg);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_guv_1
}

void RIS_rism3d_c_rism3d_get_guv_1_bufferify(RIS_rism3d_c_rism3d * self,
    int arg, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_guv_1_bufferify
    int dim1;
    int dim2;
    double * SHC_rv = SH_this->get_guv(&dim1, &dim2, arg);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 2;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_guv_1_bufferify
}

double * RIS_rism3d_c_rism3d_get_huv_0(RIS_rism3d_c_rism3d * self,
    int * dim1, int * dim2, int arg1, int arg2)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_huv_0
    double * SHC_rv = SH_this->get_huv(dim1, dim2, arg1, arg2);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_huv_0
}

void RIS_rism3d_c_rism3d_get_huv_0_bufferify(RIS_rism3d_c_rism3d * self,
    int arg1, int arg2, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_huv_0_bufferify
    int dim1;
    int dim2;
    double * SHC_rv = SH_this->get_huv(&dim1, &dim2, arg1, arg2);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 2;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_huv_0_bufferify
}

double * RIS_rism3d_c_rism3d_get_huv_1(RIS_rism3d_c_rism3d * self,
    int * dim1, int * dim2, int arg)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_huv_1
    double * SHC_rv = SH_this->get_huv(dim1, dim2, arg);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_huv_1
}

void RIS_rism3d_c_rism3d_get_huv_1_bufferify(RIS_rism3d_c_rism3d * self,
    int arg, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_huv_1_bufferify
    int dim1;
    int dim2;
    double * SHC_rv = SH_this->get_huv(&dim1, &dim2, arg);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 2;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_huv_1_bufferify
}

double RIS_rism3d_c_rism3d_get_cuv_0(RIS_rism3d_c_rism3d * self,
    int arg1, int arg2, int arg3, int arg4)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_cuv_0
    double SHC_rv = SH_this->get_cuv(arg1, arg2, arg3, arg4);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_cuv_0
}

double * RIS_rism3d_c_rism3d_get_cuv_1(RIS_rism3d_c_rism3d * self,
    int * dim1, int * dim2, int * dim3, int * dim4, int arg)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_cuv_1
    double * SHC_rv = SH_this->get_cuv(dim1, dim2, dim3, dim4, arg);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_cuv_1
}

void RIS_rism3d_c_rism3d_get_cuv_1_bufferify(RIS_rism3d_c_rism3d * self,
    int arg, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_cuv_1_bufferify
    int dim1;
    int dim2;
    int dim3;
    int dim4;
    double * SHC_rv = SH_this->get_cuv(&dim1, &dim2, &dim3, &dim4, arg);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 4;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->shape[3] = dim4;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2]*SHT_rv_cdesc->shape[3];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_cuv_1_bufferify
}

double * RIS_rism3d_c_rism3d_get_guv_dt_0(RIS_rism3d_c_rism3d * self,
    int * dim, int arg)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_guv_dt_0
    double * SHC_rv = SH_this->get_guv_dt(dim, arg);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_guv_dt_0
}

void RIS_rism3d_c_rism3d_get_guv_dt_0_bufferify(
    RIS_rism3d_c_rism3d * self, int arg, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_guv_dt_0_bufferify
    int dim;
    double * SHC_rv = SH_this->get_guv_dt(&dim, arg);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = dim;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_guv_dt_0_bufferify
}

double * RIS_rism3d_c_rism3d_get_guv_dt_1(RIS_rism3d_c_rism3d * self,
    int * dim, int arg1, int arg2)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_guv_dt_1
    double * SHC_rv = SH_this->get_guv_dt(dim, arg1, arg2);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_guv_dt_1
}

void RIS_rism3d_c_rism3d_get_guv_dt_1_bufferify(
    RIS_rism3d_c_rism3d * self, int arg1, int arg2,
    RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_guv_dt_1_bufferify
    int dim;
    double * SHC_rv = SH_this->get_guv_dt(&dim, arg1, arg2);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = dim;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_guv_dt_1_bufferify
}

double * RIS_rism3d_c_rism3d_get_electronmap(RIS_rism3d_c_rism3d * self,
    int * dim1, int * dim2, int * dim3)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_electronmap
    double * SHC_rv = SH_this->get_electronmap(dim1, dim2, dim3);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_electronmap
}

void RIS_rism3d_c_rism3d_get_electronmap_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_electronmap_bufferify
    int dim1;
    int dim2;
    int dim3;
    double * SHC_rv = SH_this->get_electronmap(&dim1, &dim2, &dim3);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 3;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_electronmap_bufferify
}

double * RIS_rism3d_c_rism3d_get_tcflongrangeasympr(
    RIS_rism3d_c_rism3d * self, int * dim1)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_tcflongrangeasympr
    double * SHC_rv = SH_this->get_tcflongrangeasympr(dim1);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_tcflongrangeasympr
}

void RIS_rism3d_c_rism3d_get_tcflongrangeasympr_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_tcflongrangeasympr_bufferify
    int dim1;
    double * SHC_rv = SH_this->get_tcflongrangeasympr(&dim1);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_tcflongrangeasympr_bufferify
}

double * RIS_rism3d_c_rism3d_get_dcflongrangeasympr_0(
    RIS_rism3d_c_rism3d * self, int * dim1)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_dcflongrangeasympr_0
    double * SHC_rv = SH_this->get_dcflongrangeasympr(dim1);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_dcflongrangeasympr_0
}

void RIS_rism3d_c_rism3d_get_dcflongrangeasympr_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_dcflongrangeasympr_0_bufferify
    int dim1;
    double * SHC_rv = SH_this->get_dcflongrangeasympr(&dim1);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_dcflongrangeasympr_0_bufferify
}

double RIS_rism3d_c_rism3d_get_dcflongrangeasympr_1(
    RIS_rism3d_c_rism3d * self, int indx)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_dcflongrangeasympr_1
    double SHC_rv = SH_this->get_dcflongrangeasympr(indx);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_dcflongrangeasympr_1
}

double * RIS_rism3d_c_rism3d_get_uuv(RIS_rism3d_c_rism3d * self,
    int * dim1, int * dim2, int * dim3, int * dim4, int indx)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_uuv
    double * SHC_rv = SH_this->get_uuv(dim1, dim2, dim3, dim4, indx);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_uuv
}

void RIS_rism3d_c_rism3d_get_uuv_bufferify(RIS_rism3d_c_rism3d * self,
    int indx, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_uuv_bufferify
    int dim1;
    int dim2;
    int dim3;
    int dim4;
    double * SHC_rv = SH_this->get_uuv(&dim1, &dim2, &dim3, &dim4,
        indx);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 4;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->shape[3] = dim4;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2]*SHT_rv_cdesc->shape[3];
    // splicer end namespace.rism3d_c.class.rism3d.method.get_uuv_bufferify
}

bool RIS_rism3d_c_rism3d_get_periodic(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_periodic
    bool SHC_rv = SH_this->get_periodic();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_periodic
}

bool RIS_rism3d_c_rism3d_get_failure(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.get_failure
    bool SHC_rv = SH_this->get_failure();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.get_failure
}

void RIS_rism3d_c_rism3d_set_atomname(RIS_rism3d_c_rism3d * self,
    char **names)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.set_atomname
    SH_this->set_atomname(names);
    // splicer end namespace.rism3d_c.class.rism3d.method.set_atomname
}

void RIS_rism3d_c_rism3d_set_atomname_bufferify(
    RIS_rism3d_c_rism3d * self, const char *names,
    size_t SHT_names_size, int SHT_names_len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.set_atomname_bufferify
    char **SHCXX_names = ShroudStrArrayAlloc(names, SHT_names_size,
        SHT_names_len);
    SH_this->set_atomname(SHCXX_names);
    ShroudStrArrayFree(SHCXX_names, SHT_names_size);
    // splicer end namespace.rism3d_c.class.rism3d.method.set_atomname_bufferify
}

void RIS_rism3d_c_rism3d_setverbosity(RIS_rism3d_c_rism3d * self,
    int verbosity)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.setverbosity
    SH_this->setverbosity(verbosity);
    // splicer end namespace.rism3d_c.class.rism3d.method.setverbosity
}

void RIS_rism3d_c_rism3d_settimerparent(RIS_rism3d_c_rism3d * self,
    RIS_timer_cpp * timer)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.settimerparent
    rism3d_c::timer_cpp * SHCXX_timer = 
        static_cast<rism3d_c::timer_cpp *>(static_cast<void *>(timer));
    SH_this->settimerparent(SHCXX_timer);
    // splicer end namespace.rism3d_c.class.rism3d.method.settimerparent
}

void RIS_rism3d_c_rism3d_setcoord(RIS_rism3d_c_rism3d * self,
    double * solutePositions)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.setcoord
    SH_this->setcoord(solutePositions);
    // splicer end namespace.rism3d_c.class.rism3d.method.setcoord
}

bool RIS_rism3d_c_rism3d_calculatesolution(RIS_rism3d_c_rism3d * self,
    int ksave, int kshow, int maxSteps, bool failure,
    double * tolerance, int tol_size)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.calculatesolution
    bool SHC_rv = SH_this->calculatesolution(ksave, kshow, maxSteps,
        failure, tolerance, tol_size);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.calculatesolution
}

void RIS_rism3d_c_rism3d_force(RIS_rism3d_c_rism3d * self, double * ff)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.force
    SH_this->force(ff);
    // splicer end namespace.rism3d_c.class.rism3d.method.force
}

double RIS_rism3d_c_rism3d_excesschemicalpotential_tot_0(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_tot_0
    double SHC_rv = SH_this->excesschemicalpotential_tot();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_tot_0
}

double RIS_rism3d_c_rism3d_excesschemicalpotential_tot_1(
    RIS_rism3d_c_rism3d * self, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_tot_1
    double SHC_rv = SH_this->excesschemicalpotential_tot(o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_tot_1
}

double * RIS_rism3d_c_rism3d_excesschemicalpotential_0(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_0
    int len;
    double * SHC_rv = SH_this->excesschemicalpotential(&len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_0
}

void RIS_rism3d_c_rism3d_excesschemicalpotential_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_0_bufferify
    int len;
    double * SHC_rv = SH_this->excesschemicalpotential(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_0_bufferify
}

double * RIS_rism3d_c_rism3d_excesschemicalpotential_1(
    RIS_rism3d_c_rism3d * self, int * len, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_1
    double * SHC_rv = SH_this->excesschemicalpotential(len, o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_1
}

void RIS_rism3d_c_rism3d_excesschemicalpotential_1_bufferify(
    RIS_rism3d_c_rism3d * self, bool o_lr,
    RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_1_bufferify
    int len;
    double * SHC_rv = SH_this->excesschemicalpotential(&len, o_lr);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_1_bufferify
}

double * RIS_rism3d_c_rism3d_excesschemicalpotentialgf_0(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_0
    int len;
    double * SHC_rv = SH_this->excesschemicalpotentialgf(&len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_0
}

void RIS_rism3d_c_rism3d_excesschemicalpotentialgf_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_0_bufferify
    int len;
    double * SHC_rv = SH_this->excesschemicalpotentialgf(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_0_bufferify
}

double * RIS_rism3d_c_rism3d_excesschemicalpotentialgf_1(
    RIS_rism3d_c_rism3d * self, int * len, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_1
    double * SHC_rv = SH_this->excesschemicalpotentialgf(len, o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_1
}

void RIS_rism3d_c_rism3d_excesschemicalpotentialgf_1_bufferify(
    RIS_rism3d_c_rism3d * self, bool o_lr,
    RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_1_bufferify
    int len;
    double * SHC_rv = SH_this->excesschemicalpotentialgf(&len, o_lr);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_1_bufferify
}

double RIS_rism3d_c_rism3d_excesschemicalpotentialpcplus_0(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialpcplus_0
    double SHC_rv = SH_this->excesschemicalpotentialpcplus();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialpcplus_0
}

double RIS_rism3d_c_rism3d_excesschemicalpotentialpcplus_1(
    RIS_rism3d_c_rism3d * self, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialpcplus_1
    double SHC_rv = SH_this->excesschemicalpotentialpcplus(o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialpcplus_1
}

double RIS_rism3d_c_rism3d_excesschemicalpotentialuc_0(
    RIS_rism3d_c_rism3d * self, double * coeff)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialuc_0
    double SHC_rv = SH_this->excesschemicalpotentialuc(coeff);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialuc_0
}

double RIS_rism3d_c_rism3d_excesschemicalpotentialuc_1(
    RIS_rism3d_c_rism3d * self, double * coeff, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialuc_1
    double SHC_rv = SH_this->excesschemicalpotentialuc(coeff, o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialuc_1
}

double * RIS_rism3d_c_rism3d_excesschemicalpotential_tot_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_tot_map
    double * SHC_rv = SH_this->excesschemicalpotential_tot_map(dim1,
        dim2, dim3);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_tot_map
}

void RIS_rism3d_c_rism3d_excesschemicalpotential_tot_map_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_tot_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    double * SHC_rv = SH_this->excesschemicalpotential_tot_map(&dim1,
        &dim2, &dim3);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 3;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2];
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_tot_map_bufferify
}

double * RIS_rism3d_c_rism3d_excesschemicalpotentialgf_tot_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_tot_map
    double * SHC_rv = SH_this->excesschemicalpotentialgf_tot_map(dim1,
        dim2, dim3);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_tot_map
}

void RIS_rism3d_c_rism3d_excesschemicalpotentialgf_tot_map_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_tot_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    double * SHC_rv = SH_this->excesschemicalpotentialgf_tot_map(&dim1,
        &dim2, &dim3);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 3;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2];
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_tot_map_bufferify
}

double * RIS_rism3d_c_rism3d_excesschemicalpotentialpcplus_tot_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialpcplus_tot_map
    double * SHC_rv = SH_this->excesschemicalpotentialpcplus_tot_map(
        dim1, dim2, dim3);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialpcplus_tot_map
}

void RIS_rism3d_c_rism3d_excesschemicalpotentialpcplus_tot_map_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialpcplus_tot_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    double * SHC_rv = SH_this->excesschemicalpotentialpcplus_tot_map(
        &dim1, &dim2, &dim3);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 3;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2];
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialpcplus_tot_map_bufferify
}

double * RIS_rism3d_c_rism3d_excesschemicalpotentialuc_tot_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3,
    double * coeff)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialuc_tot_map
    double * SHC_rv = SH_this->excesschemicalpotentialuc_tot_map(dim1,
        dim2, dim3, coeff);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialuc_tot_map
}

void RIS_rism3d_c_rism3d_excesschemicalpotentialuc_tot_map_bufferify(
    RIS_rism3d_c_rism3d * self, double * coeff,
    RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialuc_tot_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    double * SHC_rv = SH_this->excesschemicalpotentialuc_tot_map(&dim1,
        &dim2, &dim3, coeff);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 3;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2];
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialuc_tot_map_bufferify
}

double * RIS_rism3d_c_rism3d_solventpotene_tot_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solventpotene_tot_map
    double * SHC_rv = SH_this->solventpotene_tot_map(dim1, dim2, dim3);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solventpotene_tot_map
}

void RIS_rism3d_c_rism3d_solventpotene_tot_map_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solventpotene_tot_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    double * SHC_rv = SH_this->solventpotene_tot_map(&dim1, &dim2,
        &dim3);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 3;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2];
    // splicer end namespace.rism3d_c.class.rism3d.method.solventpotene_tot_map_bufferify
}

double * RIS_rism3d_c_rism3d_solvationenergy_tot_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergy_tot_map
    double * SHC_rv = SH_this->solvationenergy_tot_map(dim1, dim2,
        dim3);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergy_tot_map
}

void RIS_rism3d_c_rism3d_solvationenergy_tot_map_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergy_tot_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    double * SHC_rv = SH_this->solvationenergy_tot_map(&dim1, &dim2,
        &dim3);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 3;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2];
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergy_tot_map_bufferify
}

double * RIS_rism3d_c_rism3d_solvationenergygf_tot_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergygf_tot_map
    double * SHC_rv = SH_this->solvationenergygf_tot_map(dim1, dim2,
        dim3);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergygf_tot_map
}

void RIS_rism3d_c_rism3d_solvationenergygf_tot_map_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergygf_tot_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    double * SHC_rv = SH_this->solvationenergygf_tot_map(&dim1, &dim2,
        &dim3);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 3;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2];
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergygf_tot_map_bufferify
}

double * RIS_rism3d_c_rism3d_solvationenergypcplus_tot_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergypcplus_tot_map
    double * SHC_rv = SH_this->solvationenergypcplus_tot_map(dim1, dim2,
        dim3);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergypcplus_tot_map
}

void RIS_rism3d_c_rism3d_solvationenergypcplus_tot_map_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergypcplus_tot_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    double * SHC_rv = SH_this->solvationenergypcplus_tot_map(&dim1,
        &dim2, &dim3);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 3;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2];
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergypcplus_tot_map_bufferify
}

double * RIS_rism3d_c_rism3d_solvationenergyuc_tot_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3,
    double * coeff)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergyuc_tot_map
    double * SHC_rv = SH_this->solvationenergyuc_tot_map(dim1, dim2,
        dim3, coeff);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergyuc_tot_map
}

void RIS_rism3d_c_rism3d_solvationenergyuc_tot_map_bufferify(
    RIS_rism3d_c_rism3d * self, double * coeff,
    RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergyuc_tot_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    double * SHC_rv = SH_this->solvationenergyuc_tot_map(&dim1, &dim2,
        &dim3, coeff);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 3;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2];
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergyuc_tot_map_bufferify
}

double * RIS_rism3d_c_rism3d_excesschemicalpotential_site_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3,
    int * dim4)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_site_map
    double * SHC_rv = SH_this->excesschemicalpotential_site_map(dim1,
        dim2, dim3, dim4);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_site_map
}

void RIS_rism3d_c_rism3d_excesschemicalpotential_site_map_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_site_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    int dim4;
    double * SHC_rv = SH_this->excesschemicalpotential_site_map(&dim1,
        &dim2, &dim3, &dim4);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 4;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->shape[3] = dim4;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2]*SHT_rv_cdesc->shape[3];
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotential_site_map_bufferify
}

double * RIS_rism3d_c_rism3d_excesschemicalpotentialgf_site_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3,
    int * dim4)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_site_map
    double * SHC_rv = SH_this->excesschemicalpotentialgf_site_map(dim1,
        dim2, dim3, dim4);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_site_map
}

void RIS_rism3d_c_rism3d_excesschemicalpotentialgf_site_map_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_site_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    int dim4;
    double * SHC_rv = SH_this->excesschemicalpotentialgf_site_map(&dim1,
        &dim2, &dim3, &dim4);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 4;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->shape[3] = dim4;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2]*SHT_rv_cdesc->shape[3];
    // splicer end namespace.rism3d_c.class.rism3d.method.excesschemicalpotentialgf_site_map_bufferify
}

double * RIS_rism3d_c_rism3d_solventpotene_site_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3,
    int * dim4)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solventpotene_site_map
    double * SHC_rv = SH_this->solventpotene_site_map(dim1, dim2, dim3,
        dim4);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solventpotene_site_map
}

void RIS_rism3d_c_rism3d_solventpotene_site_map_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solventpotene_site_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    int dim4;
    double * SHC_rv = SH_this->solventpotene_site_map(&dim1, &dim2,
        &dim3, &dim4);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 4;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->shape[3] = dim4;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2]*SHT_rv_cdesc->shape[3];
    // splicer end namespace.rism3d_c.class.rism3d.method.solventpotene_site_map_bufferify
}

double * RIS_rism3d_c_rism3d_solvationenergy_site_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3,
    int * dim4)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergy_site_map
    double * SHC_rv = SH_this->solvationenergy_site_map(dim1, dim2,
        dim3, dim4);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergy_site_map
}

void RIS_rism3d_c_rism3d_solvationenergy_site_map_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergy_site_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    int dim4;
    double * SHC_rv = SH_this->solvationenergy_site_map(&dim1, &dim2,
        &dim3, &dim4);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 4;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->shape[3] = dim4;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2]*SHT_rv_cdesc->shape[3];
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergy_site_map_bufferify
}

double * RIS_rism3d_c_rism3d_solventpotene(RIS_rism3d_c_rism3d * self,
    int * len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solventpotene
    double * SHC_rv = SH_this->solventpotene(len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solventpotene
}

void RIS_rism3d_c_rism3d_solventpotene_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solventpotene_bufferify
    int len;
    double * SHC_rv = SH_this->solventpotene(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.solventpotene_bufferify
}

double RIS_rism3d_c_rism3d_partialmolarvolume(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.partialmolarvolume
    double SHC_rv = SH_this->partialmolarvolume();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.partialmolarvolume
}

double * RIS_rism3d_c_rism3d_excessparticles_0(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excessparticles_0
    int len;
    double * SHC_rv = SH_this->excessparticles(&len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excessparticles_0
}

void RIS_rism3d_c_rism3d_excessparticles_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excessparticles_0_bufferify
    int len;
    double * SHC_rv = SH_this->excessparticles(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.excessparticles_0_bufferify
}

double * RIS_rism3d_c_rism3d_excessparticles_1(
    RIS_rism3d_c_rism3d * self, int * len, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excessparticles_1
    double * SHC_rv = SH_this->excessparticles(len, o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excessparticles_1
}

void RIS_rism3d_c_rism3d_excessparticles_1_bufferify(
    RIS_rism3d_c_rism3d * self, bool o_lr,
    RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excessparticles_1_bufferify
    int len;
    double * SHC_rv = SH_this->excessparticles(&len, o_lr);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.excessparticles_1_bufferify
}

double * RIS_rism3d_c_rism3d_kirkwoodbuff_0(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_0
    int len;
    double * SHC_rv = SH_this->kirkwoodbuff(&len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_0
}

void RIS_rism3d_c_rism3d_kirkwoodbuff_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_0_bufferify
    int len;
    double * SHC_rv = SH_this->kirkwoodbuff(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_0_bufferify
}

double * RIS_rism3d_c_rism3d_kirkwoodbuff_1(RIS_rism3d_c_rism3d * self,
    int * len, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_1
    double * SHC_rv = SH_this->kirkwoodbuff(len, o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_1
}

void RIS_rism3d_c_rism3d_kirkwoodbuff_1_bufferify(
    RIS_rism3d_c_rism3d * self, bool o_lr,
    RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_1_bufferify
    int len;
    double * SHC_rv = SH_this->kirkwoodbuff(&len, o_lr);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_1_bufferify
}

double * RIS_rism3d_c_rism3d_dcfintegral(RIS_rism3d_c_rism3d * self,
    int * len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.dcfintegral
    double * SHC_rv = SH_this->dcfintegral(len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.dcfintegral
}

void RIS_rism3d_c_rism3d_dcfintegral_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.dcfintegral_bufferify
    int len;
    double * SHC_rv = SH_this->dcfintegral(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.dcfintegral_bufferify
}

bool RIS_rism3d_c_rism3d_cancalc_dt(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.cancalc_dt
    bool SHC_rv = SH_this->cancalc_dt();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.cancalc_dt
}

bool RIS_rism3d_c_rism3d_calculatesolution_dt(
    RIS_rism3d_c_rism3d * self, int kshow, int maxSteps, bool failure,
    double tolerance)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.calculatesolution_dt
    bool SHC_rv = SH_this->calculatesolution_dt(kshow, maxSteps,
        failure, tolerance);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.calculatesolution_dt
}

double * RIS_rism3d_c_rism3d_solvationenergy_0(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergy_0
    int len;
    double * SHC_rv = SH_this->solvationenergy(&len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergy_0
}

void RIS_rism3d_c_rism3d_solvationenergy_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergy_0_bufferify
    int len;
    double * SHC_rv = SH_this->solvationenergy(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergy_0_bufferify
}

double * RIS_rism3d_c_rism3d_solvationenergy_1(
    RIS_rism3d_c_rism3d * self, int * len, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergy_1
    double * SHC_rv = SH_this->solvationenergy(len, o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergy_1
}

void RIS_rism3d_c_rism3d_solvationenergy_1_bufferify(
    RIS_rism3d_c_rism3d * self, bool o_lr,
    RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergy_1_bufferify
    int len;
    double * SHC_rv = SH_this->solvationenergy(&len, o_lr);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergy_1_bufferify
}

double * RIS_rism3d_c_rism3d_solvationenergygf_0(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergygf_0
    int len;
    double * SHC_rv = SH_this->solvationenergygf(&len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergygf_0
}

void RIS_rism3d_c_rism3d_solvationenergygf_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergygf_0_bufferify
    int len;
    double * SHC_rv = SH_this->solvationenergygf(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergygf_0_bufferify
}

double * RIS_rism3d_c_rism3d_solvationenergygf_1(
    RIS_rism3d_c_rism3d * self, int * len, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergygf_1
    double * SHC_rv = SH_this->solvationenergygf(len, o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergygf_1
}

void RIS_rism3d_c_rism3d_solvationenergygf_1_bufferify(
    RIS_rism3d_c_rism3d * self, bool o_lr,
    RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergygf_1_bufferify
    int len;
    double * SHC_rv = SH_this->solvationenergygf(&len, o_lr);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergygf_1_bufferify
}

double * RIS_rism3d_c_rism3d_solvationenergygf_site_map(
    RIS_rism3d_c_rism3d * self, int * dim1, int * dim2, int * dim3,
    int * dim4)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergygf_site_map
    double * SHC_rv = SH_this->solvationenergygf_site_map(dim1, dim2,
        dim3, dim4);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergygf_site_map
}

void RIS_rism3d_c_rism3d_solvationenergygf_site_map_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergygf_site_map_bufferify
    int dim1;
    int dim2;
    int dim3;
    int dim4;
    double * SHC_rv = SH_this->solvationenergygf_site_map(&dim1, &dim2,
        &dim3, &dim4);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 4;
    SHT_rv_cdesc->shape[0] = dim1;
    SHT_rv_cdesc->shape[1] = dim2;
    SHT_rv_cdesc->shape[2] = dim3;
    SHT_rv_cdesc->shape[3] = dim4;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0]*SHT_rv_cdesc->shape[1]*
        SHT_rv_cdesc->shape[2]*SHT_rv_cdesc->shape[3];
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergygf_site_map_bufferify
}

double * RIS_rism3d_c_rism3d_excessparticles_dt_0(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excessparticles_dt_0
    int len;
    double * SHC_rv = SH_this->excessparticles_dt(&len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excessparticles_dt_0
}

void RIS_rism3d_c_rism3d_excessparticles_dt_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excessparticles_dt_0_bufferify
    int len;
    double * SHC_rv = SH_this->excessparticles_dt(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.excessparticles_dt_0_bufferify
}

double * RIS_rism3d_c_rism3d_excessparticles_dt_1(
    RIS_rism3d_c_rism3d * self, int * len, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excessparticles_dt_1
    double * SHC_rv = SH_this->excessparticles_dt(len, o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.excessparticles_dt_1
}

void RIS_rism3d_c_rism3d_excessparticles_dt_1_bufferify(
    RIS_rism3d_c_rism3d * self, bool o_lr,
    RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.excessparticles_dt_1_bufferify
    int len;
    double * SHC_rv = SH_this->excessparticles_dt(&len, o_lr);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.excessparticles_dt_1_bufferify
}

double * RIS_rism3d_c_rism3d_kirkwoodbuff_dt_0(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_dt_0
    int len;
    double * SHC_rv = SH_this->kirkwoodbuff_dt(&len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_dt_0
}

void RIS_rism3d_c_rism3d_kirkwoodbuff_dt_0_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_dt_0_bufferify
    int len;
    double * SHC_rv = SH_this->kirkwoodbuff_dt(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_dt_0_bufferify
}

double * RIS_rism3d_c_rism3d_kirkwoodbuff_dt_1(
    RIS_rism3d_c_rism3d * self, int * len, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_dt_1
    double * SHC_rv = SH_this->kirkwoodbuff_dt(len, o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_dt_1
}

void RIS_rism3d_c_rism3d_kirkwoodbuff_dt_1_bufferify(
    RIS_rism3d_c_rism3d * self, bool o_lr,
    RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_dt_1_bufferify
    int len;
    double * SHC_rv = SH_this->kirkwoodbuff_dt(&len, o_lr);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.kirkwoodbuff_dt_1_bufferify
}

double * RIS_rism3d_c_rism3d_dcfintegral_dt(RIS_rism3d_c_rism3d * self,
    int * len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.dcfintegral_dt
    double * SHC_rv = SH_this->dcfintegral_dt(len);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.dcfintegral_dt
}

void RIS_rism3d_c_rism3d_dcfintegral_dt_bufferify(
    RIS_rism3d_c_rism3d * self, RIS_SHROUD_array *SHT_rv_cdesc)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.dcfintegral_dt_bufferify
    int len;
    double * SHC_rv = SH_this->dcfintegral_dt(&len);
    SHT_rv_cdesc->cxx.addr  = SHC_rv;
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.base = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_DOUBLE;
    SHT_rv_cdesc->elem_len = sizeof(double);
    SHT_rv_cdesc->rank = 1;
    SHT_rv_cdesc->shape[0] = len;
    SHT_rv_cdesc->size = SHT_rv_cdesc->shape[0];
    // splicer end namespace.rism3d_c.class.rism3d.method.dcfintegral_dt_bufferify
}

double RIS_rism3d_c_rism3d_solvationenergypcplus_0(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergypcplus_0
    double SHC_rv = SH_this->solvationenergypcplus();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergypcplus_0
}

double RIS_rism3d_c_rism3d_solvationenergypcplus_1(
    RIS_rism3d_c_rism3d * self, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergypcplus_1
    double SHC_rv = SH_this->solvationenergypcplus(o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergypcplus_1
}

double RIS_rism3d_c_rism3d_solvationenergyuc_0(
    RIS_rism3d_c_rism3d * self, double * coeff)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergyuc_0
    double SHC_rv = SH_this->solvationenergyuc(coeff);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergyuc_0
}

double RIS_rism3d_c_rism3d_solvationenergyuc_1(
    RIS_rism3d_c_rism3d * self, double * coeff, bool o_lr)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.solvationenergyuc_1
    double SHC_rv = SH_this->solvationenergyuc(coeff, o_lr);
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.solvationenergyuc_1
}

double RIS_rism3d_c_rism3d_partialmolarvolume_dt(
    RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.partialmolarvolume_dt
    double SHC_rv = SH_this->partialmolarvolume_dt();
    return SHC_rv;
    // splicer end namespace.rism3d_c.class.rism3d.method.partialmolarvolume_dt
}

void RIS_rism3d_c_rism3d_unsetcharges(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.unsetcharges
    SH_this->unsetcharges();
    // splicer end namespace.rism3d_c.class.rism3d.method.unsetcharges
}

void RIS_rism3d_c_rism3d_resetcharges(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.resetcharges
    SH_this->resetcharges();
    // splicer end namespace.rism3d_c.class.rism3d.method.resetcharges
}

void RIS_rism3d_c_rism3d_map_site_to_site_flat(
    RIS_rism3d_c_rism3d * self, double * thermo_map_flat,
    int center_site)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.map_site_to_site_flat
    SH_this->map_site_to_site_flat(thermo_map_flat, center_site);
    // splicer end namespace.rism3d_c.class.rism3d.method.map_site_to_site_flat
}

void RIS_rism3d_c_rism3d_map_site_to_site_3D(RIS_rism3d_c_rism3d * self,
    double * thermo_map, int center_site)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.map_site_to_site_3D
    SH_this->map_site_to_site_3D(thermo_map, center_site);
    // splicer end namespace.rism3d_c.class.rism3d.method.map_site_to_site_3D
}

void RIS_rism3d_c_rism3d_selftest(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.selftest
    SH_this->selftest();
    // splicer end namespace.rism3d_c.class.rism3d.method.selftest
}

void RIS_rism3d_c_rism3d_set_closurelist(RIS_rism3d_c_rism3d * self,
    char **names, int * N)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.set_closurelist
    SH_this->set_closurelist(names, N);
    // splicer end namespace.rism3d_c.class.rism3d.method.set_closurelist
}

void RIS_rism3d_c_rism3d_set_closurelist_bufferify(
    RIS_rism3d_c_rism3d * self, const char *names,
    size_t SHT_names_size, int SHT_names_len, int * N)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.set_closurelist_bufferify
    char **SHCXX_names = ShroudStrArrayAlloc(names, SHT_names_size,
        SHT_names_len);
    SH_this->set_closurelist(SHCXX_names, N);
    ShroudStrArrayFree(SHCXX_names, SHT_names_size);
    // splicer end namespace.rism3d_c.class.rism3d.method.set_closurelist_bufferify
}

void RIS_rism3d_c_rism3d_PrintTests(RIS_rism3d_c_rism3d * self)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.PrintTests
    SH_this->PrintTests();
    // splicer end namespace.rism3d_c.class.rism3d.method.PrintTests
}

void RIS_rism3d_c_rism3d_opendx_write_cpp(RIS_rism3d_c_rism3d * self,
    int atomType, char * file)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.opendx_write_cpp
    std::string SHCXX_file(file);
    SH_this->opendx_write_cpp(atomType, &SHCXX_file);
    // splicer end namespace.rism3d_c.class.rism3d.method.opendx_write_cpp
}

void RIS_rism3d_c_rism3d_opendx_write_cpp_bufferify(
    RIS_rism3d_c_rism3d * self, int atomType, char *file,
    int SHT_file_len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.opendx_write_cpp_bufferify
    std::string SHCXX_file(file, ShroudCharLenTrim(file, SHT_file_len));
    SH_this->opendx_write_cpp(atomType, &SHCXX_file);
    // splicer end namespace.rism3d_c.class.rism3d.method.opendx_write_cpp_bufferify
}

void RIS_rism3d_c_rism3d_mrc_map_write_cpp(RIS_rism3d_c_rism3d * self,
    int atomType, char * file)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.mrc_map_write_cpp
    std::string SHCXX_file(file);
    SH_this->mrc_map_write_cpp(atomType, &SHCXX_file);
    // splicer end namespace.rism3d_c.class.rism3d.method.mrc_map_write_cpp
}

void RIS_rism3d_c_rism3d_mrc_map_write_cpp_bufferify(
    RIS_rism3d_c_rism3d * self, int atomType, char *file,
    int SHT_file_len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.mrc_map_write_cpp_bufferify
    std::string SHCXX_file(file, ShroudCharLenTrim(file, SHT_file_len));
    SH_this->mrc_map_write_cpp(atomType, &SHCXX_file);
    // splicer end namespace.rism3d_c.class.rism3d.method.mrc_map_write_cpp_bufferify
}

void RIS_rism3d_c_rism3d_xyzv_write_cpp(RIS_rism3d_c_rism3d * self,
    int atomType, char * file)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.xyzv_write_cpp
    std::string SHCXX_file(file);
    SH_this->xyzv_write_cpp(atomType, &SHCXX_file);
    // splicer end namespace.rism3d_c.class.rism3d.method.xyzv_write_cpp
}

void RIS_rism3d_c_rism3d_xyzv_write_cpp_bufferify(
    RIS_rism3d_c_rism3d * self, int atomType, char *file,
    int SHT_file_len)
{
    rism3d_c::rism3d *SH_this = static_cast<rism3d_c::rism3d *>
        (self->addr);
    // splicer begin namespace.rism3d_c.class.rism3d.method.xyzv_write_cpp_bufferify
    std::string SHCXX_file(file, ShroudCharLenTrim(file, SHT_file_len));
    SH_this->xyzv_write_cpp(atomType, &SHCXX_file);
    // splicer end namespace.rism3d_c.class.rism3d.method.xyzv_write_cpp_bufferify
}

}  // extern "C"
