// utilRISM3D.cpp
// This file is generated by Shroud 0.13.0. Do not edit.

#include "rism3d.hpp"
#include "typesRISM3D.h"
#include <cstddef>
#include <cstring>


#ifdef __cplusplus
extern "C" {
#endif

// Release library allocated memory.
void RIS_SHROUD_memory_destructor(RIS_SHROUD_capsule_data *cap)
{
    void *ptr = cap->addr;
    switch (cap->idtor) {
    case 0:   // --none--
    {
        // Nothing to delete
        break;
    }
    case 1:   // rism3d_c::rism3d
    {
        rism3d_c::rism3d *cxx_ptr = 
            reinterpret_cast<rism3d_c::rism3d *>(ptr);
        delete cxx_ptr;
        break;
    }
    default:
    {
        // Unexpected case in destructor
        break;
    }
    }
    cap->addr = nullptr;
    cap->idtor = 0;  // avoid deleting again
}

#ifdef __cplusplus
}
#endif

// helper array_string_out
// Copy the std::vector<std::string> into Fortran array argument.
// Called by C++.
void RIS_ShroudArrayStringOut(RIS_SHROUD_array *outdesc, std::string *in, size_t nsize)
{
    size_t nvect = outdesc->size;
    size_t len = outdesc->elem_len;
    char *dest = const_cast<char *>(outdesc->addr.ccharp);
    // Clear user memory
    std::memset(dest, ' ', nvect*len);

    // Copy into user memory
    nvect = std::min(nvect, nsize);
    //char *dest = static_cast<char *>(outdesc->cxx.addr);
    for (size_t i = 0; i < nvect; ++i) {
        std::memcpy(dest, in[i].data(), std::min(len, in[i].length()));
        dest += outdesc->elem_len;
    }
    //RIS_SHROUD_memory_destructor(&in->cxx); // delete data->cxx.addr
}

