#!/bin/bash

printf "configure script for msander\n\n"

# Store the command
command=`echo "$0 $*"`

#------------------------------------------------------------------------------
#  Set up defaults:
#------------------------------------------------------------------------------
msanderhome=`pwd`
verbose="@"
enablempi=
requested_help="no"
clangf=""
openblas="no"
sfx=""
gcc10f=""
gcc10c=""
longlines="-ffree-line-length-none"
debug="-DNDEBUG"
fpic="-fPIC"

compiler="gnu"
cc="gcc -Wno-unused-result"
mpicc="mpicc"
iccflags=""

fc="gfortran"
flibs_arch="-lgfortran -w"
flibs_la=""
flibs_fftw="-lfftw3"
mpif90="mpif90"
gccsys=""
optflags="-g -O3"

openmp='no'
ompflag=""
ldflags=""
fftw_flags=""
mkl="no"    
installtype="serial"

plumed="no"

cuda="no"
cudaflags=''
cudafflags=''
cuda_arch=''
cuda_arch_flags=''
uspec_arch='false'
cuda_prec='SPFP'

lapack="skip"
blas="skip"

inc="-I$msanderhome/include"
netcdflibf_static="$msanderhome/lib/libnetcdff.a $msanderhome/lib/libnetcdf.a"
netcdflibf_shared="-L$msanderhome/lib -lnetcdff -lnetcdf"
netcdflibf=$netcdflibf_static

#short_ene=short_ene_omp.o
short_ene=short_ene.o   # short_ene_omp may slow things down or even crash

#------------------------------------------------------------------------------
#  Process command-line flags:
#------------------------------------------------------------------------------

while [ $# -gt 0 ]; do
    case "$1" in
        -h|-H|--h|--he|--hel|--help|-help)
            requested_help="yes";;
        --verbose)
            verbose="";;
        --debug)
            debug="";;
        --openmp)
            ompflag='-fopenmp -DOPENMP';
            flibs_fftw="-lfftw3_omp $flibs_fftw"
            openmp="yes";;
        --cuda)
            cuda="yes"
            installtype="cuda"
            cudafflags="-DCUDA"
            fpic="";;
        --prec)          shift; cuda_prec="$1";;
        --arch)          shift; cuda_arch="$cuda_arch $1"; uspec_arch='true';;
        --gcc10)
            gcc10f="-Wno-argument-mismatch -fallow-argument-mismatch -fno-inline-arg-packing"
            gcc10c="-fcommon";;
        --mkl)
            mkl="yes";;
        --openblas)
            openblas="yes";;
        --static)
            ldflags="-static";;
        --plumed)
            plumed="yes";;
        --intel)
            compiler="intel"
            cc="icx"
            fc="ifort"
            longlines=""
            mpicc="mpiicc -cc=icx"
            mpif90="mpiifort"
            optflags="-g -O3"
            flibs_arch="-lifport -lifcore -lsvml";;
        --clang)
            compiler="clang"
            clangf="-DCLANG"
            cc="clang"
            fc="gfortran"
            optflags="-g -O3";;
        --mpi)
            mpi="yes"
            fftw_flags="--enable-mpi=yes $fftw_flags"
            mpiflag="-DMPI"
            flibs_fftw="-lfftw3_mpi $flibs_fftw -lmpi"
            short_ene=short_ene.o
            installtype="parallel"
            sfx=".MPI";;
        --full)
            installtype="full";;
        *)
            echo "Option $var not recognized"
            exit 1
    esac
    shift
done

if [ "$requested_help" = "yes" ] ; then
	printf " --intel        use Intel compilers; default is gnu\n"
	printf " --clang        use clang/gfortran as compilers\n"
	printf " --gcc10        add flags for gcc10 and above\n"
    printf "\n"
	printf " --mpi          prepare for mpi build\n"
	printf " --openmp       prepare for OMP build\n"
	printf " --cuda         prepare for cuda build\n"
    printf " --prec         [SPFP|DPFP], cuda precision, default is SPFP\n"
    printf " --arch          <kepler|maxwell|pascal|volta|turing|ampere|ada>"
    printf "\n"
	printf " --mkl          use MKL routines from \$MKLROOT environment variable\n"
	printf " --openblas     use BLAS routines from \$GOTO environment variable\n"
	printf " --verbose      give build details, otherwise be more silent\n"
	printf " --static       use static linking (experiental)\n"
    printf " --full         install everything with a serial install\n"
    printf "\n"
    exit 0
fi

#  extra logic related to command-line arguments: generally, things
#      that need to be decided only after all arguments have been processed

if [ "$compiler" == "intel" -a "$openmp" == "yes" ]; then
  ompflag="-qopenmp -DOPENMP"
fi
if [ "$compiler" == "intel" -a "$mpi" == "yes" ]; then
  optflags="-g -O3"
fi
if [ "$mpi" == "yes" ]; then
  fc="$mpif90"
  cc="$mpicc"
fi
if [ "$mpi" == "yes" -a "$cuda" == "yes" ]; then
  installtype="mpicuda"
fi

#------------------------------------------------------------------------------
#  Make some needed directories:
#------------------------------------------------------------------------------
if [ ! -d bin ]; then
    mkdir bin
fi
if [ ! -d lib ]; then
    mkdir lib
fi
if [ ! -d include ]; then
    mkdir include
fi
cp src/msander/sander.h include

#------------------------------------------------------------------------------
#  Initialize variables that are architecture specific:
#------------------------------------------------------------------------------
processor=`uname -m`
if [ "$processor" = "em64t" -o "$processor" = "x86_64" ] ; then
    x86_64='yes'
else
    x86_64='no'
fi

# Determine linker type. Currently only matters for MKL
ld_version=`ld -v 2>&1 | awk '{print $1}'`
case "$ld_version" in
    *GNU*)
        gnuld='yes';;
    *)
        gnuld='no' ;;
esac

OS=`uname -s`
if [ "$OS" = "Darwin" ]; then
   is_mac='yes'
   shared_suffix=.dylib
   make_shared=-dynamiclib
   lm=
   if [ "$compiler" = 'intel' ] ; then
      optflags="-g -O3"
      iccflags="-std=c99"
   fi
else
   is_mac='no'
   shared_suffix=.so
   make_shared=-shared
   lm=-lm
fi

#--------------------------------------------------------------------------
#  Test if the C compiler works:
#--------------------------------------------------------------------------

cat <<EOF >testp.c
#include <stdio.h>
int main()
{
   printf( "testing a C program\n" );
}
EOF

printf "Testing $cc ..."
$cc -o testp testp.c
./testp | grep "testing a C program" > /dev/null
status=$?

if [ $status -gt 0 ]; then
    printf "\nError: Unable to compile a C program using gcc\n"
    printf "       Please check your compiler settings.\n"
    exit 1
else
    printf "OK\n"
fi
/bin/rm -f testp.c testp.o testp

#--------------------------------------------------------------------------
#  Test if the Fortran compiler works:
#--------------------------------------------------------------------------

cat <<EOF >testp.f
      program testf
      write(6,*) 'testing a Fortran program'
      end program testf
EOF

printf "Testing $fc ..."
$fc -o testp testp.f
./testp | grep "testing a Fortran program" > /dev/null
status=$?

if [ $status -gt 0 ]; then
    printf "\nError: Unable to compile a Fortran program using gfortran\n"
    printf "       Please check your compiler settings.\n"
    exit 1
else
	printf "OK\n"
fi
/bin/rm -f testp.f testp.o testp

#--------------------------------------------------------------------------
#  Configure the MKL or GOTO etc libraries for BLAS/LAPACK.
#--------------------------------------------------------------------------

# Determine MKL home directory
mklroot=''
if [ ! -z "$MKLROOT" ] ; then
    mklroot=$MKLROOT
elif [ ! -z "$MKL_HOME" ] ; then
    mklroot=$MKL_HOME
fi

if [ -z "$mklroot" -o "$mkl" == "no" ] ; then

   if [ ! -z "$GOTO" -a "$openblas" == "yes" ]; then
      echo "using OpenBLAS libraries in $GOTO"
      flibs_la="$GOTO -lpthread"
   else
      # use the compiled versions;
      flibs_la="-llapack -lblas"
      lapack=liblapack
      blas=libblas
   fi

else

  if [ "$mpi" == "yes" ]; then
     echo "Using MKL for BLAS/LAPACK in $mklroot"
     inc="-I$mklroot/include $inc"
     lapack=skip
     blas=skip
  else
     echo "Using MKL for BLAS/LAPACK/FFTW in $mklroot"
     inc="-I$mklroot/include -I$mklroot/include/fftw $inc"
     lapack=skip
     blas=skip
     flibs_fftw=""
  fi

  # Determine how we are linking MKL
  if  [ "$compiler" = 'gnu' -o "$is_mac" = 'yes' ] ; then
    link_type='line'
  else
    link_type='mkl'   #assuming Intel
  fi

  # We generally link to the sequential version of MKL since typically
  # one runs an MPI thread for each core.  However, if openmp is
  # specified, for example to turn on SMP diagonalizers for QMMM,
  # then we link to the threaded version of MKL and inside the code
  # the number of threads for vector functions etc will be set to 1.

  # Always link static version of MKL - just easier from an end
  # user perspective.

  if [ "$link_type" = 'line' ] ; then

    # ----- Link line advisor style. ------

    mkll="$mklroot/lib/32"
    mklinterfacelayer='libmkl_intel.a'
    if [ "$is_mac" = 'yes' ] ; then
      mkll="$mklroot/lib"
      if [ "$x86_64" = 'yes' ]; then
        mklinterfacelayer='libmkl_intel_lp64.a'
      fi
    elif [ "$x86_64" = 'yes' ]; then
      if [ -d "$mklroot/lib/em64t" ]; then
        mkll="$mklroot/lib/em64t"
        mkl_procstring="em64t"
      else
        mkll="$mklroot/lib/intel64"
        mkl_procstring="intel64"
      fi
      # lp64 is 32 bit integers on 64 bit platforms
      mklinterfacelayer='libmkl_intel_lp64.a'
    fi

    # Determing threading interface if necessary
    mklthread="$mkll/libmkl_sequential.a"
    mklomp=''
    if [ "$openmp" = 'yes' ] ; then
      if [ "$compiler" = 'intel' ] ; then
        mklthread="$mkll/libmkl_intel_thread.a"
        mklomp='-liomp5'
      elif [ "$compiler" = 'pgi' ] ; then
        mklthread="$mkll/libmkl_pgi_thread.a"
        mklomp='-pgf90libs -mp'
      else
        mklthread="$mkll/libmkl_gnu_thread.a"
        mklomp='-lgomp'
      fi
      if [ "$is_mac" = 'yes' -a "$compiler" != 'intel' ] ; then
        echo "Warning: OpenMP MKL not supported on OSX without Intel compilers. Using sequential."
        mklthread="$mkll/libmkl_sequential.a"
        mklomp=''
      fi
    fi

    # Set link flags
    if [ "$gnuld" = 'yes' ]; then
      echo "GNU linker assumed."
      flibs_la="-Wl,--start-group $mkll/$mklinterfacelayer $mklthread $mkll/libmkl_core.a -Wl,--end-group $mklomp -lpthread"
    else
      echo "Non-GNU linker assumed."
      flibs_la="-L$mkll $mkll/$mklinterfacelayer $mklthread $mkll/libmkl_core.a $mklomp -lpthread"
    fi
    # GNU compilers with MKL requires -ldl
    if [ "$compiler" = 'gnu' -o "$compiler" = 'clang' ]; then
      flibs_la="$flibs_la -ldl"
    fi

  else
    # ----- Use simple flag for Intel compilers on Linux ------------
    flibs_la='-qmkl'
  fi
fi

#--------------------------------------------------------------------------
#  Configure and build netcdf:
#--------------------------------------------------------------------------
if [ ! -s "lib/libnetcdf.a" ]; then
   cd src/netcdf-c-4.7.2
   printf "Configuring the NetCDF C interface..."
   make clean > /dev/null 2>&1
   ./configure CC="$cc" CFLAGS="-fPIC" LDFLAGS="" \
      --prefix=$msanderhome --disable-netcdf-4 --disable-dap \
      --disable-shared --disable-doxygen > ../netcdf_c.config.log 2>&1
   ncerror=$?
   if [ $ncerror -gt 0 ]; then
       echo "Error: NetCDF configure failed!  Check netcdf_c.config.log"
       exit 1
   else
       echo "OK"
   fi
   # The NetCDF C interface MUST be present prior to configuring the
   # Fortran interface, so build it now.
   printf "Compiling the NetCDF C interface..."
   make install > ../netcdf_c.compile.log 2>&1
   if [ $? -ne 0 ]; then
       echo "Error: NetCDF compile failed!  Check netcdf_c.compile.log"
       exit 1
   else
       echo "OK"
   fi
   # NetCDF Fortran configure/build
   cd ../netcdf-fortran-4.5.2
   # The NetCDF Fortran config script will need access to the C library.
   export LD_LIBRARY_PATH="$msanderhome/lib:$LD_LIBRARY_PATH"
   printf "Configuring the NetCDF Fortran interface..."
   make clean > /dev/null 2>&1
   ./configure  CC="$cc" CFLAGS="-fPIC" \
                  LDFLAGS="-L$msanderhome/lib $ldflags" \
                  CPPFLAGS="-I$msanderhome/include" \
                  FC="$fc" FCFLAGS="" \
                  F77="$fc" FFLAGS="-fPIC" --disable-shared  --disable-doxygen \
                  --prefix=$msanderhome >> ../netcdf_f.config.log 2>&1
   ncerror=$?
   if [ $ncerror -gt 0 ]; then
       echo "Error: NetCDF configure failed!  Check netcdf_f.config.log"
       exit 1
   else
       echo "OK"
   fi
   # Build the fortran interface
   printf "Compiling the NetCDF Fortran interface..."
   make install > ../netcdf_f.compile.log 2>&1
   if [ $? -ne 0 ]; then
     echo "Error: NetCDF Fortran compile failed!  Check netcdf_f.compile.log"
     exit 1
   else
       echo "OK"
   fi
   cd ../..
else
   echo "Using the existing netcdf libraries"
fi

#--------------------------------------------------------------------------
#  Configure and build FFTW3:
#--------------------------------------------------------------------------
if [ "$flibs_fftw" != "" ]; then

   if [ ! -s "lib/libfftw3.a" ] || \
       [ "$mpi" == "yes" -a ! -s "lib/libfftw3_mpi.a" ] || \
       [ "$openmp" == "yes" -a ! -s "lib/libfftw3_omp.a" ]; then

       if [ "$openmp" == "no" ]; then
          enableomp=""
       else
          enableomp="--enable-openmp"
       fi

       # enable_sse="--enable-sse=no --enable-sse2=no --enable-avx=no"
       enable_sse="--enable-sse2=yes --enable-avx=yes"

       # DAC note, 12/18/19: adding -gcc-sys to CFLAGS below seems to
       #   be required for Intel compilers.
       printf "\nConfiguring fftw-3.3 with $cc and $fc..."
       cd src/fftw-3.3 && \
           ./configure --disable-doc --prefix=$msanderhome \
           --libdir=$msanderhome/lib $enableomp $fftw_flags \
           --enable-static $enable_sse MPICC="$mpicc" \
           CC="$cc" CFLAGS="$gccsys $optflags -fPIC"  \
           F77="$fc" FFLAGS="$optflags -fPIC" \
           FLIBS="$flibs_arch"  > fftw3_config.log 2>&1
         ncerror=$?
       if [ $ncerror -gt 0 ]; then
           echo "Error: FFTW configure returned $ncerror"
           exit 1
       else
           echo "OK"
       fi

       # Build FFTW3
       printf "Compiling the FFTW3 interface..."
       make install > fftw3.compile.log 2>&1
       if [ $? -ne 0 ]; then
         printf "\nError: FFTW3 compile failed.\n"
         exit 1
       else
         printf "OK\n"
      fi
      cd ../..
   else
      echo "Using the existing fftw3  libraries"
   fi
fi

#---------------------------------------------------------------------!
# Check for CUDA tool kit and compiler                                !
#---------------------------------------------------------------------!

# this function sets the user defined cuda architecture flags, if specified
set_uspec_arch(){
  for carch in $cuda_arch; do
    case "$carch" in
      kepler)
        echo "Configuring for SM3.0"
        cuda_arch_flags="$cuda_arch_flags $sm30flags"
        cuda_dc_flags='-Xptxas --disable-optimizer-constants';;
      maxwell)
        echo "Configuring for SM5.0"
        cuda_arch_flags="$cuda_arch_flags $sm50flags"
        cuda_dc_flags='-Xptxas --disable-optimizer-constants';;
      pascal)
        echo "Configuring for SM6.0"
        cuda_arch_flags="$cuda_arch_flags $sm60flags"
        cuda_dc_flags='-Xptxas --disable-optimizer-constants';;
      volta)
        echo "Configuring for SM7.0"
        cuda_arch_flags="$cuda_arch_flags $sm70flags"
        if [ `echo "$cudaversion < 10.0 "| bc` -gt 0 ]; then
          cuda_dc_flags='-Xptxas --disable-optimizer-constants'
        fi
        ;;
      turing)
        echo "Configuring for SM7.5"
        cuda_arch_flags="$cuda_arch_flags $sm75flags";;
      ampere)
        echo "Configuring for SM8.0 and SM8.6"
        cuda_arch_flags="$cuda_arch_flags $sm80flags $sm86flags";;
      ada)
        echo "Configuring for SM8.9"
        cuda_arch_flags="$cuda_arch_flags $sm89flags";;
    esac
  done
}

if [ "$cuda" = 'yes' ]; then
  if [ -z "$CUDA_HOME" ]; then
    echo  "Error: CUDA_HOME environment variable is not set."
    echo  "Please make sure CUDA toolkit is loaded."
    exit 1
  fi

  if [ ! -x "$CUDA_HOME/bin/nvcc" ]; then
    echo  "Error: nvcc compiler is not available in $CUDA_HOME/bin/"
    exit 1
  fi

  if [ -z "$NVCC" ]; then nvcc="$CUDA_HOME/bin/nvcc"; else nvcc="$NVCC"; fi

    #SM8.9 = 4090
    sm89flags='-gencode arch=compute_89,code=sm_89'
    #SM8.6 = 3080, 3090(?)
    sm86flags='-gencode arch=compute_86,code=sm_86'
    #SM8.0 = A100
    sm80flags='-gencode arch=compute_80,code=sm_80'
    #SM7.5 = RTX20xx, Tesla T4, Quadro RTX, RTX Titan
    sm75flags='-gencode arch=compute_75,code=sm_75'
    #SM7.0 = V100, Titan V
    sm70flags='-gencode arch=compute_70,code=sm_70'
    #SM6.0 = GP100 / P100 = DGX-1
    sm60flags='-gencode arch=compute_60,code=sm_60'
    #SM5.0 = M40
    sm50flags='-gencode arch=compute_50,code=sm_50'
    #SM3.0 = K80, K40, K20
    sm30flags='-gencode arch=compute_30,code=sm_30'

    cudaversion=`$nvcc --version | awk '/release/{print substr($5,1,4)}'`

    if [ "${cudaversion:0:2}" = "12" ]; then
      echo "CUDA Version $cudaversion detected"
      if [ "$uspec_arch" = 'true' ]; then
        set_uspec_arch
      else
        echo "Configuring for SM5.0, SM6.0, SM7.0, SM7.5"
        cuda_arch_flags="$sm50flags $sm60flags $sm70flags $sm75flags"
        cuda_dc_flags='-Xptxas --disable-optimizer-constants'
      fi
    elif [ "${cudaversion:0:2}" = "11" ]; then
      echo "CUDA Version $cudaversion detected"
      if [ "$uspec_arch" = 'true' ]; then
        set_uspec_arch
      else
        echo "Configuring for SM5.0, SM6.0, SM7.0, SM7.5, SM8.0"
        cuda_arch_flags="$sm50flags $sm60flags $sm70flags $sm75flags $sm80flags"
        cuda_dc_flags='-Xptxas --disable-optimizer-constants'
      fi
    elif [ "${cudaversion:0:2}" = "10" ]; then
      echo "CUDA Version $cudaversion detected"
      if [ "$uspec_arch" = 'true' ]; then
        set_uspec_arch
      else
        echo "Configuring for SM3.0, SM5.0, SM6.0, SM7.0 and SM7.5"
        cuda_arch_flags="$sm30flags $sm50flags $sm60flags $sm70flags $sm75flags"
        cuda_dc_flags='-Xptxas --disable-optimizer-constants'
      fi
    elif [ "${cudaversion:0:1}" = "9" ]; then
      echo "CUDA Version $cudaversion detected"
      if [ "$uspec_arch" = 'true' ]; then
        set_uspec_arch
      else
        echo "Configuring for SM3.0, SM5.0, SM6.0 and SM7.0"
        cuda_arch_flags="$sm30flags $sm50flags $sm60flags $sm70flags"
        cuda_dc_flags='-Xptxas --disable-optimizer-constants'
      fi
    elif [ "${cudaversion:0:1}" = "8" ]; then
      echo "CUDA Version $cudaversion detected"
      if [ "$uspec_arch" = 'true' ]; then
        set_uspec_arch
      else
        echo "Configuring for SM3.0, SM5.0, SM6.0"
        cuda_arch_flags="$sm30flags $sm50flags $sm60flags"
        cuda_dc_flags='-Xptxas --disable-optimizer-constants'
      fi
    else
      echo  "Error: Unsupported CUDA version $cudaversion detected. "
      echo  "       requires at least CUDA version 8.0 "
      exit 1
    fi

    if [ "$cuda_prec" = 'SPFP' ]; then
       prec_model=-DCUDA_PRECISION=Single
       printf "Using SPFP precision model\n"
    else
       prec_model=-DCUDA_PRECISION=Double
       printf "Using DPFP precision model\n"
    fi

fi

#--------------------------------------------------------------------------
#  create the config.h file:
#--------------------------------------------------------------------------

cat <<EOF > config.h

#  msander configuration file.
#  Created on `date` via $command

###############################################################################

# (1)  Location of the installation

AMBERTOOLS=msander
BASEDIR=$msanderhome
BINDIR=\$(BASEDIR)/bin
LIBDIR=\$(BASEDIR)/lib
INCDIR=\$(BASEDIR)/include
DATDIR=\$(BASEDIR)/dat
LOGDIR=\$(BASEDIR)/logs

###############################################################################

#  (2) Flags that depend on OS type

SHARED_SUFFIX=$shared_suffix
MAKE_SHARED=$make_shared
LM=$lm

###############################################################################

#  (3) allow for the use of netcdf

NETCDFLIBF=$netcdflibf

LAPACK=$lapack
BLAS=$blas

###############################################################################

#  (4)  C compiler

CC=$cc
CFLAGS=$clangf $inc $gcc10c $iccflags $fpic $debug
NVCC_CFLAGS=$clangf $inc $iccflags $fpic $debug
CNOOPTFLAGS=-g -O0
COPTFLAGS=$optflags

###############################################################################

#  (5)  Fortran compiler

FC=$fc
FFLAGS=$clangf $inc $ompflag $mpiflag $gcc10f $fpic $longlines $plumed_def
FLIBSF=-lrism -lxray -lsqm -larpack $flibs_fftw $flibs_la $plumed_load
FNOOPTFLAGS= -O0 -g
FOPTFLAGS=$optflags
SHORT_ENE=$short_ene

###############################################################################

#  (6)  other flags:

LDFLAGS=$ldflags
AR=    ar rv
RANLIB=ranlib
MV=mv
CP=cp
MAKE=make --no-print-directory
SFX=$sfx
VB=$verbose
INSTALLTYPE=$installtype

# CUDA:
CUDAFLAGS=$prec_model $cuda_arch_flags $cuda_dc_flags
CUDAFFLAGS=$cudafflags

# PLUMED related variables:
PLUMED_INCLUDE_FILE=
PLUMED_LOAD=Plumed.o
PLUMED_DEPENDENCIES=Plumed.o

EOF

printf "\nThe next step is to type 'make clean && make install'\n\n"

exit 0
