#!/bin/bash

printf "configure script for msander\n\n"

# Store the command
command=`echo "$0 $*"`

# set up defaults:
msanderhome=`pwd`
verbose="@"
enablempi=
requested_help="no"
bintraj="-DBINTRAJ"
rism="-lrism"
rismsander="-DRISMSANDER"
conda="no"

compiler="gnu"
cc="gcc -fPIC"
mpicc="mpicc"

fc="gfortran -fPIC"
flibs_arch="-lgfortran -w"
flibs_la=""
flibs_fftw="-lfftw3"
mpif90="mpif90"
gccsys=""
optflags="-g -O3 -mtune=native"

openmp='no'
ompflag=""
fftw_flags=""
mkl=""

lapack="skip"
blas="skip"
inc="-I$msanderhome/include"
netcdflibf="$msanderhome/lib/libnetcdff.a $msanderhome/lib/libnetcdf.a"
short_ene=short_ene_omp.o

#  process command-line flags:
for var in "$@"; do
    case "$var" in
        -h|-H|--h|--he|--hel|--help|-help)
            requested_help="yes";;
        -fullhelp|--full|--fullhelp|--full-h|--full-he|--full-hel|--full-help)
            requested_help="yes";;
        --verbose)
            verbose="";;
        --conda)
            conda="yes";;
        --openmp)
            ompflag='-fopenmp -DOPENMP';
            flibs_fftw="-lfftw3_omp -lfftw3"
            openmp="yes";;
        --no-netcdf)
            netcdflibf=""
            bintraj="";;
        --mingw)
            cc="x86_64-w64-mingw32-gcc --static"
            cxx="x86_64-w64-mingw32-g++ --static"
            fc="x86_64-w64-mingw32-gfortran --static";;
        --intel)
            compiler="intel"
            cc="icc"
            mpicc="$msanderhome/bin/mpicc"
            fc="ifort"
            mpif90="$msanderhome/bin/mpif90"
            gccsys="-gcc-sys "
            optflags="-g -O3 -fast"
            flibs_arch="-lifport -lifcore -lsvml";;
        --no-rism)
            rismsander=""
            rism="";;
        --mpi)
            mpi="yes"
            fftw_flags="--enable-mpi=yes $fftw_flags"
            mpiflag="-DMPI"
            flibs_fftw="-lfftw3_mpi -lfftw3 -lmpi"
            short_ene=short_ene.o
            sfx=".MPI";;
        *)
            echo "Option $var not recognized"
            exit 1
    esac
done

if [ "$requested_help" = "yes" ] ; then
	printf " --verbose      give build details, otherwise be more silent\n"
	printf " --no-netcdf    disable NetCDF support\n"
	printf " --no-rism      disable 3D-RISM support\n"
	printf " --intel        use Intel compilers; default is gnu\n"
	printf " --mpi          prepare for mpi build\n"
	printf " --openmp       prepare for OMP build\n"
    exit 0
fi

#  extra logic related to command-line arguments: generally, things
#      that need to be decided only after all arguments have been processed

if [ "$compiler" == "intel" -a "$openmp" == "yes" ]; then
  ompflag="-qopenmp -DOPENMP"
fi
if [ "$mpi" == "yes" ]; then
  fc="$mpif90"
fi

#------------------------------------------------------------------------------
#  Make some needed directories:
#------------------------------------------------------------------------------
if [ ! -d bin ]; then
    mkdir bin
fi
if [ ! -d bin/x ]; then
    mkdir bin/x
fi
if [ ! -d lib ]; then
    mkdir lib
fi
if [ ! -d include ]; then
    mkdir include
fi

#------------------------------------------------------------------------------
#  Initialize variables that are architecture specific:
#------------------------------------------------------------------------------
processor=`uname -m`
if [ "$processor" = "em64t" -o "$processor" = "x86_64" ] ; then
    x86_64='yes'
else
    x86_64='no'
fi

# Determine linker type. Currently only matters for MKL
ld_version=`ld -v 2>&1 | awk '{print $1}'`
case "$ld_version" in
    *GNU*)
        gnuld='yes';;
    *)
        gnuld='no' ;;
esac

OS=`uname -s`
if [ "$OS" = "Darwin" ]; then
   is_mac='yes'
   shared_suffix=.dylib
   make_shared=-dynamiclib
   libgfortran=`$msanderhome/src/libgfortran.sh`
   lm=
   ldflags=
else
   is_mac='no'
   shared_suffix=.so
   make_shared=-shared
   lm=-lm
   ldflags=
fi

#--------------------------------------------------------------------------
#  Configure the MKL or GOTO etc libraries for BLAS/LAPACK.
#--------------------------------------------------------------------------

# Determine MKL home directory
mklroot=''
if [ ! -z "$MKLROOT" ] ; then
    mklroot=$MKLROOT
elif [ ! -z "$MKL_HOME" ] ; then
    mklroot=$MKL_HOME
fi

if [ -z "$mklroot" -o "$mkl" == "no" ] ; then

   if [ ! -z "$GOTO" ]; then
      echo "using OpenBLAS libraries in $GOTO"
      flibs_la="$GOTO -lpthread"
   else
      # use the compiled versions;
      flibs_la="-llapack -lblas"
      lapack=liblapack
      blas=libblas
   fi

else

  if [ "$mpi" == "yes" ]; then
     echo "Using MKL for BLAS/LAPACK in $mklroot"
     inc="-I$mklroot/include $inc"
     lapack=skip
     blas=skip
  else
     echo "Using MKL for BLAS/LAPACK/FFTW in $mklroot"
     inc="-I$mklroot/include -I$mklroot/include/fftw $inc"
     lapack=skip
     blas=skip
     flibs_fftw=""
  fi

  # Determine how we are linking MKL
  if  [ "$compiler" = 'gnu' ] ; then
    link_type='line'
  else
    link_type='mkl'   #assuming Intel
  fi

  # We generally link to the sequential version of MKL since typically
  # one runs an MPI thread for each core.  However, if openmp is
  # specified, for example to turn on SMP diagonalizers for QMMM,
  # then we link to the threaded version of MKL and inside the code
  # the number of threads for vector functions etc will be set to 1.

  # Always link static version of MKL - just easier from an end
  # user perspective.

  if [ "$link_type" = 'line' ] ; then

    # ----- Link line advisor style. ------

    mkll="$mklroot/lib/32"
    mklinterfacelayer='libmkl_intel.a'
    if [ "$is_mac" = 'yes' ] ; then
      mkll="$mklroot/lib"
      if [ "$x86_64" = 'yes' ]; then
        mklinterfacelayer='libmkl_intel_lp64.a'
      fi
    elif [ "$x86_64" = 'yes' ]; then
      if [ -d "$mklroot/lib/em64t" ]; then
        mkll="$mklroot/lib/em64t"
        mkl_procstring="em64t"
      else
        mkll="$mklroot/lib/intel64"
        mkl_procstring="intel64"
      fi
      # lp64 is 32 bit integers on 64 bit platforms
      mklinterfacelayer='libmkl_intel_lp64.a'
    fi

    # Determing threading interface if necessary
    mklthread="$mkll/libmkl_sequential.a"
    mklomp=''
    if [ "$openmp" = 'yes' ] ; then
      if [ "$compiler" = 'intel' ] ; then
        mklthread="$mkll/libmkl_intel_thread.a"
        mklomp='-liomp5'
      elif [ "$compiler" = 'pgi' ] ; then
        mklthread="$mkll/libmkl_pgi_thread.a"
        mklomp='-pgf90libs -mp'
      else
        mklthread="$mkll/libmkl_gnu_thread.a"
        mklomp='-lgomp'
      fi
      if [ "$is_mac" = 'yes' -a "$compiler" != 'intel' ] ; then
        echo "Warning: OpenMP MKL not supported on OSX without Intel compilers. Using sequential."
        mklthread="$mkll/libmkl_sequential.a"
        mklomp=''
      fi
    fi

    # Set link flags
    if [ "$gnuld" = 'yes' ]; then
      echo "GNU linker assumed."
      flibs_la="-Wl,--start-group $mkll/$mklinterfacelayer $mklthread $mkll/libmkl_core.a -Wl,--end-group $mklomp -lpthread"
    else
      echo "Non-GNU linker assumed."
      flibs_la="-L$mkll $mkll/$mklinterfacelayer $mklthread $mkll/libmkl_core.a $mklomp -lpthread"
    fi
    # GNU compilers with MKL requires -ldl
    if [ "$compiler" = 'gnu' ]; then
      flibs_la="$flibs_la -ldl"
    fi

  else

    # ----- Use simple flag for Intel compilers ------------
    if [ "$openmp" = 'yes' ]; then
      flibs_la='-mkl'
    else
      flibs_la='-mkl=sequential'
    fi
  fi
fi

#--------------------------------------------------------------------------
#  Configure and build netcdf:
#--------------------------------------------------------------------------
if [ "$bintraj" == "-DBINTRAJ" ] && \
   [ ! -s "lib/libnetcdf.a" ]; then
   cd src/netcdf-c-4.7.2
   printf "Configuring the NetCDF C interface..."
   make clean > /dev/null 2>&1
   ./configure CC="$cc" CFLAGS="" LDFLAGS="" \
      --prefix=$msanderhome --disable-netcdf-4 --disable-dap \
      --disable-shared --disable-doxygen > ../netcdf_c.config.log 2>&1
   ncerror=$?
   if [ $ncerror -gt 0 ]; then
       echo "Error: NetCDF configure failed!  Check netcdf_c.config.log"
       exit 1
   else
       echo "OK"
   fi
   # The NetCDF C interface MUST be present prior to configuring the
   # Fortran interface, so build it now.
   printf "Compiling the NetCDF C interface..."
   make install > ../netcdf_c.compile.log 2>&1
   if [ $? -ne 0 ]; then
       echo "Error: NetCDF compile failed!  Check netcdf_c.compile.log"
       exit 1
   else
       echo "OK"
   fi
   # NetCDF Fortran configure/build
   cd ../netcdf-fortran-4.5.2
   # The NetCDF Fortran config script will need access to the C library.
   export LD_LIBRARY_PATH="$msanderhome/lib:$LD_LIBRARY_PATH"
   printf "Configuring the NetCDF Fortran interface..."
   make clean > /dev/null 2>&1
   ./configure  CC="$cc" CFLAGS="" \
                  LDFLAGS="-L$msanderhome/lib $ldflags" \
                  CPPFLAGS="-I$msanderhome/include" \
                  FC="$fc" FCFLAGS="" \
                  F77="$fc" FFLAGS="" --disable-shared  --disable-doxygen \
                  --prefix=$msanderhome >> ../netcdf_f.config.log 2>&1
   ncerror=$?
   if [ $ncerror -gt 0 ]; then
       echo "Error: NetCDF configure failed!  Check netcdf_f.config.log"
       exit 1
   else
       echo "OK"
   fi
   # Build the fortran interface
   printf "Compiling the NetCDF Fortran interface..."
   make install > ../netcdf_f.compile.log 2>&1
   if [ $? -ne 0 ]; then
     echo "Error: NetCDF Fortran compile failed!  Check netcdf_f.compile.log"
     exit 1
   else
       echo "OK"
   fi
   cd ../..
else
   echo "skipping netcdf support"
fi

#--------------------------------------------------------------------------
#  Configure and build FFTW3:
#--------------------------------------------------------------------------
if [ "$mpi" == "yes" -o -z "$mklroot" -o "$mkl" == "no" ]; then

    if [ ! -s "lib/libfftw3.a" ] || \
       [ "$mpi" == "yes" -a ! -s "lib/libfftw3_mpi.a" ] || \
       [ "$openmp" == "yes" -a ! -s "lib/libfftw3_omp.a" ]; then
       printf "\nConfiguring fftw-3.3..."
       enable_sse="--enable-sse=no --enable-sse2=no --enable-avx=no"
       enable_sse="--enable-sse2=yes"
       # DAC note, 12/18/19: adding -gcc-sys to CFLAGS below seems to
       #   be required for Intel compilers.
       cd src/fftw-3.3 && \
           ./configure --disable-doc --prefix=$msanderhome \
           --libdir=$msanderhome/lib --enable-openmp $fftw_flags \
           --enable-static --enable-sse2=yes MPICC="$mpicc" \
           CC="$cc" CFLAGS="$gccsys -O2"  F77="$fc" FFLAGS="-O2" \
           FLIBS="$flibs_arch"  > fftw3_config.log 2>&1
         ncerror=$?
       if [ $ncerror -gt 0 ]; then
           echo "Error: FFTW configure returned $ncerror"
           exit 1
       else
           echo "OK"
       fi

       # Build FFTW3
       printf "Compiling the FFTW3 interface..."
       make install > fftw3.compile.log 2>&1
       if [ $? -ne 0 ]; then
         printf "\nError: FFTW3 compile failed.\n"
         exit 1
       else
         printf "OK\n"
      fi
      cd ../..
   else
      echo "Using the existing fftw3  libraries"
   fi
fi

#--------------------------------------------------------------------------
#  create the config.h file: may differ for different subsets
#--------------------------------------------------------------------------

cat <<EOF > config.h

#  msander configuration file.
#  Created on `date` via $command

###############################################################################

# (1)  Location of the installation

AMBERTOOLS=msander
BASEDIR=$msanderhome
BINDIR=\$(BASEDIR)/bin
LIBDIR=\$(BASEDIR)/lib
INCDIR=\$(BASEDIR)/include
DATDIR=\$(BASEDIR)/dat
LOGDIR=\$(BASEDIR)/logs

###############################################################################

#  (2) Flags that depend on OS type

SHARED_SUFFIX=$shared_suffix
MAKE_SHARED=$make_shared
LM=$lm
LDFLAGS=$ldflags

###############################################################################

#  (3) allow for the use of netcdf

NETCDFLIBF=$netcdflibf

LAPACK=$lapack
BLAS=$blas

###############################################################################

#  (4)  C compiler

CC=$cc
CFLAGS=$bintraj
CNOOPTFLAGS=-g -O0
COPTFLAGS=$optflags

###############################################################################

#  (5)  Fortran compiler

FC=$fc
FFLAGS=$bintraj $inc $ompflag $mpiflag
FLIBSF= $rism -lsqm -larpack -lsys $flibs_fftw $flibs_la $ompflag 
FNOOPTFLAGS= -O0 -g
FOPTFLAGS=$optflags
SHORT_ENE=$short_ene

###############################################################################

#  (6)  other flags:

AR=    ar rv
RANLIB=ranlib
MV=mv
CP=cp
MAKE=make --no-print-directory
SFX=$sfx
VB=$verbose

# RISM:
RISMSANDER=$rismsander

# PLUMED related variables:
PLUMED_INCLUDE_FILE=
PLUMED_LOAD=Plumed.o
PLUMED_DEPENDENCIES=Plumed.o

#Python interpreter we are using and install options
PYTHON=python
PYTHON_INSTALL=--prefix=$(BASEDIR)
PYTHONPATH=$(BASEDIR)/lib/python2.7/site-packages
PYINSTALL=PYTHONPATH=$(PYTHONPATH) $(PYTHON) setup.py install -f $(PYTHON_INSTALL)

EOF


#--------------------------------------------------------------------------
#  Test if the C compiler works:
#--------------------------------------------------------------------------

cat <<EOF >testp.c
#include <stdio.h>
int main()
{
   printf( "testing a C program\n" );
}
EOF

printf "Testing $cc ..."
$cc -o testp testp.c
./testp | grep "testing a C program" > /dev/null
status=$?

if [ $status -gt 0 ]; then
    printf "\nError: Unable to compile a C program using gcc\n"
    printf "       Please check your compiler settings.\n"
    exit 1
else
    printf "OK\n"
fi
/bin/rm -f testp.c testp.o testp

#--------------------------------------------------------------------------
#  Test if the Fortran compiler works:
#--------------------------------------------------------------------------

cat <<EOF >testp.f
      program testf
      write(6,*) 'testing a Fortran program'
      end program testf
EOF

printf "Testing $fc ..."
$fc -o testp testp.f
./testp | grep "testing a Fortran program" > /dev/null
status=$?

if [ $status -gt 0 ]; then
    printf "\nError: Unable to compile a Fortran program using gfortran\n"
    printf "       Please check your compiler settings.\n"
    exit 1
else
	printf "OK\n"
fi
/bin/rm -f testp.f testp.o testp

if [ "$conda" == "no" ]; then
   printf "\nThe next step is to type 'make clean && make install'\n\n"
fi
exit 0
