#!/bin/bash

printf "configure script for msander\n\n"

# Store the command
command=`echo "$0 $*"`

# set up defaults:
msanderhome=`pwd`
verbose="@"
enablempi=
requested_help="no"
bintraj="-DBINTRAJ"
rism="-lrism"
rismsander="-DRISMSANDER"
openblas="no"

compiler="gnu"
cc="gcc -fPIC"
mpicc="mpicc"

fc="gfortran -fPIC"
flibs_arch="-lgfortran -w"
flibs_la=""
flibs_fftw="-lfftw3"
mpif90="mpif90"
gccsys=""
optflags="-g -O3"

openmp='no'
ompflag=""
ldflags=""
fftw_flags=""
mkl="no"
installtype="serial"

lapack="skip"
blas="skip"
inc="-I$msanderhome/include"
netcdflibf="$msanderhome/lib/libnetcdff.a $msanderhome/lib/libnetcdf.a"
#short_ene=short_ene_omp.o
short_ene=short_ene.o   # short_ene_omp may slow things down or even crash

#  process command-line flags:
for var in "$@"; do
    case "$var" in
        -h|-H|--h|--he|--hel|--help|-help)
            requested_help="yes";;
        -fullhelp|--full|--fullhelp|--full-h|--full-he|--full-hel|--full-help)
            requested_help="yes";;
        --verbose)
            verbose="";;
        --openmp)
            ompflag='-fopenmp -DOPENMP';
            flibs_fftw="-lfftw3_omp -lfftw3"
            openmp="yes";;
        --no-netcdf)
            netcdflibf=""
            bintraj="";;
        --mingw)
            cc="x86_64-w64-mingw32-gcc --static"
            cxx="x86_64-w64-mingw32-g++ --static"
            fc="x86_64-w64-mingw32-gfortran --static";;
        --mkl)
            mkl="yes";;
        --openblas)
            openblas="yes";;
        --static)
            ldflags="-static";;
        --intel)
            compiler="intel"
            cc="icc -fPIC"
            fc="ifort -fPIC"
            gccsys="-gcc-sys "
            optflags="-g -O3 -fast"
            flibs_arch="-lifport -lifcore -lsvml";;
        --no-rism)
            rismsander=""
            rism="";;
        *)
            echo "Option $var not recognized"
            exit 1
    esac
done

if [ "$requested_help" = "yes" ] ; then
	printf " --verbose      give build details, otherwise be more silent\n"
	printf " --no-netcdf    disable NetCDF support\n"
	printf " --no-rism      disable 3D-RISM support\n"
	printf " --intel        use Intel compilers; default is gnu\n"
	printf " --mpi          prepare for mpi build\n"
	printf " --openmp       prepare for OMP build\n"
	printf " --mkl          use MKL routines from $MKLROOT\n"
	printf " --openblas     use BLAS routines from $GOTO\n"
	printf " --static       use static linking\n"
    exit 0
fi

#  extra logic related to command-line arguments: generally, things
#      that need to be decided only after all arguments have been processed

if [ "$compiler" == "intel" -a "$openmp" == "yes" ]; then
  ompflag="-qopenmp -DOPENMP"
fi
if [ "$mpi" == "yes" ]; then
  fc="$mpif90"
  cc="$mpicc"
fi

#------------------------------------------------------------------------------
#  Make some needed directories:
#------------------------------------------------------------------------------
if [ ! -d bin ]; then
    mkdir bin
fi
if [ ! -d bin/x ]; then
    mkdir bin/x
fi
if [ ! -d lib ]; then
    mkdir lib
fi
if [ ! -d include ]; then
    mkdir include
fi
cp src/include/CompatibilityMacros.h include
cp src/msander/sander.h include

#------------------------------------------------------------------------------
#  Initialize variables that are architecture specific:
#------------------------------------------------------------------------------
processor=`uname -m`
if [ "$processor" = "em64t" -o "$processor" = "x86_64" ] ; then
    x86_64='yes'
else
    x86_64='no'
fi

# Determine linker type. Currently only matters for MKL
ld_version=`ld -v 2>&1 | awk '{print $1}'`
case "$ld_version" in
    *GNU*)
        gnuld='yes';;
    *)
        gnuld='no' ;;
esac

OS=`uname -s`
if [ "$OS" = "Darwin" ]; then
   is_mac='yes'
   shared_suffix=.dylib
   make_shared=-dynamiclib
   libgfortran=`$msanderhome/src/libgfortran.sh`
   lm=
else
   is_mac='no'
   shared_suffix=.so
   make_shared=-shared
   lm=-lm
fi

#--------------------------------------------------------------------------
#  Configure libraries for BLAS/LAPACK.
#--------------------------------------------------------------------------

flibs_la="-llapack -lblas"
lapack=liblapack
blas=libblas

#--------------------------------------------------------------------------
#  Configure and build FFTW3:
#--------------------------------------------------------------------------
if [ "$mpi" == "yes" -o -z "$mklroot" -o "$mkl" == "no" ]; then

    if [ ! -s "lib/libfftw3.a" ] || \
       [ "$mpi" == "yes" -a ! -s "lib/libfftw3_mpi.a" ] || \
       [ "$openmp" == "yes" -a ! -s "lib/libfftw3_omp.a" ]; then
       printf "\nConfiguring fftw-3.3 with $cc and $fc..."

       if [ "$openmp" == "no" ]; then
          enableomp=""
       else
          enableomp="--enable-openmp"
       fi

       # enable_sse="--enable-sse=no --enable-sse2=no --enable-avx=no"
       enable_sse="--enable-sse2=yes"

       cd src/fftw-3.3 && \
           ./configure --disable-doc --prefix=$msanderhome \
           --libdir=$msanderhome/lib $enableomp $fftw_flags \
           --enable-static $enable_sse MPICC="$mpicc" \
           CFLAGS="$optflags -fPIC"  \
           FFLAGS="$optflags -fPIC"  \
           FLIBS="$flibs_arch"  > fftw3_config.log 2>&1
         ncerror=$?
       if [ $ncerror -gt 0 ]; then
           echo "Error: FFTW configure returned $ncerror"
           exit 1
       else
           echo "OK"
       fi

       # Build FFTW3
       printf "Compiling the FFTW3 interface..."
       make install > fftw3.compile.log 2>&1
       if [ $? -ne 0 ]; then
         printf "\nError: FFTW3 compile failed.\n"
         exit 1
       else
         printf "OK\n"
      fi
      cd ../..
   else
      echo "Using the existing fftw3  libraries"
   fi
fi

#--------------------------------------------------------------------------
#  create the config.h file: may differ for different subsets
#--------------------------------------------------------------------------

cat <<EOF > config.h

#  msander configuration file.
#  Created on `date` via $command

###############################################################################

# (1)  Location of the installation

AMBERTOOLS=msander
BASEDIR=$msanderhome
BINDIR=\$(BASEDIR)/bin
LIBDIR=\$(BASEDIR)/lib
INCDIR=\$(BASEDIR)/include
DATDIR=\$(BASEDIR)/dat
LOGDIR=\$(BASEDIR)/logs

###############################################################################

#  (2) Flags that depend on OS type

SHARED_SUFFIX=$shared_suffix
MAKE_SHARED=$make_shared
LM=$lm
LDFLAGS=$ldflags

###############################################################################

#  (3) allow for the use of netcdf

NETCDFLIBF=$netcdflibf

LAPACK=$lapack
BLAS=$blas

###############################################################################

#  (4)  C compiler

# CC=$cc
CFLAGS=$bintraj -fPIC
CNOOPTFLAGS=-g -O0
COPTFLAGS=$optflags

###############################################################################

#  (5)  Fortran compiler

# FC=$fc
FFLAGS=$bintraj $inc $ompflag $mpiflag -fPIC
FLIBSF= $rism -lsqm -larpack -lsys $flibs_fftw $flibs_la $ompflag 
FNOOPTFLAGS= -O0 -g
FOPTFLAGS=$optflags
SHORT_ENE=$short_ene

###############################################################################

#  (6)  other flags:

AR=    ar rv
RANLIB=ranlib
MV=mv
CP=cp
MAKE=make --no-print-directory
SFX=$sfx
VB=$verbose
INSTALLTYPE=$installtype

# RISM:
RISMSANDER=$rismsander

# PLUMED related variables:
PLUMED_INCLUDE_FILE=
PLUMED_LOAD=Plumed.o
PLUMED_DEPENDENCIES=Plumed.o

#Python interpreter we are using and install options
PYTHON=python
PYTHON_INSTALL=--prefix=\$(BASEDIR)
PYTHONPATH=\$(BASEDIR)/lib/python2.7/site-packages
PYINSTALL=PYTHONPATH=\$(PYTHONPATH) \$(PYTHON) setup.py install -f \$(PYTHON_INSTALL)

EOF

exit 0
